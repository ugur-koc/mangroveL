===< 23088 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
5055d5054
< #include <ctype.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
5069d5068
< #   include <sys/times.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
5091d5090
< #     include <fcntl.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
5105d5104
< #     include <io.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
5105d5104
< #     include <fcntl.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
5105,5106d5104
< #if BZ_LCCWIN32
< 
5126,5127d5123
< 
< #endif /* BZ_LCCWIN32 */
5105,5129d5104
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1129,1136d1128
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1138,1220d1129
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
745,748c745
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
816,830c816
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
1086,1089c1086
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
---
>          if (zPend & 1)  else {
1089,1092c1089
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
---
>          } else 
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
1152,1179c1152
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;;
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) ;
(80.6 %, 39819 bytes)
1025,1080c1025
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1046,1073c1046
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) ;
(81.1 %, 38643 bytes)
1135,1187c1135
< {
<    Int32   n;
<    EState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
---
> ;
1219,1230c1219
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
(81.9 %, 37137 bytes)
1167,1178c1167
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
1183,1198c1183
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1210,1242c1210
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.0 %, 36897 bytes)
1172,1187c1172
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1199,1231c1199
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.2 %, 36536 bytes)
1184,1216c1184
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
1238,1250c1238
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1255,1270c1255
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
(82.7 %, 35523 bytes)
1206,1218c1206
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1223,1238c1223
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1249,1257c1249
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
(82.8 %, 35296 bytes)
1211,1226c1211
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1237,1245c1237
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1260,1297c1260
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.0 %, 34941 bytes)
1222,1230c1222
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1245,1282c1245
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1292,1322c1292
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1310,1321c1310
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.3 %, 34129 bytes)
1255,1285c1255
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1273,1284c1273
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.6 %, 33556 bytes)
1265,1268c1265
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
1279,1311c1279
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1322,1363c1322
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.7 %, 33447 bytes)
1276,1308c1276
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1319,1360c1319
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1365,1378c1365
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.1 %, 32584 bytes)
1287,1328c1287
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1333,1346c1333
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.5 %, 31734 bytes)
1292,1305c1292
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1314,1335c1314
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
(84.6 %, 31528 bytes)
1301,1322c1301
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1331,1343c1331
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
1359,1399c1359
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
(84.7 %, 31285 bytes)
1347,1387c1347
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
1398,1437c1398
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
(85.2 %, 30281 bytes)
1358,1397c1358
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
1389,1392c1389
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm.avail_out > 0) ; else ;      
(85.7 %, 29363 bytes)
1368,1370c1368
< {
<    return BZ_VERSION;
< }
---
> ;
1389,1391c1389
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
(85.7 %, 29339 bytes)
1387,1389c1387
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
1396,1398c1396
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1403,1412c1403
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
(85.7 %, 29292 bytes)
1394,1396c1394
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1401,1410c1401
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
(85.7 %, 29245 bytes)
1399,1408c1399
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
1405,1407c1405
<    } else {
<       return -1;
<    }
---
>    } else ;
(85.7 %, 29220 bytes)
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
1411,1420c1411
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1415,1417c1415
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
(85.8 %, 29198 bytes)
1409,1418c1409
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1413,1415c1413
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
(85.8 %, 29074 bytes)
1414,1417c1414
< {
<    
<    return 0;
< }
---
> ;
1422,1436c1422
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1427,1432c1427
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
(85.8 %, 29055 bytes)
1419,1433c1419
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1424,1429c1424
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
(86.0 %, 28760 bytes)
1424,1441c1424
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;;
1445,1451c1445
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
---
> ;
1733c1733
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1735c1735
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
(86.0 %, 28646 bytes)
1727c1727
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1729c1729
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
===< pass_balanced :: curly3 >===
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] ;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
(86.1 %, 28523 bytes)
833,901c833
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
915,968c915
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(87.8 %, 24993 bytes)
847,900c847
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
1354,1371c1354
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
(89.1 %, 22249 bytes)
1301,1318c1301
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
1604c1604
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
(89.3 %, 21940 bytes)
1587c1587
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21904 bytes)
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21876 bytes)
===< pass_clang :: callexpr-to-value >===
1279c1279
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(89.3 %, 21849 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(89.4 %, 21821 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,717c716
< static
< Int32 incs[14] ;
---
> 
(89.4 %, 21787 bytes)
716,717c716
< static
< Int32 incs[14] ;
---
> 
833c833
< UInt32 BZ2_crc32Table[256] ;
---
> 
(89.4 %, 21764 bytes)
832c832
< UInt32 BZ2_crc32Table[256] ;
---
> 
846c846
< Int32 BZ2_rNums[512] ;
---
> 
(89.4 %, 21736 bytes)
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21714 bytes)
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
1178c1178
<    Int32   n, ret;
---
>    Int32   n;
(89.4 %, 21712 bytes)
1178c1178
<    Int32    ret;
---
>    
1300c1300
< static char *bzerrorstrings[] ;
---
> 
(89.4 %, 21699 bytes)
1300c1300
< static char *bzerrorstrings[] ;
---
> 
1391c1391
< Int32   verbosity;
---
> 
(89.4 %, 21668 bytes)
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21650 bytes)
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(89.4 %, 21635 bytes)
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(89.4 %, 21625 bytes)
1392c1392
< Bool      deleteOutputOnInterrupt;
---
> 
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(89.5 %, 21591 bytes)
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21576 bytes)
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(89.5 %, 21561 bytes)
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(89.5 %, 21547 bytes)
1393c1393
< Bool       noisy;
---
> 
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21530 bytes)
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(89.5 %, 21517 bytes)
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(89.5 %, 21499 bytes)
1394c1394
< Int32     blockSize100k;
---
> 
1395c1395
< Int32   exitValue;
---
> 
(89.5 %, 21475 bytes)
1395c1395
< Int32   exitValue;
---
> 
1407c1407
< Int32   opMode;
---
> 
(89.5 %, 21457 bytes)
1407c1407
< Int32   opMode;
---
> 
1408c1408
< Int32   srcMode;
---
> 
(89.5 %, 21442 bytes)
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21426 bytes)
1412c1412
< Int32   longestFileName;
---
> 
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
(89.6 %, 21402 bytes)
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
(89.6 %, 21371 bytes)
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
(89.6 %, 21340 bytes)
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
(89.6 %, 21309 bytes)
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21291 bytes)
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
(89.6 %, 21253 bytes)
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
1419c1419
< Int32   workFactor;
---
> 
(89.6 %, 21221 bytes)
1419c1419
< Int32   workFactor;
---
> 
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(89.7 %, 21202 bytes)
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
1585,1586c1585
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21166 bytes)
1584,1585c1584
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
1586,1587c1586
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21128 bytes)
1585,1586c1585
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21088 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ternary :: c >===
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (0)
(89.7 %, 21065 bytes)
===< pass_balanced :: parens-only >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    -1
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
(89.7 %, 21063 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
(89.7 %, 21061 bytes)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
(89.7 %, 21059 bytes)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
(89.7 %, 21057 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
(89.7 %, 21055 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
(89.7 %, 21053 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
(89.7 %, 21051 bytes)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
(89.7 %, 21049 bytes)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
(89.7 %, 21047 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
(89.7 %, 21045 bytes)
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
(89.7 %, 21043 bytes)
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
(89.7 %, 21041 bytes)
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
(89.7 %, 21039 bytes)
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
(89.7 %, 21037 bytes)
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
(89.7 %, 21035 bytes)
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen)  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
(89.7 %, 21033 bytes)
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
(89.7 %, 21031 bytes)
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
(89.7 %, 21029 bytes)
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(89.7 %, 21027 bytes)
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen)  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
(89.7 %, 21025 bytes)
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
(89.7 %, 21023 bytes)
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
(89.7 %, 21021 bytes)
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
(89.7 %, 21019 bytes)
149c149
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
(89.7 %, 21017 bytes)
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
(89.7 %, 21015 bytes)
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
(89.7 %, 21013 bytes)
184c184
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
(89.7 %, 21011 bytes)
188c188
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
(89.7 %, 21009 bytes)
193c193
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
(89.7 %, 21007 bytes)
198c198
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN int BZ_APIBZ2_bzread 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
(89.8 %, 21005 bytes)
204c204
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
(89.8 %, 21003 bytes)
210c210
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
(89.8 %, 21001 bytes)
214c214
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(89.8 %, 20999 bytes)
218c218
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool1)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
(89.8 %, 20997 bytes)
248c248
< #define True  (Bool)1
---
> #define True  Bool1
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
249c249
< #define False ((Bool)0)
---
> #define False (Bool0)
(89.8 %, 20995 bytes)
249c249
< #define False (Bool)0
---
> #define False Bool0
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
(89.8 %, 20993 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
(89.8 %, 20991 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
(89.8 %, 20989 bytes)
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
(89.8 %, 20987 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
(89.8 %, 20985 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
(89.8 %, 20983 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
(89.8 %, 20981 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
(89.8 %, 20979 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
(89.8 %, 20977 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
(89.8 %, 20975 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
(89.8 %, 20973 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
(89.8 %, 20971 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
(89.8 %, 20969 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
(89.8 %, 20967 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
(89.8 %, 20965 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) strm->bzalloc(strm->opaque,(nnn),1)
(89.8 %, 20963 bytes)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)strm->opaque,(nnn),1
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,nnn,1)
(89.8 %, 20961 bytes)
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,nnn,1)
(89.8 %, 20959 bytes)
272c272
< #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  strm->bzfree(strm->opaque,(ppp))
(89.8 %, 20957 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  strm->bzfree(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->bzfree)strm->opaque,(ppp)
(89.8 %, 20955 bytes)
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)strm->opaque,(ppp)
(89.8 %, 20953 bytes)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,ppp)
(89.8 %, 20951 bytes)
273c273
< #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
---
> #define BZFREEppp  strm->bzfreestrm->opaque,ppp
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
(89.8 %, 20949 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + 900000 / BZ_G_SIZE)
311c311
< #define BZ_RAND_MASK (0)
---
> #define BZ_RAND_MASK 0
(89.8 %, 20947 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + (900000 / BZ_G_SIZE)
---
> #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
311c311
< #define BZ_RAND_MASK (0)
---
> #define BZ_RAND_MASK 0
(89.8 %, 20945 bytes)
311c311
< #define BZ_RAND_MASK (0)
---
> #define BZ_RAND_MASK 0
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(89.8 %, 20943 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(89.8 %, 20941 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(89.8 %, 20939 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(89.8 %, 20937 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
(89.8 %, 20935 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FASTcccc                     \
(89.8 %, 20933 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FASTcccc                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = UChar(s->tPos & 0xff);           \
(89.8 %, 20931 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = UChar(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)s->tPos & 0xff;           \
(89.8 %, 20929 bytes)
599c599
<     cccc = UChar(s->tPos & 0xff);           \
---
>     cccc = UChars->tPos & 0xff;           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_Ccccc                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = UChar(c_tPos & 0xff);            \
(89.8 %, 20927 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_Ccccc                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = UChar(c_tPos & 0xff);            \
(89.8 %, 20925 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = UChar(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)c_tPos & 0xff;            \
(89.8 %, 20923 bytes)
604c604
<     cccc = UChar(c_tPos & 0xff);            \
---
>     cccc = UCharc_tPos & 0xff;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
(89.8 %, 20921 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
(89.8 %, 20919 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF)
(89.8 %, 20917 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF)
(89.8 %, 20915 bytes)
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
611c611
<    (((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF
---
>    ((UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4)) & 0xF
(89.8 %, 20913 bytes)
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
611c611
<    ((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4) & 0xF
---
>    ((UInt32)s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
(89.8 %, 20911 bytes)
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
611c611
<    (UInt32)(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    (UInt32)s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
(89.8 %, 20909 bytes)
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32(s->ll4[(i) >> 1]) >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32(s->ll4[i >> 1]) >> (((i) << 2) & 0x4) & 0xF
(89.8 %, 20907 bytes)
611c611
<    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
611c611
<    UInt32s->ll4[(i) >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[(i) >> 1] >> ((i) << 2) & 0x4 & 0xF
(89.8 %, 20905 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i) << 2 & 0x4) & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> (((i) << 2) & 0x4) & 0xF
---
>    UInt32s->ll4[i >> 1] >> ((i << 2) & 0x4) & 0xF
(89.8 %, 20903 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> (i) << 2 & 0x4 & 0xF
611c611
<    UInt32s->ll4[i >> 1] >> ((i) << 2) & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> (i << 2) & 0x4 & 0xF
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
(89.8 %, 20901 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> (i) << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
(89.8 %, 20899 bytes)
613c613
< #define SET_LL(i,n)                          \
---
> #define SET_LLi,n                          \
616c616
< #define GET_LL(i) \
---
> #define GET_LLi \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
(89.8 %, 20897 bytes)
616c616
< #define GET_LL(i) \
---
> #define GET_LLi \
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
(89.8 %, 20895 bytes)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((UInt32)s->ll16[i] | (GET_LL4(i) << 16))
(89.8 %, 20893 bytes)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
---
>    (UInt32)s->ll16[i] | (GET_LL4(i) << 16)
617c617
<    ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16)
---
>    (UInt32s->ll16[i]) | (GET_LL4(i) << 16)
(89.8 %, 20891 bytes)
617c617
<    (UInt32)s->ll16[i] | (GET_LL4(i) << 16)
---
>    UInt32s->ll16[i] | (GET_LL4(i) << 16)
617c617
<    (UInt32)s->ll16[i] | (GET_LL4(i) << 16)
---
>    (UInt32)s->ll16[i] | GET_LL4(i) << 16
(89.8 %, 20889 bytes)
617c617
<    UInt32s->ll16[i] | (GET_LL4(i) << 16)
---
>    UInt32s->ll16[i] | GET_LL4(i) << 16
617c617
<    UInt32s->ll16[i] | (GET_LL4(i) << 16)
---
>    UInt32s->ll16[i] | (GET_LL4i << 16)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALLcccc                            \
(89.8 %, 20887 bytes)
617c617
<    UInt32s->ll16[i] | GET_LL4(i) << 16
---
>    UInt32s->ll16[i] | GET_LL4i << 16
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALLcccc                            \
(89.8 %, 20885 bytes)
619c619
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_SMALLcccc                            \
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
(89.8 %, 20883 bytes)
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
(89.8 %, 20881 bytes)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s->tPos = GET_LLs->tPos;
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
(89.8 %, 20879 bytes)
629c629
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
658c658
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
(89.8 %, 20877 bytes)
661c661
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
(89.8 %, 20875 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmina,b ((a) < (b)) ? (a) : (b)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) (a) < (b) ? (a) : (b)
(89.8 %, 20873 bytes)
665c665
< #define fmina,b ((a) < (b)) ? (a) : (b)
---
> #define fmina,b (a) < (b) ? (a) : (b)
665c665
< #define fmina,b ((a) < (b)) ? (a) : (b)
---
> #define fmina,b (a < (b)) ? (a) : (b)
(89.8 %, 20871 bytes)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b a < (b) ? (a) : (b)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b (a) < b ? (a) : (b)
665c665
< #define fmina,b (a) < (b) ? (a) : (b)
---
> #define fmina,b (a) < (b) ? a : (b)
(89.8 %, 20869 bytes)
665c665
< #define fmina,b a < (b) ? (a) : (b)
---
> #define fmina,b a < b ? (a) : (b)
665c665
< #define fmina,b a < (b) ? (a) : (b)
---
> #define fmina,b a < (b) ? a : (b)
(89.8 %, 20867 bytes)
665c665
< #define fmina,b a < b ? (a) : (b)
---
> #define fmina,b a < b ? a : (b)
665c665
< #define fmina,b a < b ? (a) : (b)
---
> #define fmina,b a < b ? (a) : b
(89.8 %, 20865 bytes)
665c665
< #define fmina,b a < b ? a : (b)
---
> #define fmina,b a < b ? a : b
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
(89.8 %, 20863 bytes)
667c667
< #define fpush(lz,hz) 
---
> #define fpushlz,hz 
669c669
< #define fpop(lz,hz) 
---
> #define fpoplz,hz 
(89.8 %, 20861 bytes)
669c669
< #define fpop(lz,hz) 
---
> #define fpoplz,hz 
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[zz >> 5] |= (1 << ((zz) & 31))
(89.8 %, 20859 bytes)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[zz >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= 1 << ((zz) & 31)
(89.8 %, 20857 bytes)
689c689
< #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 31))
689c689
< #define       SET_BHzz  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[(zz) >> 5] |= 1 << ((zz) & 31)
(89.8 %, 20855 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 31)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BHzz  bhtab[zz >> 5] |= (1 << (zz) & 31)
(89.8 %, 20853 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 31)
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz) & 31
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << ((zz) & 31)
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz & 31)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
(89.8 %, 20851 bytes)
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << (zz) & 31
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
(89.8 %, 20849 bytes)
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BH(zz)  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
(89.8 %, 20847 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~1 << ((zz) & 31)
690c690
< #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[(zz) >> 5] &= ~(1 << (zz) & 31)
(89.8 %, 20845 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 31)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << (zz) & 31)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << ((zz) & 31))
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~(1 << (zz & 31))
(89.8 %, 20843 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 31)
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz) & 31
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << ((zz) & 31)
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz & 31)
(89.8 %, 20841 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << (zz) & 31
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
(89.8 %, 20839 bytes)
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BH(zz)  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
(89.8 %, 20837 bytes)
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[zz >> 5] & (1 << ((zz) & 31)))
691c691
< #define     ISSET_BHzz  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     ISSET_BHzz  (bhtab[(zz) >> 5] & 1 << ((zz) & 31))
(89.8 %, 20835 bytes)
691c691
< #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 31))
691c691
< #define     ISSET_BHzz  bhtab[(zz) >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[(zz) >> 5] & 1 << ((zz) & 31)
(89.8 %, 20833 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 31)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << ((zz) & 31))
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & (1 << (zz) & 31)
(89.8 %, 20831 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 31)
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz) & 31
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << ((zz) & 31)
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz & 31)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
(89.8 %, 20829 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << (zz) & 31
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
(89.8 %, 20827 bytes)
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[(zz) >> 5]
692c692
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define      WORD_BH(zz)  bhtab[zz >> 5]
(89.8 %, 20825 bytes)
692c692
< #define      WORD_BHzz  bhtab[(zz) >> 5]
---
> #define      WORD_BHzz  bhtab[zz >> 5]
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  (zz) & 0x01f
(89.8 %, 20823 bytes)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  ((zz) & 0x01f)
693c693
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  (zz) & 0x01f
(89.8 %, 20821 bytes)
693c693
< #define UNALIGNED_BHzz  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  (zz) & 0x01f
693c693
< #define UNALIGNED_BHzz  ((zz) & 0x01f)
---
> #define UNALIGNED_BHzz  (zz & 0x01f)
(89.8 %, 20819 bytes)
693c693
< #define UNALIGNED_BHzz  (zz) & 0x01f
---
> #define UNALIGNED_BHzz  zz & 0x01f
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
(89.8 %, 20817 bytes)
724c724
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
(89.8 %, 20815 bytes)
727c727
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
(89.8 %, 20813 bytes)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
732c732
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a < (b)) ? (a) : (b)
(89.8 %, 20811 bytes)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? (a) : (b)
732c732
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a < (b)) ? (a) : (b)
(89.8 %, 20809 bytes)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? (a) : (b)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < b ? (a) : (b)
732c732
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? a : (b)
(89.8 %, 20807 bytes)
732c732
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < b ? (a) : (b)
732c732
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? a : (b)
(89.8 %, 20805 bytes)
732c732
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? a : (b)
732c732
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? (a) : b
(89.8 %, 20803 bytes)
732c732
< #define mmina,b a < b ? a : (b)
---
> #define mmina,b a < b ? a : b
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
(89.9 %, 20801 bytes)
734c734
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
(89.9 %, 20799 bytes)
736c736
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
(89.9 %, 20797 bytes)
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
739c739
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) nextHi[az]-nextLo[az]
(89.9 %, 20795 bytes)
739c739
< #define mnextsizeaz (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz nextHi[az]-nextLo[az]
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
(89.9 %, 20793 bytes)
741c741
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
(89.9 %, 20791 bytes)
746c746
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) ftab[((b)+1) << 8] - ftab[(b) << 8]
(89.9 %, 20789 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) ftab[((b)+1) << 8] - ftab[(b) << 8]
(89.9 %, 20787 bytes)
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[(b)+1 << 8] - ftab[(b) << 8])
(89.9 %, 20785 bytes)
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b+1) << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[b << 8]
(89.9 %, 20783 bytes)
766c766
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
766c766
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[b << 8]
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 1 << 21
(89.9 %, 20781 bytes)
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 1 << 21
(89.9 %, 20779 bytes)
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK 1 << 21
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~SETMASK)
(89.9 %, 20777 bytes)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK ~(SETMASK)
768c768
< #define CLEARMASK (~(SETMASK))
---
> #define CLEARMASK (~SETMASK)
(89.9 %, 20775 bytes)
768c768
< #define CLEARMASK ~(SETMASK)
---
> #define CLEARMASK ~SETMASK
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  (zz0) & 0xffffff00
(89.9 %, 20773 bytes)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  (zz0) & 0xffffff00
793c793
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define WEIGHTOF(zz0)  (zz0 & 0xffffff00)
(89.9 %, 20771 bytes)
793c793
< #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  (zz0) & 0xffffff00
793c793
< #define WEIGHTOFzz0  ((zz0) & 0xffffff00)
---
> #define WEIGHTOFzz0  (zz0 & 0xffffff00)
(89.9 %, 20769 bytes)
793c793
< #define WEIGHTOFzz0  (zz0) & 0xffffff00
---
> #define WEIGHTOFzz0  zz0 & 0xffffff00
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   ((zz1) & 0x000000ff)
(89.9 %, 20767 bytes)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   ((zz1) & 0x000000ff)
794c794
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define DEPTHOF(zz1)   (zz1) & 0x000000ff
(89.9 %, 20765 bytes)
794c794
< #define DEPTHOFzz1   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   (zz1) & 0x000000ff
794c794
< #define DEPTHOFzz1   ((zz1) & 0x000000ff)
---
> #define DEPTHOFzz1   (zz1 & 0x000000ff)
(89.9 %, 20763 bytes)
794c794
< #define DEPTHOFzz1   (zz1) & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x000000ff
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
(89.9 %, 20761 bytes)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) (zz2) > (zz3) ? (zz2) : (zz3)
(89.9 %, 20759 bytes)
795c795
< #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAXzz2,zz3 (zz2 > (zz3) ? (zz2) : (zz3))
(89.9 %, 20757 bytes)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 (zz2) > zz3 ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 (zz2) > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 (zz2) > (zz3) ? zz2 : (zz3)
(89.9 %, 20755 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > (zz3) ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > (zz3) ? zz2 : (zz3)
(89.9 %, 20753 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : (zz3)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? (zz2) : zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
(89.9 %, 20751 bytes)
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : (zz3)
---
> #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
(89.9 %, 20749 bytes)
797c797
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
(89.9 %, 20747 bytes)
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
798c798
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
(89.9 %, 20745 bytes)
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
798c798
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOFzw2 |                    \
(89.9 %, 20743 bytes)
798c798
<    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
(89.9 %, 20741 bytes)
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
799c799
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2)))
(89.9 %, 20739 bytes)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2))
799c799
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOFzw2)
(89.9 %, 20737 bytes)
799c799
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
799c799
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOFzw2
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
(89.9 %, 20735 bytes)
799c799
<    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
(89.9 %, 20733 bytes)
801c801
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
(89.9 %, 20731 bytes)
804c804
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
(89.9 %, 20729 bytes)
872c872
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
(89.9 %, 20727 bytes)
894c894
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
900c900
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
930c930
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
(89.9 %, 20725 bytes)
933c933
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
935c935
<    while (True) 
---
>    while True 
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
(89.9 %, 20723 bytes)
935c935
<    while (True) 
---
>    while True 
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
(89.9 %, 20721 bytes)
937c937
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
(89.9 %, 20719 bytes)
938c938
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
(89.9 %, 20717 bytes)
940c940
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
(89.9 %, 20715 bytes)
941c941
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
(89.9 %, 20713 bytes)
944c944
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
996c996
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
(89.9 %, 20711 bytes)
949c949
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
968c968
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
974c974
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
980c980
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
984c984
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
990c990
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
996c996
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1001c1001
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL  EState* s 
1006c1006
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
1007c1007
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1010c1010
<                      int        workFactor )
---
>                      int        workFactor 
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCKzs,zchh0               \
(89.9 %, 20709 bytes)
1007c1007
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1010c1010
<                      int        workFactor )
---
>                      int        workFactor 
1023c1023
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCKzs,zchh0               \
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
(89.9 %, 20707 bytes)
1037c1037
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1042c1042
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)  bz_stream *strm, int action 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
(89.9 %, 20705 bytes)
1042c1042
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress  bz_stream *strm, int action 
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1047c1047
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)   bz_stream *strm 
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
(89.9 %, 20703 bytes)
1047c1047
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd   bz_stream *strm 
1056c1056
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
1057c1057
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1059c1059
<                        int        small )
---
>                        int        small 
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
(89.9 %, 20701 bytes)
1057c1057
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1059c1059
<                        int        small )
---
>                        int        small 
1065c1065
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1076c1076
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1081c1081
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress)  bz_stream *strm 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(89.9 %, 20699 bytes)
1081c1081
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress  bz_stream *strm 
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1086c1086
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)   bz_stream *strm 
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERReee                    \
(89.9 %, 20697 bytes)
1086c1086
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd   bz_stream *strm 
1094c1094
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERReee                    \
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
(89.9 %, 20695 bytes)
1115c1115
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
1116c1116
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1120c1120
<                       int   workFactor )
---
>                       int   workFactor 
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
(89.9 %, 20693 bytes)
1116c1116
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1120c1120
<                       int   workFactor )
---
>                       int   workFactor 
1126c1126
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
1127c1127
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1130c1130
<                int     len )
---
>                int     len 
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
(89.9 %, 20691 bytes)
1127c1127
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1130c1130
<                int     len )
---
>                int     len 
1135c1135
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
1136c1136
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1140c1140
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
(89.9 %, 20689 bytes)
1136c1136
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1140c1140
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1144c1144
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
1145c1145
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1151c1151
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
(89.9 %, 20687 bytes)
1145c1145
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1151c1151
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1156c1156
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
1157c1157
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1162c1162
<                      int   nUnused )
---
>                      int   nUnused 
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
(89.9 %, 20685 bytes)
1157c1157
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1162c1162
<                      int   nUnused )
---
>                      int   nUnused 
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1167c1167
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose)  int *bzerror, BZFILE *b 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
(89.9 %, 20683 bytes)
1167c1167
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b 
1172c1172
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
1173c1173
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1176c1176
<              int     len )
---
>              int     len 
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1181c1181
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1186c1186
<    if (bzf->writing)
---
>    if bzf->writing
1189c1189
<    if (len == 0)
---
>    if len == 0
(89.9 %, 20681 bytes)
1173c1173
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1176c1176
<              int     len )
---
>              int     len 
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1181c1181
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1186c1186
<    if (bzf->writing)
---
>    if bzf->writing
1189c1189
<    if (len == 0)
---
>    if len == 0
1195c1195
<    while (True) 
---
>    while True 
1202c1202
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
1203c1203
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1206c1206
<                        int*    nUnused )
---
>                        int*    nUnused 
1215c1215
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
(89.9 %, 20679 bytes)
1203c1203
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1206c1206
<                        int*    nUnused )
---
>                        int*    nUnused 
1215c1215
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
1216c1216
<                          ( char*         dest, 
---
>                           char*         dest, 
1222c1222
<                            int           workFactor )
---
>                            int           workFactor 
1227c1227
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
(89.9 %, 20677 bytes)
1216c1216
<                          ( char*         dest, 
---
>                           char*         dest, 
1222c1222
<                            int           workFactor )
---
>                            int           workFactor 
1227c1227
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
1228c1228
<                            ( char*         dest, 
---
>                             char*         dest, 
1233c1233
<                              int           verbosity )
---
>                              int           verbosity 
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
(89.9 %, 20675 bytes)
1228c1228
<                            ( char*         dest, 
---
>                             char*         dest, 
1233c1233
<                              int           verbosity )
---
>                              int           verbosity 
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
1243c1243
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)void
1251c1251
<                ( const char *path,   
---
>                 const char *path,   
1254c1254
<                  int open_mode)      
---
>                  int open_mode      
1260c1260
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(89.9 %, 20673 bytes)
1243c1243
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid
1251c1251
<                ( const char *path,   
---
>                 const char *path,   
1254c1254
<                  int open_mode)      
---
>                  int open_mode      
1260c1260
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(89.9 %, 20671 bytes)
1251c1251
<                ( const char *path,   
---
>                 const char *path,   
1254c1254
<                  int open_mode)      
---
>                  int open_mode      
1260c1260
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
1261,1262c1261,1262
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1267c1267
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
(89.9 %, 20669 bytes)
1261,1262c1261,1262
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1267c1267
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
1268,1269c1268,1269
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
(89.9 %, 20667 bytes)
1268,1269c1268,1269
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1274c1274
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) BZFILE* b, void* buf, int len 
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1279c1279
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END ; else ;
1284c1284
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
(89.9 %, 20665 bytes)
1274c1274
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread BZFILE* b, void* buf, int len 
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1279c1279
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END ; else ;
1284c1284
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
1284c1284
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) BZFILE* b, void* buf, int len 
1289c1289
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
(89.9 %, 20663 bytes)
1284c1284
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len 
1289c1289
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
1289c1289
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) BZFILE *b
1294c1294
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
(89.9 %, 20661 bytes)
1289c1289
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush BZFILE *b
1294c1294
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
1294c1294
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) BZFILE* b
1303c1303
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
(89.9 %, 20659 bytes)
1294c1294
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* b
1303c1303
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1303c1303
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) BZFILE *b, int *errnum
1345c1345
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
(89.9 %, 20657 bytes)
1303c1303
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *b, int *errnum
1345c1345
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
1346c1346
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
(89.9 %, 20655 bytes)
1346c1346
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
1347c1347
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
(89.9 %, 20653 bytes)
1347c1347
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
1363c1363
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
(89.9 %, 20651 bytes)
1363c1363
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
(89.9 %, 20649 bytes)
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1364c1364
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(89.9 %, 20647 bytes)
1364c1364
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1364c1364
<       root=snocString(root), (name)
---
>       root=snocString(root), name
(89.9 %, 20645 bytes)
1364c1364
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1366c1366
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
(89.9 %, 20643 bytes)
1366c1366
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
1367c1367
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
(89.9 %, 20641 bytes)
1367c1367
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1367c1367
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(89.9 %, 20639 bytes)
1367c1367
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1367c1367
<       root=snocString(root), (name)
---
>       root=snocString(root), name
1369c1369
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODEfd 
(89.9 %, 20637 bytes)
1367c1367
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1369c1369
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODEfd 
(89.9 %, 20635 bytes)
1369c1369
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODEfd 
1380c1380
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(89.9 %, 20633 bytes)
1380c1380
< #define True  ((Bool)1)
---
> #define True  (Bool)1
1380c1380
< #define True  ((Bool)1)
---
> #define True  (Bool1)
(89.9 %, 20631 bytes)
1380c1380
< #define True  (Bool)1
---
> #define True  Bool1
1381c1381
< #define False ((Bool)0)
---
> #define False (Bool)0
(89.9 %, 20629 bytes)
1381c1381
< #define False ((Bool)0)
---
> #define False (Bool)0
1381c1381
< #define False ((Bool)0)
---
> #define False (Bool0)
(89.9 %, 20627 bytes)
1381c1381
< #define False (Bool)0
---
> #define False Bool0
1641c1641
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
(89.9 %, 20625 bytes)
1641c1641
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
1641c1641
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) strcmp(aa->name, (s))==0
(89.9 %, 20623 bytes)
1641c1641
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs strcmp(aa->name, (s))==0
1641c1641
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmpaa->name, (s)==0)
(89.9 %, 20621 bytes)
1641c1641
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmpaa->name, (s)==0
1641c1641
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmp(aa->name, s)==0
(89.9 %, 20619 bytes)
1641c1641
< #define ISFLAGs strcmpaa->name, (s)==0
---
> #define ISFLAGs strcmpaa->name, s==0
1643c1643
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
(89.9 %, 20617 bytes)
1643c1643
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
611c611
<    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i < 2 & 0x4 & 0xF
621c621
<       s->tPos = GET_LLs->tPos;
---
>       s-tPos = GET_LLs->tPos;
611c611
<    UInt32s->ll4[i >> 1] >> i << 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i < 2 & 0x4 & 0xF
617c617
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>    UInt32s-ll16[i] | GET_LL4i << 16
617c617
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>    UInt32s->ll16[i] | GET_LL4i < 16
620c620
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s-cftab ;    \
(89.9 %, 20615 bytes)
611c611
<    UInt32s->ll4[i >> 1] >> i < 2 & 0x4 & 0xF
---
>    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
617c617
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>    UInt32s-ll16[i] | GET_LL4i << 16
617c617
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>    UInt32s->ll16[i] | GET_LL4i < 16
620c620
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s-cftab ;    \
617c617
<    UInt32s->ll16[i] | GET_LL4i << 16
---
>    UInt32s->ll16[i] | GET_LL4i < 16
620c620
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       cccc = BZ2_indexIntoF  s-tPos, s->cftab ;    \
(89.9 %, 20613 bytes)
617c617
<    UInt32s-ll16[i] | GET_LL4i << 16
---
>    UInt32s-ll16[i] | GET_LL4i < 16
620c620
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       cccc = BZ2_indexIntoF  s->tPos, s-cftab ;    \
617c617
<    UInt32s-ll16[i] | GET_LL4i << 16
---
>    UInt32s-ll16[i] | GET_LL4i < 16
620c620
<       cccc = BZ2_indexIntoF  s->tPos, s->cftab ;    \
---
>       cccc = BZ2_indexIntoF  s-tPos, s->cftab ;    \
665c665
< #define fmina,b a < b ? a : b
---
> #define fmina,b a  b ? a : b
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 31
(89.9 %, 20611 bytes)
617c617
<    UInt32s-ll16[i] | GET_LL4i < 16
---
>    UInt32s-ll16[i] | GET_LL4i  16
620c620
<       cccc = BZ2_indexIntoF  s->tPos, s-cftab ;    \
---
>       cccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
665c665
< #define fmina,b a < b ? a : b
---
> #define fmina,b a  b ? a : b
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 31
(89.9 %, 20609 bytes)
665c665
< #define fmina,b a < b ? a : b
---
> #define fmina,b a  b ? a : b
689c689
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 31
689,690c689,690
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 < zz & 31
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
689,690c689,690
< #define       SET_BHzz  bhtab[zz >> 5] |= 1 << zz & 31
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz >> 5] |= 1 < zz & 31
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
(89.9 %, 20607 bytes)
689,690c689,690
< #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 31
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 < zz & 31
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
689,690c689,690
< #define       SET_BHzz  bhtab[zz > 5] |= 1 << zz & 31
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1 < zz & 31
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz >> 5] &= ~1 < zz & 31
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
(89.9 %, 20605 bytes)
689,690c689,690
< #define       SET_BHzz  bhtab[zz > 5] |= 1 < zz & 31
< #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 31
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 << zz & 31
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 < zz & 31
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz > 5] &= ~1 < zz & 31
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
(89.9 %, 20603 bytes)
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 < zz & 31
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 << zz & 31
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 < zz & 31
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz >> 5] & 1 << zz & 31
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz >> 5] & 1 < zz & 31
> #define      WORD_BHzz  bhtab[zz > 5]
(89.9 %, 20601 bytes)
690,691c690,691
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1 < zz & 31
< #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 31
> #define     ISSET_BHzz  bhtab[zz  5] & 1 << zz & 31
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz > 5] & 1 << zz & 31
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz > 5] & 1 < zz & 31
> #define      WORD_BHzz  bhtab[zz > 5]
(89.9 %, 20599 bytes)
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz  5] & 1 << zz & 31
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1 < zz & 31
> #define      WORD_BHzz  bhtab[zz > 5]
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz  5] & 1 << zz & 31
< #define      WORD_BHzz  bhtab[zz >> 5]
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1 < zz & 31
> #define      WORD_BHzz  bhtab[zz > 5]
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
1641c1641
< #define ISFLAGs strcmpaa->name, s==0
---
> #define ISFLAGs strcmpaa-name, s==0
(89.9 %, 20597 bytes)
691,692c691,692
< #define     ISSET_BHzz  bhtab[zz  5] & 1 < zz & 31
< #define      WORD_BHzz  bhtab[zz > 5]
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 31
> #define      WORD_BHzz  bhtab[zz  5]
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
1641c1641
< #define ISFLAGs strcmpaa->name, s==0
---
> #define ISFLAGs strcmpaa-name, s==0
(90.0 %, 20595 bytes)
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
1641c1641
< #define ISFLAGs strcmpaa->name, s==0
---
> #define ISFLAGs strcmpaa-name, s==0
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)-lastErr == BZ_STREAM_END) return 0;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b < 8]
1193c1193
<    bzf->strm.next_out = buf;
---
>    bzf-strm.next_out = buf;
766c766
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b < 8]
1192c1192
<    bzf->strm.avail_out = len;
---
>    bzf-strm.avail_out = len;
767c767
< #define SETMASK 1 << 21
---
> #define SETMASK 1 < 21
934c934
<    case lll: s->state = lll;                      \
---
>    case lll: s-state = lll;                      \
(90.0 %, 20593 bytes)
766c766
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1  8] - ftab[b << 8]
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)-lastErr == BZ_STREAM_END) return 0;
766c766
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b < 8]
1193c1193
<    bzf->strm.next_out = buf;
---
>    bzf-strm.next_out = buf;
766c766
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b+1 < 8] - ftab[b < 8]
1192c1192
<    bzf->strm.avail_out = len;
---
>    bzf-strm.avail_out = len;
767c767
< #define SETMASK 1 << 21
---
> #define SETMASK 1 < 21
934c934
<    case lll: s->state = lll;                      \
---
>    case lll: s-state = lll;                      \
767c767
< #define SETMASK 1 << 21
---
> #define SETMASK 1 < 21
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
---
> #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
(90.0 %, 20591 bytes)
767c767
< #define SETMASK 1 < 21
---
> #define SETMASK 1  21
795c795
< #define MYMAXzz2,zz3 zz2 > zz3 ? zz2 : zz3
---
> #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1186c1186
<    if (bzf->writing)
---
>    if (bzf-writing)
(90.0 %, 20589 bytes)
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1186c1186
<    if (bzf->writing)
---
>    if (bzf-writing)
1342c1342
< #include <signal.h>
---
> #include signal.h
1343c1343
< #include <errno.h>
---
> #include errno.h
1354c1354
< #   include <fcntl.h>
---
> #   include fcntl.h
1355c1355
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: reduce-pointer-level >===
32c32
<       char *next_in;
---
>       char next_in;
37c37
<       char *next_out;
---
>       char next_out;
1193c1193
<    bzf->strm.next_out = buf;
---
>    bzf->strm.next_out = *buf;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
(90.0 %, 20588 bytes)
37c37
<       char *next_out;
---
>       char next_out;
1193c1193
<    bzf->strm.next_out = buf;
---
>    bzf->strm.next_out = *buf;
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(bzalloc)(void *,int,int);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (bzfree)(void *,void *);
357c357
<       bz_stream* strm;
---
>       bz_stream strm;
368c368
<       UInt32*  arr1;
---
>       UInt32  arr1;
(90.0 %, 20587 bytes)
368c368
<       UInt32*  arr1;
---
>       UInt32  arr1;
369c369
<       UInt32*  arr2;
---
>       UInt32  arr2;
(90.0 %, 20586 bytes)
369c369
<       UInt32*  arr2;
---
>       UInt32  arr2;
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
(90.0 %, 20585 bytes)
370c370
<       UInt32*  ftab;
---
>       UInt32  ftab;
374c374
<       UInt32*  ptr;
---
>       UInt32  ptr;
(90.0 %, 20584 bytes)
374c374
<       UInt32*  ptr;
---
>       UInt32  ptr;
375c375
<       UChar*   block;
---
>       UChar   block;
(90.0 %, 20583 bytes)
375c375
<       UChar*   block;
---
>       UChar   block;
376c376
<       UInt16*  mtfv;
---
>       UInt16  mtfv;
(90.0 %, 20582 bytes)
376c376
<       UInt16*  mtfv;
---
>       UInt16  mtfv;
377c377
<       UChar*   zbits;
---
>       UChar   zbits;
(90.0 %, 20581 bytes)
377c377
<       UChar*   zbits;
---
>       UChar   zbits;
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
(90.0 %, 20580 bytes)
503c503
<       bz_stream* strm;
---
>       bz_stream strm;
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
(90.0 %, 20579 bytes)
534c534
<       UInt32   *tt;
---
>       UInt32   tt;
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
(90.0 %, 20578 bytes)
537c537
<       UInt16   *ll16;
---
>       UInt16   ll16;
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
(90.0 %, 20577 bytes)
538c538
<       UChar    *ll4;
---
>       UChar    ll4;
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
(90.0 %, 20576 bytes)
586c586
<       Int32*   save_gLimit;
---
>       Int32   save_gLimit;
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
(90.0 %, 20575 bytes)
587c587
<       Int32*   save_gBase;
---
>       Int32   save_gBase;
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
(90.0 %, 20574 bytes)
588c588
<       Int32*   save_gPerm;
---
>       Int32   save_gPerm;
1099c1099
<       FILE*     handle;
---
>       FILE     handle;
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1186c1186
<    if (bzf->writing)
---
>    if (bzf.writing)
1192,1193c1192,1193
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
1243c1243
< const char * BZ_APIBZ2_bzlibVersionvoid
---
> const char  BZ_APIBZ2_bzlibVersionvoid
(90.0 %, 20573 bytes)
1099c1099
<       FILE*     handle;
---
>       FILE     handle;
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1186c1186
<    if (bzf->writing)
---
>    if (bzf.writing)
1192,1193c1192,1193
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
1243c1243
< const char * BZ_APIBZ2_bzlibVersionvoid
---
> const char  BZ_APIBZ2_bzlibVersionvoid
(90.0 %, 20572 bytes)
1179c1179
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile bzf = *b;
1186c1186
<    if (bzf->writing)
---
>    if (bzf.writing)
1192,1193c1192,1193
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf.strm.avail_out = len;
>    bzf.strm.next_out = buf;
1243c1243
< const char * BZ_APIBZ2_bzlibVersionvoid
---
> const char  BZ_APIBZ2_bzlibVersionvoid
(90.0 %, 20571 bytes)
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
1243,1244c1243
< const char  BZ_APIBZ2_bzlibVersionvoid
< ;
---
> 
(90.0 %, 20531 bytes)
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-pointer >===
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
(90.0 %, 20530 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
(90.0 %, 20529 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
(90.0 %, 20528 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(90.0 %, 20527 bytes)
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(90.0 %, 20526 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(90.0 %, 20525 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
(90.0 %, 20524 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
(90.0 %, 20523 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(90.0 %, 20522 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(90.0 %, 20521 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS 2 + 00000 / BZ_G_SIZE
(90.0 %, 20520 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS 2 + 900000 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS 2 + 00000 / BZ_G_SIZE
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(90.0 %, 20519 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + 00000 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS 2 + 0000 / BZ_G_SIZE
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(90.0 %, 20518 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + 0000 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS 2 + 000 / BZ_G_SIZE
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(90.0 %, 20517 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + 000 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS 2 + 00 / BZ_G_SIZE
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
(90.0 %, 20516 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + 00 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(90.0 %, 20515 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(90.0 %, 20514 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(90.0 %, 20513 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(90.0 %, 20512 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(90.0 %, 20511 bytes)
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(90.0 %, 20510 bytes)
396c396
<       UChar    unseqToSeq[56];
---
>       UChar    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(90.0 %, 20509 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(90.0 %, 20508 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
(90.0 %, 20507 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(90.0 %, 20506 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
(90.0 %, 20505 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
(90.0 %, 20504 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
(90.0 %, 20503 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(90.0 %, 20502 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
(90.0 %, 20501 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(90.0 %, 20500 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
(90.0 %, 20499 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(90.0 %, 20498 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(90.0 %, 20497 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(90.0 %, 20496 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(90.0 %, 20495 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
(90.0 %, 20494 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(90.0 %, 20493 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(90.0 %, 20492 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(90.0 %, 20491 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(90.0 %, 20490 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
(90.0 %, 20489 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(90.0 %, 20488 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(90.0 %, 20487 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(90.0 %, 20486 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
(90.0 %, 20485 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(90.0 %, 20484 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(90.0 %, 20483 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
(90.0 %, 20482 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
(90.0 %, 20481 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
(90.0 %, 20480 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(90.0 %, 20479 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(90.0 %, 20478 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
(90.0 %, 20477 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
(90.0 %, 20476 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(90.0 %, 20475 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(90.0 %, 20474 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(90.0 %, 20473 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
(90.0 %, 20472 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
(90.0 %, 20471 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
(90.0 %, 20470 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
(90.0 %, 20469 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(90.0 %, 20468 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
(90.0 %, 20467 bytes)
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(90.0 %, 20466 bytes)
528c528
<       Int32    unzftab[56];
---
>       Int32    unzftab[6];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(90.0 %, 20465 bytes)
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(90.0 %, 20464 bytes)
530c530
<       Int32    cftab[57];
---
>       Int32    cftab[7];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(90.0 %, 20463 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(90.0 %, 20462 bytes)
531c531
<       Int32    cftabCopy[57];
---
>       Int32    cftabCopy[7];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(90.0 %, 20461 bytes)
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(90.0 %, 20460 bytes)
548c548
<       Bool     inUse[56];
---
>       Bool     inUse[6];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(90.0 %, 20459 bytes)
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(90.0 %, 20458 bytes)
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(90.0 %, 20457 bytes)
550c550
<       UChar    seqToUnseq[56];
---
>       UChar    seqToUnseq[6];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(90.0 %, 20456 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
599c599
<     cccc = UChars->tPos & 0xff;           \
---
>     ccc = UChars->tPos & 0xff;           \
(90.0 %, 20455 bytes)
554c554
<       Int32    mtfbase[56 / MTFL_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
599c599
<     cccc = UChars->tPos & 0xff;           \
---
>     ccc = UChars->tPos & 0xff;           \
(90.0 %, 20454 bytes)
599c599
<     cccc = UChars->tPos & 0xff;           \
---
>     ccc = UChars->tPos & 0xff;           \
599c599
<     cccc = UChars->tPos & 0xff;           \
---
>     cccc = UChars->tPos & 0xf;           \
604c604
<     cccc = UCharc_tPos & 0xff;            \
---
>     ccc = UCharc_tPos & 0xff;            \
(90.0 %, 20453 bytes)
599c599
<     ccc = UChars->tPos & 0xff;           \
---
>     cc = UChars->tPos & 0xff;           \
599c599
<     ccc = UChars->tPos & 0xff;           \
---
>     ccc = UChars->tPos & 0xf;           \
604c604
<     cccc = UCharc_tPos & 0xff;            \
---
>     ccc = UCharc_tPos & 0xff;            \
(90.0 %, 20452 bytes)
599c599
<     cc = UChars->tPos & 0xff;           \
---
>     c = UChars->tPos & 0xff;           \
599c599
<     cc = UChars->tPos & 0xff;           \
---
>     cc = UChars->tPos & 0xf;           \
(90.0 %, 20451 bytes)
599c599
<     c = UChars->tPos & 0xff;           \
---
>     c = UChars->tPos & 0xf;           \
604c604
<     cccc = UCharc_tPos & 0xff;            \
---
>     ccc = UCharc_tPos & 0xff;            \
604c604
<     cccc = UCharc_tPos & 0xff;            \
---
>     cccc = UCharc_tPos & 0xf;            \
(90.0 %, 20450 bytes)
604c604
<     cccc = UCharc_tPos & 0xff;            \
---
>     ccc = UCharc_tPos & 0xff;            \
604c604
<     cccc = UCharc_tPos & 0xff;            \
---
>     cccc = UCharc_tPos & 0xf;            \
617c617
<    UInt32s-ll16[i] | GET_LL4i  16
---
>    UInt32s-ll16[i] | GET_LL4i  6
(90.0 %, 20449 bytes)
604c604
<     ccc = UCharc_tPos & 0xff;            \
---
>     cc = UCharc_tPos & 0xff;            \
604c604
<     ccc = UCharc_tPos & 0xff;            \
---
>     ccc = UCharc_tPos & 0xf;            \
617c617
<    UInt32s-ll16[i] | GET_LL4i  16
---
>    UInt32s-ll16[i] | GET_LL4i  6
(90.0 %, 20448 bytes)
604c604
<     cc = UCharc_tPos & 0xff;            \
---
>     c = UCharc_tPos & 0xff;            \
604c604
<     cc = UCharc_tPos & 0xff;            \
---
>     cc = UCharc_tPos & 0xf;            \
617c617
<    UInt32s-ll16[i] | GET_LL4i  16
---
>    UInt32s-ll16[i] | GET_LL4i  6
(90.0 %, 20447 bytes)
604c604
<     c = UCharc_tPos & 0xff;            \
---
>     c = UCharc_tPos & 0xf;            \
617c617
<    UInt32s-ll16[i] | GET_LL4i  16
---
>    UInt32s-ll16[i] | GET_LL4i  6
620c620
<       cccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>       ccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
(90.0 %, 20446 bytes)
617c617
<    UInt32s-ll16[i] | GET_LL4i  16
---
>    UInt32s-ll16[i] | GET_LL4i  6
620c620
<       cccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>       ccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
(90.0 %, 20445 bytes)
620c620
<       cccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>       ccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
(90.0 %, 20444 bytes)
620c620
<       ccc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>       cc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(90.0 %, 20443 bytes)
620c620
<       cc = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
(90.0 %, 20442 bytes)
671c671
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define FALLBACK_QSORT_SMALL_THRESH 0
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
689c689
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
(90.0 %, 20441 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   100
---
> #define FALLBACK_QSORT_STACK_SIZE   00
689c689
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
690c690
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
(90.0 %, 20440 bytes)
672c672
< #define FALLBACK_QSORT_STACK_SIZE   00
---
> #define FALLBACK_QSORT_STACK_SIZE   0
689c689
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
(90.0 %, 20439 bytes)
689c689
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 31
---
> #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
690c690
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
(90.0 %, 20438 bytes)
690c690
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 31
---
> #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
691c691
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 31
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
(90.0 %, 20437 bytes)
691c691
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 31
---
> #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
693c693
< #define UNALIGNED_BHzz  zz & 0x01f
---
> #define UNALIGNED_BHzz  zz & 0x1f
(90.0 %, 20436 bytes)
693c693
< #define UNALIGNED_BHzz  zz & 0x01f
---
> #define UNALIGNED_BHzz  zz & 0x1f
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(90.0 %, 20435 bytes)
693c693
< #define UNALIGNED_BHzz  zz & 0x1f
---
> #define UNALIGNED_BHzz  zz & 0xf
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(90.0 %, 20434 bytes)
745c745
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
(90.0 %, 20433 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
767c767
< #define SETMASK 1  21
---
> #define SETMASK 1  1
(90.0 %, 20432 bytes)
747c747
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
767c767
< #define SETMASK 1  21
---
> #define SETMASK 1  1
(90.0 %, 20431 bytes)
767c767
< #define SETMASK 1  21
---
> #define SETMASK 1  1
793c793
< #define WEIGHTOFzz0  zz0 & 0xffffff00
---
> #define WEIGHTOFzz0  zz0 & 0xfffff00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
(90.0 %, 20430 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0xffffff00
---
> #define WEIGHTOFzz0  zz0 & 0xfffff00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20429 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0xfffff00
---
> #define WEIGHTOFzz0  zz0 & 0xffff00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20428 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0xffff00
---
> #define WEIGHTOFzz0  zz0 & 0xfff00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
(90.0 %, 20427 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0xfff00
---
> #define WEIGHTOFzz0  zz0 & 0xff00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
(90.0 %, 20426 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0xff00
---
> #define WEIGHTOFzz0  zz0 & 0xf00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20425 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0xf00
---
> #define WEIGHTOFzz0  zz0 & 0x00
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
(90.0 %, 20424 bytes)
793c793
< #define WEIGHTOFzz0  zz0 & 0x00
---
> #define WEIGHTOFzz0  zz0 & 0x0
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20423 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0x000000ff
---
> #define DEPTHOFzz1   zz1 & 0x00000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20422 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0x00000ff
---
> #define DEPTHOFzz1   zz1 & 0x0000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1251c1251
<                  int fd,             
---
>                  int d,             
(90.0 %, 20421 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0x0000ff
---
> #define DEPTHOFzz1   zz1 & 0x000ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1251c1251
<                  int fd,             
---
>                  int d,             
(90.0 %, 20420 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0x000ff
---
> #define DEPTHOFzz1   zz1 & 0x00ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20419 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0x00ff
---
> #define DEPTHOFzz1   zz1 & 0x0ff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(90.0 %, 20418 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0x0ff
---
> #define DEPTHOFzz1   zz1 & 0xff
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1251c1251
<                  int fd,             
---
>                  int d,             
(90.0 %, 20417 bytes)
794c794
< #define DEPTHOFzz1   zz1 & 0xff
---
> #define DEPTHOFzz1   zz1 & 0xf
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1251c1251
<                  int fd,             
---
>                  int d,             
(90.0 %, 20416 bytes)
906c906
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1251c1251
<                  int fd,             
---
>                  int d,             
1267c1267
<                ( int fd,
---
>                ( int d,
(90.0 %, 20415 bytes)
1251c1251
<                  int fd,             
---
>                  int d,             
1267c1267
<                ( int fd,
---
>                ( int d,
(90.0 %, 20414 bytes)
1267c1267
<                ( int fd,
---
>                ( int d,
1409c1409
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(90.0 %, 20413 bytes)
1409c1409
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
1620c1620
<    Cell;
---
>    ell;
(90.0 %, 20412 bytes)
1409c1409
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
1620c1620
<    Cell;
---
>    ell;
(90.0 %, 20411 bytes)
1409c1409
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
1620c1620
<    Cell;
---
>    ell;
(90.0 %, 20410 bytes)
1620c1620
<    Cell;
---
>    ell;
(90.0 %, 20409 bytes)
===< pass_clex :: rm-toks-15 >===
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
(90.1 %, 20297 bytes)
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> ##define BZ_SEQUENCE_ERROR    -1
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define define BZ_SEQUENCE_ERROR    -1
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #define BZ_RUN_OK            BZ_SEQUENCE_ERROR    -1
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> -1
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
---
> #1
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #define #define BZ_PARAM_ERROR       -2
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #define BZ_FLUSH_OK          define BZ_PARAM_ERROR       -2
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> BZ_PARAM_ERROR       -2
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #-2
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
---
> #define 2
12,16c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_FINISH_OK         #define BZ_MEM_ERROR         -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> define BZ_MEM_ERROR         -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #BZ_MEM_ERROR         -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define -3
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
---
> #define BZ_STREAM_END        3
14,16d13
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
(90.1 %, 20201 bytes)
13,16c13
< #define BZ_STREAM_END        3
< #define BZ_DATA_ERROR        -4
< #define BZ_DATA_ERROR_MAGIC  -5
< #define BZ_IO_ERROR          -6
---
> #define BZ_STREAM_END        6
14,16d13
< #define BZ_DATA_ERROR        -4
< #define BZ_DATA_ERROR_MAGIC  -5
< #define BZ_IO_ERROR          -6
(90.2 %, 20105 bytes)
13,16c13
< #define BZ_STREAM_END        6
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
---
> #define BZ_STREAM_END        9
14,17d13
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
< 
14,19c14
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
< 
< typedef 
<    struct {
---
> #struct {
(90.2 %, 20009 bytes)
13,20c13
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> #define BZ_STREAM_END        unsigned int total_in_hi32;
15,20c15
< typedef 
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> int total_in_hi32;
16,20c16
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    total_in_hi32;
16,20c16
<    struct {
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct ;
17,21d16
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
17,21d16
<       char next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
(90.3 %, 19891 bytes)
17,20c17
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       ;
17,22c17
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char void *state;
17,22c17
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char **state;
17,22c17
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outstate;
18,22c18
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       ;
18,24c18
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned void *(*bzalloc)(void *,int,int);
18,24c18
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *(*bzalloc)(void *,int,int);
18,24c18
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_out(*bzalloc)(void *,int,int);
19,24c19
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *bzalloc)(void *,int,int);
19,24c19
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned bzalloc)(void *,int,int);
19,24c19
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int )(void *,int,int);
19,24c19
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32(void *,int,int);
20,24c20
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int,int);
20,24c20
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned *,int,int);
20,24c20
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int ,int,int);
20,24c20
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32int,int);
22,24c22
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int);
22,24c22
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int);
22,24c22
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *);
23,24d22
< 
<       void *(*bzalloc)(void *,int,int);
24d23
<       void *(*bzalloc)(void *,int,int);
(90.3 %, 19850 bytes)
22,24c22
<       void *state;
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *state*opaque;
23,24c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       opaque;
23,24c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void ;
23,25c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (} 
23,26c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bz_stream;
23,26c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree;
23,30c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)#include <stdio.h>
23,30c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(include <stdio.h>
23,30c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void <stdio.h>
23,30c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *stdio.h>
23,30c23
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,.h>
(90.3 %, 19806 bytes)
23,31c23
<       void ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void func) func
24,31c24
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    ) func
25,31c25
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func
25,32c25
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
>    bz_stream#   define BZ_EXTERN extern
29,32c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
29,32c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #BZ_EXTERN extern
29,32c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include extern
29,37c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
29,37c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <stdioint BZ_APIBZ2_bzCompressInit ( 
29,37c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <stdio.BZ_APIBZ2_bzCompressInit ( 
29,37c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> #include <stdio.h( 
31,38c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> bz_stream* strm, 
31,38c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> #   * strm, 
31,38c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> #   define strm, 
31,38c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
---
> #   define BZ_API, 
31,39c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_API(int        blockSize100k, 
31,39c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_API(funcblockSize100k, 
31,39c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_API(func) , 
32,40c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> int        verbosity, 
32,40c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   verbosity, 
32,40c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   define , 
32,41c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> #   define BZ_EXTERN int        workFactor 
37,41c37
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> workFactor 
37,42c37
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN );
37,42c37
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int ;
37,44c37
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
38,44c38
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>       int BZ_APIBZ2_bzCompress ( 
38,44c38
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>       bz_streamBZ_APIBZ2_bzCompress ( 
38,44c38
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
>       bz_stream* ( 
38,45c38
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>       bz_stream* strmbz_stream* strm, 
39,45c39
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
---
>       * strm, 
(90.4 %, 19659 bytes)
37,43d36
< BZ_EXTERN int ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
39,44c39
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> ( 
39,45c39
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
> BZ_EXTERN bz_stream* strm 
39,45c39
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
> BZ_EXTERN int * strm 
39,45c39
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress strm 
40,46c40
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
---
>       );
(90.5 %, 19555 bytes)
37,43c37
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int int       verbosity, 
37,43c37
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd verbosity, 
38,43c38
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
>       , 
38,44c38
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
>       bz_streamint       small
38,44c38
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
>       bz_stream* small
41,46d40
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
(90.5 %, 19430 bytes)
38,45c38
<       bz_stream* small
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
>       bz_stream* ( 
39,46c39
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    bz_stream *strm 
39,46c39
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
>    )*strm 
41,46c41
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
---
> strm 
41,47c41
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN );
41,47c41
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN int ;
41,53c41
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress #define BZ_MAX_UNUSED 0
42,53c42
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
>       define BZ_MAX_UNUSED 0
42,53c42
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
>       bz_streamBZ_MAX_UNUSED 0
42,53c42
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
>       bz_stream* 0
43,55c43
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
>    typedef void BZFILE;
43,55c43
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
>    )void BZFILE;
45,55c45
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZFILE;
(90.6 %, 19304 bytes)
41,52c41
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> BZ_EXTERN int *  bzerror,   
47,52c47
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> bzerror,   
47,52c47
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> #,   
47,53c47
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> #define FILE* f, 
47,53c47
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> #define BZ_MAX_UNUSED * f, 
49,53c49
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> f, 
49,53c49
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef , 
49,54c49
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> typedef void int   verbosity, 
49,54c49
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> typedef void BZFILEverbosity, 
51,54c51
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> , 
51,55c51
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN int   small,
51,55c51
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILEsmall,
51,55c51
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* ,
51,56c51
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen void* unused,    
52,56c52
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
52,56c52
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intunused,    
52,56c52
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  ,    
52,57c52
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int*  bzerrorint   nUnused 
53,57c53
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
53,58c53
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE);
53,58c53
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* ;
53,60c53
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       FILE* fBZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
54,60c54
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       void BZ_APIBZ2_bzReadClose ( 
54,60c54
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   BZ_APIBZ2_bzReadClose ( 
54,60c54
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   verbosity( 
55,60d54
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
55,61c55
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
55,61c55
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       int   smallbzerror, 
56,61c56
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       , 
56,62c56
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       voidBZFILE* b 
56,62c56
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       void* * b 
56,62c56
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       void* unusedb 
57,63c57
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>       );
57,63c57
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>       int   ;
58,65c58
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
58,65c58
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    )void BZ_APIBZ2_bzReadGetUnused ( 
60,65c60
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_APIBZ2_bzReadGetUnused ( 
60,65c60
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN ( 
60,66c60
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN void int*    bzerror, 
60,66c60
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose *    bzerror, 
61,66c61
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       bzerror, 
61,66c61
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       int, 
61,67c61
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
61,67c61
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerror* b, 
62,67c62
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
62,67c62
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       BZFILE, 
62,68c62
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* void**  unused,  
63,68c63
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>    **  unused,  
63,68c63
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>    )*  unused,  
65,68c65
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> unused,  
65,68c65
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN ,  
65,69c65
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void int*    nUnused 
65,69c65
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused *    nUnused 
66,69c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
66,70c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int);
66,70c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    ;
66,72c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       int*    bzerrorBZ_EXTERN int BZ_APIBZ2_bzRead ( 
67,72c67
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       int BZ_APIBZ2_bzRead ( 
67,72c67
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       BZFILEBZ_APIBZ2_bzRead ( 
67,72c67
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       BZFILE* ( 
67,73c67
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       BZFILE* bint*    bzerror, 
68,73c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       *    bzerror, 
68,73c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       voidbzerror, 
68,73c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       void*, 
68,74c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       void**  BZFILE* b, 
68,74c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       void**  unused* b, 
69,74c69
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
69,74c69
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
69,75c69
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
70,75c70
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    *   buf, 
70,75c70
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    )buf, 
72,75c72
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> , 
72,76c72
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int     len 
72,76c72
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int len 
72,77c72
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_APIBZ2_bzRead );
73,77c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
73,79c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       intBZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
73,79c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       int*    BZFILE* BZ_APIBZ2_bzWriteOpen ( 
73,79c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       int*    bzerror* BZ_APIBZ2_bzWriteOpen ( 
74,79c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZ_APIBZ2_bzWriteOpen ( 
74,79c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE( 
74,80c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       BZFILE* int*  bzerror,      
74,80c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       BZFILE* b*  bzerror,      
75,80c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       bzerror,      
75,80c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       void,      
75,81c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       void*   FILE* f, 
75,81c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       void*   buf* f, 
76,81c76
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
76,81c76
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>       int     , 
77,82c77
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>    int   blockSize100k, 
77,82c77
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>    )blockSize100k, 
79,82c79
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> , 
79,83c79
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN int   verbosity, 
79,83c79
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILEverbosity, 
79,83c79
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* , 
79,84c79
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen int   workFactor 
80,84c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
80,85c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int);
80,85c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  ;
80,87c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int*  bzerrorBZ_EXTERN void BZ_APIBZ2_bzWrite ( 
81,87c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       void BZ_APIBZ2_bzWrite ( 
81,87c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       FILEBZ_APIBZ2_bzWrite ( 
81,87c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       FILE* ( 
81,88c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       FILE* fint*    bzerror, 
82,88c82
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       *    bzerror, 
82,88c82
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   bzerror, 
83,88d82
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
83,88d82
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
83,89c83
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   * b, 
83,89c83
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   verbosityb, 
84,89c84
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
84,90c84
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int   void*   buf, 
85,90c85
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    *   buf, 
85,90c85
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>    )buf, 
87,90c87
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> , 
87,91c87
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int     len 
87,91c87
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void len 
87,92c87
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite );
88,92c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
88,94c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       intBZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
88,94c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       int*    void BZ_APIBZ2_bzWriteClose ( 
88,94c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       int*    bzerrorBZ_APIBZ2_bzWriteClose ( 
89,94c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       ( 
89,95c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       BZFILEint*          bzerror, 
89,95c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       BZFILE* *          bzerror, 
89,95c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       BZFILE* bbzerror, 
90,95c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       , 
90,96c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       voidBZFILE*       b, 
90,96c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       void*   *       b, 
90,96c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       void*   bufb, 
91,96c91
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       , 
91,97c91
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int     int           abandon, 
92,97c92
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    abandon, 
92,97c92
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    ), 
94,98c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> unsigned int* nbytes_in, 
94,98c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN int* nbytes_in, 
94,98c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void * nbytes_in, 
94,98c94
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose nbytes_in, 
95,98c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
95,99c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       intunsigned int* nbytes_out 
95,99c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          int* nbytes_out 
95,99c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerror* nbytes_out 
96,99c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
96,100c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE);
96,100c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       ;
96,102c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       BZFILE*       bBZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
97,102c97
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       void BZ_APIBZ2_bzWriteClose64 ( 
97,102c97
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       int           BZ_APIBZ2_bzWriteClose64 ( 
97,102c97
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       int           abandon( 
98,102d97
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
98,103c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
98,103c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
98,103c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* , 
98,104c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int* nbytes_inBZFILE*       b, 
99,104c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       *       b, 
99,104c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned b, 
99,104c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int, 
99,105c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       unsigned int* int           abandon, 
100,105c100
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    abandon, 
100,105c100
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>    ), 
102,106c102
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> unsigned int* nbytes_in_lo32, 
102,106c102
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN int* nbytes_in_lo32, 
102,106c102
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void * nbytes_in_lo32, 
102,106c102
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 nbytes_in_lo32, 
103,106c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
103,107c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       intunsigned int* nbytes_in_hi32, 
103,107c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          int* nbytes_in_hi32, 
103,107c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerror* nbytes_in_hi32, 
104,107c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
104,107c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE, 
104,108c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       unsigned int* nbytes_out_lo32, 
104,108c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       bint* nbytes_out_lo32, 
105,108c105
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
105,108c105
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           nbytes_out_lo32, 
106,108d105
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
106,108d105
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
106,108d105
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
106,108d105
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
106,108d105
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
106,110c106
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_lo32);
107,110c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
107,115c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
107,115c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned intint BZ_APIBZ2_bzBuffToBuffCompress ( 
107,115c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* BZ_APIBZ2_bzBuffToBuffCompress ( 
107,115c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* nbytes_in_hi32( 
108,115d107
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
108,116c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned *         dest, 
108,116c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned intdest, 
108,116c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* , 
108,117c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* nbytes_out_lo32unsigned int* destLen,
109,117c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
109,117c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned * destLen,
109,117c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned intdestLen,
109,117c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* ,
110,118c110
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    char*         source, 
110,118c110
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    )*         source, 
115,118c115
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> source, 
115,118c115
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN , 
115,119c115
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int unsigned int  sourceLen,
115,119c115
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress int  sourceLen,
116,119c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
116,119c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
116,120c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
116,120c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         destblockSize100k, 
117,120c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
117,121c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
117,121c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned intverbosity, 
117,121c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* , 
117,122c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int* destLenint           workFactor 
118,122c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
118,123c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char);
118,123c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         ;
118,125c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       char*         sourceBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
119,125c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int BZ_APIBZ2_bzBuffToBuffDecompress ( 
119,125c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       unsigned BZ_APIBZ2_bzBuffToBuffDecompress ( 
119,125c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       unsigned int  ( 
119,126c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       unsigned int  sourceLenchar*         dest, 
120,126c120
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       *         dest, 
120,126c120
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           dest, 
121,126d120
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
121,126d120
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
121,127c121
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           int* destLen,
121,127c121
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           verbosity* destLen,
122,127c122
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       destLen,
122,127c122
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           ,
123,128c123
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    char*         source, 
123,128c123
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>    )*         source, 
125,128c125
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> source, 
125,128c125
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN , 
125,129c125
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int unsigned int  sourceLen,
125,129c125
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress int  sourceLen,
126,129c126
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
126,129c126
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
126,130c126
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
126,130c126
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         destsmall, 
127,130c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
127,131c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int           verbosity 
127,131c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned intverbosity 
127,132c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* );
127,132c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* destLen;
128,137c128
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
128,137c128
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       charconst char * BZ_APIBZ2_bzlibVersion (
128,137c128
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       char*         char * BZ_APIBZ2_bzlibVersion (
128,137c128
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       char*         source* BZ_APIBZ2_bzlibVersion (
129,137c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       BZ_APIBZ2_bzlibVersion (
129,137c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned (
129,138c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
---
>       unsigned int  void
129,139c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>       unsigned int  sourceLen);
130,139c130
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>       ;
130,141c130
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       int           BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
130,141c130
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       int           smallBZFILE * BZ_APIBZ2_bzopen (
131,141c131
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       * BZ_APIBZ2_bzopen (
131,141c131
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>       int           BZ_APIBZ2_bzopen (
132,141c132
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
>    (
132,142c132
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
>    )const char *path,
137,142c137
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> char *path,
137,142c137
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN *path,
137,142c137
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN const path,
137,142c137
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
---
> BZ_EXTERN const char ,
137,143c137
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char * const char *mode
137,143c137
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion char *mode
138,143c138
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
>       *mode
139,143c139
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
---
>    mode
139,144c139
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
---
>    ));
141,144c141
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
---
> ;
141,146c141
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
141,146c141
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE BZFILE * BZ_APIBZ2_bzdopen (
141,146c141
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE * * BZ_APIBZ2_bzdopen (
(90.6 %, 19215 bytes)
141,147d140
< ;
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
<       int        d,
<       const char *mode
<    );
<          
143,148c143
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
<       int        d,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> int BZ_APIBZ2_bzread (
(90.7 %, 19114 bytes)
141,145c141
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> ;
141,147c141
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN BZ_EXTERN int BZ_APIBZ2_bzwrite (
141,147c141
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int int BZ_APIBZ2_bzwrite (
141,147c141
< BZ_EXTERN int BZ_APIBZ2_bzread (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzread BZ_APIBZ2_bzwrite (
142,147c142
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
>       (
142,148c142
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>       BZFILEBZFILE* b, 
142,148c142
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>       BZFILE* * b, 
142,148c142
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
---
>       BZFILE* bb, 
(90.7 %, 19026 bytes)
141,147c141
< ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> );
143,147c143
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> ;
143,149c143
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN BZ_EXTERN int BZ_APIBZ2_bzflush (
143,149c143
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int int BZ_APIBZ2_bzflush (
143,149c143
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite BZ_APIBZ2_bzflush (
144,149c144
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
>       (
144,150c144
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>       BZFILEBZFILE* b
144,150c144
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>       BZFILE* * b
144,150c144
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
---
>       BZFILE* bb
(90.8 %, 18931 bytes)
143,150c143
< ;
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
> * b
145,150c145
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
---
> b
145,151c145
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
---
> BZ_EXTERN );
145,151c145
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
---
> BZ_EXTERN int ;
145,153c145
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush BZ_EXTERN const char * BZ_APIBZ2_bzerror (
146,153c146
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>       const char * BZ_APIBZ2_bzerror (
146,153c146
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>       BZFILEchar * BZ_APIBZ2_bzerror (
146,153c146
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>       BZFILE* * BZ_APIBZ2_bzerror (
147,153c147
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>    BZ_APIBZ2_bzerror (
147,153c147
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
>    )(
149,154c149
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
---
> BZFILE *b, 
(90.8 %, 18833 bytes)
147,151d146
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
147,159d146
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
(90.9 %, 18744 bytes)
145,164c145
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> BZ_EXTERN int typedef char            Char;
155,164c155
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
155,164c155
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
155,164c155
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define ;
157,164d156
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
157,165c157
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #unsigned char   Bool;
157,165c157
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include char   Bool;
157,165c157
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <Bool;
157,165c157
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib;
157,166c157
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.typedef unsigned char   UChar;
157,166c157
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.hunsigned char   UChar;
162,166c162
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
162,166c162
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #UChar;
162,166c162
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define ;
162,167c162
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> #define BZ_VERSION  typedef int             Int32;
164,167c164
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
164,167c164
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
164,167c164
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            ;
164,168c164
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef char            Chartypedef unsigned int    UInt32;
165,168c165
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
165,168c165
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
165,168c165
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned UInt32;
165,168c165
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   ;
165,169c165
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Booltypedef short           Int16;
166,169c166
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
166,169c166
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
166,169c166
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned ;
166,170c166
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   typedef unsigned short  UInt16;
166,170c166
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   UCharunsigned short  UInt16;
167,170c167
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
167,170c167
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
167,170c167
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             ;
167,172c167
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> typedef int             Int32#define True  (Bool)1
168,172c168
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> define True  (Bool)1
168,172c168
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> typedef True  (Bool)1
168,172c168
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> typedef unsigned (Bool)1
168,172c168
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> typedef unsigned int    Bool)1
168,172c168
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> typedef unsigned int    UInt32)1
169,172c169
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> 1
169,173c169
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
---
> typedef #define False Bool0
169,173c169
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
---
> typedef short           define False Bool0
169,173c169
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
---
> typedef short           Int16False Bool0
170,173c170
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
---
> Bool0
170,175c170
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
---
> typedef #define __inline__  
170,175c170
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
---
> typedef unsigned define __inline__  
170,175c170
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
---
> typedef unsigned short  __inline__  
170,177c170
< typedef unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef unsigned short  UInt16extern void BZ2_bz__AssertH__fail ( int errcode );
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> void BZ2_bz__AssertH__fail ( int errcode );
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #BZ2_bz__AssertH__fail ( int errcode );
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define ( int errcode );
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  int errcode );
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  (errcode );
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  (Bool);
172,177c172
< #define True  (Bool)1
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  (Bool);
173,177d172
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
173,177d172
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
173,177d172
< #define False Bool0
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
(90.9 %, 18650 bytes)
173,177c173
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
---
> \
173,178c173
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #fprintfstderr,zf
173,178c173
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define ,zf
173,178c173
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
---
> #define AssertHcondzf
173,179c173
< #define AssertHcond,errcode \
<    
< #define AssertDcond,msg \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
---
> #define AssertHcond,#define VPrintf1zf,za1 \
(90.9 %, 18567 bytes)
174,176c174
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> za1,za2 \
174,176c174
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> #,za2 \
174,176c174
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> #define za2 \
174,176c174
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
---
> #define VPrintf1zf\
174,177c174
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
<    fprintfstderr,zf,za1,za2
---
> #define VPrintf1zf,fprintfstderr,zf,za1,za2
(91.0 %, 18503 bytes)
174,176c174
< #define za2 \
<    fprintfstderr,zf,za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
> #define za2,za3 \
174,176c174
< #define za2 \
<    fprintfstderr,zf,za1,za2
< #define VPrintf3zf,za1,za2,za3 \
---
> #define za2 ,za3 \
(91.0 %, 18446 bytes)
174,175d173
< #define za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
174,176c174
< #define za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define za2,za1,za2,za3,za4 \
174,176c174
< #define za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
---
> #define za2,za1,za2,za3,za4 \
(91.0 %, 18396 bytes)
174,175c174
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define ,za2,za3,za4
174,175c174
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define VPrintf4zfza2,za3,za4
174,175c174
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
---
> #define VPrintf4zf,,za3,za4
(91.0 %, 18353 bytes)
174,175c174
< #define VPrintf4zfza2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define VPrintf4zfza2,za5 \
174,175c174
< #define VPrintf4zfza2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define VPrintf4zfza2,za5 \
174,175c174
< #define VPrintf4zfza2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
---
> #define VPrintf4zfza2,za3\
(91.1 %, 18310 bytes)
174,175c174
< #define VPrintf4zfza2,za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
---
> #define VPrintf4zfza2za5
174,178c174
< #define VPrintf4zfza2,za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
< 
< 
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
---
> #define VPrintf4zfza2,#define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
(91.1 %, 18267 bytes)
177,178c177
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> strm->bzfreestrm->opaque,ppp
177,178c177
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #->bzfreestrm->opaque,ppp
177,178c177
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define bzfreestrm->opaque,ppp
177,178c177
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define BZALLOCnnn ->opaque,ppp
177,178c177
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
> #define BZALLOCnnn strmopaque,ppp
(91.1 %, 18199 bytes)
177,183d176
< #define bzfreestrm->opaque,ppp
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
177,184c177
< #define bzfreestrm->opaque,ppp
< 
< 
< 
< 
< #define BZ_HDR_B 0x2   
< #define BZ_HDR_Z 0xa   
< #define BZ_HDR_h 0x8   
---
> #define bzfreestrm0x8   
(91.2 %, 18116 bytes)
177,185c177
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define define BZ_RUNA 0
177,185c177
< #define BZ_HDR_h 0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define BZ_HDR_h BZ_RUNA 0
178,185c178
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> 0
178,186c178
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> ##define BZ_RUNB 1
178,186c178
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define define BZ_RUNB 1
178,186c178
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_HDR_0 BZ_RUNB 1
182,186c182
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> 1
182,188c182
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
182,188c182
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
182,188c182
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE BZ_N_GROUPS 6
183,188c183
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> 6
183,189c183
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> ##define BZ_G_SIZE   50
183,189c183
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define define BZ_G_SIZE   50
183,189c183
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    BZ_G_SIZE   50
185,189c185
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> 50
185,190c185
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> ##define BZ_N_ITERS  4
185,190c185
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define define BZ_N_ITERS  4
185,190c185
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA BZ_N_ITERS  4
186,190c186
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> 4
186,192c186
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> ##define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
186,192c186
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
186,192c186
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_RUNB BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
188,192c188
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> 2 + 0 / BZ_G_SIZE
188,192c188
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #+ 0 / BZ_G_SIZE
188,192c188
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define 0 / BZ_G_SIZE
188,192c188
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_N_GROUPS / BZ_G_SIZE
189,192c189
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> BZ_G_SIZE
189,200c189
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> ##define BZ_RAND_DECLS                          \
189,200c189
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define define BZ_RAND_DECLS                          \
189,200c189
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_G_SIZE   BZ_RAND_DECLS                          \
190,200c190
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> \
190,201c190
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #Int32 rNToGo;                               \
190,201c190
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define rNToGo;                               \
190,201c190
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_N_ITERS  ;                               \
192,201c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> \
192,202c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #Int32 rTPos                                 \
192,202c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define rTPos                                 \
192,202c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS \
192,204c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 #define BZ_RAND_INIT_MASK                      \
192,204c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 + define BZ_RAND_INIT_MASK                      \
192,204c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 + 0 BZ_RAND_INIT_MASK                      \
192,204c192
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS 2 + 0 / \
200,205c200
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> s->rNToGo = 0;                              \
200,205c200
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #->rNToGo = 0;                              \
200,205c200
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define rNToGo = 0;                              \
200,205c200
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          = 0;                              \
201,205c201
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    0;                              \
201,205c201
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 ;                              \
201,205c201
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo\
201,206c201
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rNToGo;                               s->rTPos  = 0                               \
202,206c202
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
202,206c202
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos  = 0                               \
202,206c202
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 = 0                               \
204,206c204
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> 0                               \
204,206c204
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #\
204,208c204
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 0
---
> #define #define BZ_RAND_MASK 0
204,208c204
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK 0
---
> #define BZ_RAND_INIT_MASK                      define BZ_RAND_MASK 0
(91.2 %, 17972 bytes)
205,209d204
< 
< #define BZ_RAND_MASK 0
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
206,210c206
< #define BZ_RAND_MASK 0
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> s->rNToGo--;
206,210c206
< #define BZ_RAND_MASK 0
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #->rNToGo--;
206,210c206
< #define BZ_RAND_MASK 0
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #define rNToGo--;
206,210c206
< #define BZ_RAND_MASK 0
< 
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #define BZ_RAND_MASK --;
208,210c208
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> ;
(91.3 %, 17842 bytes)
206,220c206
< #define BZ_RAND_MASK --;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRCcrcVar              \
< 
< 
< #define BZ_FINALISE_CRCcrcVar                \
< 
< 
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #define BZ_RAND_MASK \
206,227c206
< #define BZ_RAND_MASK --;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRCcrcVar              \
< 
< 
< #define BZ_FINALISE_CRCcrcVar                \
< 
< 
< #define BZ_UPDATE_CRCcrcVar,cha              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_RAND_MASK --#define BZ_M_IDLE      1
(91.4 %, 17688 bytes)
206,216c206
< #define BZ_RAND_MASK \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_MASK BZ_M_FINISHING 4
213,216c213
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> 4
213,218c213
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> ##define BZ_S_OUTPUT    1
213,218c213
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define define BZ_S_OUTPUT    1
(91.4 %, 17597 bytes)
206,212c206
< #define BZ_RAND_MASK BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_RAND_MASK define BZ_N_QSORT 2
206,212c206
< #define BZ_RAND_MASK BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> #define BZ_RAND_MASK BZ_M_FINISHING BZ_N_QSORT 2
208,212c208
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 2
---
> 2
(91.5 %, 17506 bytes)
206,208c206
< #define BZ_RAND_MASK define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_RAND_MASK + 2
206,208c206
< #define BZ_RAND_MASK define BZ_N_QSORT 2
< #define BZ_N_SHELL 8
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define BZ_RAND_MASK define 2
(91.5 %, 17405 bytes)
206,224c206
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define BZ_RAND_MASK avail_in_expect;
206,224c206
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define BZ_RAND_MASK + ;
213,227c213
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
---
> UInt32  arr1;
214,227c214
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
---
>    arr1;
214,227c214
<    struct {
<       
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
---
>    struct ;
216,227d215
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
216,228c216
<       bz_stream strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32  arr1;
<       UInt32  arr2;
---
>       bz_stream arr2;
(91.6 %, 17257 bytes)
216,222d215
<       UInt32  arr2;
<       UInt32  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
216,223c216
<       UInt32  arr2;
<       UInt32  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32  ptr;
<       UChar   block;
<       UInt16  mtfv;
---
>       UInt32  mtfv;
(91.6 %, 17145 bytes)
216,224d215
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
216,225c216
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
---
>       UInt16  ;
216,228c216
<       UInt16  mtfv;
<       UChar   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       UInt16  mtfvInt32    nblock;
(91.7 %, 17004 bytes)
216,225c216
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       nInUse;
217,225d216
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
219,225d218
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
219,226c219
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       Int32    inUse[6];
(91.8 %, 16865 bytes)
217,221d216
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
217,221d216
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
217,222c217
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     bsLive;
(91.8 %, 16779 bytes)
217,225d216
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
217,225d216
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
(91.9 %, 16637 bytes)
216,222c216
<       BZ_RAND_DECLS;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_RAND_DECLS[BZ_MAX_SELECTORS];
217,222c217
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_MAX_SELECTORS];
217,222c217
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    ];
218,222d217
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
(91.9 %, 16503 bytes)
216,219c216
<       BZ_RAND_DECLS[BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
216,219c216
<       BZ_RAND_DECLS[BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
(92.0 %, 16400 bytes)
216,218c216
<       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
216,218c216
<       BZ_RAND_DECLS[BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(92.0 %, 16299 bytes)
216,218c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       BZ_RAND_DECLS;
216,220c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>       BZ_RAND_DECLS[}
216,221c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       BZ_RAND_DECLS[BZ_N_GROUPSEState;
216,221c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       BZ_RAND_DECLS[BZ_N_GROUPS];
216,229c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][;
216,231c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE;
216,241c216
<       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       BZ_RAND_DECLS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]#define BZ_X_IDLE        1
218,241c218
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       define BZ_X_IDLE        1
218,241c218
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UInt32   BZ_X_IDLE        1
(92.1 %, 16213 bytes)
216,242c216
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>       BZ_RAND_DECLSdefine BZ_X_MAGIC_1     0
218,242c218
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    BZ_X_MAGIC_1     0
219,242c219
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
---
>    0
219,243c219
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
>    EState#define BZ_X_MAGIC_2     1
227,243c227
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> define BZ_X_MAGIC_2     1
229,243c229
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> BZ_X_MAGIC_2     1
239,243c239
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
---
> 1
239,244c239
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> ##define BZ_X_MAGIC_3     2
239,244c239
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> #define define BZ_X_MAGIC_3     2
239,244c239
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
---
> #define BZ_X_IDLE        BZ_X_MAGIC_3     2
(92.1 %, 16111 bytes)
239,243c239
< #define define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
---
> #define #define BZ_X_BLKHDR_3    6
239,243c239
< #define define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
---
> #define define define BZ_X_BLKHDR_3    6
239,243c239
< #define define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
---
> #define define BZ_X_MAGIC_3     BZ_X_BLKHDR_3    6
(92.2 %, 16010 bytes)
239,243c239
< #define define define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
---
> #define define #define BZ_X_BCRC_1      0
239,243c239
< #define define define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
---
> #define define define define BZ_X_BCRC_1      0
(92.2 %, 15903 bytes)
239,242c239
< #define define #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
---
> #define define 3
239,243c239
< #define define #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
---
> #define define ##define BZ_X_RANDBIT     4
239,243c239
< #define define #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
---
> #define define #define define BZ_X_RANDBIT     4
(92.3 %, 15797 bytes)
239,243c239
< #define define 3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
---
> #define define BZ_X_ORIGPTR_3   7
240,243c240
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
---
> 7
240,244c240
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
---
> ##define BZ_X_MAPPING_1   8
240,244c240
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
---
> #define define BZ_X_MAPPING_1   8
(92.3 %, 15706 bytes)
239,243c239
< #define define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> #define define define BZ_X_SELECTOR_2  1
239,243c239
< #define define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> #define define BZ_X_ORIGPTR_3   BZ_X_SELECTOR_2  1
240,243c240
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
---
> 1
(92.4 %, 15605 bytes)
239,243c239
< #define define define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> #define define #define BZ_X_CODING_3    5
239,243c239
< #define define define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
---
> #define define define define BZ_X_CODING_3    5
(92.4 %, 15498 bytes)
239,242c239
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
---
> #define define 8
239,243c239
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
---
> #define define ##define BZ_X_MTF_4       9
239,243c239
< #define define #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
---
> #define define #define define BZ_X_MTF_4       9
(92.5 %, 15392 bytes)
239,243c239
< #define define 8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> #define define BZ_X_ENDHDR_2    2
240,243c240
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
---
> 2
240,244c240
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
---
> ##define BZ_X_ENDHDR_3    3
240,244c240
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
---
> #define define BZ_X_ENDHDR_3    3
(92.5 %, 15301 bytes)
239,243c239
< #define define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
---
> #define define define BZ_X_ENDHDR_6    6
239,243c239
< #define define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
---
> #define define BZ_X_ENDHDR_2    BZ_X_ENDHDR_6    6
(92.6 %, 15200 bytes)
239,243c239
< #define define define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define define #define BZ_X_CCRC_4      0
239,243c239
< #define define define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> #define define define define BZ_X_CCRC_4      0
(92.6 %, 15093 bytes)
239,255c239
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define bz_stream strm;
239,255c239
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define #strm;
239,255c239
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
---
> #define define #define ;
239,258c239
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
---
> #define define #define BZ_X_CCRC_4      Int32    state;
245,258c245
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
---
> state;
245,258c245
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
---
> #;
245,261c245
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define UChar    state_out_ch;
245,261c245
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFA_SIZE state_out_ch;
246,261c246
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> ;
246,262c246
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #Int32    state_out_len;
246,262c246
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define state_out_len;
246,262c246
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define MTFL_SIZE ;
252,263c252
< typedef
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
> Bool     blockRandomised;
253,263c253
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    blockRandomised;
253,263c253
<    struct {
<       
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    struct ;
255,263d254
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
255,264c255
<       bz_stream strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_stream ;
(92.7 %, 14942 bytes)
255,264c255
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
256,264d255
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
258,264d257
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
(92.8 %, 14790 bytes)
255,262c255
<       BZ_RAND_DECLS;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
---
>       BZ_RAND_DECLS[6];
256,262c256
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
---
>       6];
256,262c256
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
---
>       Int32    ];
257,262d256
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
(92.8 %, 14668 bytes)
255,258c255
<       BZ_RAND_DECLS[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
---
>       BZ_RAND_DECLS[7];
255,258c255
<       BZ_RAND_DECLS[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
---
>       BZ_RAND_DECLS[7];
256,258d255
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
(92.9 %, 14586 bytes)
255,265c255
<       BZ_RAND_DECLS[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       BZ_RAND_DECLS;
255,266c255
<       BZ_RAND_DECLS[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       BZ_RAND_DECLS[UInt32   storedCombinedCRC;
255,266c255
<       BZ_RAND_DECLS[7];
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       BZ_RAND_DECLS[7storedCombinedCRC;
256,266d255
< 
<       
<       UInt32   tt;
< 
<       
<       UInt16   ll16;
<       UChar    ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
(92.9 %, 14468 bytes)
255,262c255
<       BZ_RAND_DECLS;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       BZ_RAND_DECLS[6];
256,262c256
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       6];
256,262c256
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
---
>       UInt32   ];
257,262d256
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
(93.0 %, 14308 bytes)
255,257c255
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
---
>       BZ_RAND_DECLS;
255,260c255
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       BZ_RAND_DECLS[UChar    mtfa   [MTFA_SIZE];
255,260c255
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       BZ_RAND_DECLS[6mtfa   [MTFA_SIZE];
255,260c255
<       BZ_RAND_DECLS[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       BZ_RAND_DECLS[6][MTFA_SIZE];
(93.0 %, 14248 bytes)
255,260c255
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_RAND_DECLSUChar    selector   [BZ_MAX_SELECTORS];
258,260c258
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       selector   [BZ_MAX_SELECTORS];
258,260c258
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    [BZ_MAX_SELECTORS];
258,260c258
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   BZ_MAX_SELECTORS];
258,260c258
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [];
258,260c258
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE;
258,261c258
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE]UChar    selectorMtf[BZ_MAX_SELECTORS];
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       selectorMtf[BZ_MAX_SELECTORS];
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    [BZ_MAX_SELECTORS];
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbaseBZ_MAX_SELECTORS];
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[];
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[6 ;
259,262c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259,262c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZElen  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259,262c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
260,262c260
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
260,262c260
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
260,262c260
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
(93.1 %, 14134 bytes)
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
259,262c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259,262c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPSbase   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259,262c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_N_GROUPS][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(93.1 %, 14045 bytes)
259,261c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
260,261c260
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
260,261c260
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
260,261c260
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   ;
(93.2 %, 13952 bytes)
259,264c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    mtfbase[6 / MTFL_SIZE];
259,265c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[6 / MTFL_SIZE][Int32    save_t;
259,265c259
<       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[6 / MTFL_SIZE][BZ_MAX_ALPHA_SIZEsave_t;
260,265d259
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
(93.2 %, 13842 bytes)
260,264d259
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
260,264d259
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
(93.3 %, 13702 bytes)
260,264d259
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
260,264d259
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
260,264d259
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
(93.4 %, 13555 bytes)
259,264c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
---
>       Int32    mtfbase[6 / MTFL_SIZE]; 
260,264d259
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
260,264d259
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
(93.4 %, 13434 bytes)
259,264c259
<       Int32    mtfbase[6 / MTFL_SIZE]; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
---
>       Int32    mtfbase[6 / MTFL_SIZE];
260,264d259
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32   save_gLimit;
(93.5 %, 13301 bytes)
259,271c259
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32    mtfbase[6 / MTFL_SIZE]->tPos = s->tt[s->tPos];                 \
260,271c260
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       tPos = s->tt[s->tPos];                 \
260,271c260
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   = s->tt[s->tPos];                 \
260,271c260
<       Int32   save_gBase;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   save_gBases->tt[s->tPos];                 \
261,271c261
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       ->tt[s->tPos];                 \
261,271c261
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   tt[s->tPos];                 \
261,271c261
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32   save_gPerm[s->tPos];                 \
263,271c263
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    s->tPos];                 \
264,271c264
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    ->tPos];                 \
264,271c264
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DStatetPos];                 \
270,271c270
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> ];                 \
270,271c270
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #;                 \
270,271c270
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define \
270,272c270
< #define BZ_GET_FASTcccc                     \
<     s->tPos = s->tt[s->tPos];                 \
<     c = UChars->tPos & 0xf;           \
---
> #define BZ_GET_FASTcccc                     c = UChars->tPos & 0xf;           \
(93.6 %, 13217 bytes)
270,272c270
< #define \
<     c = UChars->tPos & 0xf;           \
<     s->tPos >>= 8;
---
> #define ;
271,274c271
<     c = UChars->tPos & 0xf;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     #define BZ_GET_FAST_Ccccc                   \
271,274c271
<     c = UChars->tPos & 0xf;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     c define BZ_GET_FAST_Ccccc                   \
271,274c271
<     c = UChars->tPos & 0xf;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     c = BZ_GET_FAST_Ccccc                   \
271,274c271
<     c = UChars->tPos & 0xf;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Ccccc                   \
---
>     c = UChars\
(93.6 %, 13162 bytes)
271,273c271
<     c define BZ_GET_FAST_Ccccc                   \
<     c_tPos = c_tt[c_tPos];                    \
<     c = UCharc_tPos & 0xf;            \
---
>     c 0xf;            \
271,273c271
<     c define BZ_GET_FAST_Ccccc                   \
<     c_tPos = c_tt[c_tPos];                    \
<     c = UCharc_tPos & 0xf;            \
---
>     c define ;            \
(93.6 %, 13047 bytes)
271,277c271
<     c 0xf;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4i,n                                          \
<    
< 
< #define GET_LL4i                             \
---
>     c GET_LL4i                             \
271,277c271
<     c 0xf;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4i,n                                          \
<    
< 
< #define GET_LL4i                             \
---
>     c 0xf\
271,278c271
<     c 0xf;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4i,n                                          \
<    
< 
< #define GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>     c 0xf;            UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
(93.7 %, 12935 bytes)
271,272c271
<     c GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>     c & 0xF
271,272c271
<     c GET_LL4i                             \
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
---
>     c GET_LL4i                             0xF
272,274c272
<    UInt32s->ll4[i >> 1] >> i  2 & 0x4 & 0xF
< 
< #define SET_LLi,n                          \
---
>    #define SET_LLi,n                          \
(93.7 %, 12858 bytes)
271,277c271
<     c & 0xF
< 
< #define SET_LLi,n                          \
<    
< 
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
>     c [i] | GET_LL4i  6
271,277c271
<     c & 0xF
< 
< #define SET_LLi,n                          \
<    
< 
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
>     c & i] | GET_LL4i  6
273,277c273
< #define SET_LLi,n                          \
<    
< 
< #define GET_LLi \
<    UInt32s-ll16[i] | GET_LL4i  6
---
> ] | GET_LL4i  6
(93.8 %, 12768 bytes)
271,274c271
<     c [i] | GET_LL4i  6
< 
< #define BZ_GET_SMALLcccc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>     c tPos, s-cftab ;    \
271,274c271
<     c [i] | GET_LL4i  6
< 
< #define BZ_GET_SMALLcccc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>     c [, s-cftab ;    \
271,274c271
<     c [i] | GET_LL4i  6
< 
< #define BZ_GET_SMALLcccc                            \
<       c = BZ2_indexIntoF  s-tPos, s-cftab ;    \
---
>     c [is-cftab ;    \
(93.8 %, 12667 bytes)
271,279c271
<     c tPos, s-cftab ;    \
<       s-tPos = GET_LLs->tPos;
< 
< 
< 
< 
< 
< 
< extern Int32 
---
>     c extern Int32 
271,279c271
<     c tPos, s-cftab ;    \
<       s-tPos = GET_LLs->tPos;
< 
< 
< 
< 
< 
< 
< extern Int32 
---
>     c tPosInt32 
271,280c271
<     c tPos, s-cftab ;    \
<       s-tPos = GET_LLs->tPos;
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
>     c tPos, BZ2_decompress ( DState* );
(93.8 %, 12610 bytes)
271,304c271
<     c extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswapzz1, zz2 \
<    
< 
< #define fvswapzzp1, zzp2, zzn       \
---
>     c define fvswapzzp1, zzp2, zzn       \
271,304c271
<     c extern Int32 
< BZ2_decompress ( DState* );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswapzz1, zz2 \
<    
< 
< #define fvswapzzp1, zzp2, zzn       \
---
>     c extern fvswapzzp1, zzp2, zzn       \
(93.9 %, 12510 bytes)
271,275c271
<     c define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a  b ? a : b
---
>     c a : b
271,275c271
<     c define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a  b ? a : b
---
>     c define : b
271,275c271
<     c define fvswapzzp1, zzp2, zzn       \
< 
< 
< 
< #define fmina,b a  b ? a : b
---
>     c define fvswapzzp1b
(93.9 %, 12447 bytes)
271,277c271
<     c a : b
< 
< #define fpushlz,hz 
< 
< #define fpoplz,hz 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>     c FALLBACK_QSORT_SMALL_THRESH 0
271,277c271
<     c a : b
< 
< #define fpushlz,hz 
< 
< #define fpoplz,hz 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 0
---
>     c a 0
(94.0 %, 12391 bytes)
271,280c271
<     c FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
< #undef fswap
---
>     c #undef fswap
271,280c271
<     c FALLBACK_QSORT_SMALL_THRESH 0
< #define FALLBACK_QSORT_STACK_SIZE   0
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
< #undef fswap
---
>     c FALLBACK_QSORT_SMALL_THRESH undef fswap
(94.0 %, 12282 bytes)
271,280c271
<     c #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
>     c bhtab[zz > 5] |= 1  zz & 1
271,280c271
<     c #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
>     c #[zz > 5] |= 1  zz & 1
271,280c271
<     c #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BHzz  bhtab[zz > 5] |= 1  zz & 1
---
>     c #undef zz > 5] |= 1  zz & 1
(94.1 %, 12158 bytes)
271,272c271
<     c bhtab[zz > 5] |= 1  zz & 1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>     c [zz  5] &= ~1  zz & 1
271,272c271
<     c bhtab[zz > 5] |= 1  zz & 1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>     c bhtabzz  5] &= ~1  zz & 1
271,272c271
<     c bhtab[zz > 5] |= 1  zz & 1
< #define     CLEAR_BHzz  bhtab[zz  5] &= ~1  zz & 1
---
>     c bhtab[5] &= ~1  zz & 1
(94.1 %, 12102 bytes)
271,272c271
<     c [zz  5] &= ~1  zz & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
>     c zz  5] & 1  zz & 1
271,272c271
<     c [zz  5] &= ~1  zz & 1
< #define     ISSET_BHzz  bhtab[zz  5] & 1  zz & 1
---
>     c [5] & 1  zz & 1
(94.1 %, 12050 bytes)
271,272c271
<     c zz  5] & 1  zz & 1
< #define      WORD_BHzz  bhtab[zz  5]
---
>     c ]
271,273c271
<     c zz  5] & 1  zz & 1
< #define      WORD_BHzz  bhtab[zz  5]
< #define UNALIGNED_BHzz  zz & 0xf
---
>     c zz  #define UNALIGNED_BHzz  zz & 0xf
(94.1 %, 11996 bytes)
271,278c271
<     c ]
< #define UNALIGNED_BHzz  zz & 0xf
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
---
>     c ISSET_BH
272,278d271
< #define UNALIGNED_BHzz  zz & 0xf
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
(94.2 %, 11907 bytes)
271,299c271
<     c ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
---
>     c mvswapzzp1, zzp2, zzn       \
272,299c272
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
---
> , zzp2, zzn       \
272,299c272
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
---
> #zzp2, zzn       \
272,299c272
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
---
> #undef      , zzn       \
273,299c273
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
---
> zzn       \
273,299c273
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
---
> #\
(94.2 %, 11799 bytes)
271,276c271
<     c mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
>     c a : b
271,276c271
<     c mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < b ? a : b
---
>     c mvswapzzp1: b
(94.3 %, 11741 bytes)
271,275c271
<     c a : b
< 
< #define mpushlz,hz,dz 
< 
< #define mpoplz,hz,dz 
---
>     c ,dz 
271,275c271
<     c a : b
< 
< #define mpushlz,hz,dz 
< 
< #define mpoplz,hz,dz 
---
>     c a dz 
271,278c271
<     c a : b
< 
< #define mpushlz,hz,dz 
< 
< #define mpoplz,hz,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
---
>     c a : #define mnextsizeaz nextHi[az]-nextLo[az]
(94.3 %, 11693 bytes)
271,276c271
<     c ,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
---
>     c define mnextswapaz,bz                                        \
271,276c271
<     c ,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
---
>     c ,mnextswapaz,bz                                        \
274,276c274
< #define mnextsizeaz nextHi[az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
---
> ,bz                                        \
(94.3 %, 11642 bytes)
271,277c271
<     c define mnextswapaz,bz                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 0
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
>     c #define MAIN_QSORT_STACK_SIZE 0
271,277c271
<     c define mnextswapaz,bz                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 0
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
>     c define define MAIN_QSORT_STACK_SIZE 0
(94.4 %, 11483 bytes)
271,278c271
<     c #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
>     c mpop
271,279c271
<     c #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
---
>     c ##undef mmin
271,279c271
<     c #define MAIN_QSORT_STACK_SIZE 0
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
---
>     c #define undef mmin
(94.4 %, 11401 bytes)
271,276c271
<     c mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>     c MAIN_QSORT_DEPTH_THRESH
272,276d271
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
(94.5 %, 11312 bytes)
271,278c271
<     c MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
>     c - ftab[b << 8]
272,278c272
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
> ftab[b << 8]
272,278c272
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
> #[b << 8]
272,278c272
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 < 8] - ftab[b << 8]
---
> #undef b << 8]
(94.5 %, 11223 bytes)
271,273c271
<     c - ftab[b << 8]
< #define SETMASK 1  1
< #define CLEARMASK ~SETMASK
---
>     c ~SETMASK
271,273c271
<     c - ftab[b << 8]
< #define SETMASK 1  1
< #define CLEARMASK ~SETMASK
---
>     c - SETMASK
(94.6 %, 11169 bytes)
271,296c271
<     c ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOFzz0  zz0 & 0x0
---
>     c & 0x0
271,296c271
<     c ~SETMASK
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOFzz0  zz0 & 0x0
---
>     c ~0x0
275,296d274
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOFzz0  zz0 & 0x0
(94.6 %, 11067 bytes)
271,273c271
<     c & 0x0
< #define DEPTHOFzz1   zz1 & 0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>     c ? zz2 : zz3
271,273c271
<     c & 0x0
< #define DEPTHOFzz1   zz1 & 0xf
< #define MYMAXzz2,zz3 zz2  zz3 ? zz2 : zz3
---
>     c & zz2 : zz3
(94.6 %, 11000 bytes)
271,275c271
<     c ? zz2 : zz3
< 
< #define ADDWEIGHTSzw1,zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>     c 1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
271,275c271
<     c ? zz2 : zz3
< 
< #define ADDWEIGHTSzw1,zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
---
>     c ? + MYMAXDEPTHOFzw1,DEPTHOFzw2
(94.7 %, 10880 bytes)
271,344c271
<     c 1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
< 
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
---
>     c bsNEEDWnz                           \
271,344c271
<     c 1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
< 
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDWnz                           \
---
>     c 1 \
(94.8 %, 10663 bytes)
271,299c271
<     c bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< ;
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>     c EState* s )
271,299c271
<     c bsNEEDWnz                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< ;
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>     c bsNEEDWnz                           * s )
292,299c292
< static
< void makeMaps_e ( EState* s )
< ;
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
> s )
(94.9 %, 10531 bytes)
271,301c271
<     c EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURNrrr                               \
---
>     c RETURNrrr                               \
271,301c271
<     c EState* s )
< ;
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURNrrr                               \
---
>     c EState\
(94.9 %, 10429 bytes)
271,275c271
<     c RETURNrrr                               \
<    ;
< 
< #define GET_BITSlll,vvv,nnn                     \
<    case lll: s-state = lll;                      \
---
>     c -state = lll;                      \
271,275c271
<     c RETURNrrr                               \
<    ;
< 
< #define GET_BITSlll,vvv,nnn                     \
<    case lll: s-state = lll;                      \
---
>     c RETURNrrr                               state = lll;                      \
(95.0 %, 10317 bytes)
271,275c271
<     c -state = lll;                      \
<    while True 
< 
< #define GET_UCHARlll,uuu                        \
<    GET_BITSlll,uuu,8
---
>     c ,uuu,8
271,275c271
<     c -state = lll;                      \
<    while True 
< 
< #define GET_UCHARlll,uuu                        \
<    GET_BITSlll,uuu,8
---
>     c -uuu,8
271,275c271
<     c -state = lll;                      \
<    while True 
< 
< #define GET_UCHARlll,uuu                        \
<    GET_BITSlll,uuu,8
---
>     c -state ,8
(95.0 %, 10200 bytes)
271,277c271
<     c ,uuu,8
< 
< #define GET_BITlll,uuu                          \
<    GET_BITSlll,uuu,1
< 
< 
< #define GET_MTF_VALlabel1,label2,lval           \
---
>     c #define GET_MTF_VALlabel1,label2,lval           \
271,277c271
<     c ,uuu,8
< 
< #define GET_BITlll,uuu                          \
<    GET_BITSlll,uuu,1
< 
< 
< #define GET_MTF_VALlabel1,label2,lval           \
---
>     c ,define GET_MTF_VALlabel1,label2,lval           \
(95.1 %, 10119 bytes)
271,277c271
<     c #define GET_MTF_VALlabel1,label2,lval           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
---
>     c ;
271,295c271
<     c #define GET_MTF_VALlabel1,label2,lval           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
>     c #void BZ2_bz__AssertH__fail ( int errcode )
(95.1 %, 10030 bytes)
271,300c271
<     c ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
---
>     c static
289,300d288
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
289,301c289
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void * default_bzalloc ( void* opaque, Int32 items, Int32 size )
(95.2 %, 9925 bytes)
271,273c271
<     c static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
>     c ;
272,274d271
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
(95.2 %, 9854 bytes)
271,280c271
<     c ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
>     c void prepare_new_block ( EState* s )
273,280c273
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> prepare_new_block ( EState* s )
274,280c274
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> ( EState* s )
(95.2 %, 9783 bytes)
271,277c271
<     c void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
---
>     c )
271,278c271
<     c void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
---
>     c void ;
(95.3 %, 9709 bytes)
271,282c271
<     c )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
>     c * strm, 
272,282c272
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> strm, 
275,282c275
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
---
> , 
276,283c276
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int        blockSize100k,
276,283c276
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool blockSize100k,
276,283c276
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ,
276,284c276
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> Bool isempty_RL ( int        verbosity,
276,284c276
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> Bool isempty_RL ( EStateverbosity,
276,284c276
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressInit 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> Bool isempty_RL ( EState* ,
(95.3 %, 9554 bytes)
276,304c276
< Bool isempty_RL ( int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> Bool isempty_RL ( handle_compress ( bz_stream* strm )
276,304c276
< Bool isempty_RL ( int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> Bool isempty_RL ( int        ( bz_stream* strm )
276,304c276
< Bool isempty_RL ( int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> Bool isempty_RL ( int        verbositybz_stream* strm )
277,304c277
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>                      * strm )
277,304c277
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>                      int        strm )
282,308d281
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
282,308d281
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
(95.4 %, 9425 bytes)
277,287c277
<                      int        strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>                      int        BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
277,287c277
<                      int        strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
>                      int        strm ( bz_stream *strm )
278,287c278
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> bz_stream *strm )
282,287c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> *strm )
282,287c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int strm )
282,287c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompress )
282,288c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
---
> int BZ_APIBZ2_bzCompress ( ;
282,296c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
---
> int BZ_APIBZ2_bzCompress ( bz_stream int BZ_APIBZ2_bzDecompressInit 
282,296c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
---
> int BZ_APIBZ2_bzCompress ( bz_stream *BZ_APIBZ2_bzDecompressInit 
282,297c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm( bz_stream* strm, 
282,297c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, bz_stream* strm, 
282,297c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int * strm, 
282,297c282
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action strm, 
283,297c283
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> , 
287,298c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int        verbosity,
287,298c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int verbosity,
287,298c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_APIBZ2_bzCompressEnd  ,
287,299c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIBZ2_bzCompressEnd  ( int        small )
287,299c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream small )
287,299c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
287,300c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm ;
288,303d287
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
296,304d295
< int BZ_APIBZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< static
(95.5 %, 9251 bytes)
287,304c287
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *DState* s )
288,304c288
< ;
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> * s )
292,304c292
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> s )
293,304c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> )
293,305c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> void ;
293,309c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
293,309c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( BZ_APIBZ2_bzDecompress ( bz_stream *strm )
293,309c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( DState( bz_stream *strm )
293,309c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( DState* bz_stream *strm )
293,309c293
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( DState* s *strm )
294,309c294
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> strm )
(95.5 %, 9148 bytes)
293,302c293
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> void )
297,302d296
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
297,310c297
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
> int #define BZ_SETERReee                    \
297,310c297
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
> int BZ_APIBZ2_bzDecompress define BZ_SETERReee                    \
297,310c297
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
> int BZ_APIBZ2_bzDecompress ( BZ_SETERReee                    \
297,310c297
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
> int BZ_APIBZ2_bzDecompress ( bz_stream \
297,313c297
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *typedef 
297,314c297
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm struct {
(95.6 %, 9045 bytes)
297,310c297
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ];
304,310c304
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ;
304,311c304
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #Int32     bufN;
304,311c304
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define bufN;
304,311c304
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define BZ_SETERReee                    ;
307,312c307
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
> Bool      writing;
308,312c308
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    writing;
308,312c308
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    struct ;
309,312d308
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
309,313c309
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE     strm;
310,313d309
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
310,313d309
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
310,314c310
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      lastErr;
310,314c310
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf;
310,315c310
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Char      buf[Bool      initialisedOk;
310,315c310
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Char      buf[BZ_MAX_UNUSEDinitialisedOk;
311,315d310
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
311,316c311
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
311,317c311
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Int32     bzFile;
312,317d311
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
312,325c312
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>       BZFILE* BZ_APIBZ2_bzWriteOpen 
312,325c312
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>       Bool      * BZ_APIBZ2_bzWriteOpen 
312,325c312
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>       Bool      writingBZ_APIBZ2_bzWriteOpen 
313,326c313
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
313,326c313
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       bz_stream int*  bzerror,      
313,326c313
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       bz_stream strm*  bzerror,      
314,326c314
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       bzerror,      
314,326c314
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       Int32     ,      
314,327c314
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Int32     lastErrFILE* f, 
315,327c315
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       * f, 
315,327c315
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      f, 
315,327c315
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      initialisedOk, 
316,328c316
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    int   blockSize100k, 
317,328c317
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    blockSize100k, 
317,328c317
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    bzFile, 
325,329c325
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> int   verbosity,
325,329c325
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILEverbosity,
325,329c325
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* ,
326,330c326
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     int   workFactor )
326,330c326
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( workFactor )
326,330c326
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int)
326,331c326
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                     ( int*  ;
326,336c326
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                     ( int*  bzerrorvoid BZ_APIBZ2_bzWrite
327,336c327
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       BZ_APIBZ2_bzWrite
327,337c327
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       FILE( int*    bzerror, 
327,337c327
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       FILE* int*    bzerror, 
327,337c327
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       FILE* f*    bzerror, 
328,337c328
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       bzerror, 
328,337c328
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   , 
328,338c328
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   blockSize100kBZFILE* b, 
329,338c329
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       * b, 
329,338c329
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   b, 
329,338c329
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   verbosity, 
330,339c330
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>                       void*   buf, 
330,339c330
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>                       int   *   buf, 
330,339c330
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>                       int   workFactor buf, 
331,339c331
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> , 
336,340c336
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> int     len )
336,340c336
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void len )
337,340c337
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              )
337,341c337
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>              ( ;
337,345c337
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>              ( intvoid BZ_APIBZ2_bzWriteClose
337,345c337
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>              ( int*    BZ_APIBZ2_bzWriteClose
337,346c337
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>              ( int*    bzerror( int*          bzerror, 
338,346c338
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int*          bzerror, 
338,346c338
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                BZFILE*          bzerror, 
338,346c338
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                BZFILE* bzerror, 
339,346d338
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
339,347c339
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                BZFILE*       b, 
339,347c339
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                void*       b, 
339,347c339
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                void*   b, 
340,347d339
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
340,348c340
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                int           abandon,
340,348c340
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                int     abandon,
340,348c340
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                int     len ,
341,349c341
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> unsigned int* nbytes_in,
345,349c345
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> int* nbytes_in,
345,349c345
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void * nbytes_in,
346,349c346
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   nbytes_in,
346,349c346
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( ,
346,350c346
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( intunsigned int* nbytes_out )
346,350c346
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          int* nbytes_out )
346,350c346
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerror* nbytes_out )
347,350c347
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
347,350c347
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE)
347,351c347
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     BZFILE*       ;
347,354c347
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     BZFILE*       bvoid BZ_APIBZ2_bzWriteClose64
348,354c348
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     BZ_APIBZ2_bzWriteClose64
348,355c348
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     int           ( int*          bzerror, 
348,355c348
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     int           abandonint*          bzerror, 
349,355c349
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     *          bzerror, 
349,355c349
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned bzerror, 
349,355c349
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int, 
349,356c349
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* BZFILE*       b, 
349,356c349
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_in*       b, 
350,356c350
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     b, 
350,356c350
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned , 
350,357c350
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     unsigned intint           abandon,
350,357c350
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     unsigned int* abandon,
350,357c350
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     unsigned int* nbytes_out ,
351,358c351
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> unsigned int* nbytes_in_lo32,
354,358c354
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> int* nbytes_in_lo32,
354,358c354
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void * nbytes_in_lo32,
355,358c355
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   nbytes_in_lo32,
355,358c355
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( ,
355,359c355
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( intunsigned int* nbytes_in_hi32,
355,359c355
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          int* nbytes_in_hi32,
355,359c355
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
356,359c356
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
356,359c356
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE,
356,360c356
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       unsigned int* nbytes_out_lo32,
356,360c356
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       bint* nbytes_out_lo32,
357,360c357
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
357,360c357
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           nbytes_out_lo32,
358,360d357
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
358,360d357
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
358,360d357
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
358,360d357
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
358,360d357
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
358,361c358
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32)
359,362c359
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     ;
359,366c359
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned BZFILE* BZ_APIBZ2_bzReadOpen 
359,366c359
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZ_APIBZ2_bzReadOpen 
359,366c359
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZ_APIBZ2_bzReadOpen 
359,367c359
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_in_hi32( int*  bzerror, 
360,367c360
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
360,367c360
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned *  bzerror, 
360,367c360
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned intbzerror, 
360,367c360
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* , 
360,368c360
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* nbytes_out_lo32FILE* f, 
361,368c361
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     * f, 
361,368c361
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned f, 
361,368c361
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int, 
361,369c361
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                     unsigned int* int   verbosity,
361,369c361
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                     unsigned int* nbytes_out_hi32 verbosity,
362,369c362
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> ,
366,370c366
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> int   small,
366,370c366
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILEsmall,
366,370c366
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* ,
367,371c367
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    void* unused,
367,371c367
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( * unused,
367,371c367
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intunused,
367,371c367
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  ,
367,372c367
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    ( int*  bzerrorint   nUnused )
368,372c368
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
368,372c368
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE)
368,373c368
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      FILE* ;
368,377c368
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      FILE* fvoid BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
369,377c369
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
369,377c369
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   ( int *bzerror, BZFILE *b )
369,377c369
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   verbosityint *bzerror, BZFILE *b )
370,377c370
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      *bzerror, BZFILE *b )
370,377c370
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   bzerror, BZFILE *b )
370,377c370
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   small, BZFILE *b )
371,377c371
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      BZFILE *b )
371,377c371
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void*b )
371,377c371
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* b )
371,377c371
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* unused)
372,378c372
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
---
>                      ;
372,382c372
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      int   int BZ_APIBZ2_bzRead 
372,382c372
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      int   nUnused BZ_APIBZ2_bzRead 
373,383c373
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
377,383c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> int*    bzerror, 
377,383c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void *    bzerror, 
377,383c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose bzerror, 
377,383c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( , 
377,384c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int BZFILE* b, 
377,384c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int ** b, 
377,384c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerrorb, 
377,384c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, , 
377,385c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE void*   buf, 
377,385c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE **   buf, 
377,385c377
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b buf, 
378,385c378
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> , 
382,386c382
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int     len )
382,386c382
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int len )
383,386c383
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            )
383,387c383
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( {
383,389c383
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( intbzFile* bzf = (bzFile*)b;
383,389c383
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    * bzf = (bzFile*)b;
383,389c383
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzf = (bzFile*)b;
384,389c384
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              = (bzFile*)b;
384,389c384
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE(bzFile*)b;
384,389c384
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzFile*)b;
384,389c384
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b*)b;
385,389c385
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              )b;
385,389c385
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidb;
385,389c385
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   ;
385,391c385
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              void*   bufBZ_SETERR(BZ_OK);
386,391c386
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              (BZ_OK);
386,391c386
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     BZ_OK);
386,391c386
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     len );
387,391c387
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> ;
389,392d388
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile(bzf == NULL || buf == NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = NULL || buf == NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (|| buf == NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFilebuf == NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*== NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)NULL || len < 0)
389,393c389
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b|| len < 0)
391,393c391
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    len < 0)
391,393c391
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR< 0)
391,393c391
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(0)
391,393c391
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)
393,395d392
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
(95.6 %, 8993 bytes)
391,397c391
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR()
391,398c391
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
---
>    BZ_SETERR(0;
392,400c392
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>       bzf->strm.avail_out = len;
394,400c394
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    ->strm.avail_out = len;
394,400c394
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    if strm.avail_out = len;
394,400c394
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    if (.avail_out = len;
394,400c394
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    if (bzfavail_out = len;
(95.6 %, 8936 bytes)
391,395c391
<    BZ_SETERR()
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(= buf;
392,395c392
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>       buf;
394,395c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    ;
394,397c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzfwhile (True) 
394,397c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->(True) 
394,397c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strmTrue) 
394,397c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.) 
394,399c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    bzf->strm.avail_out return 0; 
394,399c394
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    bzf->strm.avail_out = 0; 
(95.7 %, 8882 bytes)
394,404c394
<    ;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    , 
396,405c396
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    BZFILE* b, 
396,405c396
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    while * b, 
396,405c396
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    while (b, 
396,405c396
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    while (True, 
398,406c398
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>    void**  unused, 
398,406c398
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>    return **  unused, 
398,406c398
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>    return 0*  unused, 
399,406c399
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> unused, 
403,406c403
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> , 
403,407c403
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
> void int*    nUnused )
404,407c404
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      *    nUnused )
404,407c404
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( nUnused )
404,407c404
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int)
404,408c404
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                      ( int*    ;
404,416c404
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                      ( int*    bzerrorint BZ_APIBZ2_bzBuffToBuffCompress 
405,416c405
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        BZ_APIBZ2_bzBuffToBuffCompress 
405,417c405
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        BZFILE( char*         dest, 
405,417c405
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        BZFILE* char*         dest, 
405,417c405
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        BZFILE* b*         dest, 
406,417c406
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        dest, 
406,417c406
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void, 
406,418c406
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        void*unsigned int* destLen,
406,418c406
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        void**  int* destLen,
406,418c406
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        void**  unused* destLen,
407,418c407
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        destLen,
407,418c407
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int,
407,419c407
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                        int*    char*         source, 
407,419c407
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                        int*    nUnused *         source, 
408,419c408
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> source, 
416,419c416
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> , 
416,420c416
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
> int unsigned int  sourceLen,
417,420c417
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          int  sourceLen,
417,420c417
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( sourceLen,
417,420c417
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char,
417,421c417
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         int           blockSize100k, 
417,421c417
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         destblockSize100k, 
418,421c418
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
418,422c418
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
418,422c418
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned intverbosity, 
418,422c418
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* , 
418,423c418
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int* destLenint           workFactor )
419,423c419
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
419,423c419
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char)
419,424c419
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            char*         ;
419,428c419
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            char*         sourceint BZ_APIBZ2_bzBuffToBuffDecompress 
420,428c420
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            BZ_APIBZ2_bzBuffToBuffDecompress 
420,429c420
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned ( char*         dest, 
420,429c420
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned int  char*         dest, 
420,429c420
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned int  sourceLen*         dest, 
421,429c421
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            dest, 
421,429c421
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           , 
421,430c421
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           blockSize100kunsigned int* destLen,
422,430c422
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
422,430c422
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           * destLen,
422,430c422
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           verbositydestLen,
423,430c423
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
423,431c423
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            int           char*         source, 
423,431c423
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            int           workFactor *         source, 
424,431c424
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> source, 
428,431c428
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> , 
428,432c428
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
> int unsigned int  sourceLen,
429,432c429
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            int  sourceLen,
429,432c429
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( sourceLen,
429,432c429
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char,
429,433c429
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         int           small,
429,433c429
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         destsmall,
430,433c430
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
430,434c430
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
430,434c430
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned intverbosity )
430,434c430
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* )
430,435c430
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int* destLen;
431,449c431
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>                              static
431,450c431
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              charBZFILE * bzopen_or_bzdopen
431,450c431
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              char*         * bzopen_or_bzdopen
431,450c431
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              char*         sourcebzopen_or_bzdopen
432,451c432
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              ( const char *path,   
432,451c432
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              unsigned const char *path,   
432,451c432
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              unsigned int  char *path,   
432,451c432
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              unsigned int  sourceLen*path,   
433,451c433
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              path,   
433,451c433
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>                              int           ,   
433,452c433
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
---
>                              int           smallint d,             
434,452c434
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
---
>                              d,             
434,452c434
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
---
>                              int           ,             
434,453c434
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
>                              int           verbosity const char *mode,
435,453c435
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> char *mode,
449,453c449
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> *mode,
450,453c450
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> mode,
450,453c450
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
---
> BZFILE ,
450,454c450
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
> BZFILE * int open_mode)      
451,454c451
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
>                open_mode)      
451,454c451
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( )      
451,455c451
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const ;
451,460c451
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
---
>                ( const char BZFILE * BZ_APIBZ2_bzopen
451,460c451
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
---
>                ( const char ** BZ_APIBZ2_bzopen
451,460c451
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
---
>                ( const char *pathBZ_APIBZ2_bzopen
452,461c452
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>                  ( const char *path,
452,461c452
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
---
>                  int const char *path,
(95.7 %, 8759 bytes)
451,459c451
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
---
>                ( )
456,463d455
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
457,463d456
< BZFILE * BZ_APIBZ2_bzopen
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
(95.8 %, 8650 bytes)
451,463c451
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
452,463c452
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
456,463c456
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> (BZFILE* b, void* buf, int len )
456,463c456
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> BZFILE BZFILE* b, void* buf, int len )
456,463c456
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> BZFILE * * b, void* buf, int len )
457,463c457
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                b, void* buf, int len )
457,463c457
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( , void* buf, int len )
457,463c457
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( int void* buf, int len )
457,463c457
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( int d* buf, int len )
458,463c458
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  buf, int len )
458,463c458
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const , int len )
458,463c458
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char int len )
458,463c458
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                  const char *len )
459,463d458
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
459,463d458
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
463,465c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int bzerr, nread;
463,465c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int bzerr, nread;
463,465c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread , nread;
463,465c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (nread;
463,465c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (BZFILE;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf*)b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, )b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int b)->lastErr == BZ_STREAM_END) return 0;
463,466c463
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )->lastErr == BZ_STREAM_END) return 0;
464,466c464
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> ->lastErr == BZ_STREAM_END) return 0;
465,466c465
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    lastErr == BZ_STREAM_END) return 0;
465,466c465
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int == BZ_STREAM_END) return 0;
465,466c465
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrBZ_STREAM_END) return 0;
465,466c465
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ) return 0;
465,466c465
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadreturn 0;
466c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    0;
466c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ;
466,467c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (nread = 0;
466,467c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if ((= 0;
466,467c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((0;
466,467c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile;
466,468c466
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
(95.8 %, 8599 bytes)
466,468c466
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
466,468c466
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0; else ;
467,468c467
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    else ;
467,468c467
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread ;
467,469c467
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    nread = }
467,473c467
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    nread = 0int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (BZFILE* b, void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (BZFILE* b, void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr * b, void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == b, void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK , void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || void* buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr * buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == buf, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END, int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) int len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; len )
468,473c468
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else )
469,473d468
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
473,477d472
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
473,477d472
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
(95.8 %, 8539 bytes)
473,478d472
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
473,487c473
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
473,487c473
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
473,487c473
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (* BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
473,487c473
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (BZFILE BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
473,487c473
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (BZFILE *(BZFILE *b, int *errnum)
473,487c473
< int BZ_APIBZ2_bzflush (BZFILE *b)
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> int BZ_APIBZ2_bzflush (BZFILE *bBZFILE *b, int *errnum)
474,487c474
< ;
< 
< 
< 
< void BZ_APIBZ2_bzclose (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> *b, int *errnum)
(95.9 %, 8465 bytes)
473,510d472
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
481,511c481
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> define BZ_UNIX      1
481,511c481
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const BZ_UNIX      1
481,511c481
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char 1
481,514c481
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * #define BZ_LCCWIN32  0
481,514c481
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_APIBZ2_bzerror define BZ_LCCWIN32  0
481,514c481
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> const char * BZ_APIBZ2_bzerror (BZ_LCCWIN32  0
(95.9 %, 8370 bytes)
473,482d472
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
473,482d472
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
473,483c473
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define <errno.h>
(96.0 %, 8297 bytes)
473,477c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
---
> ERROR_IF_MINUS_ONEi 
473,483c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> ##if BZ_UNIX
473,483c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #include if BZ_UNIX
473,483c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #include <BZ_UNIX
473,484c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <errno#   include <fcntl.h>
473,484c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <errno.include <fcntl.h>
473,484c473
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <errno.h<fcntl.h>
475,484c475
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> fcntl.h>
475,484c475
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #.h>
475,484c475
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define h>
476,484c476
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> >
476,485c476
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> ##   include <utime.h>
476,485c476
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define include <utime.h>
477,485c477
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> <utime.h>
477,485c477
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #utime.h>
477,485c477
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define .h>
483,485c483
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> h>
483,485c483
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #>
483,487c483
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #if #   define PATH_SEP    '/'
484,487c484
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> define PATH_SEP    '/'
484,487c484
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   PATH_SEP    '/'
(96.0 %, 8248 bytes)
484,487d483
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
484,488c484
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define define MY_S_ISDIR  S_ISDIR
484,488c484
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define PATH_SEP    MY_S_ISDIR  S_ISDIR
(96.0 %, 8137 bytes)
484,488d483
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
484,488d483
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
(96.1 %, 8033 bytes)
484,489c484
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEfd 
< 
< #      define NORETURN 
---
> define NORETURN 
484,489c484
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEfd 
< 
< #      define NORETURN 
---
> #   NORETURN 
484,491c484
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEfd 
< 
< #      define NORETURN 
< 
< #endif 
---
> #   define #endif 
(96.1 %, 7927 bytes)
484,497c484
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> ;
484,511c484
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> define #define SM_I2O           1
486,511c486
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> define SM_I2O           1
486,511c486
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #SM_I2O           1
493,511c493
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> 1
493,512c493
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> ##define SM_F2O           2
493,512c493
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define define SM_F2O           2
493,512c493
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define True  SM_F2O           2
494,512c494
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> 2
494,513c494
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> ##define SM_F2F           3
494,513c494
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define define SM_F2F           3
494,513c494
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False SM_F2F           3
497,513c497
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> 3
497,516c497
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef #define OM_Z             1
497,516c497
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int define OM_Z             1
497,516c497
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int IntNativeOM_Z             1
511,516c511
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> 1
511,517c511
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> ##define OM_UNZ           2
511,517c511
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define define OM_UNZ           2
511,517c511
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_I2O           OM_UNZ           2
(96.2 %, 7824 bytes)
511,674c511
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define #if BZ_UNIX
511,674c511
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define define if BZ_UNIX
511,674c511
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define define OM_UNZ           BZ_UNIX
512,675d511
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
512,675d511
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
512,689c512
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define #define BZ_N_SUFFIX_PAIRS 4
512,689c512
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
517,689c517
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> BZ_N_SUFFIX_PAIRS 4
517,689c517
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #4
(96.3 %, 7577 bytes)
512,571c512
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    ell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAGs strcmpaa-name, s==0
---
> #define OM_TEST          s==0
512,571c512
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    ell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAGs strcmpaa-name, s==0
---
> #define OM_TEST          define ==0
(96.4 %, 7432 bytes)
512,515c512
< #define OM_TEST          s==0
< 
< IntNative main ( IntNative argc, Char *argv[] )
< ;
---
> #define OM_TEST          ;
512,520c512
< #define OM_TEST          s==0
< 
< IntNative main ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          s
\ No newline at end of file
(96.4 %, 7378 bytes)
512,517c512
< #define OM_TEST          ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          
\ No newline at end of file
(96.4 %, 7371 bytes)
===< pass_clex :: rm-toks-10 >===
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> BZ_FLUSH_OK          2
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #2
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define #define BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                define BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> BZ_FINISH_OK         3
10,12c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #3
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define #define BZ_STREAM_END        9
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #define BZ_RUN_OK            define BZ_STREAM_END        9
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> BZ_STREAM_END        9
11,13c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
---
> #9
11,15c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define typedef 
11,16c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #define BZ_FLUSH_OK          struct {
(96.4 %, 7281 bytes)
10,15c10
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char *next_out;
---
> #next_out;
11,15c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char *next_out;
---
> ;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char *next_out;
<       unsigned int avail_out;
---
> #unsigned int avail_out;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char *next_out;
<       unsigned int avail_out;
---
> #define int avail_out;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char *next_out;
<       unsigned int avail_out;
---
> #define BZ_STREAM_END        avail_out;
13,16c13
< typedef 
<    struct {
<       char *next_out;
<       unsigned int avail_out;
---
> ;
14,17c14
<    struct {
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>    unsigned int total_out_lo32;
14,17c14
<    struct {
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>    struct int total_out_lo32;
15,17c15
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       total_out_lo32;
15,17c15
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char ;
15,18c15
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *unsigned int total_out_hi32;
15,18c15
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *next_outint total_out_hi32;
16,18c16
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       total_out_hi32;
16,18c16
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned ;
(96.5 %, 7207 bytes)
16,19d15
<       unsigned int total_out_hi32;
< 
<       void *state;
<       void ;
16,20c16
<       unsigned int total_out_hi32;
< 
<       void *state;
<       void ;
<    } 
---
>       } 
16,21c16
<       unsigned int total_out_hi32;
< 
<       void *state;
<       void ;
<    } 
<    bz_stream;
---
>       unsigned bz_stream;
(96.5 %, 7139 bytes)
15,21c15
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       char >
16,23c16
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamBZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> (func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include ) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <func
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio#   define BZ_EXTERN extern
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.define BZ_EXTERN extern
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hBZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> extern
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define int BZ_APIBZ2_bzCompressEnd ( 
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define BZ_APIBZ_APIBZ2_bzCompressEnd ( 
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> #   define BZ_API(( 
23,30c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
---
> #   define BZ_API(funcbz_stream* small
23,30c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
---
> #   define BZ_API(func) * small
24,30c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
---
> small
24,31c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
---
> #   );
24,31c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
---
> #   define ;
24,33c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
< 
< BZ_EXTERN int ;
---
> #   define BZ_EXTERN BZ_EXTERN int ;
29,33c29
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
< 
< BZ_EXTERN int ;
---
> int ;
29,33c29
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       bz_stream* small
<    );
< 
< BZ_EXTERN int ;
---
> BZ_EXTERN ;
(96.6 %, 7058 bytes)
29,38d28
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
29,39c29
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> int BZFILE* BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> * BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define ( 
35,40c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED int*  bzerror,   
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> *  bzerror,   
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef bzerror,   
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void ,   
37,41c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEFILE* f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> * f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
39,42c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* int   verbosity, 
39,42c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen verbosity, 
40,42c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       , 
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       intint   small,
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  small,
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerror,
41,43d40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
41,44c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* unused,    
41,44c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* unused,    
41,44c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* f,    
42,44d41
<       int   verbosity, 
<       int   small,
<       void* unused,    
42,44d41
<       int   verbosity, 
<       int   small,
<       void* unused,    
42,46c42
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   verbosity);
43,46c43
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
43,48c43
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
43,48c43
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       int   smallvoid BZ_APIBZ2_bzReadClose ( 
44,48c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       BZ_APIBZ2_bzReadClose ( 
44,48c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
>       void( 
44,49c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       void* int*    bzerror, 
44,49c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       void* unused*    bzerror, 
45,49c45
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       bzerror, 
45,49c45
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
---
>       int   , 
46,50c46
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    BZFILE* b 
46,50c46
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    )* b 
48,50c48
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> b 
48,51c48
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN );
48,51c48
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void ;
48,53c48
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
49,53c49
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void BZ_APIBZ2_bzReadGetUnused ( 
49,53c49
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       intBZ_APIBZ2_bzReadGetUnused ( 
49,53c49
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       int*    ( 
49,54c49
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       int*    bzerrorint*    bzerror, 
50,54c50
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       *    bzerror, 
(96.6 %, 6988 bytes)
48,52c48
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void * b, 
50,52c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
50,52c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
50,53c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void void**  unused,  
50,53c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused **  unused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       intunused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    ,  
51,54c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerrorint*    nUnused 
52,54c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
52,54c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILEnUnused 
52,55c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* );
52,55c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b;
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       BZ_EXTERN int BZ_APIBZ2_bzRead ( 
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       voidint BZ_APIBZ2_bzRead ( 
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void*BZ_APIBZ2_bzRead ( 
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  ( 
53,58c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       void**  unusedint*    bzerror, 
54,58c54
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       *    bzerror, 
54,58c54
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       intbzerror, 
54,58c54
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       int*    , 
55,59c55
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    BZFILE* b, 
55,59c55
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )* b, 
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int void*   buf, 
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead *   buf, 
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int, 
58,61c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    int     len 
58,61c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorlen 
59,62c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       );
59,62c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE;
59,64c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
59,64c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* bBZFILE* BZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       * BZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       voidBZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   ( 
60,65c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       void*   bufint*  bzerror,      
61,65c61
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       *  bzerror,      
61,65c61
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       int     bzerror,      
62,65c62
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    ,      
62,66c62
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )FILE* f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> * f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
64,67c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* int   blockSize100k, 
64,67c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen blockSize100k, 
65,67c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
65,68c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       intint   verbosity, 
65,68c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  verbosity, 
65,68c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerror, 
66,68d65
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
66,69c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEworkFactor 
66,70c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* );
66,70c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f;
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   void BZ_APIBZ2_bzWrite ( 
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   blockSize100kBZ_APIBZ2_bzWrite ( 
68,72c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       ( 
68,73c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   int*    bzerror, 
68,73c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   verbosity*    bzerror, 
69,73c69
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       bzerror, 
69,73c69
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   , 
70,74c70
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    BZFILE* b, 
70,74c70
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )* b, 
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
72,75c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void void*   buf, 
72,75c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite *   buf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int, 
73,76c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    int     len 
73,76c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorlen 
74,77c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       );
74,77c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE;
74,79c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILE* BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
74,79c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILE* bvoid BZ_APIBZ2_bzWriteClose ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZ_APIBZ2_bzWriteClose ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void( 
75,80c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       void*   int*          bzerror, 
75,80c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       void*   buf*          bzerror, 
76,80c76
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       bzerror, 
76,80c76
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       int     , 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose abandon, 
80,82c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intunsigned int* nbytes_in, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          int* nbytes_in, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerror* nbytes_in, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       nbytes_in, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE, 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       unsigned int* nbytes_out 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bint* nbytes_out 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       * nbytes_out 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           nbytes_out 
82,85c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           abandon);
83,85c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       ;
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned intvoid BZ_APIBZ2_bzWriteClose64 ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* BZ_APIBZ2_bzWriteClose64 ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* nbytes_in( 
84,87d83
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* , 
85,89c85
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
85,89c85
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
87,89c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
87,89c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
87,90c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
87,90c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 abandon, 
88,90c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intunsigned int* nbytes_in_lo32, 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          int* nbytes_in_lo32, 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerror* nbytes_in_lo32, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       nbytes_in_lo32, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE, 
89,92c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       unsigned int* nbytes_in_hi32, 
89,92c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bint* nbytes_in_hi32, 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       * nbytes_in_hi32, 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           nbytes_in_hi32, 
91,92d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
91,92d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
91,92d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
91,92d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
91,92d90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
92,93d91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
92,93d91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
92,93d91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
92,93d91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
92,93d91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
92,95c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_hi32);
93,95c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned intint BZ_APIBZ2_bzBuffToBuffCompress ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* BZ_APIBZ2_bzBuffToBuffCompress ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* nbytes_out_lo32( 
94,100d93
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned *         dest, 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned intdest, 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* , 
95,102c95
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
95,102c95
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
100,103c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress char*         source, 
101,103c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
101,103c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charsource, 
101,103c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         , 
101,104c101
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destunsigned int  sourceLen,
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int,
102,105c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* int           blockSize100k, 
102,105c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLenblockSize100k, 
103,105c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
103,106c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       charint           verbosity, 
103,106c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         verbosity, 
104,106d103
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
104,106d103
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
104,107c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned workFactor 
104,108c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  );
104,108c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  sourceLen;
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           int BZ_APIBZ2_bzBuffToBuffDecompress ( 
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           blockSize100kBZ_APIBZ2_bzBuffToBuffDecompress ( 
106,110c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       ( 
106,111c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           char*         dest, 
106,111c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           verbosity*         dest, 
107,111c107
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       dest, 
107,111c107
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           , 
108,112c108
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
108,112c108
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
110,113c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress char*         source, 
111,113c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
111,113c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charsource, 
111,113c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         , 
111,114c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destunsigned int  sourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int,
112,115c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* int           small, 
112,115c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLensmall, 
113,115c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
113,116c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       charint           verbosity 
113,116c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       char*         verbosity 
113,117c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       char*         source);
114,117c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       ;
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned int  const char * BZ_APIBZ2_bzlibVersion (
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       unsigned int  sourceLenchar * BZ_APIBZ2_bzlibVersion (
115,122c115
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       * BZ_APIBZ2_bzlibVersion (
115,122c115
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       int           BZ_APIBZ2_bzlibVersion (
115,122c115
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
>       int           small(
116,122d115
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
116,124c116
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>       int           );
117,124c117
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
---
>    ;
119,127d118
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< ;
< 
(96.6 %, 6905 bytes)
116,134c116
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int           #include <stdlib.h>
116,134c116
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int           )include <stdlib.h>
118,134c118
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> <stdlib.h>
120,134c120
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> stdlib.h>
122,134c122
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> .h>
122,134c122
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN h>
122,134c122
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN int >
132,138d131
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
132,138d131
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
(96.7 %, 6855 bytes)
132,135c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> char   Bool;
132,135c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #Bool;
132,135c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define ;
132,136c132
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  typedef unsigned char   UChar;
134,136c134
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
134,136c134
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
134,136c134
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            UChar;
135,136d134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
135,136d134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
135,136d134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
135,137c135
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned Int32;
135,137c135
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   ;
135,138c135
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Booltypedef unsigned int    UInt32;
136,138c136
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
136,138c136
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
136,138c136
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned UInt32;
136,138c136
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   ;
136,139c136
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   UChartypedef short           Int16;
137,139c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
137,139c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
137,139c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             ;
137,140c137
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32typedef unsigned short  UInt16;
138,140c138
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> unsigned short  UInt16;
138,140c138
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef short  UInt16;
(96.7 %, 6784 bytes)
138,140c138
< unsigned short  UInt16;
< 
< #define True  (Bool)1
---
> 1
138,141c138
< unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define AssertHcondzf
---
> unsigned #define AssertHcondzf
138,141c138
< unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define AssertHcondzf
---
> unsigned short  define AssertHcondzf
138,141c138
< unsigned short  UInt16;
< 
< #define True  (Bool)1
< #define AssertHcondzf
---
> unsigned short  UInt16AssertHcondzf
140,141d139
< #define True  (Bool)1
< #define AssertHcondzf
140,141d139
< #define True  (Bool)1
< #define AssertHcondzf
140,141d139
< #define True  (Bool)1
< #define AssertHcondzf
140,145c140
< #define True  (Bool)1
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x8   
---
> #define True  #define BZ_HDR_h 0x8   
140,145c140
< #define True  (Bool)1
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x8   
---
> #define True  (define BZ_HDR_h 0x8   
140,145c140
< #define True  (Bool)1
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x8   
---
> #define True  (BoolBZ_HDR_h 0x8   
140,145c140
< #define True  (Bool)1
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x8   
---
> #define True  (Bool)0x8   
141,145d140
< #define AssertHcondzf
< #define VPrintf4zfza2za5
< 
< 
< #define BZ_HDR_h 0x8   
(96.7 %, 6716 bytes)
140,146c140
< #define True  (Bool)0x8   
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #define True  (Bool)define BZ_MAX_CODE_LEN    3
141,146c141
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> BZ_MAX_CODE_LEN    3
141,146c141
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> #3
141,148c141
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define #define BZ_RUNA 0
141,148c141
< #define BZ_HDR_0 0x0   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
< 
< #define BZ_RUNA 0
---
> #define BZ_HDR_0 define BZ_RUNA 0
(96.8 %, 6633 bytes)
141,145d140
< #3
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
143,146c143
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> BZ_N_GROUPS 6
143,146c143
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #6
(96.8 %, 6592 bytes)
141,143c141
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #4
141,145c141
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
141,145c141
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_N_GROUPS define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
(96.8 %, 6528 bytes)
141,150d140
< #4
< 
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
143,151c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> BZ_RAND_DECLS                          \
143,151c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #\
143,152c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define Int32 rNToGo;                               \
143,152c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS rNToGo;                               \
143,152c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS 2 ;                               \
143,152c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS 2 + \
143,153c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS 2 + 0 Int32 rTPos                                 \
143,153c143
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS 2 + 0 / rTPos                                 \
(96.8 %, 6474 bytes)
141,145c141
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> ##\
141,145c141
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define \
141,147c141
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
> #define BZ_RAND_DECLS                          #define BZ_RAND_MASK + 2
142,147c142
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
>    define BZ_RAND_MASK + 2
142,147c142
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
>    Int32 BZ_RAND_MASK + 2
142,147c142
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
>    Int32 rNToGo+ 2
142,147c142
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
---
>    Int32 rNToGo;                               2
143,154c143
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
---
>    typedef
143,155c143
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>    Int32 struct {
143,155c143
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>    Int32 rTPos                                 {
145,157c145
< #\
< 
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> BZ_RAND_DECLS;
145,157c145
< #\
< 
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #;
147,159c147
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
---
> }
147,160c147
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
---
> #EState;
147,160c147
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
---
> #define ;
147,168c147
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
> #define BZ_RAND_MASK ;
147,170c147
< #define BZ_RAND_MASK + 2
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
> #define BZ_RAND_MASK + ;
(96.9 %, 6392 bytes)
147,165c147
< #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_RAND_MASK define MTFA_SIZE 4096
149,165c149
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
159,165c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> 4096
159,166c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> ##define MTFL_SIZE 6
159,166c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define define MTFL_SIZE 6
159,166c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define define MTFL_SIZE 6
159,166c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define define #6
159,172c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
> #define define #define typedef
159,173c159
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define #define BZ_X_CCRC_4      struct {
165,173c165
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> {
165,175c165
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #BZ_RAND_DECLS;
165,175c165
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define ;
165,178c165
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define MTFA_SIZE UChar    mtfa   [MTFA_SIZE];
166,178c166
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> mtfa   [MTFA_SIZE];
166,178c166
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #[MTFA_SIZE];
166,178c166
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define MTFA_SIZE];
166,178c166
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define MTFL_SIZE ];
172,178c172
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> ;
173,179c173
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>    Int32    mtfbase[6 / MTFL_SIZE];
173,179c173
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>    struct mtfbase[6 / MTFL_SIZE];
175,179c175
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       [6 / MTFL_SIZE];
175,179c175
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       BZ_RAND_DECLS6 / MTFL_SIZE];
178,179c178
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       / MTFL_SIZE];
178,179c178
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       UChar    MTFL_SIZE];
178,179c178
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       UChar    mtfa   ];
178,179c178
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
---
>       UChar    mtfa   [;
178,180c178
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
---
>       UChar    mtfa   [MTFA_SIZEInt32   save_gBase;
178,180c178
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
---
>       UChar    mtfa   [MTFA_SIZE]save_gBase;
179,180c179
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
---
>       ;
179,181c179
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
>       Int32    Int32   save_gPerm;
179,181c179
<       Int32    mtfbase[6 / MTFL_SIZE];
<       Int32   save_gBase;
<       Int32   save_gPerm;
---
>       Int32    mtfbasesave_gPerm;
(96.9 %, 6335 bytes)
179,190c179
<       ;
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
---
>       c )
180,190c180
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
---
>       )
180,191c180
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
< ;
---
>       Int32   ;
180,194c180
<       Int32   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
< ;
< 
< 
< static
---
>       Int32   save_gPermstatic
182,195c182
<    }
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
< ;
< 
< 
< static
< Bool isempty_RL ( int        verbosity,
---
>    Bool isempty_RL ( int        verbosity,
183,195c183
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
< ;
< 
< 
< static
< Bool isempty_RL ( int        verbosity,
---
>    isempty_RL ( int        verbosity,
183,195c183
<    DState;
< 
< 
< 
< 
< 
< #define \
<     c )
< ;
< 
< 
< static
< Bool isempty_RL ( int        verbosity,
---
>    DState( int        verbosity,
(96.9 %, 6288 bytes)
183,189c183
<    isempty_RL ( int        verbosity,
<                      int        strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
183,189c183
<    isempty_RL ( int        verbosity,
<                      int        strm )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
>    isempty_RL ( bz_stream *strm, int action )
(97.0 %, 6205 bytes)
183,188c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
---
>    int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
183,188c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
---
>    BZ_APIBZ2_bzCompress BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
183,188c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
---
>    BZ_APIBZ2_bzCompress ( ( bz_stream *)
183,188c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
---
>    BZ_APIBZ2_bzCompress ( bz_stream bz_stream *)
183,188c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
---
>    BZ_APIBZ2_bzCompress ( bz_stream **)
183,188c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
---
>    BZ_APIBZ2_bzCompress ( bz_stream *strm)
183,189c183
<    BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *)
< ;
---
>    BZ_APIBZ2_bzCompress ( bz_stream *strm, ;
(97.0 %, 6140 bytes)
183,200c183
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
>    BZ_APIBZ2_bzCompress ( bz_stream *\
183,203c183
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
---
>    BZ_APIBZ2_bzCompress ( bz_stream **typedef 
184,204c184
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
---
> struct {
188,204c188
< static
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
---
> {
189,205c189
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
---
> FILE     handle;
189,205c189
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
---
> void handle;
194,205d193
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
200,206c200
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> Char      buf[BZ_MAX_UNUSED];
200,206c200
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #buf[BZ_MAX_UNUSED];
200,206c200
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define [BZ_MAX_UNUSED];
200,206c200
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERReee                    BZ_MAX_UNUSED];
203,206c203
< typedef 
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ];
204,206c204
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    ;
204,207c204
<    struct {
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct Int32     bufN;
205,207c205
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       bufN;
205,207c205
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE     ;
205,208c205
<       FILE     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE     handleBool      writing;
206,208c206
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       writing;
206,208c206
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       Char      ;
(97.0 %, 6076 bytes)
205,209c205
<       FILE     ;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       FILE     Bool      initialisedOk;
206,209c206
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       initialisedOk;
206,209c206
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      ;
206,210c206
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Bool      writing}
(97.1 %, 5991 bytes)
206,217c206
<       Bool      ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       Bool      bzerror,      
207,217c207
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    ,      
208,218c208
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
208,218c208
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile* f, 
216,218c216
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
216,218c216
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
216,219c216
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
217,219c217
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     blockSize100k, 
217,219c217
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( , 
217,220c217
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intint   verbosity,
217,220c217
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  verbosity,
217,220c217
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerror,
218,220d217
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
218,221c218
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEworkFactor )
218,221c218
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* )
218,222c218
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       FILE* f;
219,227c219
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       void BZ_APIBZ2_bzWrite
219,227c219
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int   BZ_APIBZ2_bzWrite
219,228c219
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   blockSize100k( int*    bzerror, 
220,228c220
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int*    bzerror, 
220,228c220
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   *    bzerror, 
220,228c220
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   verbositybzerror, 
221,228c221
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       , 
221,229c221
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   BZFILE* b, 
221,229c221
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor * b, 
222,229c222
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
227,229c227
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
227,230c227
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void void*   buf, 
228,230c228
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              *   buf, 
228,230c228
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( buf, 
228,230c228
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int, 
228,231c228
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    int     len )
228,231c228
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerrorlen )
229,231c229
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                )
229,232c229
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE;
229,236c229
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZFILE* void BZ_APIBZ2_bzWriteClose
229,236c229
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZFILE* bBZ_APIBZ2_bzWriteClose
230,237c230
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                ( int*          bzerror, 
230,237c230
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                voidint*          bzerror, 
230,237c230
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   *          bzerror, 
230,237c230
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   bufbzerror, 
231,237c231
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                , 
231,238c231
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     BZFILE*       b, 
231,238c231
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     len *       b, 
232,238c232
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
236,238c236
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
236,239c236
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
237,239c237
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   abandon,
237,239c237
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( ,
237,240c237
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intunsigned int* nbytes_in,
237,240c237
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          int* nbytes_in,
237,240c237
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerror* nbytes_in,
238,240c238
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     nbytes_in,
238,240c238
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE,
238,241c238
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       unsigned int* nbytes_out )
238,241c238
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bint* nbytes_out )
239,241c239
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     * nbytes_out )
239,241c239
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           nbytes_out )
239,241c239
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandon)
240,242c240
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     ;
240,245c240
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned void BZ_APIBZ2_bzWriteClose64
240,245c240
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned intBZ_APIBZ2_bzWriteClose64
240,246c240
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* ( int*          bzerror, 
240,246c240
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_inint*          bzerror, 
241,246c241
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     *          bzerror, 
241,246c241
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned bzerror, 
241,246c241
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int, 
241,247c241
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* BZFILE*       b, 
241,247c241
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_out *       b, 
242,247c242
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
245,247c245
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
245,248c245
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
246,248c246
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   abandon,
246,248c246
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( ,
246,249c246
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intunsigned int* nbytes_in_lo32,
246,249c246
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          int* nbytes_in_lo32,
246,249c246
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerror* nbytes_in_lo32,
247,249c247
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     nbytes_in_lo32,
247,249c247
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE,
247,250c247
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       unsigned int* nbytes_in_hi32,
247,250c247
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bint* nbytes_in_hi32,
248,250c248
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
248,250c248
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           nbytes_in_hi32,
249,250d248
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
249,250d248
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
249,250d248
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
249,250d248
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
249,250d248
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
250,251d249
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
250,251d249
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
250,251d249
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
250,251d249
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
250,251d249
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
250,252c250
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32)
251,253c251
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     ;
251,257c251
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned BZFILE* BZ_APIBZ2_bzReadOpen 
251,257c251
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZ_APIBZ2_bzReadOpen 
251,257c251
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZ_APIBZ2_bzReadOpen 
251,258c251
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_lo32( int*  bzerror, 
252,258c252
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
252,258c252
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned *  bzerror, 
252,258c252
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned intbzerror, 
252,258c252
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* , 
252,259c252
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* nbytes_out_hi32 FILE* f, 
253,259c253
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
257,259c257
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
257,259c257
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE, 
257,260c257
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* int   verbosity,
258,260c258
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    verbosity,
258,260c258
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( ,
258,261c258
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( intint   small,
258,261c258
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  small,
258,261c258
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerror,
259,261d258
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
259,262c259
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* unused,
259,262c259
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* unused,
259,262c259
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* f,
260,262d259
<                      int   verbosity,
<                      int   small,
<                      void* unused,
260,262d259
<                      int   verbosity,
<                      int   small,
<                      void* unused,
260,263c260
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbosity)
261,264c261
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      ;
261,268c261
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
261,268c261
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   smallBZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
262,268c262
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      ( int *bzerror, BZFILE *b )
262,268c262
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      voidint *bzerror, BZFILE *b )
262,268c262
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* *bzerror, BZFILE *b )
262,268c262
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      void* unusedbzerror, BZFILE *b )
263,268c263
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      , BZFILE *b )
263,268c263
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   BZFILE *b )
263,268c263
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
>                      int   nUnused *b )
264,268c264
< ;
< 
< 
< 
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> b )
268c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> )
268,269c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
---
> void ;
268,273c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
> void BZ_APIBZ2_bzReadClose int BZ_APIBZ2_bzRead 
268,273c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
> void BZ_APIBZ2_bzReadClose ( BZ_APIBZ2_bzRead 
268,274c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int ( int*    bzerror, 
268,274c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *int*    bzerror, 
268,274c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror*    bzerror, 
268,274c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, bzerror, 
268,274c268
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE , 
(97.1 %, 5941 bytes)
268,274c268
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void b, 
272,274c272
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> , 
272,275c272
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int void*   buf, 
273,275c273
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            *   buf, 
273,275c273
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( buf, 
273,275c273
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int, 
273,276c273
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    int     len )
273,276c273
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorlen )
274,276c274
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              )
274,277c274
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE{
274,279c274
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzFile* bzf = (bzFile*)b;
274,279c274
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b* bzf = (bzFile*)b;
275,279c275
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzf = (bzFile*)b;
275,279c275
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void= (bzFile*)b;
275,279c275
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   (bzFile*)b;
275,279c275
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufbzFile*)b;
276,279c276
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              *)b;
276,279c276
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     )b;
276,279c276
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     len b;
277,279c277
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
> ;
279,280d278
<    bzFile* bzf = (bzFile*)b;
< 
279,281c279
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>    bzFile()
279,281c279
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>    bzFile* )
279,282c279
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
---
>    bzFile* bzf ;
(97.1 %, 5911 bytes)
279,286c279
<    BZ_SETERR()
<       ;
< 
<    ;
< 
<    while (True) 
< 
<    return 0; 
---
>    0; 
279,286c279
<    BZ_SETERR()
<       ;
< 
<    ;
< 
<    while (True) 
< 
<    return 0; 
---
>    BZ_SETERR; 
279,287c279
<    BZ_SETERR()
<       ;
< 
<    ;
< 
<    while (True) 
< 
<    return 0; 
< }
---
>    BZ_SETERR(}
280,291c280
<       ;
< 
<    ;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>       void BZ_APIBZ2_bzReadGetUnused 
282,291c282
<    ;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>    BZ_APIBZ2_bzReadGetUnused 
284,292c284
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
284,292c284
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    while int*    bzerror, 
284,292c284
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    while (*    bzerror, 
284,292c284
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    while (Truebzerror, 
(97.1 %, 5856 bytes)
279,286c279
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    BZFILE* b, 
279,286c279
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    0* b, 
280,286c280
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
284,286c284
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
284,287c284
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
285,287c285
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      **  unused, 
285,287c285
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( *  unused, 
285,287c285
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( intunused, 
285,287c285
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    , 
285,288c285
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrorint*    nUnused )
286,288c286
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
286,288c286
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILEnUnused )
286,288c286
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* )
286,289c286
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        BZFILE* b;
287,297c287
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        int BZ_APIBZ2_bzBuffToBuffCompress 
287,297c287
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        voidBZ_APIBZ2_bzBuffToBuffCompress 
287,298c287
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void*( char*         dest, 
287,298c287
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  char*         dest, 
287,298c287
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  unused*         dest, 
288,298c288
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        dest, 
288,298c288
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int, 
288,299c288
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    unsigned int* destLen,
288,299c288
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused int* destLen,
289,299c289
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
297,299c297
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
297,299c297
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int ,
298,300c298
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          char*         source, 
298,300c298
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( *         source, 
298,300c298
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( charsource, 
298,300c298
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         , 
298,301c298
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destunsigned int  sourceLen,
299,301c299
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
299,301c299
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned sourceLen,
299,301c299
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int,
299,302c299
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* int           blockSize100k, 
299,302c299
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLenblockSize100k, 
300,302c300
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
300,303c300
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            charint           verbosity, 
300,303c300
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         verbosity, 
301,303d300
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
301,303d300
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
301,304c301
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned workFactor )
301,304c301
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  )
301,305c301
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            unsigned int  sourceLen;
302,309c302
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int BZ_APIBZ2_bzBuffToBuffDecompress 
302,309c302
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int           BZ_APIBZ2_bzBuffToBuffDecompress 
302,310c302
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           blockSize100k( char*         dest, 
303,310c303
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            char*         dest, 
303,310c303
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           *         dest, 
303,310c303
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbositydest, 
304,310c304
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            , 
304,311c304
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           unsigned int* destLen,
304,311c304
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor int* destLen,
305,311c305
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
309,311c309
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
309,311c309
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int ,
310,312c310
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            char*         source, 
310,312c310
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( *         source, 
310,312c310
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( charsource, 
310,312c310
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         , 
310,313c310
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destunsigned int  sourceLen,
311,313c311
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
311,313c311
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned sourceLen,
311,313c311
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int,
311,314c311
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* int           small,
311,314c311
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLensmall,
312,314c312
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
312,315c312
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              charint           verbosity )
312,315c312
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         verbosity )
312,315c312
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         source)
313,316c313
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              ;
313,330c313
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>                              unsigned static
313,331c313
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              unsigned int  BZFILE * bzopen_or_bzdopen
313,331c313
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              unsigned int  sourceLen* bzopen_or_bzdopen
314,331c314
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              bzopen_or_bzdopen
314,332c314
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
---
>                              int           ( )
314,332c314
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
---
>                              int           small)
315,333c315
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
---
>                              ;
315,337c315
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
>                              int           BZFILE * BZ_APIBZ2_bzdopen
315,337c315
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
>                              int           verbosity * BZ_APIBZ2_bzdopen
316,337c316
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
---
> BZ_APIBZ2_bzdopen
330,338c330
< static
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
---
> ( int d,
331,338c331
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
---
> int d,
331,338c331
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
---
> BZFILE d,
331,338c331
< BZFILE * bzopen_or_bzdopen
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
---
> BZFILE * ,
332,339c332
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
---
>                const char *mode )
332,339c332
<                ( )
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
---
>                ( char *mode )
333,339c333
< ;
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
---
> *mode )
337,339c337
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
---
> mode )
337,339c337
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
---
> BZFILE )
337,340c337
< BZFILE * BZ_APIBZ2_bzdopen
<                ( int d,
<                  const char *mode )
< ;
---
> BZFILE * ;
338,344c338
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
338,344c338
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
338,344c338
<                ( int d,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( int (BZFILE* b, void* buf, int len )
(97.2 %, 5775 bytes)
332,337c332
<                ( char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( b, void* buf, int len )
332,337c332
<                ( char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( char , void* buf, int len )
332,337c332
<                ( char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( char *void* buf, int len )
332,337c332
<                ( char *mode )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
>                ( char *mode * buf, int len )
333,337c333
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> buf, int len )
337c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> , int len )
337c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int int len )
337c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread len )
337c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread ()
337,338c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
---
> int BZ_APIBZ2_bzread (BZFILE{
337,339c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (BZFILE* int bzerr, nread;
337,339c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (BZFILE* bbzerr, nread;
337,339c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (BZFILE* b, , nread;
337,339c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (BZFILE* b, voidnread;
337,339c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* ;
337,340c337
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf0;
(97.2 %, 5745 bytes)
337,341c337
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_APIBZ2_bzread (= 0;
338,341c338
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> 0;
339,341c339
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    ;
339,342c339
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
339,342c339
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
339,342c339
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
339,342c339
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread== BZ_OK || bzerr == BZ_STREAM_END) ; else ;
340,342c340
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_OK || bzerr == BZ_STREAM_END) ; else ;
340,342c340
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0|| bzerr == BZ_STREAM_END) ; else ;
341,342c341
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_STREAM_END) ; else ;
341,342c341
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread == BZ_STREAM_END) ; else ;
341,342c341
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = BZ_STREAM_END) ; else ;
341,342c341
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = 0) ; else ;
342c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ; else ;
342c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if else ;
342c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (;
342,343c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr }
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == #include <errno.h>
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK include <errno.h>
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || <errno.h>
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr errno.h>
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == .h>
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_ENDh>
342,347c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) >
342,349c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; #define ERROR_IF_EOFi       
342,349c342
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else define ERROR_IF_EOFi       
343,349c343
< }
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
---
> ERROR_IF_EOFi       
347,349d346
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
347,349d346
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
(97.2 %, 5696 bytes)
347,355c347
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< define NORETURN 
---
> NORETURN 
347,357c347
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
---
> ##endif 
347,357c347
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
---
> #define endif 
348,363d347
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
(97.3 %, 5610 bytes)
347,358c347
< #define endif 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> #define int IntNative;
354,358c354
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
---
> IntNative;
(97.3 %, 5508 bytes)
347,361d346
< #define int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
347,362c347
< #define int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> #define int 
\ No newline at end of file
(97.3 %, 5438 bytes)
347c347
< #define OM_TEST          
\ No newline at end of file
---
> #define 
\ No newline at end of file
===< pass_clex :: rm-toks-9 >===
9,11c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
---
> 9
9,13c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #typedef 
9,14c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #define struct {
9,14c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #define BZ_OK                {
10,15c10
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
---
> char ;
10,15c10
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
---
> #;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
---
> } 
11,17c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
---
> #bz_stream;
11,17c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
---
> #define ;
11,21c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        #include <stdio.h>
13,21c13
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> include <stdio.h>
14,21c14
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    <stdio.h>
14,21c14
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    struct stdio.h>
15,21c15
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
15,21c15
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       char h>
16,21c16
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamdefine BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.#   define BZ_EXTERN extern
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   extern
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
---
> #   define int ;
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
---
> #   define BZ_API;
23,35c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(#define BZ_MAX_UNUSED 0
23,35c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(funcdefine BZ_MAX_UNUSED 0
23,35c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func) BZ_MAX_UNUSED 0
24,35c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> 0
24,37c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   typedef void BZFILE;
24,37c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define void BZFILE;
24,37c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN BZFILE;
29,37c29
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> ;
29,39c29
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> int BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZFILE* BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #* BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define BZ_APIBZ2_bzReadOpen ( 
35,39c35
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define BZ_MAX_UNUSED ( 
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> int*  bzerror,   
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef *  bzerror,   
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void bzerror,   
37,40c37
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void BZFILE,   
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> FILE* f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN * f, 
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
39,41c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
39,42c39
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen int   verbosity, 
40,42c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
40,42c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int, 
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  int   small,
40,43c40
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerrorsmall,
41,43c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
41,44c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEvoid* unused,    
41,44c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* * unused,    
41,44c41
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* funused,    
42,44c42
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
42,45c42
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
42,45c42
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbositynUnused 
43,46c43
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
43,46c43
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
43,48c43
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   smallBZ_EXTERN void ;
44,48c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void ;
44,48c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void;
44,50c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void* BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
44,50c44
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void* unusedvoid BZ_APIBZ2_bzReadGetUnused ( 
45,50c45
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       BZ_APIBZ2_bzReadGetUnused ( 
45,50c45
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       int   ( 
46,51c46
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
46,51c46
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
48,51c48
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> bzerror, 
48,51c48
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
48,52c48
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
50,52c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
50,52c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
50,52c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
50,53c50
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused void**  unused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*  unused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    unused,  
51,53c51
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror,  
52,53d51
<       BZFILE* b, 
<       void**  unused,  
52,54c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE*    nUnused 
52,54c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* nUnused 
52,55c52
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b);
53,55c53
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       voidBZ_EXTERN int BZ_APIBZ2_bzRead ( 
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void*int BZ_APIBZ2_bzRead ( 
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  BZ_APIBZ2_bzRead ( 
53,57c53
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  unused( 
54,57d53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
54,57d53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
54,57d53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
55,58c55
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    , 
55,59c55
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int , 
57,60c57
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead void*   buf, 
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
58,61c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
59,61c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
59,62c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
59,62c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
59,64c59
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* bBZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* BZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void* BZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   BZ_APIBZ2_bzWriteOpen ( 
60,64c60
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   buf( 
61,64d60
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
61,65c61
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       int     *  bzerror,      
62,65c62
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    bzerror,      
62,65c62
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    ),      
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> FILE* f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN * f, 
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
64,66c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
64,67c64
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen int   blockSize100k, 
65,67c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
65,67c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int, 
65,68c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
65,68c65
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
66,68c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
66,69c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEint   workFactor 
66,69c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* workFactor 
66,70c66
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f);
67,70c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
67,72c67
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   blockSize100kvoid BZ_APIBZ2_bzWrite ( 
68,72c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       BZ_APIBZ2_bzWrite ( 
68,72c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   ( 
68,73c68
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   verbosityint*    bzerror, 
69,73c69
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       *    bzerror, 
69,73c69
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   bzerror, 
70,73c70
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>    , 
70,74c70
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
72,75c72
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite void*   buf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
73,76c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
74,76c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
74,77c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
74,77c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
74,79c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILE* bBZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void BZ_APIBZ2_bzWriteClose ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       voidBZ_APIBZ2_bzWriteClose ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void*   ( 
75,80c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       void*   bufint*          bzerror, 
76,80c76
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       *          bzerror, 
76,80c76
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       int     bzerror, 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>    , 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose int           abandon, 
80,82c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
80,82c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          unsigned int* nbytes_in, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorint* nbytes_in, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEnbytes_in, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       , 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bunsigned int* nbytes_out 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           * nbytes_out 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonnbytes_out 
83,85c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
83,85c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned ;
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned intBZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* void BZ_APIBZ2_bzWriteClose64 ( 
83,87c83
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* nbytes_inBZ_APIBZ2_bzWriteClose64 ( 
84,87c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       ( 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
84,88c84
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* bzerror, 
85,88c85
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    , 
85,89c85
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
87,89c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
87,89c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
87,89c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
87,90c87
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 int           abandon, 
88,90c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
88,90c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          unsigned int* nbytes_in_lo32, 
88,91c88
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorint* nbytes_in_lo32, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEnbytes_in_lo32, 
89,91c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       , 
89,92c89
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bunsigned int* nbytes_in_hi32, 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           * nbytes_in_hi32, 
90,92c90
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonnbytes_in_hi32, 
91,92c91
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
91,93c91
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned unsigned int* nbytes_out_lo32, 
91,93c91
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intint* nbytes_out_lo32, 
91,93c91
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* * nbytes_out_lo32, 
91,93c91
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32nbytes_out_lo32, 
92,93c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       , 
92,94c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned unsigned int* nbytes_out_hi32
92,94c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intint* nbytes_out_hi32
92,94c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* * nbytes_out_hi32
92,94c92
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32nbytes_out_hi32
93,95c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       );
93,95c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned ;
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned intBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* int BZ_APIBZ2_bzBuffToBuffCompress ( 
93,100c93
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* nbytes_out_lo32BZ_APIBZ2_bzBuffToBuffCompress ( 
94,100c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       ( 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned char*         dest, 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int*         dest, 
94,101c94
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* dest, 
95,101c95
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    , 
95,102c95
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
100,102c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ,
101,102d100
<       char*         dest, 
<       unsigned int* destLen,
101,102d100
<       char*         dest, 
<       unsigned int* destLen,
101,102d100
<       char*         dest, 
<       unsigned int* destLen,
102,103d101
<       unsigned int* destLen,
<       char*         source, 
102,103d101
<       unsigned int* destLen,
<       char*         source, 
102,103d101
<       unsigned int* destLen,
<       char*         source, 
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
102,104c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
102,105c102
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLenint           blockSize100k, 
103,105c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       blockSize100k, 
103,105c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char, 
103,106c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         int           verbosity, 
103,106c103
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceverbosity, 
104,106c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
104,107c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int           workFactor 
104,107c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  workFactor 
104,108c104
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  sourceLen);
105,108c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
105,110c105
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           blockSize100kint BZ_APIBZ2_bzBuffToBuffDecompress ( 
106,110c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       BZ_APIBZ2_bzBuffToBuffDecompress ( 
106,110c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           ( 
106,111c106
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           verbositychar*         dest, 
107,111c107
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       *         dest, 
107,111c107
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           dest, 
108,111c108
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    , 
108,112c108
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
110,112c110
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ,
111,112d110
<       char*         dest, 
<       unsigned int* destLen,
111,112d110
<       char*         dest, 
<       unsigned int* destLen,
111,112d110
<       char*         dest, 
<       unsigned int* destLen,
112,113d111
<       unsigned int* destLen,
<       char*         source, 
112,113d111
<       unsigned int* destLen,
<       char*         source, 
112,113d111
<       unsigned int* destLen,
<       char*         source, 
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
112,115c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLenint           small, 
113,115c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
113,115c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char, 
113,116c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         int           );
113,116c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         source);
114,116c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       ;
114,118c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
---
>       unsigned ;
114,120c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
< 
< ;
---
>       unsigned int  ;
114,122c114
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
>       unsigned int  sourceLenBZ_EXTERN int ;
115,122c115
<       int           small, 
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
>       int ;
115,122c115
<       int           small, 
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
---
>       int           ;
115,132c115
<       int           small, 
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int           small#define BZ_VERSION  "1.0.2, 30-Dec-2001"
116,132c116
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       define BZ_VERSION  "1.0.2, 30-Dec-2001"
116,132c116
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int           BZ_VERSION  "1.0.2, 30-Dec-2001"
116,132c116
<       int           );
< 
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int           )"1.0.2, 30-Dec-2001"
118,133d117
< ;
< 
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
120,134c120
< ;
< 
< BZ_EXTERN int ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
(97.4 %, 5365 bytes)
118,119d117
< typedef char            Char;
< typedef unsigned char   Bool;
118,119d117
< typedef char            Char;
< typedef unsigned char   Bool;
118,120c118
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            char   UChar;
118,120c118
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            CharUChar;
119,120c119
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
119,121c119
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
119,121c119
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned int             Int32;
119,121c119
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Int32;
120,121d119
< typedef unsigned char   UChar;
< typedef int             Int32;
120,121d119
< typedef unsigned char   UChar;
< typedef int             Int32;
120,122c120
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
---
> typedef short  UInt16;
120,122c120
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
---
> typedef unsigned UInt16;
120,122c120
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
---
> typedef unsigned char   ;
120,124c120
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef unsigned char   UChar#define True  (Bool)0x8   
121,124c121
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> define True  (Bool)0x8   
121,124c121
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef True  (Bool)0x8   
121,124c121
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef int             (Bool)0x8   
121,124c121
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef int             Int32Bool)0x8   
122,124c122
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> )0x8   
122,124c122
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> unsigned 0x8   
122,125c122
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> unsigned short  #define BZ_RAND_DECLS                          \
122,125c122
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> unsigned short  UInt16define BZ_RAND_DECLS                          \
124,125c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> BZ_RAND_DECLS                          \
124,125c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> #\
124,126c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define Int32 rNToGo;                               \
124,126c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define True  rNToGo;                               \
124,126c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define True  (;                               \
124,126c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define True  (Bool\
124,127c124
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define True  (Bool)Int32 rTPos                                 \
125,127c125
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> rTPos                                 \
125,127c125
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #\
125,129c125
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define #\
126,129d125
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
126,131c126
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK ;
---
>    #define BZ_RAND_MASK ;
126,131c126
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK ;
---
>    Int32 define BZ_RAND_MASK ;
126,131c126
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK ;
---
>    Int32 rNToGoBZ_RAND_MASK ;
(97.4 %, 5263 bytes)
125,139c125
< #define BZ_RAND_DECLS                          \
< 
< #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #define BZ_RAND_DECLS                          #define BZ_X_CCRC_4      0
127,139c127
< #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> define BZ_X_CCRC_4      0
127,139c127
< #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #BZ_X_CCRC_4      0
127,139c127
< #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #define 0
127,145c127
< #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_RAND_MASK #define MTFA_SIZE 4096
129,145c129
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
139,145c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
139,145c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #4096
139,146c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define #define MTFL_SIZE 6
139,146c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define define define MTFL_SIZE 6
139,146c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define define #MTFL_SIZE 6
139,146c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define define #define 6
139,152c139
< #define define #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
---
> #define define #define BZ_X_CCRC_4      typedef
145,153c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
145,153c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
145,155c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define BZ_RAND_DECLS;
145,155c145
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
---
> #define MTFA_SIZE ;
146,158c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> UChar    mtfa   [MTFA_SIZE];
146,158c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #mtfa   [MTFA_SIZE];
146,158c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define [MTFA_SIZE];
146,158c146
< #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> #define MTFL_SIZE MTFA_SIZE];
152,158c152
< typedef
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
> ];
153,158c153
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>    ;
153,159c153
<    struct {
<       
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       ;
---
>    struct ;
155,159d154
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       ;
155,160c155
<       BZ_RAND_DECLS;
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       ;
<       Int32   save_gPerm;
---
>       BZ_RAND_DECLSsave_gPerm;
158d157
<       UChar    mtfa   [MTFA_SIZE];
160d158
<       Int32   save_gPerm;
(97.5 %, 5191 bytes)
155,158c155
<       Int32   save_gPerm;
< 
<    }
<    BZ_APIBZ2_bzCompress ( bz_stream **)
---
>       )
155,159c155
<       Int32   save_gPerm;
< 
<    }
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
---
>       Int32   ;
155,163c155
<       Int32   save_gPerm;
< 
<    }
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
---
>       Int32   save_gPermstatic
157,164c157
<    }
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
< void ;
---
>    void ;
158,164c158
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
< void ;
---
>    ;
158,168c158
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< ;
---
>    BZ_APIBZ2_bzCompress ;
158,175c158
<    BZ_APIBZ2_bzCompress ( bz_stream **)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
---
>    BZ_APIBZ2_bzCompress ( #define BZ_SETERReee                    \
(97.5 %, 5137 bytes)
158,174c158
<    ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     ;
---
>    FILE     ;
163,174d162
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     ;
169,175c169
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     ;
<       Bool      ;
---
> Bool      ;
169,175c169
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     ;
<       Bool      ;
---
> #;
169,176c169
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     ;
<       Bool      ;
<    }
---
> #define }
169,177c169
< #define BZ_SETERReee                    \
< 
< 
< typedef 
<    struct {
<       FILE     ;
<       Bool      ;
<    }
<    bzFile;
---
> #define BZ_SETERReee                    bzFile;
172,177c172
< typedef 
<    struct {
<       FILE     ;
<       Bool      ;
<    }
<    bzFile;
---
> ;
(97.5 %, 5069 bytes)
169,178c169
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define BZ_SETERReee                    ,      
169,179c169
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define BZ_SETERReee                    bzFileFILE* f, 
177,179c177
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> * f, 
177,179c177
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEf, 
177,179c177
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* , 
178,180c178
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     int   blockSize100k, 
178,180c178
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( blockSize100k, 
178,180c178
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int, 
178,181c178
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  int   verbosity,
178,181c178
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorverbosity,
179,181c179
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
179,182c179
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEint   workFactor )
179,182c179
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* workFactor )
179,182c179
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* f)
180,183c180
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
180,188c180
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int   void BZ_APIBZ2_bzWrite
180,188c180
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int   blockSize100kBZ_APIBZ2_bzWrite
181,189c181
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       ( int*    bzerror, 
181,189c181
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   int*    bzerror, 
181,189c181
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   verbosity*    bzerror, 
182,189c182
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       bzerror, 
182,189c182
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   , 
182,190c182
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor BZFILE* b, 
183,190c183
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
188,190c188
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
188,190c188
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void , 
189,191c189
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              void*   buf, 
189,191c189
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( *   buf, 
189,191c189
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intbuf, 
189,191c189
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    , 
189,192c189
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerrorint     len )
190,192c190
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                len )
190,192c190
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE)
190,193c190
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE* ;
190,197c190
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZFILE* bvoid BZ_APIBZ2_bzWriteClose
191,197c191
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZ_APIBZ2_bzWriteClose
191,198c191
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void( int*          bzerror, 
191,198c191
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   int*          bzerror, 
191,198c191
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   buf*          bzerror, 
192,198c192
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                bzerror, 
192,198c192
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int     , 
192,199c192
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     len BZFILE*       b, 
193,199c193
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
197,199c197
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
197,199c197
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
198,200c198
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
198,200c198
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
198,200c198
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
198,201c198
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          unsigned int* nbytes_in,
198,201c198
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorint* nbytes_in,
199,201c199
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
199,201c199
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEnbytes_in,
199,201c199
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       ,
199,202c199
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bunsigned int* nbytes_out )
200,202c200
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
200,202c200
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           * nbytes_out )
200,202c200
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonnbytes_out )
201,202c201
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
201,203c201
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned ;
201,206c201
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned intvoid BZ_APIBZ2_bzWriteClose64
201,206c201
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned int* BZ_APIBZ2_bzWriteClose64
201,207c201
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_in( int*          bzerror, 
202,207c202
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     int*          bzerror, 
202,207c202
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned *          bzerror, 
202,207c202
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned intbzerror, 
202,207c202
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* , 
202,208c202
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_out BZFILE*       b, 
203,208c203
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
206,208c206
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
206,208c206
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
207,209c207
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
207,209c207
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
207,209c207
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
207,210c207
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          unsigned int* nbytes_in_lo32,
207,210c207
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorint* nbytes_in_lo32,
208,210c208
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
208,210c208
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEnbytes_in_lo32,
208,210c208
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       ,
208,211c208
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bunsigned int* nbytes_in_hi32,
209,211c209
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
209,211c209
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           * nbytes_in_hi32,
209,211c209
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonnbytes_in_hi32,
210,211c210
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
210,212c210
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned unsigned int* nbytes_out_lo32,
210,212c210
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intint* nbytes_out_lo32,
210,212c210
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* * nbytes_out_lo32,
210,212c210
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32nbytes_out_lo32,
211,212c211
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     ,
211,213c211
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned unsigned int* nbytes_out_hi32 )
211,213c211
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intint* nbytes_out_hi32 )
211,213c211
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* * nbytes_out_hi32 )
211,213c211
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32nbytes_out_hi32 )
212,213c212
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     )
212,214c212
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned ;
212,218c212
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned intBZFILE* BZ_APIBZ2_bzReadOpen 
212,218c212
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* * BZ_APIBZ2_bzReadOpen 
212,218c212
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* nbytes_out_lo32BZ_APIBZ2_bzReadOpen 
213,219c213
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     ( int*  bzerror, 
213,219c213
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int*  bzerror, 
213,219c213
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int*  bzerror, 
213,219c213
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* bzerror, 
213,219c213
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 , 
214,220c214
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
218,220c218
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
218,220c218
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILEf, 
218,220c218
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* , 
219,221c219
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    int   verbosity,
219,221c219
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( verbosity,
219,221c219
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int,
219,222c219
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  int   small,
219,222c219
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerrorsmall,
220,222c220
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      ,
220,223c220
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEvoid* unused,
220,223c220
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* * unused,
220,223c220
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* funused,
221,223c221
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
221,224c221
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
221,224c221
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbositynUnused )
222,224c222
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
222,225c222
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      int   ;
222,229c222
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      int   smallvoid ;
223,229c223
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      ;
223,233c223
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      voidint BZ_APIBZ2_bzRead 
223,233c223
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      void* BZ_APIBZ2_bzRead 
223,234c223
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      void* unused( int*    bzerror, 
224,234c224
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int*    bzerror, 
224,234c224
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   *    bzerror, 
224,234c224
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   nUnused bzerror, 
225,234c225
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> , 
229,235c229
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> BZFILE* b, 
229,235c229
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void * b, 
233,235c233
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
233,235c233
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int , 
234,236c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            void*   buf, 
234,236c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( *   buf, 
234,236c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intbuf, 
234,236c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    , 
234,237c234
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorint     len )
235,237c235
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              len )
235,237c235
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE)
235,238c235
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE* {
235,240c235
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
---
>              BZFILE* b0; 
236,240c236
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
---
>              ; 
236,241c236
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
---
>              void}
236,245c236
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              void*   void BZ_APIBZ2_bzReadGetUnused 
236,245c236
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              void*   bufBZ_APIBZ2_bzReadGetUnused 
237,246c237
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              ( int*    bzerror, 
237,246c237
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     int*    bzerror, 
237,246c237
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     len *    bzerror, 
238,246c238
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> bzerror, 
240,246c240
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    , 
240,247c240
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    0BZFILE* b, 
241,247c241
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
245,247c245
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
245,247c245
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void , 
246,248c246
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      void**  unused, 
246,248c246
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( **  unused, 
246,248c246
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*  unused, 
246,248c246
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    unused, 
247,248d246
<                        BZFILE* b, 
<                        void**  unused, 
247,248d246
<                        BZFILE* b, 
<                        void**  unused, 
247,249c247
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE*    nUnused )
247,249c247
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* nUnused )
247,249c247
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b)
248,250c248
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
248,258c248
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        voidint BZ_APIBZ2_bzBuffToBuffCompress 
248,258c248
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        void*BZ_APIBZ2_bzBuffToBuffCompress 
248,259c248
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  ( char*         dest, 
248,259c248
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  unusedchar*         dest, 
249,259c249
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        *         dest, 
249,259c249
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        intdest, 
249,259c249
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int*    , 
249,260c249
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused unsigned int* destLen,
250,260c250
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
258,260c258
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
258,260c258
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int destLen,
259,260c259
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ,
259,261c259
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
259,261c259
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
259,261c259
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
260,261d259
<                            unsigned int* destLen,
<                            char*         source, 
260,261d259
<                            unsigned int* destLen,
<                            char*         source, 
260,261d259
<                            unsigned int* destLen,
<                            char*         source, 
260,262c260
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intsourceLen,
260,262c260
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* ,
260,263c260
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLenint           blockSize100k, 
261,263c261
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            blockSize100k, 
261,263c261
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char, 
261,264c261
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         int           verbosity, 
261,264c261
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceverbosity, 
262,264c262
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
262,265c262
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int           workFactor )
262,265c262
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  workFactor )
262,265c262
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLen)
263,266c263
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
263,270c263
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int           int BZ_APIBZ2_bzBuffToBuffDecompress 
263,270c263
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int           blockSize100kBZ_APIBZ2_bzBuffToBuffDecompress 
264,270d263
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
264,271c264
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           char*         dest, 
264,271c264
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbosity*         dest, 
265,271c265
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            dest, 
265,271c265
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           , 
265,272c265
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor unsigned int* destLen,
266,272c266
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
270,272c270
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
270,272c270
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int destLen,
271,272c271
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
271,273c271
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
271,273c271
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
271,273c271
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
272,273d271
<                              unsigned int* destLen,
<                              char*         source, 
272,273d271
<                              unsigned int* destLen,
<                              char*         source, 
272,273d271
<                              unsigned int* destLen,
<                              char*         source, 
272,274c272
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intsourceLen,
272,274c272
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* ,
272,275c272
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLenint           small,
273,275c273
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
273,275c273
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char,
273,276c273
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         int           verbosity )
273,276c273
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceverbosity )
274,276c274
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
274,277c274
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned ;
274,291c274
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>                              unsigned int  static
274,292c274
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              unsigned int  sourceLenBZFILE * bzopen_or_bzdopen
275,292c275
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              * bzopen_or_bzdopen
275,292c275
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>                              int           bzopen_or_bzdopen
275,293c275
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
---
>                              int           small( char *mode )
276,293c276
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
---
>                              char *mode )
276,293c276
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
---
>                              int           *mode )
276,293c276
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
---
>                              int           verbosity mode )
277,293c277
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
---
> )
291,293d290
< static
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
292,297d291
< BZFILE * bzopen_or_bzdopen
<                ( char *mode )
< ;
< 
< 
< 
(97.6 %, 5005 bytes)
291,297c291
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
> nread;
295,297c295
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
> ;
295,298c295
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
<    0;
---
> int 0;
295,298c295
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
<    0;
---
> int BZ_APIBZ2_bzread ;
295,299c295
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_APIBZ2_bzread (nread = 0;
296,299c296
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> = 0;
297d296
<    int bzerr, nread;
299d297
<    nread = 0;
297,299c297
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int ;
297,300c297
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrif (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,300c297
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
297,300c297
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nreadbzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298,300c298
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
298,300c298
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0BZ_OK || bzerr == BZ_STREAM_END) ; else ;
299,300c299
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    || bzerr == BZ_STREAM_END) ; else ;
299,300c299
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread bzerr == BZ_STREAM_END) ; else ;
299,300c299
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = == BZ_STREAM_END) ; else ;
299,300c299
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = 0BZ_STREAM_END) ; else ;
300c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
300c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ; else ;
300c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (else ;
300c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr ;
300,301c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == }
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK #define OM_TEST          
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || define OM_TEST          
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr OM_TEST          
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
300,305c300
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
301,305d300
< }
< 
< 
< 
< #define OM_TEST          
\ No newline at end of file
305d304
< #define OM_TEST          
\ No newline at end of file
305c305
< #define OM_TEST          
\ No newline at end of file
---
> #
\ No newline at end of file
(97.6 %, 4980 bytes)
===< pass_clex :: rm-toks-8 >===
9,11c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
---
> BZ_STREAM_END        9
9,11c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
---
> #9
9,13c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #define typedef 
9,14c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #define BZ_OK                struct {
10,14c10
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> {
10,15c10
< #3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
---
> #char ;
11,15c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
---
> ;
11,16c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
---
> #} 
11,17c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
---
> #define bz_stream;
11,17c11
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
---
> #define BZ_STREAM_END        ;
13,20d12
< typedef 
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
14,21c14
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    include <stdio.h>
14,21c14
<    struct {
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    struct <stdio.h>
15,21c15
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       stdio.h>
15,21c15
<       char ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       char .h>
16,21c16
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
17,23c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream#   define BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> define BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include (func) func
(97.6 %, 4923 bytes)
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> define BZ_API(func) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #BZ_API(func) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include (func) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <func) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func
13,16c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.h#   define BZ_EXTERN extern
15,16c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
15,16c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   BZ_EXTERN extern
15,16c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define extern
15,21c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
---
> #   define BZ_APIint ;
15,21c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
---
> #   define BZ_API(;
15,27c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func#define BZ_MAX_UNUSED 0
15,27c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func) define BZ_MAX_UNUSED 0
16,27c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> BZ_MAX_UNUSED 0
16,27c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   0
16,29c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define typedef void BZFILE;
16,29c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN void BZFILE;
21,29c21
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> BZFILE;
23,30d22
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
27,30d26
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #BZFILE* BZ_APIBZ2_bzReadOpen ( 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define * BZ_APIBZ2_bzReadOpen ( 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #define BZ_MAX_UNUSED BZ_APIBZ2_bzReadOpen ( 
29,31c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> ( 
29,32c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef int*  bzerror,   
29,32c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void *  bzerror,   
29,32c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef void BZFILEbzerror,   
31,32c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> ,   
31,33c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN FILE* f, 
31,33c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
31,33c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
31,33c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen , 
32,33d31
<       int*  bzerror,   
<       FILE* f, 
32,34c32
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       intverbosity, 
32,34c32
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  , 
32,35c32
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerrorint   small,
33,35c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       small,
33,35c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE,
33,36c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* void* unused,    
33,36c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* f* unused,    
34,36c34
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       unused,    
34,36c34
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   ,    
34,37c34
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbosityint   nUnused 
35,37c35
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
35,38c35
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   );
35,38c35
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   small;
36,40c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       BZ_EXTERN void ;
36,40c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       voidvoid ;
36,40c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* ;
36,42c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void* unusedBZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
37,42c37
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void BZ_APIBZ2_bzReadGetUnused ( 
37,42c37
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       int   BZ_APIBZ2_bzReadGetUnused ( 
38,42c38
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>    ( 
38,43c38
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    )int*    bzerror, 
40,43c40
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> *    bzerror, 
40,43c40
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN bzerror, 
40,43c40
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
> BZ_EXTERN void , 
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void b, 
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused , 
43,44d42
<       int*    bzerror, 
<       BZFILE* b, 
43,45c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int**  unused,  
43,45c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    *  unused,  
43,45c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerrorunused,  
44,45c44
<       BZFILE* b, 
<       void**  unused,  
---
>       ,  
44,46c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILEint*    nUnused 
44,46c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* *    nUnused 
44,46c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bnUnused 
45,47c45
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       );
45,47c45
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void;
45,49c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void*BZ_EXTERN int BZ_APIBZ2_bzRead ( 
45,49c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  int BZ_APIBZ2_bzRead ( 
45,49c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void**  unusedBZ_APIBZ2_bzRead ( 
46,49c46
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       ( 
46,50c46
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       intint*    bzerror, 
46,50c46
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       int*    *    bzerror, 
47,50c47
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    bzerror, 
47,50c47
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ), 
49,51c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
49,51c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
49,51c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int b, 
49,51c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead , 
50,51d49
<       int*    bzerror, 
<       BZFILE* b, 
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*   buf, 
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    buf, 
51,52d50
<       BZFILE* b, 
<       void*   buf, 
51,52d50
<       BZFILE* b, 
<       void*   buf, 
51,53c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILElen 
51,54c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* );
51,54c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b;
52,56c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
52,56c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       voidBZFILE* BZ_APIBZ2_bzWriteOpen ( 
52,56c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   * BZ_APIBZ2_bzWriteOpen ( 
52,56c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void*   bufBZ_APIBZ2_bzWriteOpen ( 
53,56c53
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       ( 
53,57c53
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       int     int*  bzerror,      
54,57c54
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    *  bzerror,      
54,57c54
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    )bzerror,      
56,57c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
> ,      
56,58c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN FILE* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen , 
57,58d56
<       int*  bzerror,      
<       FILE* f, 
57,59c57
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       intblockSize100k, 
57,59c57
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  , 
57,60c57
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorint   verbosity, 
58,60c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       verbosity, 
58,60c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE, 
58,61c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* int   workFactor 
58,61c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* fworkFactor 
59,62c59
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
59,62c59
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   ;
59,64c59
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   blockSize100kBZ_EXTERN void BZ_APIBZ2_bzWrite ( 
60,64c60
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       void BZ_APIBZ2_bzWrite ( 
60,64c60
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   BZ_APIBZ2_bzWrite ( 
60,64c60
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   verbosity( 
61,64d60
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
61,65c61
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
62,65c62
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>    bzerror, 
62,65c62
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>    ), 
64,66c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
64,66c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
64,66c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void b, 
64,66c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite , 
65,66d64
<       int*    bzerror, 
<       BZFILE* b, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*   buf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    buf, 
66,67d65
<       BZFILE* b, 
<       void*   buf, 
66,67d65
<       BZFILE* b, 
<       void*   buf, 
66,68c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILElen 
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* );
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b;
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       voidvoid BZ_APIBZ2_bzWriteClose ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void*   BZ_APIBZ2_bzWriteClose ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       void*   buf( 
68,71d67
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
68,72c68
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       int     *          bzerror, 
69,72c69
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>    bzerror, 
69,72c69
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>    ), 
71,73c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZFILE*       b, 
71,73c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN *       b, 
71,73c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void b, 
71,73c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose , 
72,73d71
<       int*          bzerror, 
<       BZFILE*       b, 
72,74c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intabandon, 
72,74c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          , 
72,75c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorunsigned int* nbytes_in, 
73,75c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
73,75c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE* nbytes_in, 
73,75c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       nbytes_in, 
74,75d73
<       int           abandon, 
<       unsigned int* nbytes_in, 
74,75d73
<       int           abandon, 
<       unsigned int* nbytes_in, 
74,76c74
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           int* nbytes_out 
74,76c74
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandon* nbytes_out 
75,76c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
75,77c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned );
75,77c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int;
75,79c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
75,79c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* nbytes_invoid BZ_APIBZ2_bzWriteClose64 ( 
76,79c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       BZ_APIBZ2_bzWriteClose64 ( 
76,79c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned ( 
76,80c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned intint*          bzerror, 
76,80c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* *          bzerror, 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    bzerror, 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    ), 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZFILE*       b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN *       b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 , 
80,81d79
<       int*          bzerror, 
<       BZFILE*       b, 
80,82c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intabandon, 
80,82c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          , 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorunsigned int* nbytes_in_lo32, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE* nbytes_in_lo32, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       nbytes_in_lo32, 
82,83d81
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
82,83d81
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           int* nbytes_in_hi32, 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandon* nbytes_in_hi32, 
83,84c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
83,84c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned , 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intunsigned int* nbytes_out_lo32, 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* int* nbytes_out_lo32, 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32* nbytes_out_lo32, 
84,85c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
84,85c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
84,86c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
84,86c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
84,86c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32* nbytes_out_hi32
85,86c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
85,87c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
85,87c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
85,92c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
85,92c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* nbytes_out_lo32int BZ_APIBZ2_bzBuffToBuffCompress ( 
86,92c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       BZ_APIBZ2_bzBuffToBuffCompress ( 
86,92c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned ( 
86,93c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned intchar*         dest, 
86,93c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* *         dest, 
87,93c87
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    dest, 
87,93c87
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ), 
92,94c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> unsigned int* destLen,
92,94c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int* destLen,
92,94c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int * destLen,
92,94c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress destLen,
93,94c93
<       char*         dest, 
<       unsigned int* destLen,
---
>       ,
93,95c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charchar*         source, 
93,95c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         *         source, 
93,95c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destsource, 
94,95c94
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
94,96c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned unsigned int  sourceLen,
94,96c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intint  sourceLen,
94,96c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* sourceLen,
95,96d94
<       char*         source, 
<       unsigned int  sourceLen,
95,96d94
<       char*         source, 
<       unsigned int  sourceLen,
95,97c95
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       charblockSize100k, 
95,97c95
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         , 
95,98c95
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceint           verbosity, 
96,98c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       verbosity, 
96,98c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned , 
96,99c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  int           workFactor 
96,99c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  sourceLenworkFactor 
97,100c97
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
97,100c97
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           ;
97,102c97
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           blockSize100kBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
98,102c98
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int BZ_APIBZ2_bzBuffToBuffDecompress ( 
98,102c98
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           BZ_APIBZ2_bzBuffToBuffDecompress ( 
98,102c98
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           verbosity( 
99,102d98
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
99,103c99
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           *         dest, 
100,103c100
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    dest, 
100,103c100
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ), 
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> unsigned int* destLen,
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int* destLen,
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int * destLen,
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress destLen,
103,104c103
<       char*         dest, 
<       unsigned int* destLen,
---
>       ,
103,105c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charchar*         source, 
103,105c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         *         source, 
103,105c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destsource, 
104,105c104
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
104,106c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned unsigned int  sourceLen,
104,106c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intint  sourceLen,
104,106c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* sourceLen,
105,106d104
<       char*         source, 
<       unsigned int  sourceLen,
105,106d104
<       char*         source, 
<       unsigned int  sourceLen,
105,107c105
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       charsmall, 
105,107c105
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         , 
105,108c105
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         sourceint           );
106,108c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       );
106,108c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned ;
106,110c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< typedef char            Char;
---
>       unsigned int  typedef char            Char;
106,110c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< typedef char            Char;
---
>       unsigned int  sourceLenchar            Char;
107,110c107
<       int           small, 
<       int           );
< 
< typedef char            Char;
---
>       Char;
107,110c107
<       int           small, 
<       int           );
< 
< typedef char            Char;
---
>       int           ;
107,111c107
<       int           small, 
<       int           );
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       int           smalltypedef unsigned char   Bool;
108,111c108
<       int           );
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       unsigned char   Bool;
108,111c108
<       int           );
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       int           char   Bool;
108,111c108
<       int           );
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       int           )Bool;
110,111c110
< typedef char            Char;
< typedef unsigned char   Bool;
---
> ;
110,112c110
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef typedef unsigned char   UChar;
110,112c110
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            unsigned char   UChar;
110,112c110
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            Charchar   UChar;
111,112c111
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> UChar;
(97.6 %, 4865 bytes)
110,112c110
< ;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> Int32;
111,112c111
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> ;
111,113c111
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
---
> typedef unsigned short  UInt16;
111,113c111
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
---
> typedef unsigned short  UInt16;
111,113c111
< typedef unsigned char   UChar;
< typedef int             Int32;
< unsigned short  UInt16;
---
> typedef unsigned char   UInt16;
112,113d111
< typedef int             Int32;
< unsigned short  UInt16;
112,114d111
< typedef int             Int32;
< unsigned short  UInt16;
< 
112,115c112
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef define True  (Bool)0x8   
112,115c112
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef int             True  (Bool)0x8   
112,115c112
< typedef int             Int32;
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> typedef int             Int32(Bool)0x8   
113,115c113
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> Bool)0x8   
113,115c113
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> unsigned )0x8   
113,115c113
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
---
> unsigned short  0x8   
113,116c113
< unsigned short  UInt16;
< 
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> unsigned short  UInt16#define BZ_RAND_DECLS                          \
115,116c115
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
115,116c115
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> #BZ_RAND_DECLS                          \
115,116c115
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
---
> #define \
115,118c115
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
< 
< #define BZ_RAND_MASK ;
---
> #define True  #define BZ_RAND_MASK ;
115,118c115
< #define True  (Bool)0x8   
< #define BZ_RAND_DECLS                          \
< 
< #define BZ_RAND_MASK ;
---
> #define True  (define BZ_RAND_MASK ;
(97.7 %, 4802 bytes)
115,127c115
< #define True  #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #define True  #define BZ_X_CCRC_4      0
115,127c115
< #define True  #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #define True  #define BZ_X_CCRC_4      0
115,127c115
< #define True  #define BZ_RAND_MASK ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define #define BZ_X_CCRC_4      0
---
> #define True  #define BZ_X_CCRC_4      0
(97.7 %, 4752 bytes)
115,122c115
< #define True  #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define True  #define MTFL_SIZE 6
115,122c115
< #define True  #define BZ_X_CCRC_4      0
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define True  #define MTFL_SIZE 6
(97.7 %, 4697 bytes)
115,124c115
< #define True  #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32   save_gPerm;
---
> #define True  save_gPerm;
115,124c115
< #define True  #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32   save_gPerm;
---
> #define True  #;
115,126c115
< #define True  #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32   save_gPerm;
< 
<    }
---
> #define True  #define }
115,127c115
< #define True  #define MTFL_SIZE 6
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32   save_gPerm;
< 
<    }
<    ;
---
> #define True  #define MTFL_SIZE ;
121,130d120
< typedef
<    struct {
<       
<       Int32   save_gPerm;
< 
<    }
<    ;
< 
< 
< 
(97.7 %, 4623 bytes)
115,135c115
< #define True  #define }
<    ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> #define True  #define BZFILE* BZ_APIBZ2_bzWriteOpen 
116,135c116
<    ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>    * BZ_APIBZ2_bzWriteOpen 
120,135c120
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZ_APIBZ2_bzWriteOpen 
127,136c127
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
127,136c127
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #int*  bzerror,      
127,136c127
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define *  bzerror,      
127,136c127
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define BZ_SETERReee                    bzerror,      
127,136c127
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #define BZ_SETERReee                    bzFile,      
135,137c135
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> FILE* f, 
135,137c135
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* f, 
135,137c135
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* f, 
136,137c136
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     , 
136,138c136
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int   blockSize100k, 
136,138c136
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( intblockSize100k, 
136,138c136
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  , 
136,139c136
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorint   verbosity,
137,139c137
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       verbosity,
137,139c137
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE,
137,140c137
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* int   workFactor )
137,140c137
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* fworkFactor )
138,140c138
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
138,141c138
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       int   ;
138,146c138
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int   blockSize100kvoid BZ_APIBZ2_bzWrite
139,146c139
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       BZ_APIBZ2_bzWrite
139,147c139
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   ( int*    bzerror, 
139,147c139
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   verbosityint*    bzerror, 
140,147c140
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       *    bzerror, 
140,147c140
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   bzerror, 
140,147c140
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   workFactor , 
141,148c141
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> BZFILE* b, 
146,148c146
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
146,148c146
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void b, 
147,148c147
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              , 
147,149c147
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( void*   buf, 
147,149c147
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*   buf, 
147,149c147
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    buf, 
148,149d147
<                BZFILE* b, 
<                void*   buf, 
148,149d147
<                BZFILE* b, 
<                void*   buf, 
148,150c148
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILElen )
148,150c148
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* )
148,151c148
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE* b;
149,155c149
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                void BZ_APIBZ2_bzWriteClose
149,155c149
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                voidBZ_APIBZ2_bzWriteClose
149,156c149
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   ( int*          bzerror, 
149,156c149
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   bufint*          bzerror, 
150,156c150
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                *          bzerror, 
150,156c150
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int     bzerror, 
150,156c150
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int     len , 
151,157c151
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
155,157c155
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
155,157c155
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void b, 
156,157c156
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   , 
156,158c156
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int           abandon,
156,158c156
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intabandon,
156,158c156
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          ,
156,159c156
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorunsigned int* nbytes_in,
157,159c157
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int* nbytes_in,
157,159c157
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE* nbytes_in,
157,159c157
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       nbytes_in,
157,159c157
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b,
158,159d157
<                     int           abandon,
<                     unsigned int* nbytes_in,
158,160c158
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           int* nbytes_out )
158,160c158
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandon* nbytes_out )
159,160c159
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
159,160c159
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned )
159,161c159
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned int;
159,164c159
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned int* void BZ_APIBZ2_bzWriteClose64
159,164c159
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned int* nbytes_inBZ_APIBZ2_bzWriteClose64
160,165c160
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( int*          bzerror, 
160,165c160
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int*          bzerror, 
160,165c160
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int*          bzerror, 
160,165c160
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* bzerror, 
160,165c160
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out , 
161,166c161
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
164,166c164
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
164,166c164
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void b, 
165,166c165
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   , 
165,167c165
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int           abandon,
165,167c165
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intabandon,
165,167c165
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          ,
165,168c165
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_lo32,
166,168c166
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int* nbytes_in_lo32,
166,168c166
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE* nbytes_in_lo32,
166,168c166
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       nbytes_in_lo32,
166,168c166
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b,
167,168d166
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
167,169c167
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           int* nbytes_in_hi32,
167,169c167
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandon* nbytes_in_hi32,
168,169c168
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
168,169c168
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned ,
168,170c168
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intunsigned int* nbytes_out_lo32,
168,170c168
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* int* nbytes_out_lo32,
168,170c168
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_lo32,
169,170c169
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
169,170c169
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
169,171c169
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
169,171c169
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
169,171c169
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32* nbytes_out_hi32 )
170,171c170
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
170,171c170
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
170,172c170
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int;
170,176c170
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* BZFILE* BZ_APIBZ2_bzReadOpen 
170,176c170
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned int* nbytes_out_lo32* BZ_APIBZ2_bzReadOpen 
171,176c171
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     BZ_APIBZ2_bzReadOpen 
171,177c171
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned ( int*  bzerror, 
171,177c171
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned intint*  bzerror, 
171,177c171
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* *  bzerror, 
171,177c171
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 bzerror, 
172,177c172
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> , 
176,178c176
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
176,178c176
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* f, 
176,178c176
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* f, 
177,178c177
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    , 
177,179c177
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int   verbosity,
177,179c177
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( intverbosity,
177,179c177
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  ,
177,180c177
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerrorint   small,
178,180c178
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      small,
178,180c178
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE,
178,181c178
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* void* unused,
178,181c178
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* f* unused,
179,181c179
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      unused,
179,181c179
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   ,
179,182c179
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbosityint   nUnused )
180,182c180
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
180,182c180
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   )
180,183c180
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      int   small;
181,187c181
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void ;
181,187c181
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void;
181,191c181
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      void* int BZ_APIBZ2_bzRead 
181,191c181
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      void* unusedBZ_APIBZ2_bzRead 
182,192c182
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      ( int*    bzerror, 
182,192c182
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   int*    bzerror, 
182,192c182
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   nUnused *    bzerror, 
183,192c183
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> bzerror, 
187,192c187
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> , 
187,193c187
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void BZFILE* b, 
191,193c191
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
191,193c191
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int b, 
192,193c192
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            , 
192,194c192
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( void*   buf, 
192,194c192
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*   buf, 
192,194c192
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    buf, 
193,194d192
<              BZFILE* b, 
<              void*   buf, 
193,194d192
<              BZFILE* b, 
<              void*   buf, 
193,195c193
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILElen )
193,195c193
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* )
193,196c193
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE* b{
194,198c194
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
---
>              0; 
194,198c194
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
---
>              void; 
194,199c194
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
---
>              void*   }
194,203c194
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              void*   bufvoid BZ_APIBZ2_bzReadGetUnused 
195,203c195
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              BZ_APIBZ2_bzReadGetUnused 
195,204c195
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     ( int*    bzerror, 
195,204c195
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     len int*    bzerror, 
196,204c196
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> *    bzerror, 
198,204c198
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    bzerror, 
198,204c198
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    0, 
199,205c199
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> BZFILE* b, 
203,205c203
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
203,205c203
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void b, 
204,205c204
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      , 
204,206c204
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( void**  unused, 
204,206c204
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int**  unused, 
204,206c204
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    *  unused, 
204,206c204
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerrorunused, 
205,206c205
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        , 
205,207c205
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILEint*    nUnused )
205,207c205
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* *    nUnused )
205,207c205
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bnUnused )
206,207c206
<                        void**  unused, 
<                        int*    nUnused )
---
>                        )
206,208c206
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void;
206,216c206
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        void*int BZ_APIBZ2_bzBuffToBuffCompress 
206,216c206
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        void**  BZ_APIBZ2_bzBuffToBuffCompress 
206,217c206
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  unused( char*         dest, 
207,217c207
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        char*         dest, 
207,217c207
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int*         dest, 
207,217c207
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int*    dest, 
207,217c207
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int*    nUnused , 
208,218c208
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> unsigned int* destLen,
216,218c216
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
216,218c216
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int * destLen,
217,218c217
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          destLen,
217,218c217
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( ,
217,219c217
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( charchar*         source, 
217,219c217
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         *         source, 
217,219c217
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destsource, 
218,219c218
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            , 
218,220c218
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned unsigned int  sourceLen,
218,220c218
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intint  sourceLen,
218,220c218
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* sourceLen,
219,220d218
<                            char*         source, 
<                            unsigned int  sourceLen,
219,220d218
<                            char*         source, 
<                            unsigned int  sourceLen,
219,221c219
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            charblockSize100k, 
219,221c219
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         , 
219,222c219
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceint           verbosity, 
220,222c220
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
220,222c220
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned , 
220,223c220
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  int           workFactor )
220,223c220
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLenworkFactor )
221,223c221
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
221,224c221
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            int           ;
221,228c221
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int           blockSize100kint BZ_APIBZ2_bzBuffToBuffDecompress 
222,228c222
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            BZ_APIBZ2_bzBuffToBuffDecompress 
222,229c222
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           ( char*         dest, 
222,229c222
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbositychar*         dest, 
223,229c223
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            *         dest, 
223,229c223
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           dest, 
223,229c223
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           workFactor , 
224,230c224
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> unsigned int* destLen,
228,230c228
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
228,230c228
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int * destLen,
229,230c229
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            destLen,
229,230c229
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( ,
229,231c229
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( charchar*         source, 
229,231c229
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         *         source, 
229,231c229
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destsource, 
230,231c230
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              , 
230,232c230
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned unsigned int  sourceLen,
230,232c230
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intint  sourceLen,
230,232c230
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* sourceLen,
231,232d230
<                              char*         source, 
<                              unsigned int  sourceLen,
231,232d230
<                              char*         source, 
<                              unsigned int  sourceLen,
231,233c231
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              charsmall,
231,233c231
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         ,
231,234c231
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceint           verbosity )
232,234c232
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
232,234c232
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned )
232,235c232
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned int  ;
232,249c232
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>                              unsigned int  sourceLen;
233,253c233
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              int BZ_APIBZ2_bzread ()
233,253c233
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              int           BZ_APIBZ2_bzread ()
233,253c233
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              int           small()
234,253c234
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              )
234,254c234
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
---
>                              int           {
234,255c234
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
>                              int           verbosity int bzerr, nread;
235,255c235
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
> bzerr, nread;
249,255c249
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
> , nread;
253,255c253
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
> nread;
253,255c253
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
---
> int ;
253,256c253
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
<    0;
---
> int BZ_APIBZ2_bzread 0;
253,256c253
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr, nread;
<    0;
---
> int BZ_APIBZ2_bzread (;
254,257c254
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> nread = 0;
255,257c255
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    = 0;
255,257c255
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int 0;
255,257c255
<    int bzerr, nread;
<    0;
<    nread = 0;
---
>    int bzerr;
255,258c255
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
255,258c255
<    int bzerr, nread;
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
256,258c256
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
256,258c256
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    0== BZ_OK || bzerr == BZ_STREAM_END) ; else ;
257,258c257
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_OK || bzerr == BZ_STREAM_END) ; else ;
257,258c257
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread || bzerr == BZ_STREAM_END) ; else ;
257,258c257
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = bzerr == BZ_STREAM_END) ; else ;
257,258c257
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    nread = 0== BZ_STREAM_END) ; else ;
258c258
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_STREAM_END) ; else ;
(97.8 %, 4596 bytes)
255,256c255
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr== BZ_STREAM_END) ; else ;
256c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_STREAM_END) ; else ;
256c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ) ; else ;
256c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (; else ;
256c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr else ;
256c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (bzerr == ;
256,257c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (bzerr == BZ_OK }
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || 
\ No newline at end of file
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr 
\ No newline at end of file
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
256,260c256
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
257,260d256
< }
< 
< 
< 
Termination check: size was 204936; now 4596
===< pass_ternary :: b >===
===< pass_ternary :: c >===
===< pass_balanced :: curly >===
196,199c196
< {
<    
<    0; 
< }
---
> 
260a258
>  
\ No newline at end of file
254,257d253
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
260a257,258
> 
>  
\ No newline at end of file
===< pass_balanced :: angles >===
13c13
< #include <stdio.h>
---
> #include 
260a261
>  
\ No newline at end of file
===< pass_balanced :: curly-only >===
196c196
< {
---
> 
199c199
< }
---
> 
260a261
>  
\ No newline at end of file
254c254
< {
---
> 
257d256
< }
260a260,261
> 
>  
\ No newline at end of file
===< pass_clang :: local-to-global >===
252a253
> int BZ_APIBZ2_bzread_bzerr;
255,256c256,257
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    
>    if (BZ_APIBZ2_bzread_bzerr == BZ_OK || BZ_APIBZ2_bzread_bzerr == BZ_STREAM_END) ; else ;
===< pass_clang :: remove-nested-function >===
===< pass_clang :: return-void >===
clang_delta: Transformation.cpp:101: void Transformation::outputTransformedSource(llvm::raw_ostream&): Assertion `RWBuf && "Empty RewriteBuffer!"' failed.
Aborted

***************************************************

pass_clang::return-void has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=return-void --counter=1 /tmp/creduce-6itjrM/bzip2.c

Please consider tarring up /home/ukoc/mangroveL/sut-bzip2/runs/run-1454559305.8218/creduce_bug_000
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: replace-simple-typedef >===
111c111
< typedef unsigned char   UChar;
---
> 
112c112
< typedef int             Int32;
---
> 
(97.8 %, 4566 bytes)
112c112
< typedef int             Int32;
---
> 
(97.8 %, 4536 bytes)
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_unifdef :: 0 >===
===< pass_ints :: a >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-11 >===
9,13c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> include <stdio.h>
9,13c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #<stdio.h>
9,13c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define stdio.h>
9,13c9
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define BZ_OK                .h>
10,13c10
< #3
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> h>
10,13c10
< #3
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #>
11,14d10
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
11,15c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_API(func) func
11,15c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_API(func) func
11,15c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_STREAM_END        (func) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #) func
13,15c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func
13,16c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <#   define BZ_EXTERN extern
13,16c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdiodefine BZ_EXTERN extern
13,16c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.BZ_EXTERN extern
13,16c13
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hextern
15,20d14
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
15,21c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
---
> #   ;
15,27c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define #define BZ_MAX_UNUSED 0
15,27c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_APIdefine BZ_MAX_UNUSED 0
15,27c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(BZ_MAX_UNUSED 0
15,27c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_API(func0
15,29c15
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define BZ_API(func) typedef void BZFILE;
16,29c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> void BZFILE;
16,29c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   BZFILE;
16,29c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
---
> #   define ;
16,31c16
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #   define BZ_EXTERN BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
21,31c21
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZFILE* BZ_APIBZ2_bzReadOpen ( 
21,31c21
< int ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> int * BZ_APIBZ2_bzReadOpen ( 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_APIBZ2_bzReadOpen ( 
27,31c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> #( 
27,32c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> #define int*  bzerror,   
27,32c27
< #define BZ_MAX_UNUSED 0
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED *  bzerror,   
29,32c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> bzerror,   
29,32c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
> typedef ,   
29,33c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void FILE* f, 
29,33c29
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILE* f, 
31,33c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> f, 
31,33c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN , 
31,34c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILEint   verbosity, 
31,34c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* verbosity, 
31,34c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen , 
32,34d31
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
32,35c32
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       intsmall,
32,35c32
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  ,
32,36c32
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorvoid* unused,    
33,36c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
33,36c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEunused,    
33,36c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* ,    
33,37c33
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* fint   nUnused 
34,37c34
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
34,38c34
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   );
34,38c34
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   verbosity;
35,40c35
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       BZ_EXTERN void ;
35,40c35
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   void ;
35,40c35
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   small;
36,42c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
36,42c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       voidvoid BZ_APIBZ2_bzReadGetUnused ( 
36,42c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void* BZ_APIBZ2_bzReadGetUnused ( 
36,42c36
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>       void* unused( 
37,42d36
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
37,43c37
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
38,43c38
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    bzerror, 
38,43c38
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    ), 
40,44c40
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
40,44c40
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
40,44c40
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void b, 
42,44c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
42,45c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void**  unused,  
42,45c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void **  unused,  
42,45c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused *  unused,  
43,45c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       unused,  
43,45c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int,  
43,46c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    int*    nUnused 
43,46c43
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerror*    nUnused 
44,46c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
44,47c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE);
44,47c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* ;
44,49c44
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       BZFILE* bBZ_EXTERN int BZ_APIBZ2_bzRead ( 
45,49c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       int BZ_APIBZ2_bzRead ( 
45,49c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       voidBZ_APIBZ2_bzRead ( 
45,49c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>       void*( 
45,50c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       void**  int*    bzerror, 
45,50c45
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       void**  unused*    bzerror, 
46,50c46
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       bzerror, 
46,50c46
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>       int, 
46,51c46
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
47,51c47
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    * b, 
47,51c47
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )b, 
49,51c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
49,52c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void*   buf, 
49,52c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int *   buf, 
49,52c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead buf, 
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
50,53c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       intint     len 
50,53c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    len 
50,54c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    bzerror);
51,54c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
51,56c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILEBZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
51,56c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* BZFILE* BZ_APIBZ2_bzWriteOpen ( 
51,56c51
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZFILE* b* BZ_APIBZ2_bzWriteOpen ( 
52,56c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       BZ_APIBZ2_bzWriteOpen ( 
52,56c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>       void( 
52,57c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       void*   int*  bzerror,      
52,57c52
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       void*   buf*  bzerror,      
53,57c53
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       bzerror,      
53,57c53
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>       int     ,      
54,58c54
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    FILE* f, 
54,58c54
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN , 
56,59c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILEint   blockSize100k, 
56,59c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* blockSize100k, 
56,59c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen , 
57,59d56
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
57,60c57
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       intverbosity, 
57,60c57
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  , 
57,61c57
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  bzerrorint   workFactor 
58,61c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
58,62c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE);
58,62c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* ;
58,64c58
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       FILE* fBZ_EXTERN void BZ_APIBZ2_bzWrite ( 
59,64c59
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       void BZ_APIBZ2_bzWrite ( 
59,64c59
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   BZ_APIBZ2_bzWrite ( 
59,64c59
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>       int   blockSize100k( 
60,64d59
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
60,65c60
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
60,65c60
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       int   verbositybzerror, 
61,65c61
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>       , 
61,66c61
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   BZFILE* b, 
62,66c62
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    * b, 
62,66c62
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )b, 
64,66c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
64,67c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void*   buf, 
64,67c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void *   buf, 
64,67c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite buf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       intint     len 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    len 
65,69c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    bzerror);
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
66,71c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILEBZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
66,71c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILE* void BZ_APIBZ2_bzWriteClose ( 
66,71c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       BZFILE* bBZ_APIBZ2_bzWriteClose ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>       ( 
67,72c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       voidint*          bzerror, 
67,72c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       void*   *          bzerror, 
67,72c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       void*   bufbzerror, 
68,72c68
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>       , 
68,73c68
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int     BZFILE*       b, 
69,73c69
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    *       b, 
69,73c69
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )b, 
71,73c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> , 
71,74c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN int           abandon, 
71,74c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void abandon, 
71,74c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose , 
72,74d71
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
72,75c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intint* nbytes_in, 
72,75c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          * nbytes_in, 
72,75c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrornbytes_in, 
73,75c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
73,76c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILEunsigned int* nbytes_out 
73,76c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       int* nbytes_out 
73,76c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       b* nbytes_out 
74,76c74
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
74,77c74
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           );
74,77c74
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           abandon;
75,79c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
75,79c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned void BZ_APIBZ2_bzWriteClose64 ( 
75,79c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned intBZ_APIBZ2_bzWriteClose64 ( 
75,79c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>       unsigned int* ( 
75,80c75
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int* nbytes_inint*          bzerror, 
76,80c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       *          bzerror, 
76,80c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned bzerror, 
76,80c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>       unsigned int, 
76,81c76
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int* BZFILE*       b, 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    *       b, 
77,81c77
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )b, 
79,81c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> , 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN int           abandon, 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void abandon, 
79,82c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 , 
80,82d79
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intint* nbytes_in_lo32, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          * nbytes_in_lo32, 
80,83c80
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrornbytes_in_lo32, 
81,83c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILEunsigned int* nbytes_in_hi32, 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       int* nbytes_in_hi32, 
81,84c81
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       b* nbytes_in_hi32, 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
82,84c82
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           , 
82,85c82
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandonunsigned int* nbytes_out_lo32, 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
83,85c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
83,86c83
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_hi32
84,86c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
84,86c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
84,86c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
84,87c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
84,87c84
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_hi32;
85,92c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
85,92c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int BZ_APIBZ2_bzBuffToBuffCompress ( 
85,92c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned intBZ_APIBZ2_bzBuffToBuffCompress ( 
85,92c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned int* ( 
85,93c85
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int* nbytes_out_lo32char*         dest, 
86,93c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       *         dest, 
86,93c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned dest, 
86,93c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>       unsigned int, 
86,94c86
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* unsigned int* destLen,
87,94c87
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    int* destLen,
87,94c87
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )* destLen,
92,94c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> destLen,
92,94c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN ,
92,95c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int char*         source, 
92,95c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress *         source, 
93,95c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
93,95c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char, 
93,96c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
93,96c93
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destint  sourceLen,
94,96c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
94,96c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned ,
94,97c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned intint           blockSize100k, 
94,97c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* blockSize100k, 
94,97c94
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLen, 
95,97d94
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
95,98c95
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       charverbosity, 
95,98c95
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         , 
95,99c95
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         sourceint           workFactor 
96,99c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
96,100c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned );
96,100c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  ;
96,102c96
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       unsigned int  sourceLenBZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
97,102c97
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int BZ_APIBZ2_bzBuffToBuffDecompress ( 
97,102c97
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           BZ_APIBZ2_bzBuffToBuffDecompress ( 
97,102c97
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       int           blockSize100k( 
98,102d97
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
98,103c98
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           *         dest, 
98,103c98
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       int           verbositydest, 
99,103c99
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>       , 
99,104c99
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           unsigned int* destLen,
100,104c100
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    int* destLen,
100,104c100
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )* destLen,
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> destLen,
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN ,
102,105c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int char*         source, 
102,105c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress *         source, 
103,105c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
103,105c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char, 
103,106c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
103,106c103
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destint  sourceLen,
104,106c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
104,106c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned ,
104,107c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned intint           small, 
104,107c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* small, 
104,107c104
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLen, 
105,107d104
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
105,108c105
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char);
105,108c105
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         ;
105,110c105
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
---
>       char*         source;
106,113c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
---
>       unsigned short  UInt16;
106,113c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
---
>       unsigned short  UInt16;
106,113c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
---
>       unsigned int  UInt16;
106,113c106
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
---
>       unsigned int  sourceLen;
107,115c107
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
< 
< #define True  #define }
---
>       #define True  #define }
107,115c107
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
< 
< #define True  #define }
---
>       int           define True  #define }
107,115c107
<       int           small, 
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
< 
< #define True  #define }
---
>       int           smallTrue  #define }
108,115c108
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
< 
< #define True  #define }
---
>       #define }
108,115c108
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
< 
< #define True  #define }
---
>       int           define }
108,115c108
<       int           );
< 
< ;
< 
< 
< unsigned short  UInt16;
< 
< #define True  #define }
---
>       int           )}
113,118d112
< unsigned short  UInt16;
< 
< #define True  #define }
<    ;
< 
< 
113,119d112
< unsigned short  UInt16;
< 
< #define True  #define }
<    ;
< 
< 
< 
(97.8 %, 4480 bytes)
110,130c110
< ;
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> int*  bzerror,      
114,130c114
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  bzerror,      
121,130c121
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> bzerror,      
121,130c121
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> #,      
121,131c121
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define FILE* f, 
121,131c121
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define BZ_SETERReee                    * f, 
121,131c121
< #define BZ_SETERReee                    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> #define BZ_SETERReee                    bzFilef, 
129,131c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> , 
129,132c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILEint   blockSize100k, 
129,132c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* blockSize100k, 
130,132c130
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     , 
130,133c130
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int   verbosity,
130,133c130
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intverbosity,
130,133c130
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  ,
130,134c130
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorint   workFactor )
131,134c131
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       workFactor )
131,134c131
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE)
131,135c131
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       FILE* ;
131,140c131
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       FILE* fvoid BZ_APIBZ2_bzWrite
132,140c132
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       BZ_APIBZ2_bzWrite
132,141c132
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   ( int*    bzerror, 
132,141c132
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   blockSize100kint*    bzerror, 
133,141c133
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       *    bzerror, 
133,141c133
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   bzerror, 
133,141c133
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   verbosity, 
134,142c134
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       BZFILE* b, 
134,142c134
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   * b, 
134,142c134
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor b, 
135,142c135
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
140,143c140
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void*   buf, 
140,143c140
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void *   buf, 
141,143c141
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              buf, 
141,143c141
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( , 
141,144c141
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( intint     len )
141,144c141
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    len )
141,144c141
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerror)
142,145c142
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                ;
142,149c142
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZFILEvoid BZ_APIBZ2_bzWriteClose
142,149c142
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                BZFILE* BZ_APIBZ2_bzWriteClose
142,150c142
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                BZFILE* b( int*          bzerror, 
143,150c143
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                int*          bzerror, 
143,150c143
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*          bzerror, 
143,150c143
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>                void*   bzerror, 
144,150d143
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
144,151c144
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                BZFILE*       b, 
144,151c144
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     *       b, 
144,151c144
<                int     len )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     len b, 
145,151c145
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
149,152c149
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
149,152c149
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void abandon,
150,152c150
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ,
150,153c150
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( unsigned int* nbytes_in,
150,153c150
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intint* nbytes_in,
150,153c150
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          * nbytes_in,
150,153c150
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrornbytes_in,
151,153c151
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     ,
151,154c151
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILEunsigned int* nbytes_out )
151,154c151
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       int* nbytes_out )
151,154c151
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b* nbytes_out )
152,154c152
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
152,154c152
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           )
152,155c152
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     int           abandon;
153,158c153
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     void BZ_APIBZ2_bzWriteClose64
153,158c153
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned BZ_APIBZ2_bzWriteClose64
153,159c153
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int( int*          bzerror, 
153,159c153
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* int*          bzerror, 
153,159c153
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_in*          bzerror, 
154,159c154
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     bzerror, 
154,159c154
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     unsigned , 
154,160c154
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned intBZFILE*       b, 
154,160c154
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* *       b, 
154,160c154
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_out b, 
155,160c155
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
158,161c158
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
158,161c158
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void abandon,
159,161c159
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ,
159,162c159
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( unsigned int* nbytes_in_lo32,
159,162c159
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intint* nbytes_in_lo32,
159,162c159
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          * nbytes_in_lo32,
159,162c159
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrornbytes_in_lo32,
160,162c160
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     ,
160,163c160
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILEunsigned int* nbytes_in_hi32,
160,163c160
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       int* nbytes_in_hi32,
160,163c160
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b* nbytes_in_hi32,
161,163c161
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
161,163c161
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           ,
161,164c161
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandonunsigned int* nbytes_out_lo32,
162,164c162
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
162,164c162
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
162,164c162
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
162,164c162
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
162,165c162
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_hi32 )
163,165c163
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
163,165c163
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
163,165c163
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
163,165c163
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
163,166c163
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int* nbytes_in_hi32;
164,170c164
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     BZFILE* BZ_APIBZ2_bzReadOpen 
164,170c164
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned * BZ_APIBZ2_bzReadOpen 
164,170c164
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>                     unsigned intBZ_APIBZ2_bzReadOpen 
164,171c164
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* ( int*  bzerror, 
164,171c164
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_lo32int*  bzerror, 
165,171c165
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
165,171c165
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned bzerror, 
165,171c165
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned int, 
165,172c165
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* FILE* f, 
165,172c165
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* nbytes_out_hi32 * f, 
166,172c166
< ;
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
170,172c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> , 
170,173c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILEint   verbosity,
170,173c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* verbosity,
171,173c171
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ,
171,174c171
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int   small,
171,174c171
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( intsmall,
171,174c171
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  ,
171,175c171
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorvoid* unused,
172,175c172
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      * unused,
172,175c172
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEunused,
172,175c172
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* ,
172,176c172
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* fint   nUnused )
173,176c173
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
173,176c173
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   )
173,177c173
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      int   verbosity;
174,181c174
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void ;
174,181c174
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      int   ;
174,185c174
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      int   smallint BZ_APIBZ2_bzRead 
175,185c175
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
---
>                      BZ_APIBZ2_bzRead 
175,186c175
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      void( int*    bzerror, 
175,186c175
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      void* int*    bzerror, 
175,186c175
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      void* unused*    bzerror, 
176,186c176
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      bzerror, 
176,186c176
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   , 
176,187c176
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      int   nUnused BZFILE* b, 
177,187c177
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
181,187c181
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
181,187c181
< void ;
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void , 
185,188c185
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void*   buf, 
185,188c185
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int *   buf, 
186,188c186
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            buf, 
186,188c186
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( , 
186,189c186
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( intint     len )
186,189c186
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    len )
186,189c186
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerror)
187,190c187
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              {
187,192c187
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
---
>              BZFILE0; 
187,192c187
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
---
>              BZFILE* ; 
187,193c187
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
---
>              BZFILE* b}
188,197c188
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              void BZ_APIBZ2_bzReadGetUnused 
188,197c188
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              voidBZ_APIBZ2_bzReadGetUnused 
188,198c188
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              void*   ( int*    bzerror, 
188,198c188
<              void*   buf, 
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              void*   bufint*    bzerror, 
189,198c189
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              *    bzerror, 
189,198c189
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     bzerror, 
189,198c189
<              int     len )
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>              int     len , 
190,199c190
< {
<    
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> BZFILE* b, 
192,199c192
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    * b, 
192,199c192
<    0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    0b, 
193,199c193
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
197,200c197
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void**  unused, 
197,200c197
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void **  unused, 
198,200c198
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      *  unused, 
198,200c198
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( unused, 
198,200c198
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int, 
198,201c198
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    int*    nUnused )
198,201c198
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror*    nUnused )
199,201c199
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        nUnused )
199,201c199
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE)
199,202c199
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        BZFILE* ;
199,210c199
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        BZFILE* bint BZ_APIBZ2_bzBuffToBuffCompress 
200,210c200
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>                        BZ_APIBZ2_bzBuffToBuffCompress 
200,211c200
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void( char*         dest, 
200,211c200
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void*char*         dest, 
200,211c200
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  *         dest, 
200,211c200
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        void**  unuseddest, 
201,211c201
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        , 
201,212c201
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        intunsigned int* destLen,
201,212c201
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    int* destLen,
201,212c201
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused * destLen,
202,212c202
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
210,212c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> ,
210,213c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int char*         source, 
211,213c211
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          *         source, 
211,213c211
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( source, 
211,213c211
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char, 
211,214c211
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         unsigned int  sourceLen,
211,214c211
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destint  sourceLen,
212,214c212
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
212,214c212
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned ,
212,215c212
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned intint           blockSize100k, 
212,215c212
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* blockSize100k, 
212,215c212
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLen, 
213,215d212
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
213,216c213
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            charverbosity, 
213,216c213
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         , 
213,217c213
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         sourceint           workFactor )
214,217c214
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
214,217c214
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned )
214,218c214
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            unsigned int  ;
214,222c214
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            unsigned int  sourceLenint BZ_APIBZ2_bzBuffToBuffDecompress 
215,222c215
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            BZ_APIBZ2_bzBuffToBuffDecompress 
215,223c215
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           ( char*         dest, 
215,223c215
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           blockSize100kchar*         dest, 
216,223c216
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            *         dest, 
216,223c216
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           dest, 
217,223d216
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
217,224c217
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            unsigned int* destLen,
217,224c217
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           int* destLen,
217,224c217
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor * destLen,
218,224c218
< ;
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
222,224c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> ,
222,225c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int char*         source, 
223,225c223
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            *         source, 
223,225c223
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( source, 
223,225c223
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char, 
223,226c223
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         unsigned int  sourceLen,
223,226c223
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destint  sourceLen,
224,226c224
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
224,226c224
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned ,
224,227c224
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned intint           small,
224,227c224
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* small,
225,227d224
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
225,227d224
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
225,228c225
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              charverbosity )
225,228c225
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         )
225,229c225
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              char*         source;
226,243c226
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>                              ;
226,247c226
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              unsigned int BZ_APIBZ2_bzread ()
226,247c226
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              unsigned int  BZ_APIBZ2_bzread ()
226,247c226
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              unsigned int  sourceLen()
227,247c227
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
---
>                              )
227,248c227
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
---
>                              int           {
227,249c227
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>                              int           smallint bzerr;
228,249c228
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>                              bzerr;
228,249c228
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>                              int           ;
228,250c228
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>                              int           verbosity if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
229,250c229
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
243,250c243
< ;
< 
< 
< 
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
247,250c247
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
247,250c247
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_OK || bzerr == BZ_STREAM_END) ; else ;
247,250c247
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_APIBZ2_bzread || bzerr == BZ_STREAM_END) ; else ;
247,250c247
< int BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_APIBZ2_bzread (bzerr == BZ_STREAM_END) ; else ;
248,250c248
< {
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> == BZ_STREAM_END) ; else ;
249,250c249
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_STREAM_END) ; else ;
249,250c249
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int ) ; else ;
249,250c249
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ;
250,251c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (}
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
250,254c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
251,254d250
< }
< 
< 
< 
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #define BZ_OK                0
---
> define BZ_OK                0
9c9
< #define BZ_OK                0
---
>  BZ_OK                0
9c9
< #define BZ_OK                0
---
> define                 0
9c9
< #define BZ_OK                0
---
>                  0
9c9
< #define BZ_OK                0
---
> define BZ_OK                
9c9
< #define BZ_OK                0
---
>  BZ_OK                
9c9
< #define BZ_OK                0
---
> define                 
9c9
< #define BZ_OK                0
---
>                  
9c9
< #define BZ_OK                0
---
> # BZ_OK                0
9c9
< #define BZ_OK                0
---
> #                 0
9c9
< #define BZ_OK                0
---
> # BZ_OK                
9c9
< #define BZ_OK                0
---
> #                 
9,10c9,10
< #define BZ_OK                0
< #3
---
> # BZ_OK                0
> 3
9,10c9,10
< #define BZ_OK                0
< #3
---
> #                 0
> 3
9,10c9,10
< #define BZ_OK                0
< #3
---
> # BZ_OK                
> 3
9,10c9,10
< #define BZ_OK                0
< #3
---
> #                 
> 3
9c9
< #define BZ_OK                0
---
> #define                 0
9c9
< #define BZ_OK                0
---
> #define                 
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define                 0
> 3
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define                 
> 3
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define                 0
> #
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define                 
> #
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define                 0
> 
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define                 
> 
9c9
< #define BZ_OK                0
---
> #define BZ_OK                
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define BZ_OK                
> 3
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define BZ_OK                
> #
9,10c9,10
< #define BZ_OK                0
< #3
---
> #define BZ_OK                
> 
9c9
< #define BZ_OK                0
---
> #define BZ_OK                
11c11
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
9,11c9,11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
---
> #define BZ_OK                
> 3
> define BZ_STREAM_END        9
9,11c9,11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
---
> #define BZ_OK                
> #
> define BZ_STREAM_END        9
9,11c9,11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        9
---
> #define BZ_OK                
> 
> define BZ_STREAM_END        9
10c10
< #3
---
> 3
10c10
< #3
---
> 
10,11c10,11
< #3
< #define BZ_STREAM_END        9
---
> 3
> define BZ_STREAM_END        9
10,11c10,11
< #3
< #define BZ_STREAM_END        9
---
> 
> define BZ_STREAM_END        9
10,11c10,11
< #3
< #define BZ_STREAM_END        9
---
> 3
> # BZ_STREAM_END        9
10,11c10,11
< #3
< #define BZ_STREAM_END        9
---
> 
> # BZ_STREAM_END        9
10,11c10,11
< #3
< #define BZ_STREAM_END        9
---
> 3
>  BZ_STREAM_END        9
10,11c10,11
< #3
< #define BZ_STREAM_END        9
---
> 
>  BZ_STREAM_END        9
10c10
< #3
---
> #
(97.8 %, 4478 bytes)
11c11
< #define BZ_STREAM_END        9
---
>  BZ_STREAM_END        9
11c11
< #define BZ_STREAM_END        9
---
> define         9
11c11
< #define BZ_STREAM_END        9
---
>          9
11c11
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        
11c11
< #define BZ_STREAM_END        9
---
>  BZ_STREAM_END        
11c11
< #define BZ_STREAM_END        9
---
> define         
11c11
< #define BZ_STREAM_END        9
---
>          
11c11
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        9
11c11
< #define BZ_STREAM_END        9
---
> #         9
11c11
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        
11c11
< #define BZ_STREAM_END        9
---
> #         
11c11
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        9
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #         9
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #         
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define         9
11c11
< #define BZ_STREAM_END        9
---
> #define         
11c11
< #define BZ_STREAM_END        9
---
> #define         9
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define         
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define         9
13c13
< #include <stdio.h>
---
> # <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define         
13c13
< #include <stdio.h>
---
> # <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define         9
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define         
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
> # <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
>  <stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
> #include stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
> include stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
> # stdio.h>
11c11
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <stdio.h>
13c13
< #include <stdio.h>
---
>  <stdio.h>
13c13
< #include <stdio.h>
---
> include stdio.h>
13c13
< #include <stdio.h>
---
>  stdio.h>
13c13
< #include <stdio.h>
---
> include <.h>
13c13
< #include <stdio.h>
---
>  <.h>
13c13
< #include <stdio.h>
---
> include .h>
13c13
< #include <stdio.h>
---
>  .h>
13c13
< #include <stdio.h>
---
> # <stdio.h>
13c13
< #include <stdio.h>
---
> # stdio.h>
13c13
< #include <stdio.h>
---
> # <.h>
13c13
< #include <stdio.h>
---
> # .h>
13c13
< #include <stdio.h>
---
> # <stdioh>
13c13
< #include <stdio.h>
---
> # stdioh>
13c13
< #include <stdio.h>
---
> # <h>
13c13
< #include <stdio.h>
---
> # h>
13c13
< #include <stdio.h>
---
> #include stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include stdioh>
13c13
< #include <stdio.h>
---
> #include h>
13c13
< #include <stdio.h>
---
> #include stdio.>
13c13
< #include <stdio.h>
---
> #include .>
13c13
< #include <stdio.h>
---
> #include stdio>
13c13
< #include <stdio.h>
---
> #include >
13c13
< #include <stdio.h>
---
> #include <.h>
13c13
< #include <stdio.h>
---
> #include <h>
13c13
< #include <stdio.h>
---
> #include <.>
13c13
< #include <stdio.h>
---
> #include <>
13c13
< #include <stdio.h>
---
> #include <.h
13c13
< #include <stdio.h>
---
> #include <h
13c13
< #include <stdio.h>
---
> #include <.
13c13
< #include <stdio.h>
---
> #include <
13c13
< #include <stdio.h>
---
> #include <stdioh>
13c13
< #include <stdio.h>
---
> #include <stdio>
13c13
< #include <stdio.h>
---
> #include <stdioh
13c13
< #include <stdio.h>
---
> #include <stdio
13c13
< #include <stdio.h>
---
> #include <stdioh>
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio>
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdioh
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.>
13c13
< #include <stdio.h>
---
> #include <stdio.
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.>
15c15
< #   define BZ_API(func) func
---
>     BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.
15c15
< #   define BZ_API(func) func
---
>     BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
>     BZ_API(func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
> #   define (func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
>    define (func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
> #    (func) func
13c13
< #include <stdio.h>
---
> #include <stdio.h
15c15
< #   define BZ_API(func) func
---
>     (func) func
15c15
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
15c15
< #   define BZ_API(func) func
---
>     BZ_API(func) func
15c15
< #   define BZ_API(func) func
---
>    define (func) func
15c15
< #   define BZ_API(func) func
---
>     (func) func
15c15
< #   define BZ_API(func) func
---
>    define BZ_APIfunc) func
15c15
< #   define BZ_API(func) func
---
>     BZ_APIfunc) func
15c15
< #   define BZ_API(func) func
---
>    define func) func
15c15
< #   define BZ_API(func) func
---
>     func) func
15c15
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
15c15
< #   define BZ_API(func) func
---
> #    (func) func
15c15
< #   define BZ_API(func) func
---
> #    BZ_APIfunc) func
15c15
< #   define BZ_API(func) func
---
> #    func) func
15c15
< #   define BZ_API(func) func
---
> #    BZ_API() func
15c15
< #   define BZ_API(func) func
---
> #    () func
15c15
< #   define BZ_API(func) func
---
> #    BZ_API) func
15c15
< #   define BZ_API(func) func
---
> #    ) func
15c15
< #   define BZ_API(func) func
---
> #   define (func) func
15c15
< #   define BZ_API(func) func
---
> #   define func) func
15c15
< #   define BZ_API(func) func
---
> #   define () func
15c15
< #   define BZ_API(func) func
---
> #   define ) func
15c15
< #   define BZ_API(func) func
---
> #   define (func func
15c15
< #   define BZ_API(func) func
---
> #   define func func
(97.8 %, 4471 bytes)
15c15
< #   define func) func
---
> #   define  func
15c15
< #   define func) func
---
> #   define ) 
15c15
< #   define func) func
---
> #   define  
15,16c15,16
< #   define func) func
< #   define BZ_EXTERN extern
---
> #   define ) func
>    define BZ_EXTERN extern
15,16c15,16
< #   define func) func
< #   define BZ_EXTERN extern
---
> #   define  func
>    define BZ_EXTERN extern
15,16c15,16
< #   define func) func
< #   define BZ_EXTERN extern
---
> #   define ) 
>    define BZ_EXTERN extern
15,16c15,16
< #   define func) func
< #   define BZ_EXTERN extern
---
> #   define  
>    define BZ_EXTERN extern
15c15
< #   define func) func
---
> #   define func func
(97.8 %, 4466 bytes)
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
>    define BZ_EXTERN extern
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
> #    BZ_EXTERN extern
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
>     BZ_EXTERN extern
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
> #   define  extern
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
>    define  extern
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
> #     extern
15,16c15,16
< #   define  func
< #   define BZ_EXTERN extern
---
> #   define  
>      extern
16c16
< #   define BZ_EXTERN extern
---
>    define BZ_EXTERN extern
16c16
< #   define BZ_EXTERN extern
---
>     BZ_EXTERN extern
16c16
< #   define BZ_EXTERN extern
---
>    define  extern
16c16
< #   define BZ_EXTERN extern
---
>      extern
16c16
< #   define BZ_EXTERN extern
---
>    define BZ_EXTERN 
16c16
< #   define BZ_EXTERN extern
---
>     BZ_EXTERN 
16c16
< #   define BZ_EXTERN extern
---
>    define  
16c16
< #   define BZ_EXTERN extern
---
>      
16c16
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
16c16
< #   define BZ_EXTERN extern
---
> #     extern
16c16
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
16c16
< #   define BZ_EXTERN extern
---
> #     
16c16
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
21c21
< int ;
---
>  ;
16c16
< #   define BZ_EXTERN extern
---
> #     extern
21c21
< int ;
---
>  ;
16c16
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
21c21
< int ;
---
>  ;
16c16
< #   define BZ_EXTERN extern
---
> #     
21c21
< int ;
---
>  ;
16c16
< #   define BZ_EXTERN extern
---
> #   define  extern
16c16
< #   define BZ_EXTERN extern
---
> #   define  
16c16
< #   define BZ_EXTERN extern
---
> #   define  extern
21c21
< int ;
---
>  ;
16c16
< #   define BZ_EXTERN extern
---
> #   define  
21c21
< int ;
---
>  ;
16c16
< #   define BZ_EXTERN extern
---
> #   define  extern
21c21
< int ;
---
> int 
16c16
< #   define BZ_EXTERN extern
---
> #   define  
21c21
< int ;
---
> int 
16c16
< #   define BZ_EXTERN extern
---
> #   define  extern
21c21
< int ;
---
>  
16c16
< #   define BZ_EXTERN extern
---
> #   define  
21c21
< int ;
---
>  
16c16
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
16c16
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
21c21
< int ;
---
>  ;
(97.8 %, 4460 bytes)
21c21
< int ;
---
>  ;
21c21
< int ;
---
>  
21c21
< int ;
---
>  ;
27c27
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
(97.8 %, 4457 bytes)
21c21
<  ;
---
>  
21c21
<  ;
---
>  
27c27
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
21c21
<  ;
---
>  
27c27
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
21c21
<  ;
---
>  
27c27
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
21c21
<  ;
---
>  
27c27
< #define BZ_MAX_UNUSED 0
---
> #define  0
21c21
<  ;
---
>  
27c27
< #define BZ_MAX_UNUSED 0
---
> define  0
21c21
<  ;
---
>  
27c27
< #define BZ_MAX_UNUSED 0
---
> #  0
(97.8 %, 4456 bytes)
27c27
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
27c27
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
27c27
< #define BZ_MAX_UNUSED 0
---
> define  0
27c27
< #define BZ_MAX_UNUSED 0
---
>   0
27c27
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 
27c27
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 
27c27
< #define BZ_MAX_UNUSED 0
---
> define  
27c27
< #define BZ_MAX_UNUSED 0
---
>   
27c27
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
27c27
< #define BZ_MAX_UNUSED 0
---
> #  0
(97.8 %, 4435 bytes)
29c29
< typedef void BZFILE;
---
>   
29c29
< typedef void BZFILE;
---
> typedef  BZFILE;
29c29
< typedef void BZFILE;
---
> typedef  ;
29c29
< typedef void BZFILE;
---
> typedef  BZFILE
29c29
< typedef void BZFILE;
---
> typedef  
29c29
< typedef void BZFILE;
---
> typedef  BZFILE;
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
(97.8 %, 4431 bytes)
29c29
< typedef  BZFILE;
---
> typedef  ;
29c29
< typedef  BZFILE;
---
> typedef  
29c29
< typedef  BZFILE;
---
> typedef  ;
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  ;
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  ;
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadOpen ( 
29c29
< typedef  BZFILE;
---
> typedef  BZFILE
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen ( 
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzReadOpen ( 
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
31c31
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  BZFILE BZ_APIBZ2_bzReadOpen ( 
(97.8 %, 4422 bytes)
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen ( 
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen ( 
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  *  ( 
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>    ( 
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen  
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen  
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>  *   
31c31
<  BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
>     
(97.8 %, 4416 bytes)
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen ( 
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>    ( 
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>   BZ_APIBZ2_bzReadOpen  
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>     
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>   BZ_APIBZ2_bzReadOpen ( 
>       *  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>    ( 
>       *  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>   BZ_APIBZ2_bzReadOpen  
>       *  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>     
>       *  bzerror,   
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  *  ( 
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  *   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       *  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       *  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       int  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       int  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>         bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>         bzerror,   
31c31
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  * BZ_APIBZ2_bzReadOpen  
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       *  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       int  bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>         bzerror,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       int*  ,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       *  ,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>       int  ,   
31,32c31,32
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ_APIBZ2_bzReadOpen  
>         ,   
32c32
<       int*  bzerror,   
---
>       *  bzerror,   
32c32
<       int*  bzerror,   
---
>         bzerror,   
32c32
<       int*  bzerror,   
---
>       *  ,   
32c32
<       int*  bzerror,   
---
>         ,   
32c32
<       int*  bzerror,   
---
>       *  bzerror   
32c32
<       int*  bzerror,   
---
>         bzerror   
32c32
<       int*  bzerror,   
---
>       *     
32c32
<       int*  bzerror,   
---
>            
32c32
<       int*  bzerror,   
---
>       int  bzerror,   
32c32
<       int*  bzerror,   
---
>       int  ,   
32c32
<       int*  bzerror,   
---
>       int  bzerror   
32c32
<       int*  bzerror,   
---
>       int     
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror,   
>       * f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int  ,   
>       * f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror   
>       * f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int     
>       * f, 
32c32
<       int*  bzerror,   
---
>       int*  ,   
32c32
<       int*  bzerror,   
---
>       int*     
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       * f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       * f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       FILE f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>        f, 
32,33c32,33
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>        f, 
32c32
<       int*  bzerror,   
---
>       int*  bzerror   
(97.8 %, 4409 bytes)
32c32
<       int*  ,   
---
>       int*     
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * f, 
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        f, 
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE* , 
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * , 
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE , 
32,33c32,33
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        , 
33c33
<       FILE* f, 
---
>       * f, 
33c33
<       FILE* f, 
---
>        f, 
33c33
<       FILE* f, 
---
>       * , 
33c33
<       FILE* f, 
---
>        , 
33c33
<       FILE* f, 
---
>       * f 
33c33
<       FILE* f, 
---
>        f 
33c33
<       FILE* f, 
---
>       *  
33c33
<       FILE* f, 
---
>         
33c33
<       FILE* f, 
---
>       FILE f, 
33c33
<       FILE* f, 
---
>       FILE , 
33c33
<       FILE* f, 
---
>       FILE f 
33c33
<       FILE* f, 
---
>       FILE  
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f, 
>          verbosity, 
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE , 
>          verbosity, 
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f 
>          verbosity, 
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE  
>          verbosity, 
33c33
<       FILE* f, 
---
>       FILE* , 
33c33
<       FILE* f, 
---
>       FILE*  
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>          verbosity, 
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
33,34c33,34
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>       int   , 
(97.8 %, 4408 bytes)
33c33
<       FILE* , 
---
>       FILE*  
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   , 
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          , 
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   verbosity 
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity 
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int    
33,34c33,34
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>           
34c34
<       int   verbosity, 
---
>          verbosity, 
34c34
<       int   verbosity, 
---
>          , 
34c34
<       int   verbosity, 
---
>          verbosity 
34c34
<       int   verbosity, 
---
>           
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>          verbosity, 
>          small,
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>          , 
>          small,
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>          verbosity 
>          small,
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>           
>          small,
34c34
<       int   verbosity, 
---
>       int   , 
34c34
<       int   verbosity, 
---
>       int    
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>       int   , 
>          small,
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>       int    
>          small,
34,35c34,35
<       int   verbosity, 
<       int   small,
---
>       int   , 
>       int   ,
(97.9 %, 4399 bytes)
34c34
<       int   , 
---
>       int    
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>          small,
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>       int   ,
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>          ,
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>       int   small
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>          small
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>       int   
34,35c34,35
<       int   , 
<       int   small,
---
>       int    
>          
35c35
<       int   small,
---
>          small,
35c35
<       int   small,
---
>          ,
35c35
<       int   small,
---
>          small
35c35
<       int   small,
---
>          
35,36c35,36
<       int   small,
<       void* unused,    
---
>          small,
>       * unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>          ,
>       * unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>          small
>       * unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>          
>       * unused,    
35c35
<       int   small,
---
>       int   ,
35c35
<       int   small,
---
>       int   
35,36c35,36
<       int   small,
<       void* unused,    
---
>       int   ,
>       * unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>       int   
>       * unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>       int   ,
>       void unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>       int   
>       void unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>       int   ,
>        unused,    
35,36c35,36
<       int   small,
<       void* unused,    
---
>       int   
>        unused,    
(97.9 %, 4394 bytes)
35c35
<       int   ,
---
>       int   
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>       * unused,    
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>       void unused,    
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>        unused,    
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>       void* ,    
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>       * ,    
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>       void ,    
35,36c35,36
<       int   ,
<       void* unused,    
---
>       int   
>        ,    
36c36
<       void* unused,    
---
>       * unused,    
36c36
<       void* unused,    
---
>        unused,    
36c36
<       void* unused,    
---
>       * ,    
36c36
<       void* unused,    
---
>        ,    
36c36
<       void* unused,    
---
>       * unused    
36c36
<       void* unused,    
---
>        unused    
36c36
<       void* unused,    
---
>       *     
36c36
<       void* unused,    
---
>            
36c36
<       void* unused,    
---
>       void unused,    
36c36
<       void* unused,    
---
>       void ,    
36c36
<       void* unused,    
---
>       void unused    
36c36
<       void* unused,    
---
>       void     
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void unused,    
>          nUnused 
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void ,    
>          nUnused 
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void unused    
>          nUnused 
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void     
>          nUnused 
36c36
<       void* unused,    
---
>       void* ,    
36c36
<       void* unused,    
---
>       void*     
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>          nUnused 
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void*     
>          nUnused 
36,37c36,37
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>       int    
(97.9 %, 4388 bytes)
36c36
<       void* ,    
---
>       void*     
36,37c36,37
<       void* ,    
<       int   nUnused 
---
>       void*     
>          nUnused 
36,37c36,37
<       void* ,    
<       int   nUnused 
---
>       void*     
>       int    
36,37c36,37
<       void* ,    
<       int   nUnused 
---
>       void*     
>           
36c36
<       void* ,    
---
>       void*     
38c38
<    );
---
>    ;
36,38c36,38
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>          nUnused 
>    ;
36,38c36,38
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>       int    
>    ;
36,38c36,38
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>           
>    ;
37c37
<       int   nUnused 
---
>          nUnused 
37c37
<       int   nUnused 
---
>           
37,38c37,38
<       int   nUnused 
<    );
---
>          nUnused 
>    ;
37,38c37,38
<       int   nUnused 
<    );
---
>           
>    ;
37,38c37,38
<       int   nUnused 
<    );
---
>          nUnused 
>    )
37,38c37,38
<       int   nUnused 
<    );
---
>           
>    )
37,38c37,38
<       int   nUnused 
<    );
---
>          nUnused 
>    
37,38c37,38
<       int   nUnused 
<    );
---
>           
>    
37c37
<       int   nUnused 
---
>       int    
37,38c37,38
<       int   nUnused 
<    );
---
>       int    
>    ;
37,38c37,38
<       int   nUnused 
<    );
---
>       int    
>    )
37,38c37,38
<       int   nUnused 
<    );
---
>       int    
>    
37c37
<       int   nUnused 
---
>       int    
40c40
< BZ_EXTERN void ;
---
>  void ;
(97.9 %, 4381 bytes)
38c38
<    );
---
>    ;
38c38
<    );
---
>    
38c38
<    );
---
>    ;
40c40
< BZ_EXTERN void ;
---
>  void ;
38c38
<    );
---
>    
40c40
< BZ_EXTERN void ;
---
>  void ;
38c38
<    );
---
>    ;
40c40
< BZ_EXTERN void ;
---
> BZ_EXTERN  ;
38c38
<    );
---
>    
40c40
< BZ_EXTERN void ;
---
> BZ_EXTERN  ;
38c38
<    );
---
>    ;
40c40
< BZ_EXTERN void ;
---
>   ;
38c38
<    );
---
>    
40c40
< BZ_EXTERN void ;
---
>   ;
38c38
<    );
---
>    )
38c38
<    );
---
>    )
40c40
< BZ_EXTERN void ;
---
>  void ;
38c38
<    );
---
>    )
40c40
< BZ_EXTERN void ;
---
> BZ_EXTERN  ;
38c38
<    );
---
>    )
40c40
< BZ_EXTERN void ;
---
>   ;
38c38
<    );
---
>    )
40c40
< BZ_EXTERN void ;
---
> BZ_EXTERN void 
(97.9 %, 4376 bytes)
40c40
< BZ_EXTERN  ;
---
>   ;
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
40c40
< BZ_EXTERN  ;
---
>   
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
40c40
< BZ_EXTERN  ;
---
>   ;
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused ( 
40c40
< BZ_EXTERN  ;
---
>   
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused ( 
40c40
< BZ_EXTERN  ;
---
>   ;
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
40c40
< BZ_EXTERN  ;
---
>   
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
40c40
< BZ_EXTERN  ;
---
> BZ_EXTERN  
40c40
< BZ_EXTERN  ;
---
> BZ_EXTERN  
42c42
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused ( 
(97.9 %, 4358 bytes)
40c40
<   ;
---
>   
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void  ( 
40c40
<   ;
---
>   
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>    ( 
40c40
<   ;
---
>   
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused  
40c40
<   ;
---
>   
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused  
40c40
<   ;
---
>   
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void   
40c40
<   ;
---
>   
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>     
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>    ( 
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused  
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>     
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
>       *    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzReadGetUnused  
>       *    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void  ( 
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void   
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
42c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void BZ_APIBZ2_bzReadGetUnused  
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       *    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       int    bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>           bzerror, 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       int*    , 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       *    , 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>       int    , 
42,43c42,43
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzReadGetUnused  
>           , 
43c43
<       int*    bzerror, 
---
>       *    bzerror, 
43c43
<       int*    bzerror, 
---
>           bzerror, 
43c43
<       int*    bzerror, 
---
>       *    , 
43c43
<       int*    bzerror, 
---
>           , 
43c43
<       int*    bzerror, 
---
>       *    bzerror 
43c43
<       int*    bzerror, 
---
>           bzerror 
43c43
<       int*    bzerror, 
---
>       *     
43c43
<       int*    bzerror, 
---
>            
43c43
<       int*    bzerror, 
---
>       int    bzerror, 
43c43
<       int*    bzerror, 
---
>       int    , 
43c43
<       int*    bzerror, 
---
>       int    bzerror 
43c43
<       int*    bzerror, 
---
>       int     
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
43c43
<       int*    bzerror, 
---
>       int*    , 
43c43
<       int*    bzerror, 
---
>       int*     
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
43,44c43,44
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
(97.9 %, 4351 bytes)
43c43
<       int*    , 
---
>       int*     
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
43,44c43,44
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
44c44
<       BZFILE* b, 
---
>       * b, 
44c44
<       BZFILE* b, 
---
>        b, 
44c44
<       BZFILE* b, 
---
>       * , 
44c44
<       BZFILE* b, 
---
>        , 
44c44
<       BZFILE* b, 
---
>       * b 
44c44
<       BZFILE* b, 
---
>        b 
44c44
<       BZFILE* b, 
---
>       *  
44c44
<       BZFILE* b, 
---
>         
44c44
<       BZFILE* b, 
---
>       BZFILE b, 
44c44
<       BZFILE* b, 
---
>       BZFILE , 
44c44
<       BZFILE* b, 
---
>       BZFILE b 
44c44
<       BZFILE* b, 
---
>       BZFILE  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b, 
>       **  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE , 
>       **  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b 
>       **  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE  
>       **  unused,  
44c44
<       BZFILE* b, 
---
>       BZFILE* , 
44c44
<       BZFILE* b, 
---
>       BZFILE*  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       **  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       void*  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       *  unused,  
44,45c44,45
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
(97.9 %, 4350 bytes)
44c44
<       BZFILE* , 
---
>       BZFILE*  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void  unused,  
44,45c44,45
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>         unused,  
45c45
<       void**  unused,  
---
>       **  unused,  
45c45
<       void**  unused,  
---
>       *  unused,  
45c45
<       void**  unused,  
---
>       *  unused,  
45c45
<       void**  unused,  
---
>         unused,  
45c45
<       void**  unused,  
---
>       **  ,  
45c45
<       void**  unused,  
---
>       *  ,  
45c45
<       void**  unused,  
---
>       *  ,  
45c45
<       void**  unused,  
---
>         ,  
45c45
<       void**  unused,  
---
>       void*  unused,  
45c45
<       void**  unused,  
---
>       void  unused,  
45c45
<       void**  unused,  
---
>       void*  ,  
45c45
<       void**  unused,  
---
>       void  ,  
45c45
<       void**  unused,  
---
>       void*  unused  
45c45
<       void**  unused,  
---
>       void  unused  
45c45
<       void**  unused,  
---
>       void*    
45c45
<       void**  unused,  
---
>       void    
45c45
<       void**  unused,  
---
>       void*  unused,  
45c45
<       void**  unused,  
---
>       void*  ,  
45c45
<       void**  unused,  
---
>       void*  unused  
45c45
<       void**  unused,  
---
>       void*    
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused,  
>       *    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void*  ,  
>       *    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused  
>       *    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void*    
>       *    nUnused 
45c45
<       void**  unused,  
---
>       void**  ,  
45c45
<       void**  unused,  
---
>       void**    
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       *    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       int    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>           nUnused 
45,46c45,46
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
45c45
<       void**  unused,  
---
>       void**  unused  
(97.9 %, 4344 bytes)
45c45
<       void**  ,  
---
>       void**    
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int*     
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *     
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int     
45,46c45,46
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>            
46c46
<       int*    nUnused 
---
>       *    nUnused 
46c46
<       int*    nUnused 
---
>           nUnused 
46c46
<       int*    nUnused 
---
>       *     
46c46
<       int*    nUnused 
---
>            
46,47c46,47
<       int*    nUnused 
<    );
---
>       *    nUnused 
>    ;
46,47c46,47
<       int*    nUnused 
<    );
---
>           nUnused 
>    ;
46,47c46,47
<       int*    nUnused 
<    );
---
>       *     
>    ;
46,47c46,47
<       int*    nUnused 
<    );
---
>            
>    ;
46c46
<       int*    nUnused 
---
>       int    nUnused 
46c46
<       int*    nUnused 
---
>       int     
46,47c46,47
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    ;
46,47c46,47
<       int*    nUnused 
<    );
---
>       int     
>    ;
46,47c46,47
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    )
46,47c46,47
<       int*    nUnused 
<    );
---
>       int     
>    )
46,47c46,47
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    
46,47c46,47
<       int*    nUnused 
<    );
---
>       int     
>    
46c46
<       int*    nUnused 
---
>       int*     
46,47c46,47
<       int*    nUnused 
<    );
---
>       int*     
>    ;
46,47c46,47
<       int*    nUnused 
<    );
---
>       int*     
>    )
46,47c46,47
<       int*    nUnused 
<    );
---
>       int*     
>    
46c46
<       int*    nUnused 
---
>       int*     
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
(97.9 %, 4337 bytes)
47c47
<    );
---
>    ;
47c47
<    );
---
>    
47c47
<    );
---
>    ;
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    ;
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    ;
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    )
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int  ( 
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int  ( 
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN   ( 
47c47
<    );
---
>    )
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>    ( 
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>  int BZ_APIBZ2_bzRead ( 
49c49
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
(97.9 %, 4328 bytes)
49c49
<  int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead ( 
49c49
<  int BZ_APIBZ2_bzRead ( 
---
>    ( 
49c49
<  int BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead  
49c49
<  int BZ_APIBZ2_bzRead ( 
---
>     
49,50c49,50
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead ( 
>       *    bzerror, 
49,50c49,50
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
49,50c49,50
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       *    bzerror, 
49,50c49,50
<  int BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
49c49
<  int BZ_APIBZ2_bzRead ( 
---
>  int  ( 
(97.9 %, 4325 bytes)
49c49
<   BZ_APIBZ2_bzRead ( 
---
>    ( 
49c49
<   BZ_APIBZ2_bzRead ( 
---
>     
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>       int    bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>       int    bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>    ( 
>           bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>     
>           bzerror, 
49c49
<   BZ_APIBZ2_bzRead ( 
---
>   BZ_APIBZ2_bzRead  
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       *    bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       int    bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>           bzerror, 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       int*    , 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       *    , 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>       int    , 
49,50c49,50
<   BZ_APIBZ2_bzRead ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzRead  
>           , 
50c50
<       int*    bzerror, 
---
>       *    bzerror, 
50c50
<       int*    bzerror, 
---
>           bzerror, 
50c50
<       int*    bzerror, 
---
>       *    , 
50c50
<       int*    bzerror, 
---
>           , 
50c50
<       int*    bzerror, 
---
>       *    bzerror 
50c50
<       int*    bzerror, 
---
>           bzerror 
50c50
<       int*    bzerror, 
---
>       *     
50c50
<       int*    bzerror, 
---
>            
50c50
<       int*    bzerror, 
---
>       int    bzerror, 
50c50
<       int*    bzerror, 
---
>       int    , 
50c50
<       int*    bzerror, 
---
>       int    bzerror 
50c50
<       int*    bzerror, 
---
>       int     
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
50c50
<       int*    bzerror, 
---
>       int*    , 
50c50
<       int*    bzerror, 
---
>       int*     
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
50,51c50,51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
50c50
<       int*    bzerror, 
---
>       int*    bzerror 
(97.9 %, 4318 bytes)
50c50
<       int*    , 
---
>       int*     
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
50,51c50,51
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
51c51
<       BZFILE* b, 
---
>       * b, 
51c51
<       BZFILE* b, 
---
>        b, 
51c51
<       BZFILE* b, 
---
>       * , 
51c51
<       BZFILE* b, 
---
>        , 
51c51
<       BZFILE* b, 
---
>       * b 
51c51
<       BZFILE* b, 
---
>        b 
51c51
<       BZFILE* b, 
---
>       *  
51c51
<       BZFILE* b, 
---
>         
51c51
<       BZFILE* b, 
---
>       BZFILE b, 
51c51
<       BZFILE* b, 
---
>       BZFILE , 
51c51
<       BZFILE* b, 
---
>       BZFILE b 
51c51
<       BZFILE* b, 
---
>       BZFILE  
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
51c51
<       BZFILE* b, 
---
>       BZFILE* , 
51c51
<       BZFILE* b, 
---
>       BZFILE*  
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
51,52c51,52
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
(97.9 %, 4317 bytes)
51c51
<       BZFILE* , 
---
>       BZFILE*  
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
51,52c51,52
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
52c52
<       void*   buf, 
---
>       *   buf, 
52c52
<       void*   buf, 
---
>          buf, 
52c52
<       void*   buf, 
---
>       *   , 
52c52
<       void*   buf, 
---
>          , 
52c52
<       void*   buf, 
---
>       *   buf 
52c52
<       void*   buf, 
---
>          buf 
52c52
<       void*   buf, 
---
>       *    
52c52
<       void*   buf, 
---
>           
52c52
<       void*   buf, 
---
>       void   buf, 
52c52
<       void*   buf, 
---
>       void   , 
52c52
<       void*   buf, 
---
>       void   buf 
52c52
<       void*   buf, 
---
>       void    
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
52c52
<       void*   buf, 
---
>       void*   , 
52c52
<       void*   buf, 
---
>       void*    
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
52,53c52,53
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(97.9 %, 4314 bytes)
52c52
<       void*   , 
---
>       void*    
52,53c52,53
<       void*   , 
<       int     len 
---
>       void*    
>            len 
52,53c52,53
<       void*   , 
<       int     len 
---
>       void*    
>       int      
52,53c52,53
<       void*   , 
<       int     len 
---
>       void*    
>             
52c52
<       void*   , 
---
>       void*    
54c54
<    );
---
>    ;
52,54c52,54
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
52,54c52,54
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
52,54c52,54
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
53c53
<       int     len 
---
>            len 
53c53
<       int     len 
---
>             
53,54c53,54
<       int     len 
<    );
---
>            len 
>    ;
53,54c53,54
<       int     len 
<    );
---
>             
>    ;
53,54c53,54
<       int     len 
<    );
---
>            len 
>    )
53,54c53,54
<       int     len 
<    );
---
>             
>    )
53,54c53,54
<       int     len 
<    );
---
>            len 
>    
53,54c53,54
<       int     len 
<    );
---
>             
>    
53c53
<       int     len 
---
>       int      
53,54c53,54
<       int     len 
<    );
---
>       int      
>    ;
53,54c53,54
<       int     len 
<    );
---
>       int      
>    )
53,54c53,54
<       int     len 
<    );
---
>       int      
>    
53c53
<       int     len 
---
>       int      
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(97.9 %, 4311 bytes)
54c54
<    );
---
>    ;
54c54
<    );
---
>    
54c54
<    );
---
>    ;
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    ;
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    ;
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen ( 
54c54
<    );
---
>    )
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen ( 
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
56c56
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
(97.9 %, 4302 bytes)
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen ( 
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen ( 
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  *  ( 
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>    ( 
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen  
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen  
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  *   
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>     
56c56
<  BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
>  BZFILE BZ_APIBZ2_bzWriteOpen ( 
(97.9 %, 4296 bytes)
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen ( 
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>    ( 
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>   BZ_APIBZ2_bzWriteOpen  
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>     
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>   BZ_APIBZ2_bzWriteOpen ( 
>       *  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>    ( 
>       *  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>   BZ_APIBZ2_bzWriteOpen  
>       *  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>     
>       *  bzerror,      
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  *  ( 
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  *   
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       *  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       *  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       int  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       int  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>         bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>         bzerror,      
56c56
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  * BZ_APIBZ2_bzWriteOpen  
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       *  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       int  bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>         bzerror,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       int*  ,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       *  ,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>       int  ,      
56,57c56,57
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ_APIBZ2_bzWriteOpen  
>         ,      
57c57
<       int*  bzerror,      
---
>       *  bzerror,      
57c57
<       int*  bzerror,      
---
>         bzerror,      
57c57
<       int*  bzerror,      
---
>       *  ,      
57c57
<       int*  bzerror,      
---
>         ,      
57c57
<       int*  bzerror,      
---
>       *  bzerror      
57c57
<       int*  bzerror,      
---
>         bzerror      
57c57
<       int*  bzerror,      
---
>       *        
57c57
<       int*  bzerror,      
---
>               
57c57
<       int*  bzerror,      
---
>       int  bzerror,      
57c57
<       int*  bzerror,      
---
>       int  ,      
57c57
<       int*  bzerror,      
---
>       int  bzerror      
57c57
<       int*  bzerror,      
---
>       int        
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror,      
>       * f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int  ,      
>       * f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror      
>       * f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int        
>       * f, 
57c57
<       int*  bzerror,      
---
>       int*  ,      
57c57
<       int*  bzerror,      
---
>       int*        
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       * f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       * f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       FILE f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>        f, 
57,58c57,58
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>        f, 
(97.9 %, 4289 bytes)
57c57
<       int*  ,      
---
>       int*        
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * f, 
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        f, 
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE* , 
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * , 
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE , 
57,58c57,58
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        , 
58c58
<       FILE* f, 
---
>       * f, 
58c58
<       FILE* f, 
---
>        f, 
58c58
<       FILE* f, 
---
>       * , 
58c58
<       FILE* f, 
---
>        , 
58c58
<       FILE* f, 
---
>       * f 
58c58
<       FILE* f, 
---
>        f 
58c58
<       FILE* f, 
---
>       *  
58c58
<       FILE* f, 
---
>         
58c58
<       FILE* f, 
---
>       FILE f, 
58c58
<       FILE* f, 
---
>       FILE , 
58c58
<       FILE* f, 
---
>       FILE f 
58c58
<       FILE* f, 
---
>       FILE  
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f, 
>          blockSize100k, 
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE , 
>          blockSize100k, 
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f 
>          blockSize100k, 
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE  
>          blockSize100k, 
58c58
<       FILE* f, 
---
>       FILE* , 
58c58
<       FILE* f, 
---
>       FILE*  
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>          blockSize100k, 
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
58,59c58,59
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>       int   , 
(97.9 %, 4288 bytes)
58c58
<       FILE* , 
---
>       FILE*  
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   , 
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          , 
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   blockSize100k 
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k 
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int    
58,59c58,59
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>           
59c59
<       int   blockSize100k, 
---
>          blockSize100k, 
59c59
<       int   blockSize100k, 
---
>          , 
59c59
<       int   blockSize100k, 
---
>          blockSize100k 
59c59
<       int   blockSize100k, 
---
>           
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k, 
>          verbosity, 
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>          , 
>          verbosity, 
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k 
>          verbosity, 
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>           
>          verbosity, 
59c59
<       int   blockSize100k, 
---
>       int   , 
59c59
<       int   blockSize100k, 
---
>       int    
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>          verbosity, 
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>          verbosity, 
59,60c59,60
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>       int   , 
(97.9 %, 4275 bytes)
59c59
<       int   , 
---
>       int    
59,60c59,60
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity, 
58a59
>       int    
60d60
<       int   verbosity, 
59,60c59,60
<       int   , 
<       int   verbosity, 
---
>       int    
>          , 
59,60c59,60
<       int   , 
<       int   verbosity, 
---
>       int    
>       int   verbosity 
59,60c59,60
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity 
59,60c59,60
<       int   , 
<       int   verbosity, 
---
>       int    
>       int    
59,60c59,60
<       int   , 
<       int   verbosity, 
---
>       int    
>           
60c60
<       int   verbosity, 
---
>          verbosity, 
60c60
<       int   verbosity, 
---
>          , 
60c60
<       int   verbosity, 
---
>          verbosity 
60c60
<       int   verbosity, 
---
>           
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity, 
>          workFactor 
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>          , 
>          workFactor 
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity 
>          workFactor 
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>           
>          workFactor 
60c60
<       int   verbosity, 
---
>       int   , 
60c60
<       int   verbosity, 
---
>       int    
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>          workFactor 
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>       int    
>          workFactor 
60,61c60,61
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>       int    
(97.9 %, 4266 bytes)
60c60
<       int   , 
---
>       int    
60,61c60,61
<       int   , 
<       int   workFactor 
---
>       int    
>          workFactor 
60,61c60,61
<       int   , 
<       int   workFactor 
---
>       int    
>       int    
60,61c60,61
<       int   , 
<       int   workFactor 
---
>       int    
>           
60c60
<       int   , 
---
>       int    
62c62
<    );
---
>    ;
60,62c60,62
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>          workFactor 
>    ;
60,62c60,62
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>       int    
>    ;
60,62c60,62
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>           
>    ;
61c61
<       int   workFactor 
---
>          workFactor 
61c61
<       int   workFactor 
---
>           
61,62c61,62
<       int   workFactor 
<    );
---
>          workFactor 
>    ;
61,62c61,62
<       int   workFactor 
<    );
---
>           
>    ;
61,62c61,62
<       int   workFactor 
<    );
---
>          workFactor 
>    )
61,62c61,62
<       int   workFactor 
<    );
---
>           
>    )
61,62c61,62
<       int   workFactor 
<    );
---
>          workFactor 
>    
61,62c61,62
<       int   workFactor 
<    );
---
>           
>    
61c61
<       int   workFactor 
---
>       int    
61,62c61,62
<       int   workFactor 
<    );
---
>       int    
>    ;
61,62c61,62
<       int   workFactor 
<    );
---
>       int    
>    )
61,62c61,62
<       int   workFactor 
<    );
---
>       int    
>    
61c61
<       int   workFactor 
---
>       int    
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
(97.9 %, 4256 bytes)
62c62
<    );
---
>    ;
62c62
<    );
---
>    
62c62
<    );
---
>    ;
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    ;
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    ;
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    )
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void  ( 
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void  ( 
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN   ( 
62c62
<    );
---
>    )
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>    ( 
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite ( 
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void  ( 
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>    ( 
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite  
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite  
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>  void   
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
>     
64c64
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite ( 
(97.9 %, 4247 bytes)
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite ( 
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>    ( 
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>   BZ_APIBZ2_bzWrite  
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>     
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzWrite ( 
>       *    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>    ( 
>       *    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>   BZ_APIBZ2_bzWrite  
>       *    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>     
>       *    bzerror, 
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>  void  ( 
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>  void   
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
64c64
<  void BZ_APIBZ2_bzWrite ( 
---
>  void BZ_APIBZ2_bzWrite  
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       *    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       int    bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>           bzerror, 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       int*    , 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       *    , 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>       int    , 
64,65c64,65
<  void BZ_APIBZ2_bzWrite ( 
<       int*    bzerror, 
---
>  void BZ_APIBZ2_bzWrite  
>           , 
65c65
<       int*    bzerror, 
---
>       *    bzerror, 
65c65
<       int*    bzerror, 
---
>           bzerror, 
65c65
<       int*    bzerror, 
---
>       *    , 
65c65
<       int*    bzerror, 
---
>           , 
65c65
<       int*    bzerror, 
---
>       *    bzerror 
65c65
<       int*    bzerror, 
---
>           bzerror 
65c65
<       int*    bzerror, 
---
>       *     
65c65
<       int*    bzerror, 
---
>            
65c65
<       int*    bzerror, 
---
>       int    bzerror, 
65c65
<       int*    bzerror, 
---
>       int    , 
65c65
<       int*    bzerror, 
---
>       int    bzerror 
65c65
<       int*    bzerror, 
---
>       int     
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
65c65
<       int*    bzerror, 
---
>       int*    , 
65c65
<       int*    bzerror, 
---
>       int*     
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
65,66c65,66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
(97.9 %, 4240 bytes)
65c65
<       int*    , 
---
>       int*     
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
65,66c65,66
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
66c66
<       BZFILE* b, 
---
>       * b, 
66c66
<       BZFILE* b, 
---
>        b, 
66c66
<       BZFILE* b, 
---
>       * , 
66c66
<       BZFILE* b, 
---
>        , 
66c66
<       BZFILE* b, 
---
>       * b 
66c66
<       BZFILE* b, 
---
>        b 
66c66
<       BZFILE* b, 
---
>       *  
66c66
<       BZFILE* b, 
---
>         
66c66
<       BZFILE* b, 
---
>       BZFILE b, 
66c66
<       BZFILE* b, 
---
>       BZFILE , 
66c66
<       BZFILE* b, 
---
>       BZFILE b 
66c66
<       BZFILE* b, 
---
>       BZFILE  
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b, 
>       *   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE , 
>       *   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE b 
>       *   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE  
>       *   buf, 
66c66
<       BZFILE* b, 
---
>       BZFILE* , 
66c66
<       BZFILE* b, 
---
>       BZFILE*  
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       *   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>       void   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
>          buf, 
66,67c66,67
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
(97.9 %, 4239 bytes)
66c66
<       BZFILE* , 
---
>       BZFILE*  
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   buf, 
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   buf, 
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          buf, 
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void*   , 
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       *   , 
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>       void   , 
66,67c66,67
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE*  
>          , 
67c67
<       void*   buf, 
---
>       *   buf, 
67c67
<       void*   buf, 
---
>          buf, 
67c67
<       void*   buf, 
---
>       *   , 
67c67
<       void*   buf, 
---
>          , 
67c67
<       void*   buf, 
---
>       *   buf 
67c67
<       void*   buf, 
---
>          buf 
67c67
<       void*   buf, 
---
>       *    
67c67
<       void*   buf, 
---
>           
67c67
<       void*   buf, 
---
>       void   buf, 
67c67
<       void*   buf, 
---
>       void   , 
67c67
<       void*   buf, 
---
>       void   buf 
67c67
<       void*   buf, 
---
>       void    
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void   buf, 
>            len 
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void   , 
>            len 
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void   buf 
>            len 
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void    
>            len 
67c67
<       void*   buf, 
---
>       void*   , 
67c67
<       void*   buf, 
---
>       void*    
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void*   , 
>            len 
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void*    
>            len 
67,68c67,68
<       void*   buf, 
<       int     len 
---
>       void*   , 
>       int      
(97.9 %, 4236 bytes)
67c67
<       void*   , 
---
>       void*    
67,68c67,68
<       void*   , 
<       int     len 
---
>       void*    
>            len 
67,68c67,68
<       void*   , 
<       int     len 
---
>       void*    
>       int      
67,68c67,68
<       void*   , 
<       int     len 
---
>       void*    
>             
67c67
<       void*   , 
---
>       void*    
69c69
<    );
---
>    ;
67,69c67,69
<       void*   , 
<       int     len 
<    );
---
>       void*    
>            len 
>    ;
67,69c67,69
<       void*   , 
<       int     len 
<    );
---
>       void*    
>       int      
>    ;
67,69c67,69
<       void*   , 
<       int     len 
<    );
---
>       void*    
>             
>    ;
68c68
<       int     len 
---
>            len 
68c68
<       int     len 
---
>             
68,69c68,69
<       int     len 
<    );
---
>            len 
>    ;
68,69c68,69
<       int     len 
<    );
---
>             
>    ;
68,69c68,69
<       int     len 
<    );
---
>            len 
>    )
68,69c68,69
<       int     len 
<    );
---
>             
>    )
68,69c68,69
<       int     len 
<    );
---
>            len 
>    
68,69c68,69
<       int     len 
<    );
---
>             
>    
68c68
<       int     len 
---
>       int      
68,69c68,69
<       int     len 
<    );
---
>       int      
>    ;
68,69c68,69
<       int     len 
<    );
---
>       int      
>    )
68,69c68,69
<       int     len 
<    );
---
>       int      
>    
68c68
<       int     len 
---
>       int      
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
(97.9 %, 4233 bytes)
69c69
<    );
---
>    ;
69c69
<    );
---
>    
69c69
<    );
---
>    ;
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    ;
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    ;
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    )
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void  ( 
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void  ( 
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN   ( 
69c69
<    );
---
>    )
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>    ( 
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose ( 
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void  ( 
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>    ( 
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose  
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose  
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>  void   
71c71
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
>     
(97.9 %, 4224 bytes)
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose ( 
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>    ( 
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>   BZ_APIBZ2_bzWriteClose  
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>     
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>   BZ_APIBZ2_bzWriteClose ( 
>       *          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>    ( 
>       *          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>   BZ_APIBZ2_bzWriteClose  
>       *          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>     
>       *          bzerror, 
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void  ( 
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void   
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
71c71
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void BZ_APIBZ2_bzWriteClose  
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       *          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       int          bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>                 bzerror, 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       int*          , 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       *          , 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>       int          , 
71,72c71,72
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose  
>                 , 
72c72
<       int*          bzerror, 
---
>       *          bzerror, 
72c72
<       int*          bzerror, 
---
>                 bzerror, 
72c72
<       int*          bzerror, 
---
>       *          , 
72c72
<       int*          bzerror, 
---
>                 , 
72c72
<       int*          bzerror, 
---
>       *          bzerror 
72c72
<       int*          bzerror, 
---
>                 bzerror 
72c72
<       int*          bzerror, 
---
>       *           
72c72
<       int*          bzerror, 
---
>                  
72c72
<       int*          bzerror, 
---
>       int          bzerror, 
72c72
<       int*          bzerror, 
---
>       int          , 
72c72
<       int*          bzerror, 
---
>       int          bzerror 
72c72
<       int*          bzerror, 
---
>       int           
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
72c72
<       int*          bzerror, 
---
>       int*          , 
72c72
<       int*          bzerror, 
---
>       int*           
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
72,73c72,73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
(97.9 %, 4217 bytes)
72c72
<       int*          , 
---
>       int*           
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
72,73c72,73
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
73c73
<       BZFILE*       b, 
---
>       *       b, 
73c73
<       BZFILE*       b, 
---
>              b, 
73c73
<       BZFILE*       b, 
---
>       *       , 
73c73
<       BZFILE*       b, 
---
>              , 
73c73
<       BZFILE*       b, 
---
>       *       b 
73c73
<       BZFILE*       b, 
---
>              b 
73c73
<       BZFILE*       b, 
---
>       *        
73c73
<       BZFILE*       b, 
---
>               
73c73
<       BZFILE*       b, 
---
>       BZFILE       b, 
73c73
<       BZFILE*       b, 
---
>       BZFILE       , 
73c73
<       BZFILE*       b, 
---
>       BZFILE       b 
73c73
<       BZFILE*       b, 
---
>       BZFILE        
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
73c73
<       BZFILE*       b, 
---
>       BZFILE*       , 
73c73
<       BZFILE*       b, 
---
>       BZFILE*        
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
73,74c73,74
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(97.9 %, 4216 bytes)
73c73
<       BZFILE*       , 
---
>       BZFILE*        
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
73,74c73,74
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
74c74
<       int           abandon, 
---
>                  abandon, 
74c74
<       int           abandon, 
---
>                  , 
74c74
<       int           abandon, 
---
>                  abandon 
74c74
<       int           abandon, 
---
>                   
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon, 
>        int* nbytes_in, 
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  , 
>        int* nbytes_in, 
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon 
>        int* nbytes_in, 
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                   
>        int* nbytes_in, 
74c74
<       int           abandon, 
---
>       int           , 
74c74
<       int           abandon, 
---
>       int            
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>        int* nbytes_in, 
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
74,75c74,75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>       unsigned * nbytes_in, 
(97.9 %, 4209 bytes)
74c74
<       int           , 
---
>       int            
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned * nbytes_in, 
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        * nbytes_in, 
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned int nbytes_in, 
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int nbytes_in, 
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned  nbytes_in, 
74,75c74,75
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>         nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>        int* nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>        * nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>        int nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>         nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>        int* , 
75c75
<       unsigned int* nbytes_in, 
---
>        * , 
75c75
<       unsigned int* nbytes_in, 
---
>        int , 
75c75
<       unsigned int* nbytes_in, 
---
>         , 
75c75
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>       unsigned  nbytes_in, 
75c75
<       unsigned int* nbytes_in, 
---
>       unsigned * , 
(97.9 %, 4206 bytes)
75c75
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in, 
75c75
<       unsigned * nbytes_in, 
---
>       unsigned  , 
75c75
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in 
75c75
<       unsigned * nbytes_in, 
---
>       unsigned   
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in, 
>        int* nbytes_out 
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  , 
>        int* nbytes_out 
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in 
>        int* nbytes_out 
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned   
>        int* nbytes_out 
75c75
<       unsigned * nbytes_in, 
---
>       unsigned * , 
75c75
<       unsigned * nbytes_in, 
---
>       unsigned *  
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>        int* nbytes_out 
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
75,76c75,76
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>       unsigned * nbytes_out 
(98.0 %, 4197 bytes)
75c75
<       unsigned * , 
---
>       unsigned *  
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned * nbytes_out 
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        * nbytes_out 
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned int nbytes_out 
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int nbytes_out 
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned  nbytes_out 
75,76c75,76
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>         nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>        int* nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>        * nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>        int nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>         nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>        int*  
76c76
<       unsigned int* nbytes_out 
---
>        *  
76c76
<       unsigned int* nbytes_out 
---
>        int  
76c76
<       unsigned int* nbytes_out 
---
>          
76c76
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_out 
76c76
<       unsigned int* nbytes_out 
---
>       unsigned *  
76c76
<       unsigned int* nbytes_out 
---
>       unsigned   
(98.0 %, 4194 bytes)
76c76
<       unsigned * nbytes_out 
---
>       unsigned  nbytes_out 
76c76
<       unsigned * nbytes_out 
---
>       unsigned   
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    ;
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    ;
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    )
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    )
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    
76c76
<       unsigned * nbytes_out 
---
>       unsigned *  
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    ;
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    )
76,77c76,77
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    
76c76
<       unsigned * nbytes_out 
---
>       unsigned *  
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64 ( 
(98.0 %, 4184 bytes)
77c77
<    );
---
>    ;
77c77
<    );
---
>    
77c77
<    );
---
>    ;
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    ;
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    ;
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    )
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64 ( 
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN void  ( 
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void  ( 
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
> BZ_EXTERN   ( 
77c77
<    );
---
>    )
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>    ( 
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64 ( 
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64 ( 
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void  ( 
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>    ( 
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64  
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64  
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void   
79c79
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
---
>     
(98.0 %, 4175 bytes)
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64 ( 
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>    ( 
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>   BZ_APIBZ2_bzWriteClose64  
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>     
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ_APIBZ2_bzWriteClose64 ( 
>       *          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>    ( 
>       *          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>   BZ_APIBZ2_bzWriteClose64  
>       *          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>     
>       *          bzerror, 
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void  ( 
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void   
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
79c79
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void BZ_APIBZ2_bzWriteClose64  
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>       *          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>       int          bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>                 bzerror, 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>       int*          , 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>       *          , 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>       int          , 
79,80c79,80
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ_APIBZ2_bzWriteClose64  
>                 , 
80c80
<       int*          bzerror, 
---
>       *          bzerror, 
80c80
<       int*          bzerror, 
---
>                 bzerror, 
80c80
<       int*          bzerror, 
---
>       *          , 
80c80
<       int*          bzerror, 
---
>                 , 
80c80
<       int*          bzerror, 
---
>       *          bzerror 
80c80
<       int*          bzerror, 
---
>                 bzerror 
80c80
<       int*          bzerror, 
---
>       *           
80c80
<       int*          bzerror, 
---
>                  
80c80
<       int*          bzerror, 
---
>       int          bzerror, 
80c80
<       int*          bzerror, 
---
>       int          , 
80c80
<       int*          bzerror, 
---
>       int          bzerror 
80c80
<       int*          bzerror, 
---
>       int           
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
80c80
<       int*          bzerror, 
---
>       int*          , 
80c80
<       int*          bzerror, 
---
>       int*           
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>              b, 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>              b, 
80c80
<       int*          bzerror, 
---
>       int*          bzerror 
80,81c80,81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerror 
>       *       b, 
(98.0 %, 4168 bytes)
80c80
<       int*          , 
---
>       int*           
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
80,81c80,81
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
81c81
<       BZFILE*       b, 
---
>       *       b, 
81c81
<       BZFILE*       b, 
---
>              b, 
81c81
<       BZFILE*       b, 
---
>       *       , 
81c81
<       BZFILE*       b, 
---
>              , 
81c81
<       BZFILE*       b, 
---
>       *       b 
81c81
<       BZFILE*       b, 
---
>              b 
81c81
<       BZFILE*       b, 
---
>       *        
81c81
<       BZFILE*       b, 
---
>               
81c81
<       BZFILE*       b, 
---
>       BZFILE       b, 
81c81
<       BZFILE*       b, 
---
>       BZFILE       , 
81c81
<       BZFILE*       b, 
---
>       BZFILE       b 
81c81
<       BZFILE*       b, 
---
>       BZFILE        
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
81c81
<       BZFILE*       b, 
---
>       BZFILE*       , 
81c81
<       BZFILE*       b, 
---
>       BZFILE*        
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
81,82c81,82
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(98.0 %, 4167 bytes)
81c81
<       BZFILE*       , 
---
>       BZFILE*        
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
81,82c81,82
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
82c82
<       int           abandon, 
---
>                  abandon, 
82c82
<       int           abandon, 
---
>                  , 
82c82
<       int           abandon, 
---
>                  abandon 
82c82
<       int           abandon, 
---
>                   
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon, 
>        int* nbytes_in_lo32, 
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  , 
>        int* nbytes_in_lo32, 
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon 
>        int* nbytes_in_lo32, 
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                   
>        int* nbytes_in_lo32, 
82c82
<       int           abandon, 
---
>       int           , 
82c82
<       int           abandon, 
---
>       int            
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>        int* nbytes_in_lo32, 
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
82,83c82,83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>       unsigned * nbytes_in_lo32, 
(98.0 %, 4160 bytes)
82c82
<       int           , 
---
>       int            
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned * nbytes_in_lo32, 
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        * nbytes_in_lo32, 
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned int nbytes_in_lo32, 
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int nbytes_in_lo32, 
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned  nbytes_in_lo32, 
82,83c82,83
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>         nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>        int* nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>        int nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>         nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>        int* , 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>        * , 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>        int , 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>         , 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
83c83
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * , 
(98.0 %, 4157 bytes)
83c83
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
83c83
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  , 
83c83
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32 
83c83
<       unsigned * nbytes_in_lo32, 
---
>       unsigned   
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32, 
>        int* nbytes_in_hi32, 
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  , 
>        int* nbytes_in_hi32, 
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32 
>        int* nbytes_in_hi32, 
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned   
>        int* nbytes_in_hi32, 
83c83
<       unsigned * nbytes_in_lo32, 
---
>       unsigned * , 
83c83
<       unsigned * nbytes_in_lo32, 
---
>       unsigned *  
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>        int* nbytes_in_hi32, 
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
83,84c83,84
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>       unsigned * nbytes_in_hi32, 
(98.0 %, 4143 bytes)
83c83
<       unsigned * , 
---
>       unsigned *  
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned * nbytes_in_hi32, 
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        * nbytes_in_hi32, 
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned int nbytes_in_hi32, 
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int nbytes_in_hi32, 
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned  nbytes_in_hi32, 
83,84c83,84
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>         nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>        int* nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>        int nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>         nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>        int* , 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>        * , 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>        int , 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>         , 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
84c84
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
(98.0 %, 4140 bytes)
84c84
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
84c84
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  , 
84c84
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32 
84c84
<       unsigned * nbytes_in_hi32, 
---
>       unsigned   
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32, 
>        int* nbytes_out_lo32, 
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  , 
>        int* nbytes_out_lo32, 
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32 
>        int* nbytes_out_lo32, 
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned   
>        int* nbytes_out_lo32, 
84c84
<       unsigned * nbytes_in_hi32, 
---
>       unsigned * , 
84c84
<       unsigned * nbytes_in_hi32, 
---
>       unsigned *  
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>        int* nbytes_out_lo32, 
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
84,85c84,85
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>       unsigned * nbytes_out_lo32, 
(98.0 %, 4126 bytes)
84c84
<       unsigned * , 
---
>       unsigned *  
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned * nbytes_out_lo32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        * nbytes_out_lo32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned int nbytes_out_lo32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int nbytes_out_lo32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned  nbytes_out_lo32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>         nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>        int* nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>        int nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>         nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>        int* , 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>        * , 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>        int , 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>         , 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
85c85
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
(98.0 %, 4123 bytes)
85c85
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
85c85
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  , 
85c85
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32 
85c85
<       unsigned * nbytes_out_lo32, 
---
>       unsigned   
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32, 
>        int* nbytes_out_hi32
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  , 
>        int* nbytes_out_hi32
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32 
>        int* nbytes_out_hi32
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned   
>        int* nbytes_out_hi32
85c85
<       unsigned * nbytes_out_lo32, 
---
>       unsigned * , 
85c85
<       unsigned * nbytes_out_lo32, 
---
>       unsigned *  
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>        int* nbytes_out_hi32
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
85,86c85,86
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>       unsigned * nbytes_out_hi32
(98.0 %, 4108 bytes)
85c85
<       unsigned * , 
---
>       unsigned *  
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned * nbytes_out_hi32
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        * nbytes_out_hi32
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned int nbytes_out_hi32
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int nbytes_out_hi32
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned  nbytes_out_hi32
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>         nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>        int* nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>        * nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>        int nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>         nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>        int* 
86c86
<       unsigned int* nbytes_out_hi32
---
>        * 
86c86
<       unsigned int* nbytes_out_hi32
---
>        int 
86c86
<       unsigned int* nbytes_out_hi32
---
>         
86c86
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
86c86
<       unsigned int* nbytes_out_hi32
---
>       unsigned * 
(98.0 %, 4105 bytes)
86c86
<       unsigned * nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
86c86
<       unsigned * nbytes_out_hi32
---
>       unsigned  
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    ;
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    ;
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    )
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    )
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    
86c86
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    ;
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    )
86,87c86,87
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    
86c86
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
(98.0 %, 4090 bytes)
87c87
<    );
---
>    ;
87c87
<    );
---
>    
87c87
<    );
---
>    ;
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    ;
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    ;
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    )
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int  ( 
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int  ( 
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN   ( 
87c87
<    );
---
>    )
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    ( 
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffCompress ( 
92c92
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
(98.0 %, 4081 bytes)
92c92
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
92c92
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    ( 
92c92
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
92c92
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>     
92,93c92,93
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress ( 
>       *         dest, 
92,93c92,93
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
92,93c92,93
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       *         dest, 
92,93c92,93
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
92c92
<  int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>  int  ( 
(98.0 %, 4078 bytes)
92c92
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    ( 
92c92
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>     
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>                dest, 
92c92
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       *         dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       char         dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>                dest, 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       char*         , 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       *         , 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>       char         , 
92,93c92,93
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffCompress  
>                , 
93c93
<       char*         dest, 
---
>       *         dest, 
93c93
<       char*         dest, 
---
>                dest, 
93c93
<       char*         dest, 
---
>       *         , 
93c93
<       char*         dest, 
---
>                , 
93c93
<       char*         dest, 
---
>       *         dest 
93c93
<       char*         dest, 
---
>                dest 
93c93
<       char*         dest, 
---
>       *          
93c93
<       char*         dest, 
---
>                 
93c93
<       char*         dest, 
---
>       char         dest, 
93c93
<       char*         dest, 
---
>       char         , 
93c93
<       char*         dest, 
---
>       char         dest 
93c93
<       char*         dest, 
---
>       char          
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
93c93
<       char*         dest, 
---
>       char*         , 
93c93
<       char*         dest, 
---
>       char*          
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
93,94c93,94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(98.0 %, 4074 bytes)
93c93
<       char*         , 
---
>       char*          
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
93,94c93,94
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
94c94
<       unsigned int* destLen,
---
>        int* destLen,
94c94
<       unsigned int* destLen,
---
>        * destLen,
94c94
<       unsigned int* destLen,
---
>        int destLen,
94c94
<       unsigned int* destLen,
---
>         destLen,
94c94
<       unsigned int* destLen,
---
>        int* ,
94c94
<       unsigned int* destLen,
---
>        * ,
94c94
<       unsigned int* destLen,
---
>        int ,
94c94
<       unsigned int* destLen,
---
>         ,
94c94
<       unsigned int* destLen,
---
>       unsigned * destLen,
94c94
<       unsigned int* destLen,
---
>       unsigned  destLen,
94c94
<       unsigned int* destLen,
---
>       unsigned * ,
(98.0 %, 4071 bytes)
94c94
<       unsigned * destLen,
---
>       unsigned  destLen,
94c94
<       unsigned * destLen,
---
>       unsigned  ,
94c94
<       unsigned * destLen,
---
>       unsigned  destLen
94c94
<       unsigned * destLen,
---
>       unsigned  
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
94c94
<       unsigned * destLen,
---
>       unsigned * ,
94c94
<       unsigned * destLen,
---
>       unsigned * 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
94,95c94,95
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
94c94
<       unsigned * destLen,
---
>       unsigned * destLen
(98.0 %, 4064 bytes)
94c94
<       unsigned * ,
---
>       unsigned * 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
94,95c94,95
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
95c95
<       char*         source, 
---
>       *         source, 
95c95
<       char*         source, 
---
>                source, 
95c95
<       char*         source, 
---
>       *         , 
95c95
<       char*         source, 
---
>                , 
95c95
<       char*         source, 
---
>       *         source 
95c95
<       char*         source, 
---
>                source 
95c95
<       char*         source, 
---
>       *          
95c95
<       char*         source, 
---
>                 
95c95
<       char*         source, 
---
>       char         source, 
95c95
<       char*         source, 
---
>       char         , 
95c95
<       char*         source, 
---
>       char         source 
95c95
<       char*         source, 
---
>       char          
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
95c95
<       char*         source, 
---
>       char*         , 
95c95
<       char*         source, 
---
>       char*          
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
95,96c95,96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(98.0 %, 4058 bytes)
95c95
<       char*         , 
---
>       char*          
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
95,96c95,96
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
96c96
<       unsigned int  sourceLen,
---
>        int  sourceLen,
96c96
<       unsigned int  sourceLen,
---
>          sourceLen,
96c96
<       unsigned int  sourceLen,
---
>        int  ,
96c96
<       unsigned int  sourceLen,
---
>          ,
96c96
<       unsigned int  sourceLen,
---
>        int  sourceLen
96c96
<       unsigned int  sourceLen,
---
>          sourceLen
96c96
<       unsigned int  sourceLen,
---
>        int  
96c96
<       unsigned int  sourceLen,
---
>          
96c96
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
96c96
<       unsigned int  sourceLen,
---
>       unsigned   ,
(98.0 %, 4055 bytes)
96c96
<       unsigned   sourceLen,
---
>       unsigned   ,
96c96
<       unsigned   sourceLen,
---
>       unsigned   
96,97c96,97
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>                  blockSize100k, 
96,97c96,97
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
96,97c96,97
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>       int           , 
(98.0 %, 4046 bytes)
96c96
<       unsigned   ,
---
>       unsigned   
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           , 
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  , 
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           blockSize100k 
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k 
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int            
96,97c96,97
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                   
97c97
<       int           blockSize100k, 
---
>                  blockSize100k, 
97c97
<       int           blockSize100k, 
---
>                  , 
97c97
<       int           blockSize100k, 
---
>                  blockSize100k 
97c97
<       int           blockSize100k, 
---
>                   
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k, 
>                  verbosity, 
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  , 
>                  verbosity, 
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k 
>                  verbosity, 
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>                   
>                  verbosity, 
97c97
<       int           blockSize100k, 
---
>       int           , 
97c97
<       int           blockSize100k, 
---
>       int            
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>                  verbosity, 
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
97,98c97,98
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>       int           , 
(98.0 %, 4033 bytes)
97c97
<       int           , 
---
>       int            
97,98c97,98
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
96a97
>       int            
98d98
<       int           verbosity, 
97,98c97,98
<       int           , 
<       int           verbosity, 
---
>       int            
>                  , 
97,98c97,98
<       int           , 
<       int           verbosity, 
---
>       int            
>       int           verbosity 
97,98c97,98
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity 
97,98c97,98
<       int           , 
<       int           verbosity, 
---
>       int            
>       int            
97,98c97,98
<       int           , 
<       int           verbosity, 
---
>       int            
>                   
98c98
<       int           verbosity, 
---
>                  verbosity, 
98c98
<       int           verbosity, 
---
>                  , 
98c98
<       int           verbosity, 
---
>                  verbosity 
98c98
<       int           verbosity, 
---
>                   
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity, 
>                  workFactor 
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>                  , 
>                  workFactor 
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity 
>                  workFactor 
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>                   
>                  workFactor 
98c98
<       int           verbosity, 
---
>       int           , 
98c98
<       int           verbosity, 
---
>       int            
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>                  workFactor 
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>       int            
>                  workFactor 
98,99c98,99
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>       int            
(98.0 %, 4024 bytes)
98c98
<       int           , 
---
>       int            
98,99c98,99
<       int           , 
<       int           workFactor 
---
>       int            
>                  workFactor 
98,99c98,99
<       int           , 
<       int           workFactor 
---
>       int            
>       int            
98,99c98,99
<       int           , 
<       int           workFactor 
---
>       int            
>                   
98c98
<       int           , 
---
>       int            
100c100
<    );
---
>    ;
98,100c98,100
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                  workFactor 
>    ;
98,100c98,100
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>       int            
>    ;
98,100c98,100
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                   
>    ;
99c99
<       int           workFactor 
---
>                  workFactor 
99c99
<       int           workFactor 
---
>                   
99,100c99,100
<       int           workFactor 
<    );
---
>                  workFactor 
>    ;
99,100c99,100
<       int           workFactor 
<    );
---
>                   
>    ;
99,100c99,100
<       int           workFactor 
<    );
---
>                  workFactor 
>    )
99,100c99,100
<       int           workFactor 
<    );
---
>                   
>    )
99,100c99,100
<       int           workFactor 
<    );
---
>                  workFactor 
>    
99,100c99,100
<       int           workFactor 
<    );
---
>                   
>    
99c99
<       int           workFactor 
---
>       int            
99,100c99,100
<       int           workFactor 
<    );
---
>       int            
>    ;
99,100c99,100
<       int           workFactor 
<    );
---
>       int            
>    )
99,100c99,100
<       int           workFactor 
<    );
---
>       int            
>    
99c99
<       int           workFactor 
---
>       int            
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
(98.0 %, 4014 bytes)
100c100
<    );
---
>    ;
100c100
<    );
---
>    
100c100
<    );
---
>    ;
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    ;
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    ;
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    )
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int  ( 
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int  ( 
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN   ( 
100c100
<    );
---
>    )
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    ( 
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
(98.0 %, 4005 bytes)
102c102
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
102c102
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    ( 
102c102
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
102c102
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>     
102,103c102,103
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress ( 
>       *         dest, 
102,103c102,103
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
102,103c102,103
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       *         dest, 
102,103c102,103
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
102c102
<  int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>  int  ( 
(98.0 %, 4002 bytes)
102c102
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    ( 
102c102
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>     
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>                dest, 
102c102
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       *         dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       char         dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>                dest, 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       char*         , 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       *         , 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>       char         , 
102,103c102,103
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress  
>                , 
103c103
<       char*         dest, 
---
>       *         dest, 
103c103
<       char*         dest, 
---
>                dest, 
103c103
<       char*         dest, 
---
>       *         , 
103c103
<       char*         dest, 
---
>                , 
103c103
<       char*         dest, 
---
>       *         dest 
103c103
<       char*         dest, 
---
>                dest 
103c103
<       char*         dest, 
---
>       *          
103c103
<       char*         dest, 
---
>                 
103c103
<       char*         dest, 
---
>       char         dest, 
103c103
<       char*         dest, 
---
>       char         , 
103c103
<       char*         dest, 
---
>       char         dest 
103c103
<       char*         dest, 
---
>       char          
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
103c103
<       char*         dest, 
---
>       char*         , 
103c103
<       char*         dest, 
---
>       char*          
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
103,104c103,104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(98.0 %, 3998 bytes)
103c103
<       char*         , 
---
>       char*          
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
103,104c103,104
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
104c104
<       unsigned int* destLen,
---
>        int* destLen,
104c104
<       unsigned int* destLen,
---
>        * destLen,
104c104
<       unsigned int* destLen,
---
>        int destLen,
104c104
<       unsigned int* destLen,
---
>         destLen,
104c104
<       unsigned int* destLen,
---
>        int* ,
104c104
<       unsigned int* destLen,
---
>        * ,
104c104
<       unsigned int* destLen,
---
>        int ,
104c104
<       unsigned int* destLen,
---
>         ,
104c104
<       unsigned int* destLen,
---
>       unsigned * destLen,
104c104
<       unsigned int* destLen,
---
>       unsigned  destLen,
104c104
<       unsigned int* destLen,
---
>       unsigned * ,
(98.1 %, 3995 bytes)
104c104
<       unsigned * destLen,
---
>       unsigned  destLen,
104c104
<       unsigned * destLen,
---
>       unsigned  ,
104c104
<       unsigned * destLen,
---
>       unsigned  destLen
104c104
<       unsigned * destLen,
---
>       unsigned  
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
104c104
<       unsigned * destLen,
---
>       unsigned * ,
104c104
<       unsigned * destLen,
---
>       unsigned * 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
104,105c104,105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
104c104
<       unsigned * destLen,
---
>       unsigned * destLen
(98.1 %, 3988 bytes)
104c104
<       unsigned * ,
---
>       unsigned * 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
104,105c104,105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
105c105
<       char*         source, 
---
>       *         source, 
105c105
<       char*         source, 
---
>                source, 
105c105
<       char*         source, 
---
>       *         , 
105c105
<       char*         source, 
---
>                , 
105c105
<       char*         source, 
---
>       *         source 
105c105
<       char*         source, 
---
>                source 
105c105
<       char*         source, 
---
>       *          
105c105
<       char*         source, 
---
>                 
105c105
<       char*         source, 
---
>       char         source, 
105c105
<       char*         source, 
---
>       char         , 
105c105
<       char*         source, 
---
>       char         source 
105c105
<       char*         source, 
---
>       char          
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
105c105
<       char*         source, 
---
>       char*         , 
105c105
<       char*         source, 
---
>       char*          
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
105,106c105,106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(98.1 %, 3982 bytes)
105c105
<       char*         , 
---
>       char*          
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
105,106c105,106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
106c106
<       unsigned int  sourceLen,
---
>        int  sourceLen,
106c106
<       unsigned int  sourceLen,
---
>          sourceLen,
106c106
<       unsigned int  sourceLen,
---
>        int  ,
106c106
<       unsigned int  sourceLen,
---
>          ,
106c106
<       unsigned int  sourceLen,
---
>        int  sourceLen
106c106
<       unsigned int  sourceLen,
---
>          sourceLen
106c106
<       unsigned int  sourceLen,
---
>        int  
106c106
<       unsigned int  sourceLen,
---
>          
106c106
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
106c106
<       unsigned int  sourceLen,
---
>       unsigned   ,
106c106
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen
106c106
<       unsigned int  sourceLen,
---
>       unsigned   
(98.1 %, 3979 bytes)
106c106
<       unsigned   sourceLen,
---
>       unsigned   ,
106c106
<       unsigned   sourceLen,
---
>       unsigned   
106,107c106,107
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>                  small, 
106,107c106,107
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   
>                  small, 
106,107c106,107
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>       int           , 
(98.1 %, 3970 bytes)
106c106
<       unsigned   ,
---
>       unsigned   
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small, 
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           , 
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  , 
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           small 
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small 
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int            
106,107c106,107
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                   
107c107
<       int           small, 
---
>                  small, 
107c107
<       int           small, 
---
>                  , 
107c107
<       int           small, 
---
>                  small 
107c107
<       int           small, 
---
>                   
107,108c107,108
<       int           small, 
<       int           );
---
>                  small, 
>                  );
107,108c107,108
<       int           small, 
<       int           );
---
>                  , 
>                  );
107,108c107,108
<       int           small, 
<       int           );
---
>                  small 
>                  );
107,108c107,108
<       int           small, 
<       int           );
---
>                   
>                  );
107c107
<       int           small, 
---
>       int           , 
107c107
<       int           small, 
---
>       int            
107,108c107,108
<       int           small, 
<       int           );
---
>       int           , 
>                  );
107,108c107,108
<       int           small, 
<       int           );
---
>       int            
>                  );
107,108c107,108
<       int           small, 
<       int           );
---
>       int           , 
>       int           ;
107,108c107,108
<       int           small, 
<       int           );
---
>       int            
>       int           ;
107,108c107,108
<       int           small, 
<       int           );
---
>       int           , 
>                  ;
107,108c107,108
<       int           small, 
<       int           );
---
>       int            
>                  ;
107c107
<       int           small, 
---
>       int           small 
(98.1 %, 3965 bytes)
107c107
<       int           , 
---
>       int            
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  );
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>       int           ;
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  ;
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>       int           )
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  )
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>       int           
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  
108c108
<       int           );
---
>                  );
108c108
<       int           );
---
>                  ;
108c108
<       int           );
---
>                  )
108c108
<       int           );
---
>                  
108c108,109
<       int           );
---
>                  );
> 
110d110
< ;
108c108,109
<       int           );
---
>                  ;
> 
110d110
< ;
108c108,109
<       int           );
---
>                  )
> 
110d110
< ;
108c108,109
<       int           );
---
>                  
> 
110d110
< ;
108c108
<       int           );
---
>       int           ;
108c108
<       int           );
---
>       int           
108c108,109
<       int           );
---
>       int           ;
> 
110d110
< ;
108c108,109
<       int           );
---
>       int           
> 
110d110
< ;
108c108
<       int           );
---
>       int           ;
114c114
< ;
---
> 
108c108
<       int           );
---
>       int           
114c114
< ;
---
> 
108c108,110
<       int           );
---
>       int           ;
> 
> 
110d111
< ;
114d114
< ;
108c108,110
<       int           );
---
>       int           
> 
> 
110d111
< ;
114d114
< ;
108c108
<       int           );
---
>       int           )
108c108,109
<       int           );
---
>       int           )
> 
110d110
< ;
108c108
<       int           );
---
>       int           )
114c114
< ;
---
> 
(98.1 %, 3964 bytes)
110c110
< ;
---
> 
110d109
< ;
114c113,114
< ;
---
> 
> 
110c110
< ;
---
> 
121c121
< #define BZ_SETERReee                    bzFile;
---
> define BZ_SETERReee                    bzFile;
110d109
< ;
114d112
< ;
121c119,121
< #define BZ_SETERReee                    bzFile;
---
> 
> 
> define BZ_SETERReee                    bzFile;
110c110
< ;
---
> 
121c121
< #define BZ_SETERReee                    bzFile;
---
> # BZ_SETERReee                    bzFile;
110d109
< ;
114d112
< ;
121c119,121
< #define BZ_SETERReee                    bzFile;
---
> 
> 
> # BZ_SETERReee                    bzFile;
110c110
< ;
---
> 
121c121
< #define BZ_SETERReee                    bzFile;
---
>  BZ_SETERReee                    bzFile;
110d109
< ;
114d112
< ;
121c119,121
< #define BZ_SETERReee                    bzFile;
---
> 
> 
>  BZ_SETERReee                    bzFile;
(98.1 %, 3963 bytes)
114c114
< ;
---
> 
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
> define BZ_SETERReee                    bzFile;
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
> # BZ_SETERReee                    bzFile;
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
>  BZ_SETERReee                    bzFile;
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
> #define                     bzFile;
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
> define                     bzFile;
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
> #                     bzFile;
114d113
< ;
121c120,121
< #define BZ_SETERReee                    bzFile;
---
> 
>                      bzFile;
121c121
< #define BZ_SETERReee                    bzFile;
---
> define BZ_SETERReee                    bzFile;
121c121
< #define BZ_SETERReee                    bzFile;
---
>  BZ_SETERReee                    bzFile;
121c121
< #define BZ_SETERReee                    bzFile;
---
> define                     bzFile;
121c121
< #define BZ_SETERReee                    bzFile;
---
>                      bzFile;
121c121
< #define BZ_SETERReee                    bzFile;
---
> define BZ_SETERReee                    ;
121c121
< #define BZ_SETERReee                    bzFile;
---
>  BZ_SETERReee                    ;
(98.1 %, 3944 bytes)
121c121
<                      bzFile;
---
>                      
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      ;
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      ;
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      bzFile
121c121
<                      bzFile;
---
>                      bzFile
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> * BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      bzFile
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
> BZFILE BZ_APIBZ2_bzWriteOpen 
121c121
<                      bzFile;
---
>                      bzFile
129c129
< BZFILE* BZ_APIBZ2_bzWriteOpen 
---
>  BZ_APIBZ2_bzWriteOpen 
(98.1 %, 3931 bytes)
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      int*  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ_APIBZ2_bzWriteOpen 
>                     ( *  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                     ( *  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ_APIBZ2_bzWriteOpen 
>                      *  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      *  bzerror,      
129c129
< * BZ_APIBZ2_bzWriteOpen 
---
> *  
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int*  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( *  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      *  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( int  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int  bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     (   bzerror,      
129,130c129,130
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                        bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                      *  bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                      int  bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                        bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                      int*  ,      
130c130
<                     ( int*  bzerror,      
---
>                      *  ,      
130c130
<                     ( int*  bzerror,      
---
>                      int  ,      
130c130
<                     ( int*  bzerror,      
---
>                        ,      
130c130
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                     (   bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                     ( *  ,      
130c130
<                     ( int*  bzerror,      
---
>                     (   ,      
130c130
<                     ( int*  bzerror,      
---
>                     ( *  bzerror      
130c130
<                     ( int*  bzerror,      
---
>                     (   bzerror      
130c130
<                     ( int*  bzerror,      
---
>                     ( *        
130c130
<                     ( int*  bzerror,      
---
>                     (         
130c130
<                     ( int*  bzerror,      
---
>                     ( int  bzerror,      
130c130
<                     ( int*  bzerror,      
---
>                     ( int  ,      
130c130
<                     ( int*  bzerror,      
---
>                     ( int  bzerror      
130c130
<                     ( int*  bzerror,      
---
>                     ( int        
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror,      
>                       * f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  ,      
>                       * f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror      
>                       * f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int        
>                       * f, 
130c130
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
130c130
<                     ( int*  bzerror,      
---
>                     ( int*        
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       * f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       FILE f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                        f, 
130,131c130,131
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
(98.1 %, 3924 bytes)
130c130
<                     ( int*  ,      
---
>                     ( int*        
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE* , 
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       * , 
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE , 
130,131c130,131
<                     ( int*  ,      
<                       FILE* f, 
---
>                     ( int*        
>                        , 
131c131
<                       FILE* f, 
---
>                       * f, 
131c131
<                       FILE* f, 
---
>                        f, 
131c131
<                       FILE* f, 
---
>                       * , 
131c131
<                       FILE* f, 
---
>                        , 
131c131
<                       FILE* f, 
---
>                       * f 
131c131
<                       FILE* f, 
---
>                        f 
131c131
<                       FILE* f, 
---
>                       *  
131c131
<                       FILE* f, 
---
>                         
131c131
<                       FILE* f, 
---
>                       FILE f, 
131c131
<                       FILE* f, 
---
>                       FILE , 
131c131
<                       FILE* f, 
---
>                       FILE f 
131c131
<                       FILE* f, 
---
>                       FILE  
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f, 
>                          blockSize100k, 
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE , 
>                          blockSize100k, 
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f 
>                          blockSize100k, 
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE  
>                          blockSize100k, 
131c131
<                       FILE* f, 
---
>                       FILE* , 
131c131
<                       FILE* f, 
---
>                       FILE*  
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          blockSize100k, 
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
131,132c131,132
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                       int   , 
(98.1 %, 3923 bytes)
131c131
<                       FILE* , 
---
>                       FILE*  
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   , 
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          , 
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   blockSize100k 
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k 
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int    
131,132c131,132
<                       FILE* , 
<                       int   blockSize100k, 
---
>                       FILE*  
>                           
132c132
<                       int   blockSize100k, 
---
>                          blockSize100k, 
132c132
<                       int   blockSize100k, 
---
>                          , 
132c132
<                       int   blockSize100k, 
---
>                          blockSize100k 
132c132
<                       int   blockSize100k, 
---
>                           
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k, 
>                          verbosity,
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          , 
>                          verbosity,
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k 
>                          verbosity,
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                           
>                          verbosity,
132c132
<                       int   blockSize100k, 
---
>                       int   , 
132c132
<                       int   blockSize100k, 
---
>                       int    
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          verbosity,
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
132,133c132,133
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                       int   ,
(98.1 %, 3910 bytes)
132c132
<                       int   , 
---
>                       int    
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                       int   ,
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          ,
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                       int   verbosity
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          verbosity
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                       int   
132,133c132,133
<                       int   , 
<                       int   verbosity,
---
>                       int    
>                          
133c133
<                       int   verbosity,
---
>                          verbosity,
133c133
<                       int   verbosity,
---
>                          ,
133c133
<                       int   verbosity,
---
>                          verbosity
133c133
<                       int   verbosity,
---
>                          
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity,
>                          workFactor )
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                          ,
>                          workFactor )
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity
>                          workFactor )
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                          
>                          workFactor )
133c133
<                       int   verbosity,
---
>                       int   ,
133c133
<                       int   verbosity,
---
>                       int   
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                          workFactor )
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
133,134c133,134
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                       int    )
(98.1 %, 3901 bytes)
133c133
<                       int   ,
---
>                       int   
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                       int    )
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                           )
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                       int   workFactor 
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                          workFactor 
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                       int    
133,134c133,134
<                       int   ,
<                       int   workFactor )
---
>                       int   
>                           
134c134
<                       int   workFactor )
---
>                          workFactor )
134c134
<                       int   workFactor )
---
>                           )
134c134
<                       int   workFactor )
---
>                          workFactor 
134c134
<                       int   workFactor )
---
>                           
134,135c134,135
<                       int   workFactor )
< ;
---
>                          workFactor )
> 
134,135c134,135
<                       int   workFactor )
< ;
---
>                           )
> 
134,135c134,135
<                       int   workFactor )
< ;
---
>                          workFactor 
> 
134,135c134,135
<                       int   workFactor )
< ;
---
>                           
> 
134c134
<                       int   workFactor )
---
>                       int    )
134c134
<                       int   workFactor )
---
>                       int    
134,135c134,135
<                       int   workFactor )
< ;
---
>                       int    )
> 
134,135c134,135
<                       int   workFactor )
< ;
---
>                       int    
> 
134c134
<                       int   workFactor )
---
>                       int    )
140c140
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
134c134
<                       int   workFactor )
---
>                       int    
140c140
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
134,135c134
<                       int   workFactor )
< ;
---
>                       int    )
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
>  BZ_APIBZ2_bzWrite
134,135c134
<                       int   workFactor )
< ;
---
>                       int    
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
>  BZ_APIBZ2_bzWrite
(98.1 %, 3891 bytes)
134c134
<                       int    )
---
>                       int    
134,135c134,135
<                       int    )
< ;
---
>                       int    
> 
134c134
<                       int    )
---
>                       int    
140c140
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
134,135c134
<                       int    )
< ;
---
>                       int    
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
>  BZ_APIBZ2_bzWrite
134c134
<                       int    )
---
>                       int    
140c140
< void BZ_APIBZ2_bzWrite
---
> void 
134,135c134
<                       int    )
< ;
---
>                       int    
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
> void 
134c134
<                       int    )
---
>                       int    
140c140
< void BZ_APIBZ2_bzWrite
---
>  
134,135c134
<                       int    )
< ;
---
>                       int    
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
>  
135c135
< ;
---
> 
135d134
< ;
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
>  BZ_APIBZ2_bzWrite
135d134
< ;
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
> void 
135d134
< ;
140c139,140
< void BZ_APIBZ2_bzWrite
---
> 
>  
135c135
< ;
---
> 
141c141
<              ( int*    bzerror, 
---
>               int*    bzerror, 
135d134
< ;
140,141c139,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>  BZ_APIBZ2_bzWrite
>               int*    bzerror, 
135d134
< ;
140,141c139,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> 
> void 
>               int*    bzerror, 
135d134
< ;
140,141c139,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> 
>  
>               int*    bzerror, 
140c140
< void BZ_APIBZ2_bzWrite
---
>  BZ_APIBZ2_bzWrite
140c140
< void BZ_APIBZ2_bzWrite
---
>  
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ_APIBZ2_bzWrite
>               int*    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               int*    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ_APIBZ2_bzWrite
>              ( *    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>              ( *    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ_APIBZ2_bzWrite
>               *    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               *    bzerror, 
140c140
< void BZ_APIBZ2_bzWrite
---
> void 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int*    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              ( *    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               *    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              ( int    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int    bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              (     bzerror, 
140,141c140,141
< void BZ_APIBZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>                   bzerror, 
141c141
<              ( int*    bzerror, 
---
>               int*    bzerror, 
141c141
<              ( int*    bzerror, 
---
>               *    bzerror, 
141c141
<              ( int*    bzerror, 
---
>               int    bzerror, 
141c141
<              ( int*    bzerror, 
---
>                   bzerror, 
141c141
<              ( int*    bzerror, 
---
>               int*    , 
141c141
<              ( int*    bzerror, 
---
>               *    , 
141c141
<              ( int*    bzerror, 
---
>               int    , 
141c141
<              ( int*    bzerror, 
---
>                   , 
141c141
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
141c141
<              ( int*    bzerror, 
---
>              (     bzerror, 
141c141
<              ( int*    bzerror, 
---
>              ( *    , 
141c141
<              ( int*    bzerror, 
---
>              (     , 
141c141
<              ( int*    bzerror, 
---
>              ( *    bzerror 
141c141
<              ( int*    bzerror, 
---
>              (     bzerror 
141c141
<              ( int*    bzerror, 
---
>              ( *     
141c141
<              ( int*    bzerror, 
---
>              (      
141c141
<              ( int*    bzerror, 
---
>              ( int    bzerror, 
141c141
<              ( int*    bzerror, 
---
>              ( int    , 
141c141
<              ( int*    bzerror, 
---
>              ( int    bzerror 
141c141
<              ( int*    bzerror, 
---
>              ( int     
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    bzerror, 
>                * b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    , 
>                * b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    bzerror 
>                * b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int     
>                * b, 
141c141
<              ( int*    bzerror, 
---
>              ( int*    , 
141c141
<              ( int*    bzerror, 
---
>              ( int*     
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                * b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                * b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                BZFILE b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                BZFILE b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                 b, 
141,142c141,142
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                 b, 
(98.1 %, 3884 bytes)
141c141
<              ( int*    , 
---
>              ( int*     
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                * b, 
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                BZFILE b, 
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                 b, 
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                BZFILE* , 
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                * , 
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                BZFILE , 
141,142c141,142
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*     
>                 , 
142c142
<                BZFILE* b, 
---
>                * b, 
142c142
<                BZFILE* b, 
---
>                 b, 
142c142
<                BZFILE* b, 
---
>                * , 
142c142
<                BZFILE* b, 
---
>                 , 
142c142
<                BZFILE* b, 
---
>                * b 
142c142
<                BZFILE* b, 
---
>                 b 
142c142
<                BZFILE* b, 
---
>                *  
142c142
<                BZFILE* b, 
---
>                  
142c142
<                BZFILE* b, 
---
>                BZFILE b, 
142c142
<                BZFILE* b, 
---
>                BZFILE , 
142c142
<                BZFILE* b, 
---
>                BZFILE b 
142c142
<                BZFILE* b, 
---
>                BZFILE  
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE b, 
>                *   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE , 
>                *   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE b 
>                *   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE  
>                *   buf, 
142c142
<                BZFILE* b, 
---
>                BZFILE* , 
142c142
<                BZFILE* b, 
---
>                BZFILE*  
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
>                *   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE*  
>                *   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
>                void   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE*  
>                void   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
>                   buf, 
142,143c142,143
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE*  
>                   buf, 
(98.1 %, 3883 bytes)
142c142
<                BZFILE* , 
---
>                BZFILE*  
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                *   buf, 
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                void   buf, 
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                   buf, 
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                void*   , 
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                *   , 
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                void   , 
142,143c142,143
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE*  
>                   , 
143c143
<                void*   buf, 
---
>                *   buf, 
143c143
<                void*   buf, 
---
>                   buf, 
143c143
<                void*   buf, 
---
>                *   , 
143c143
<                void*   buf, 
---
>                   , 
143c143
<                void*   buf, 
---
>                *   buf 
143c143
<                void*   buf, 
---
>                   buf 
143c143
<                void*   buf, 
---
>                *    
143c143
<                void*   buf, 
---
>                    
143c143
<                void*   buf, 
---
>                void   buf, 
143c143
<                void*   buf, 
---
>                void   , 
143c143
<                void*   buf, 
---
>                void   buf 
143c143
<                void*   buf, 
---
>                void    
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void   buf, 
>                     len )
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void   , 
>                     len )
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void   buf 
>                     len )
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void    
>                     len )
143c143
<                void*   buf, 
---
>                void*   , 
143c143
<                void*   buf, 
---
>                void*    
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                     len )
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void*    
>                     len )
143,144c143,144
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                int      )
(98.1 %, 3880 bytes)
143c143
<                void*   , 
---
>                void*    
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                     len )
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                int      )
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                      )
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                int     len 
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                     len 
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                int      
143,144c143,144
<                void*   , 
<                int     len )
---
>                void*    
>                      
144c144
<                int     len )
---
>                     len )
144c144
<                int     len )
---
>                      )
144c144
<                int     len )
---
>                     len 
144c144
<                int     len )
---
>                      
144,145c144,145
<                int     len )
< ;
---
>                     len )
> 
144,145c144,145
<                int     len )
< ;
---
>                      )
> 
144,145c144,145
<                int     len )
< ;
---
>                     len 
> 
144,145c144,145
<                int     len )
< ;
---
>                      
> 
144c144
<                int     len )
---
>                int      )
144c144
<                int     len )
---
>                int      
144,145c144,145
<                int     len )
< ;
---
>                int      )
> 
144,145c144,145
<                int     len )
< ;
---
>                int      
> 
144c144
<                int     len )
---
>                int      )
149c149
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
144c144
<                int     len )
---
>                int      
149c149
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
144,145c144
<                int     len )
< ;
---
>                int      )
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
144,145c144
<                int     len )
< ;
---
>                int      
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
(98.1 %, 3877 bytes)
144c144
<                int      )
---
>                int      
144,145c144,145
<                int      )
< ;
---
>                int      
> 
144c144
<                int      )
---
>                int      
149c149
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
144,145c144
<                int      )
< ;
---
>                int      
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
144c144
<                int      )
---
>                int      
149c149
< void BZ_APIBZ2_bzWriteClose
---
> void 
144,145c144
<                int      )
< ;
---
>                int      
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
> void 
144c144
<                int      )
---
>                int      
149c149
< void BZ_APIBZ2_bzWriteClose
---
>  
144,145c144
<                int      )
< ;
---
>                int      
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
>  
145c145
< ;
---
> 
145d144
< ;
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
>  BZ_APIBZ2_bzWriteClose
145d144
< ;
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
> void 
145d144
< ;
149c148,149
< void BZ_APIBZ2_bzWriteClose
---
> 
>  
145c145
< ;
---
> 
150c150
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
145d144
< ;
149,150c148,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
>  BZ_APIBZ2_bzWriteClose
>                    int*          bzerror, 
145d144
< ;
149,150c148,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
> void 
>                    int*          bzerror, 
145d144
< ;
149,150c148,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
>  
>                    int*          bzerror, 
149c149
< void BZ_APIBZ2_bzWriteClose
---
>  BZ_APIBZ2_bzWriteClose
149c149
< void BZ_APIBZ2_bzWriteClose
---
>  
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose
>                    int*          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose
>                   ( *          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose
>                    *          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
149c149
< void BZ_APIBZ2_bzWriteClose
---
> void 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
149,150c149,150
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                              bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                    int*          , 
150c150
<                   ( int*          bzerror, 
---
>                    *          , 
150c150
<                   ( int*          bzerror, 
---
>                    int          , 
150c150
<                   ( int*          bzerror, 
---
>                              , 
150c150
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                   ( *          , 
150c150
<                   ( int*          bzerror, 
---
>                   (           , 
150c150
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
150c150
<                   ( int*          bzerror, 
---
>                   (           bzerror 
150c150
<                   ( int*          bzerror, 
---
>                   ( *           
150c150
<                   ( int*          bzerror, 
---
>                   (            
150c150
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
150c150
<                   ( int*          bzerror, 
---
>                   ( int          , 
150c150
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
150c150
<                   ( int*          bzerror, 
---
>                   ( int           
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
150c150
<                   ( int*          bzerror, 
---
>                   ( int*          , 
150c150
<                   ( int*          bzerror, 
---
>                   ( int*           
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
150,151c150,151
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
(98.1 %, 3870 bytes)
150c150
<                   ( int*          , 
---
>                   ( int*           
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE*       , 
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       , 
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       , 
150,151c150,151
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            , 
151c151
<                     BZFILE*       b, 
---
>                     *       b, 
151c151
<                     BZFILE*       b, 
---
>                            b, 
151c151
<                     BZFILE*       b, 
---
>                     *       , 
151c151
<                     BZFILE*       b, 
---
>                            , 
151c151
<                     BZFILE*       b, 
---
>                     *       b 
151c151
<                     BZFILE*       b, 
---
>                            b 
151c151
<                     BZFILE*       b, 
---
>                     *        
151c151
<                     BZFILE*       b, 
---
>                             
151c151
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
151c151
<                     BZFILE*       b, 
---
>                     BZFILE       , 
151c151
<                     BZFILE*       b, 
---
>                     BZFILE       b 
151c151
<                     BZFILE*       b, 
---
>                     BZFILE        
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
151c151
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
151c151
<                     BZFILE*       b, 
---
>                     BZFILE*        
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                abandon,
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
151,152c151,152
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                     int           ,
(98.1 %, 3869 bytes)
151c151
<                     BZFILE*       , 
---
>                     BZFILE*        
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           ,
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                ,
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           abandon
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           
151,152c151,152
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                
152c152
<                     int           abandon,
---
>                                abandon,
152c152
<                     int           abandon,
---
>                                ,
152c152
<                     int           abandon,
---
>                                abandon
152c152
<                     int           abandon,
---
>                                
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon,
>                      int* nbytes_in,
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                ,
>                      int* nbytes_in,
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon
>                      int* nbytes_in,
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                
>                      int* nbytes_in,
152c152
<                     int           abandon,
---
>                     int           ,
152c152
<                     int           abandon,
---
>                     int           
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      int* nbytes_in,
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      int* nbytes_in,
152,153c152,153
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                     unsigned * nbytes_in,
(98.1 %, 3862 bytes)
152c152
<                     int           ,
---
>                     int           
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      int* nbytes_in,
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                     unsigned * nbytes_in,
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      * nbytes_in,
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                     unsigned int nbytes_in,
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      int nbytes_in,
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                     unsigned  nbytes_in,
152,153c152,153
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           
>                       nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                      int* nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                      * nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                      int nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                       nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                      int* ,
153c153
<                     unsigned int* nbytes_in,
---
>                      * ,
153c153
<                     unsigned int* nbytes_in,
---
>                      int ,
153c153
<                     unsigned int* nbytes_in,
---
>                       ,
153c153
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in,
153c153
<                     unsigned int* nbytes_in,
---
>                     unsigned * ,
(98.1 %, 3859 bytes)
153c153
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in,
153c153
<                     unsigned * nbytes_in,
---
>                     unsigned  ,
153c153
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in
153c153
<                     unsigned * nbytes_in,
---
>                     unsigned  
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in,
>                      int* nbytes_out )
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  ,
>                      int* nbytes_out )
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in
>                      int* nbytes_out )
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  
>                      int* nbytes_out )
153c153
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
153c153
<                     unsigned * nbytes_in,
---
>                     unsigned * 
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      int* nbytes_out )
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      int* nbytes_out )
153,154c153,154
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                     unsigned * nbytes_out )
(98.1 %, 3850 bytes)
153c153
<                     unsigned * ,
---
>                     unsigned * 
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      int* nbytes_out )
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                     unsigned * nbytes_out )
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      * nbytes_out )
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                     unsigned int nbytes_out )
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      int nbytes_out )
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                     unsigned  nbytes_out )
153,154c153,154
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                       nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                      int* nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                      * nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                      int nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                       nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                      int*  )
154c154
<                     unsigned int* nbytes_out )
---
>                      *  )
154c154
<                     unsigned int* nbytes_out )
---
>                      int  )
154c154
<                     unsigned int* nbytes_out )
---
>                        )
154c154
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out )
154c154
<                     unsigned int* nbytes_out )
---
>                     unsigned *  )
(98.1 %, 3847 bytes)
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out )
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned   )
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out 
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned   
154,155c154,155
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned  nbytes_out )
> 
154,155c154,155
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned   )
> 
154,155c154,155
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned  nbytes_out 
> 
154,155c154,155
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned   
> 
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned *  
154,155c154,155
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned *  )
> 
154,155c154,155
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned *  
> 
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
158c158
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
154c154
<                     unsigned * nbytes_out )
---
>                     unsigned *  
158c158
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
154,155c154
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned *  )
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
(98.1 %, 3837 bytes)
154c154
<                     unsigned *  )
---
>                     unsigned *  
154,155c154,155
<                     unsigned *  )
< ;
---
>                     unsigned *  
> 
154c154
<                     unsigned *  )
---
>                     unsigned *  
158c158
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
154,155c154
<                     unsigned *  )
< ;
---
>                     unsigned *  
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
154c154
<                     unsigned *  )
---
>                     unsigned *  
158c158
< void BZ_APIBZ2_bzWriteClose64
---
> void 
154,155c154
<                     unsigned *  )
< ;
---
>                     unsigned *  
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
> void 
154c154
<                     unsigned *  )
---
>                     unsigned *  
158c158
< void BZ_APIBZ2_bzWriteClose64
---
>  
154,155c154
<                     unsigned *  )
< ;
---
>                     unsigned *  
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  
155c155
< ;
---
> 
155d154
< ;
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  BZ_APIBZ2_bzWriteClose64
155d154
< ;
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
> void 
155d154
< ;
158c157,158
< void BZ_APIBZ2_bzWriteClose64
---
> 
>  
155c155
< ;
---
> 
159c159
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
155d154
< ;
158,159c157,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
>  BZ_APIBZ2_bzWriteClose64
>                    int*          bzerror, 
155d154
< ;
158,159c157,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
> void 
>                    int*          bzerror, 
155d154
< ;
158,159c157,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
>  
>                    int*          bzerror, 
158c158
< void BZ_APIBZ2_bzWriteClose64
---
>  BZ_APIBZ2_bzWriteClose64
158c158
< void BZ_APIBZ2_bzWriteClose64
---
>  
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose64
>                    int*          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose64
>                   ( *          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ_APIBZ2_bzWriteClose64
>                    *          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
158c158
< void BZ_APIBZ2_bzWriteClose64
---
> void 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
158,159c158,159
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                              bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                    int*          , 
159c159
<                   ( int*          bzerror, 
---
>                    *          , 
159c159
<                   ( int*          bzerror, 
---
>                    int          , 
159c159
<                   ( int*          bzerror, 
---
>                              , 
159c159
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                   ( *          , 
159c159
<                   ( int*          bzerror, 
---
>                   (           , 
159c159
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
159c159
<                   ( int*          bzerror, 
---
>                   (           bzerror 
159c159
<                   ( int*          bzerror, 
---
>                   ( *           
159c159
<                   ( int*          bzerror, 
---
>                   (            
159c159
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
159c159
<                   ( int*          bzerror, 
---
>                   ( int          , 
159c159
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
159c159
<                   ( int*          bzerror, 
---
>                   ( int           
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
159c159
<                   ( int*          bzerror, 
---
>                   ( int*          , 
159c159
<                   ( int*          bzerror, 
---
>                   ( int*           
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
159,160c159,160
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
159c159
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
(98.1 %, 3830 bytes)
159c159
<                   ( int*          , 
---
>                   ( int*           
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE*       , 
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       , 
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       , 
159,160c159,160
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            , 
160c160
<                     BZFILE*       b, 
---
>                     *       b, 
160c160
<                     BZFILE*       b, 
---
>                            b, 
160c160
<                     BZFILE*       b, 
---
>                     *       , 
160c160
<                     BZFILE*       b, 
---
>                            , 
160c160
<                     BZFILE*       b, 
---
>                     *       b 
160c160
<                     BZFILE*       b, 
---
>                            b 
160c160
<                     BZFILE*       b, 
---
>                     *        
160c160
<                     BZFILE*       b, 
---
>                             
160c160
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
160c160
<                     BZFILE*       b, 
---
>                     BZFILE       , 
160c160
<                     BZFILE*       b, 
---
>                     BZFILE       b 
160c160
<                     BZFILE*       b, 
---
>                     BZFILE        
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
160c160
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
160c160
<                     BZFILE*       b, 
---
>                     BZFILE*        
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                abandon,
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
160,161c160,161
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                     int           ,
(98.1 %, 3829 bytes)
160c160
<                     BZFILE*       , 
---
>                     BZFILE*        
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           ,
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                ,
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           abandon
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           
160,161c160,161
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*        
>                                
161c161
<                     int           abandon,
---
>                                abandon,
161c161
<                     int           abandon,
---
>                                ,
161c161
<                     int           abandon,
---
>                                abandon
161c161
<                     int           abandon,
---
>                                
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                abandon,
>                      int* nbytes_in_lo32,
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                ,
>                      int* nbytes_in_lo32,
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                abandon
>                      int* nbytes_in_lo32,
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                
>                      int* nbytes_in_lo32,
161c161
<                     int           abandon,
---
>                     int           ,
161c161
<                     int           abandon,
---
>                     int           
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      int* nbytes_in_lo32,
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      int* nbytes_in_lo32,
161,162c161,162
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                     unsigned * nbytes_in_lo32,
(98.1 %, 3822 bytes)
161c161
<                     int           ,
---
>                     int           
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      int* nbytes_in_lo32,
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                     unsigned * nbytes_in_lo32,
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      * nbytes_in_lo32,
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                     unsigned int nbytes_in_lo32,
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      int nbytes_in_lo32,
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                     unsigned  nbytes_in_lo32,
161,162c161,162
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                       nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                      int* nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                      * nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                      int nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                       nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                      int* ,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                      * ,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                      int ,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                       ,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
162c162
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * ,
(98.1 %, 3819 bytes)
162c162
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
162c162
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  ,
162c162
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32
162c162
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32,
>                      int* nbytes_in_hi32,
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  ,
>                      int* nbytes_in_hi32,
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32
>                      int* nbytes_in_hi32,
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  
>                      int* nbytes_in_hi32,
162c162
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * ,
162c162
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * 
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                      int* nbytes_in_hi32,
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      int* nbytes_in_hi32,
162,163c162,163
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                     unsigned * nbytes_in_hi32,
(98.1 %, 3805 bytes)
162c162
<                     unsigned * ,
---
>                     unsigned * 
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      int* nbytes_in_hi32,
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                     unsigned * nbytes_in_hi32,
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      * nbytes_in_hi32,
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                     unsigned int nbytes_in_hi32,
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      int nbytes_in_hi32,
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                     unsigned  nbytes_in_hi32,
162,163c162,163
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                       nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                      * nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                      int nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                       nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                      * ,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                      int ,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                       ,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
163c163
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
(98.1 %, 3802 bytes)
163c163
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
163c163
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  ,
163c163
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32
163c163
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32,
>                      int* nbytes_out_lo32,
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  ,
>                      int* nbytes_out_lo32,
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32
>                      int* nbytes_out_lo32,
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  
>                      int* nbytes_out_lo32,
163c163
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
163c163
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                      int* nbytes_out_lo32,
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      int* nbytes_out_lo32,
163,164c163,164
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                     unsigned * nbytes_out_lo32,
(98.2 %, 3788 bytes)
163c163
<                     unsigned * ,
---
>                     unsigned * 
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      int* nbytes_out_lo32,
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                     unsigned * nbytes_out_lo32,
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      * nbytes_out_lo32,
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                     unsigned int nbytes_out_lo32,
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      int nbytes_out_lo32,
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                     unsigned  nbytes_out_lo32,
163,164c163,164
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                       nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                      * nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                      int nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                       nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                      * ,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                      int ,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                       ,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
164c164
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
(98.2 %, 3785 bytes)
164c164
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
164c164
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  ,
164c164
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32
164c164
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32,
>                      int* nbytes_out_hi32 )
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  ,
>                      int* nbytes_out_hi32 )
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32
>                      int* nbytes_out_hi32 )
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  
>                      int* nbytes_out_hi32 )
164c164
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
164c164
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                      int* nbytes_out_hi32 )
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      int* nbytes_out_hi32 )
164,165c164,165
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                     unsigned * nbytes_out_hi32 )
(98.2 %, 3770 bytes)
164c164
<                     unsigned * ,
---
>                     unsigned * 
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      int* nbytes_out_hi32 )
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                     unsigned * nbytes_out_hi32 )
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      * nbytes_out_hi32 )
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                     unsigned int nbytes_out_hi32 )
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      int nbytes_out_hi32 )
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                     unsigned  nbytes_out_hi32 )
164,165c164,165
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                       nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                      int nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                       nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                      int*  )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                      *  )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                      int  )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                        )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
165c165
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned *  )
(98.2 %, 3767 bytes)
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   )
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   
165,166c165,166
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned  nbytes_out_hi32 )
> 
165,166c165,166
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned   )
> 
165,166c165,166
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned  nbytes_out_hi32 
> 
165,166c165,166
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned   
> 
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
165,166c165,166
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned *  )
> 
165,166c165,166
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned *  
> 
165c165
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> * BZ_APIBZ2_bzReadOpen 
(98.2 %, 3752 bytes)
165c165
<                     unsigned *  )
---
>                     unsigned *  
165,166c165,166
<                     unsigned *  )
< ;
---
>                     unsigned *  
> 
165c165
<                     unsigned *  )
---
>                     unsigned *  
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> * BZ_APIBZ2_bzReadOpen 
165,166c165
<                     unsigned *  )
< ;
---
>                     unsigned *  
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> * BZ_APIBZ2_bzReadOpen 
165c165
<                     unsigned *  )
---
>                     unsigned *  
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> BZFILE BZ_APIBZ2_bzReadOpen 
165,166c165
<                     unsigned *  )
< ;
---
>                     unsigned *  
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> BZFILE BZ_APIBZ2_bzReadOpen 
165c165
<                     unsigned *  )
---
>                     unsigned *  
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>  BZ_APIBZ2_bzReadOpen 
165,166c165
<                     unsigned *  )
< ;
---
>                     unsigned *  
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
>  BZ_APIBZ2_bzReadOpen 
166c166
< ;
---
> 
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> * BZ_APIBZ2_bzReadOpen 
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> BZFILE BZ_APIBZ2_bzReadOpen 
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
>  BZ_APIBZ2_bzReadOpen 
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> BZFILE*  
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> *  
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
> BZFILE  
166d165
< ;
170c169,170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> 
>   
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> * BZ_APIBZ2_bzReadOpen 
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>  BZ_APIBZ2_bzReadOpen 
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
> *  
170c170
< BZFILE* BZ_APIBZ2_bzReadOpen 
---
>   
170,171c170,171
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> * BZ_APIBZ2_bzReadOpen 
>                     int*  bzerror, 
170,171c170,171
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                     int*  bzerror, 
170,171c170,171
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     int*  bzerror, 
170,171c170,171
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     int*  bzerror, 
(98.2 %, 3746 bytes)
170c170
< * BZ_APIBZ2_bzReadOpen 
---
>  BZ_APIBZ2_bzReadOpen 
170c170
< * BZ_APIBZ2_bzReadOpen 
---
>   
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                     int*  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     int*  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                    ( *  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                    ( *  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>  BZ_APIBZ2_bzReadOpen 
>                     *  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     *  bzerror, 
170c170
< * BZ_APIBZ2_bzReadOpen 
---
> *  
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     int*  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    ( *  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     *  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    ( int  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     int  bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    (   bzerror, 
170,171c170,171
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                       bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                     int  bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                       bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                     int*  , 
171c171
<                    ( int*  bzerror, 
---
>                     *  , 
171c171
<                    ( int*  bzerror, 
---
>                     int  , 
171c171
<                    ( int*  bzerror, 
---
>                       , 
171c171
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                    (   bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                    ( *  , 
171c171
<                    ( int*  bzerror, 
---
>                    (   , 
171c171
<                    ( int*  bzerror, 
---
>                    ( *  bzerror 
171c171
<                    ( int*  bzerror, 
---
>                    (   bzerror 
171c171
<                    ( int*  bzerror, 
---
>                    ( *   
171c171
<                    ( int*  bzerror, 
---
>                    (    
171c171
<                    ( int*  bzerror, 
---
>                    ( int  bzerror, 
171c171
<                    ( int*  bzerror, 
---
>                    ( int  , 
171c171
<                    ( int*  bzerror, 
---
>                    ( int  bzerror 
171c171
<                    ( int*  bzerror, 
---
>                    ( int   
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  bzerror, 
>                      * f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  , 
>                      * f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  bzerror 
>                      * f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int   
>                      * f, 
171c171
<                    ( int*  bzerror, 
---
>                    ( int*  , 
171c171
<                    ( int*  bzerror, 
---
>                    ( int*   
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                      * f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                      * f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                      FILE f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                      FILE f, 
171,172c171,172
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                       f, 
(98.2 %, 3739 bytes)
171c171
<                    ( int*  , 
---
>                    ( int*   
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                      * f, 
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                      FILE f, 
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                       f, 
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                      FILE* , 
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                      * , 
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                      FILE , 
171,172c171,172
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*   
>                       , 
172c172
<                      FILE* f, 
---
>                      * f, 
172c172
<                      FILE* f, 
---
>                       f, 
172c172
<                      FILE* f, 
---
>                      * , 
172c172
<                      FILE* f, 
---
>                       , 
172c172
<                      FILE* f, 
---
>                      * f 
172c172
<                      FILE* f, 
---
>                       f 
172c172
<                      FILE* f, 
---
>                      *  
172c172
<                      FILE* f, 
---
>                        
172c172
<                      FILE* f, 
---
>                      FILE f, 
172c172
<                      FILE* f, 
---
>                      FILE , 
172c172
<                      FILE* f, 
---
>                      FILE f 
172c172
<                      FILE* f, 
---
>                      FILE  
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE f, 
>                         verbosity,
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE , 
>                         verbosity,
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE f 
>                         verbosity,
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE  
>                         verbosity,
172c172
<                      FILE* f, 
---
>                      FILE* , 
172c172
<                      FILE* f, 
---
>                      FILE*  
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                         verbosity,
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                         verbosity,
172,173c172,173
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                      int   ,
(98.2 %, 3738 bytes)
172c172
<                      FILE* , 
---
>                      FILE*  
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                         verbosity,
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                      int   ,
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                         ,
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                      int   verbosity
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                         verbosity
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                      int   
172,173c172,173
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE*  
>                         
173c173
<                      int   verbosity,
---
>                         verbosity,
173c173
<                      int   verbosity,
---
>                         ,
173c173
<                      int   verbosity,
---
>                         verbosity
173c173
<                      int   verbosity,
---
>                         
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                         verbosity,
>                         small,
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                         ,
>                         small,
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                         verbosity
>                         small,
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                         
>                         small,
173c173
<                      int   verbosity,
---
>                      int   ,
173c173
<                      int   verbosity,
---
>                      int   
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         small,
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         small,
173,174c173,174
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                      int   ,
(98.2 %, 3729 bytes)
173c173
<                      int   ,
---
>                      int   
173,174c173,174
<                      int   ,
<                      int   small,
---
>                      int   
>                         small,
172a173
>                      int   
174d174
<                      int   small,
173,174c173,174
<                      int   ,
<                      int   small,
---
>                      int   
>                         ,
173,174c173,174
<                      int   ,
<                      int   small,
---
>                      int   
>                      int   small
173,174c173,174
<                      int   ,
<                      int   small,
---
>                      int   
>                         small
173,174c173,174
<                      int   ,
<                      int   small,
---
>                      int   
>                      int   
173,174c173,174
<                      int   ,
<                      int   small,
---
>                      int   
>                         
174c174
<                      int   small,
---
>                         small,
174c174
<                      int   small,
---
>                         ,
174c174
<                      int   small,
---
>                         small
174c174
<                      int   small,
---
>                         
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                         small,
>                      * unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                         ,
>                      * unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                         small
>                      * unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                         
>                      * unused,
174c174
<                      int   small,
---
>                      int   ,
174c174
<                      int   small,
---
>                      int   
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                      * unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                      int   
>                      * unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                      void unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                      int   
>                      void unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                       unused,
174,175c174,175
<                      int   small,
<                      void* unused,
---
>                      int   
>                       unused,
(98.2 %, 3724 bytes)
174c174
<                      int   ,
---
>                      int   
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                      * unused,
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                      void unused,
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                       unused,
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                      void* ,
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                      * ,
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                      void ,
174,175c174,175
<                      int   ,
<                      void* unused,
---
>                      int   
>                       ,
175c175
<                      void* unused,
---
>                      * unused,
175c175
<                      void* unused,
---
>                       unused,
175c175
<                      void* unused,
---
>                      * ,
175c175
<                      void* unused,
---
>                       ,
175c175
<                      void* unused,
---
>                      * unused
175c175
<                      void* unused,
---
>                       unused
175c175
<                      void* unused,
---
>                      * 
175c175
<                      void* unused,
---
>                       
175c175
<                      void* unused,
---
>                      void unused,
175c175
<                      void* unused,
---
>                      void ,
175c175
<                      void* unused,
---
>                      void unused
175c175
<                      void* unused,
---
>                      void 
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void unused,
>                         nUnused )
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void ,
>                         nUnused )
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void unused
>                         nUnused )
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void 
>                         nUnused )
175c175
<                      void* unused,
---
>                      void* ,
175c175
<                      void* unused,
---
>                      void* 
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                         nUnused )
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                         nUnused )
175,176c175,176
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                      int    )
(98.2 %, 3718 bytes)
175c175
<                      void* ,
---
>                      void* 
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                         nUnused )
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                      int    )
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                          )
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                      int   nUnused 
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                         nUnused 
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                      int    
175,176c175,176
<                      void* ,
<                      int   nUnused )
---
>                      void* 
>                          
176c176
<                      int   nUnused )
---
>                         nUnused )
176c176
<                      int   nUnused )
---
>                          )
176c176
<                      int   nUnused )
---
>                         nUnused 
176c176
<                      int   nUnused )
---
>                          
176,177c176,177
<                      int   nUnused )
< ;
---
>                         nUnused )
> 
176,177c176,177
<                      int   nUnused )
< ;
---
>                          )
> 
176,177c176,177
<                      int   nUnused )
< ;
---
>                         nUnused 
> 
176,177c176,177
<                      int   nUnused )
< ;
---
>                          
> 
176c176
<                      int   nUnused )
---
>                      int    )
176c176
<                      int   nUnused )
---
>                      int    
176,177c176,177
<                      int   nUnused )
< ;
---
>                      int    )
> 
176,177c176,177
<                      int   nUnused )
< ;
---
>                      int    
> 
176c176
<                      int   nUnused )
---
>                      int    )
181c181
< void ;
---
>  ;
(98.2 %, 3711 bytes)
176c176
<                      int    )
---
>                      int    
176,177c176,177
<                      int    )
< ;
---
>                      int    
> 
176c176
<                      int    )
---
>                      int    
181c181
< void ;
---
>  ;
176,177c176
<                      int    )
< ;
---
>                      int    
181c180,181
< void ;
---
> 
>  ;
176c176
<                      int    )
---
>                      int    
181c181
< void ;
---
> void 
176,177c176
<                      int    )
< ;
---
>                      int    
181c180,181
< void ;
---
> 
> void 
176c176
<                      int    )
---
>                      int    
181c181
< void ;
---
>  
176,177c176
<                      int    )
< ;
---
>                      int    
181c180,181
< void ;
---
> 
>  
177c177
< ;
---
> 
177d176
< ;
181c180,181
< void ;
---
> 
>  ;
177d176
< ;
181c180,181
< void ;
---
> 
> void 
177d176
< ;
181c180,181
< void ;
---
> 
>  
177c177
< ;
---
> 
185c185
< int BZ_APIBZ2_bzRead 
---
>  BZ_APIBZ2_bzRead 
177d176
< ;
181d179
< void ;
182a181
>  ;
185c184,185
< int BZ_APIBZ2_bzRead 
---
> 
>  BZ_APIBZ2_bzRead 
(98.2 %, 3706 bytes)
181c181
<  ;
---
>  
185c185
< int BZ_APIBZ2_bzRead 
---
>  BZ_APIBZ2_bzRead 
181c181
<  ;
---
>  
185c185
< int BZ_APIBZ2_bzRead 
---
> int  
181c181
<  ;
---
>  
185c185
< int BZ_APIBZ2_bzRead 
---
>   
181c181
<  ;
---
>  
186c186
<            ( int*    bzerror, 
---
>             int*    bzerror, 
181c181
<  ;
---
>  
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>             int*    bzerror, 
181c181
<  ;
---
>  
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
> int  
>             int*    bzerror, 
181c181
<  ;
---
>  
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int*    bzerror, 
185c185
< int BZ_APIBZ2_bzRead 
---
>  BZ_APIBZ2_bzRead 
185c185
< int BZ_APIBZ2_bzRead 
---
>   
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>             int*    bzerror, 
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int*    bzerror, 
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>            ( *    bzerror, 
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( *    bzerror, 
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  BZ_APIBZ2_bzRead 
>             *    bzerror, 
185,186c185,186
< int BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             *    bzerror, 
(98.2 %, 3703 bytes)
185c185
<  BZ_APIBZ2_bzRead 
---
>   
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int*    bzerror, 
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( *    bzerror, 
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             *    bzerror, 
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( int    bzerror, 
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int    bzerror, 
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            (     bzerror, 
185,186c185,186
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>                 bzerror, 
186c186
<            ( int*    bzerror, 
---
>             int*    bzerror, 
186c186
<            ( int*    bzerror, 
---
>             *    bzerror, 
186c186
<            ( int*    bzerror, 
---
>             int    bzerror, 
186c186
<            ( int*    bzerror, 
---
>                 bzerror, 
186c186
<            ( int*    bzerror, 
---
>             int*    , 
186c186
<            ( int*    bzerror, 
---
>             *    , 
186c186
<            ( int*    bzerror, 
---
>             int    , 
186c186
<            ( int*    bzerror, 
---
>                 , 
186c186
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
186c186
<            ( int*    bzerror, 
---
>            (     bzerror, 
186c186
<            ( int*    bzerror, 
---
>            ( *    , 
186c186
<            ( int*    bzerror, 
---
>            (     , 
186c186
<            ( int*    bzerror, 
---
>            ( *    bzerror 
186c186
<            ( int*    bzerror, 
---
>            (     bzerror 
186c186
<            ( int*    bzerror, 
---
>            ( *     
186c186
<            ( int*    bzerror, 
---
>            (      
186c186
<            ( int*    bzerror, 
---
>            ( int    bzerror, 
186c186
<            ( int*    bzerror, 
---
>            ( int    , 
186c186
<            ( int*    bzerror, 
---
>            ( int    bzerror 
186c186
<            ( int*    bzerror, 
---
>            ( int     
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    bzerror, 
>              * b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    , 
>              * b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    bzerror 
>              * b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int     
>              * b, 
186c186
<            ( int*    bzerror, 
---
>            ( int*    , 
186c186
<            ( int*    bzerror, 
---
>            ( int*     
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>              * b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>              * b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>              BZFILE b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>              BZFILE b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>               b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>               b, 
186c186
<            ( int*    bzerror, 
---
>            ( int*    bzerror 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              * b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>               b, 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE* , 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              * , 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE , 
186,187c186,187
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>               , 
187c187
<              BZFILE* b, 
---
>              * b, 
187c187
<              BZFILE* b, 
---
>               b, 
187c187
<              BZFILE* b, 
---
>              * , 
187c187
<              BZFILE* b, 
---
>               , 
187c187
<              BZFILE* b, 
---
>              * b 
187c187
<              BZFILE* b, 
---
>               b 
187c187
<              BZFILE* b, 
---
>              *  
187c187
<              BZFILE* b, 
---
>                
187c187
<              BZFILE* b, 
---
>              BZFILE b, 
187c187
<              BZFILE* b, 
---
>              BZFILE , 
187c187
<              BZFILE* b, 
---
>              BZFILE b 
187c187
<              BZFILE* b, 
---
>              BZFILE  
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE b, 
>              *   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE , 
>              *   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE b 
>              *   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE  
>              *   buf, 
187c187
<              BZFILE* b, 
---
>              BZFILE* , 
187c187
<              BZFILE* b, 
---
>              BZFILE*  
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
>              *   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE*  
>              *   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
>              void   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE*  
>              void   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
>                 buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE*  
>                 buf, 
187c187
<              BZFILE* b, 
---
>              BZFILE* b 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              *   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              void   buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>                 buf, 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              void*   , 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              *   , 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>              void   , 
187,188c187,188
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* b 
>                 , 
188c188
<              void*   buf, 
---
>              *   buf, 
188c188
<              void*   buf, 
---
>                 buf, 
188c188
<              void*   buf, 
---
>              *   , 
188c188
<              void*   buf, 
---
>                 , 
188c188
<              void*   buf, 
---
>              *   buf 
188c188
<              void*   buf, 
---
>                 buf 
188c188
<              void*   buf, 
---
>              *    
188c188
<              void*   buf, 
---
>                  
188c188
<              void*   buf, 
---
>              void   buf, 
188c188
<              void*   buf, 
---
>              void   , 
188c188
<              void*   buf, 
---
>              void   buf 
188c188
<              void*   buf, 
---
>              void    
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void   buf, 
>                   len )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void   , 
>                   len )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void   buf 
>                   len )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void    
>                   len )
188c188
<              void*   buf, 
---
>              void*   , 
188c188
<              void*   buf, 
---
>              void*    
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   , 
>                   len )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*    
>                   len )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   , 
>              int      )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*    
>              int      )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   , 
>                    )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*    
>                    )
188c188
<              void*   buf, 
---
>              void*   buf 
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                   len )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int      )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                    )
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int     len 
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                   len 
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int      
188,189c188,189
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                    
189c189
<              int     len )
---
>                   len )
189c189
<              int     len )
---
>                    )
189c189
<              int     len )
---
>                   len 
189c189
<              int     len )
---
>                    
189,190c189,190
<              int     len )
< {
---
>                   len )
> 
189,190c189,190
<              int     len )
< {
---
>                    )
> 
189,190c189,190
<              int     len )
< {
---
>                   len 
> 
189,190c189,190
<              int     len )
< {
---
>                    
> 
189c189
<              int     len )
---
>              int      )
189c189
<              int     len )
---
>              int      
189,190c189,190
<              int     len )
< {
---
>              int      )
> 
189,190c189,190
<              int     len )
< {
---
>              int      
> 
189c189
<              int     len )
---
>              int      )
192c192
<    0; 
---
>    ; 
189c189
<              int     len )
---
>              int      
192c192
<    0; 
---
>    ; 
189,190c189,190
<              int     len )
< {
---
>              int      )
> 
192c192
<    0; 
---
>    ; 
189,190c189,190
<              int     len )
< {
---
>              int      
> 
192c192
<    0; 
---
>    ; 
189c189
<              int     len )
---
>              int     len 
189,190c189,190
<              int     len )
< {
---
>              int     len 
> 
189c189
<              int     len )
---
>              int     len 
192c192
<    0; 
---
>    ; 
189,190c189,190
<              int     len )
< {
---
>              int     len 
> 
192c192
<    0; 
---
>    ; 
189c189
<              int     len )
---
>              int     len 
192c192
<    0; 
---
>    0 
189,190c189,190
<              int     len )
< {
---
>              int     len 
> 
192c192
<    0; 
---
>    0 
189c189
<              int     len )
---
>              int     len 
192c192
<    0; 
---
>     
189,190c189,190
<              int     len )
< {
---
>              int     len 
> 
192c192
<    0; 
---
>     
190c190
< {
---
> 
190c190
< {
---
> 
192c192
<    0; 
---
>    ; 
190c190
< {
---
> 
192c192
<    0; 
---
>    0 
190c190
< {
---
> 
192c192
<    0; 
---
>     
190c190
< {
---
> 
193c193
< }
---
> 
190c190
< {
---
> 
192,193c192,193
<    0; 
< }
---
>    ; 
> 
190c190
< {
---
> 
192,193c192,193
<    0; 
< }
---
>    0 
> 
190c190
< {
---
> 
192,193c192,193
<    0; 
< }
---
>     
> 
192c192
<    0; 
---
>    ; 
(98.2 %, 3700 bytes)
192c192
<    ; 
---
>     
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                       int*    bzerror, 
192c192
<    ; 
---
>     
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
192c192
<    ; 
---
>     
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       int*    bzerror, 
197c197
< void BZ_APIBZ2_bzReadGetUnused 
---
>  BZ_APIBZ2_bzReadGetUnused 
197c197
< void BZ_APIBZ2_bzReadGetUnused 
---
>   
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                       int*    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       int*    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                      ( *    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                      ( *    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ_APIBZ2_bzReadGetUnused 
>                       *    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       *    bzerror, 
197c197
< void BZ_APIBZ2_bzReadGetUnused 
---
> void  
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( *    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       *    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( int    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int    bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      (     bzerror, 
197,198c197,198
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                           bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                       *    bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                       int    bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                           bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                       int*    , 
198c198
<                      ( int*    bzerror, 
---
>                       *    , 
198c198
<                      ( int*    bzerror, 
---
>                       int    , 
198c198
<                      ( int*    bzerror, 
---
>                           , 
198c198
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                      (     bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                      ( *    , 
198c198
<                      ( int*    bzerror, 
---
>                      (     , 
198c198
<                      ( int*    bzerror, 
---
>                      ( *    bzerror 
198c198
<                      ( int*    bzerror, 
---
>                      (     bzerror 
198c198
<                      ( int*    bzerror, 
---
>                      ( *     
198c198
<                      ( int*    bzerror, 
---
>                      (      
198c198
<                      ( int*    bzerror, 
---
>                      ( int    bzerror, 
198c198
<                      ( int*    bzerror, 
---
>                      ( int    , 
198c198
<                      ( int*    bzerror, 
---
>                      ( int    bzerror 
198c198
<                      ( int*    bzerror, 
---
>                      ( int     
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror, 
>                        * b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    , 
>                        * b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror 
>                        * b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int     
>                        * b, 
198c198
<                      ( int*    bzerror, 
---
>                      ( int*    , 
198c198
<                      ( int*    bzerror, 
---
>                      ( int*     
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        * b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        BZFILE b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                         b, 
198,199c198,199
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                         b, 
(98.2 %, 3693 bytes)
198c198
<                      ( int*    , 
---
>                      ( int*     
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * b, 
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE b, 
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                         b, 
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE* , 
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * , 
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE , 
198,199c198,199
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*     
>                         , 
199c199
<                        BZFILE* b, 
---
>                        * b, 
199c199
<                        BZFILE* b, 
---
>                         b, 
199c199
<                        BZFILE* b, 
---
>                        * , 
199c199
<                        BZFILE* b, 
---
>                         , 
199c199
<                        BZFILE* b, 
---
>                        * b 
199c199
<                        BZFILE* b, 
---
>                         b 
199c199
<                        BZFILE* b, 
---
>                        *  
199c199
<                        BZFILE* b, 
---
>                          
199c199
<                        BZFILE* b, 
---
>                        BZFILE b, 
199c199
<                        BZFILE* b, 
---
>                        BZFILE , 
199c199
<                        BZFILE* b, 
---
>                        BZFILE b 
199c199
<                        BZFILE* b, 
---
>                        BZFILE  
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b, 
>                        **  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
199c199
<                        BZFILE* b, 
---
>                        BZFILE* , 
199c199
<                        BZFILE* b, 
---
>                        BZFILE*  
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        **  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        **  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        void*  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        void*  unused, 
199,200c199,200
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        *  unused, 
(98.2 %, 3692 bytes)
199c199
<                        BZFILE* , 
---
>                        BZFILE*  
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                        **  unused, 
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                        void*  unused, 
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                        *  unused, 
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                        void*  unused, 
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                        *  unused, 
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                        void  unused, 
199,200c199,200
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE*  
>                          unused, 
200c200
<                        void**  unused, 
---
>                        **  unused, 
200c200
<                        void**  unused, 
---
>                        *  unused, 
200c200
<                        void**  unused, 
---
>                        *  unused, 
200c200
<                        void**  unused, 
---
>                          unused, 
200c200
<                        void**  unused, 
---
>                        **  , 
200c200
<                        void**  unused, 
---
>                        *  , 
200c200
<                        void**  unused, 
---
>                        *  , 
200c200
<                        void**  unused, 
---
>                          , 
200c200
<                        void**  unused, 
---
>                        void*  unused, 
200c200
<                        void**  unused, 
---
>                        void  unused, 
200c200
<                        void**  unused, 
---
>                        void*  , 
200c200
<                        void**  unused, 
---
>                        void  , 
200c200
<                        void**  unused, 
---
>                        void*  unused 
200c200
<                        void**  unused, 
---
>                        void  unused 
200c200
<                        void**  unused, 
---
>                        void*   
200c200
<                        void**  unused, 
---
>                        void   
200c200
<                        void**  unused, 
---
>                        void*  unused, 
200c200
<                        void**  unused, 
---
>                        void*  , 
200c200
<                        void**  unused, 
---
>                        void*  unused 
200c200
<                        void**  unused, 
---
>                        void*   
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused, 
>                        *    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  , 
>                        *    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused 
>                        *    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*   
>                        *    nUnused )
200c200
<                        void**  unused, 
---
>                        void**  , 
200c200
<                        void**  unused, 
---
>                        void**   
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        *    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        *    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        int    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        int    nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                            nUnused )
200,201c200,201
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                            nUnused )
200c200
<                        void**  unused, 
---
>                        void**  unused 
(98.2 %, 3686 bytes)
200c200
<                        void**  , 
---
>                        void**   
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                        *    nUnused )
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                        int    nUnused )
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                            nUnused )
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                        int*     )
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                        *     )
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                        int     )
200,201c200,201
<                        void**  , 
<                        int*    nUnused )
---
>                        void**   
>                             )
201c201
<                        int*    nUnused )
---
>                        *    nUnused )
201c201
<                        int*    nUnused )
---
>                            nUnused )
201c201
<                        int*    nUnused )
---
>                        *     )
201c201
<                        int*    nUnused )
---
>                             )
201c201
<                        int*    nUnused )
---
>                        *    nUnused 
201c201
<                        int*    nUnused )
---
>                            nUnused 
201c201
<                        int*    nUnused )
---
>                        *     
201c201
<                        int*    nUnused )
---
>                             
201c201
<                        int*    nUnused )
---
>                        int    nUnused )
201c201
<                        int*    nUnused )
---
>                        int     )
201c201
<                        int*    nUnused )
---
>                        int    nUnused 
201c201
<                        int*    nUnused )
---
>                        int     
201,202c201,202
<                        int*    nUnused )
< ;
---
>                        int    nUnused )
> 
201,202c201,202
<                        int*    nUnused )
< ;
---
>                        int     )
> 
201,202c201,202
<                        int*    nUnused )
< ;
---
>                        int    nUnused 
> 
201,202c201,202
<                        int*    nUnused )
< ;
---
>                        int     
> 
201c201
<                        int*    nUnused )
---
>                        int*     )
201c201
<                        int*    nUnused )
---
>                        int*     
201,202c201,202
<                        int*    nUnused )
< ;
---
>                        int*     )
> 
201,202c201,202
<                        int*    nUnused )
< ;
---
>                        int*     
> 
201c201
<                        int*    nUnused )
---
>                        int*     )
210c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
(98.2 %, 3679 bytes)
201c201
<                        int*     )
---
>                        int*     
201,202c201,202
<                        int*     )
< ;
---
>                        int*     
> 
201c201
<                        int*     )
---
>                        int*     
210c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
201,202c201
<                        int*     )
< ;
---
>                        int*     
210c209,210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress 
201c201
<                        int*     )
---
>                        int*     
210c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> int  
201,202c201
<                        int*     )
< ;
---
>                        int*     
210c209,210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
> int  
201c201
<                        int*     )
---
>                        int*     
210c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>   
201,202c201
<                        int*     )
< ;
---
>                        int*     
210c209,210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>   
202c202
< ;
---
> 
202d201
< ;
210c209,210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress 
202d201
< ;
210c209,210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
> int  
202d201
< ;
210c209,210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
> 
>   
202c202
< ;
---
> 
211c211
<                          ( char*         dest, 
---
>                           char*         dest, 
202d201
< ;
210,211c209,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                           char*         dest, 
202d201
< ;
210,211c209,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
> int  
>                           char*         dest, 
202d201
< ;
210,211c209,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>   
>                           char*         dest, 
210c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
210c210
< int BZ_APIBZ2_bzBuffToBuffCompress 
---
>   
210,211c210,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                           char*         dest, 
210,211c210,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char*         dest, 
210,211c210,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                          ( *         dest, 
210,211c210,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( *         dest, 
210,211c210,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffCompress 
>                           *         dest, 
210,211c210,211
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           *         dest, 
(98.2 %, 3676 bytes)
210c210
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>   
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char*         dest, 
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( *         dest, 
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           *         dest, 
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( char         dest, 
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char         dest, 
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          (          dest, 
210,211c210,211
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                                    dest, 
211c211
<                          ( char*         dest, 
---
>                           char*         dest, 
211c211
<                          ( char*         dest, 
---
>                           *         dest, 
211c211
<                          ( char*         dest, 
---
>                           char         dest, 
211c211
<                          ( char*         dest, 
---
>                                    dest, 
211c211
<                          ( char*         dest, 
---
>                           char*         , 
211c211
<                          ( char*         dest, 
---
>                           *         , 
211c211
<                          ( char*         dest, 
---
>                           char         , 
211c211
<                          ( char*         dest, 
---
>                                    , 
211c211
<                          ( char*         dest, 
---
>                          ( *         dest, 
211c211
<                          ( char*         dest, 
---
>                          (          dest, 
211c211
<                          ( char*         dest, 
---
>                          ( *         , 
211c211
<                          ( char*         dest, 
---
>                          (          , 
211c211
<                          ( char*         dest, 
---
>                          ( *         dest 
211c211
<                          ( char*         dest, 
---
>                          (          dest 
211c211
<                          ( char*         dest, 
---
>                          ( *          
211c211
<                          ( char*         dest, 
---
>                          (           
211c211
<                          ( char*         dest, 
---
>                          ( char         dest, 
211c211
<                          ( char*         dest, 
---
>                          ( char         , 
211c211
<                          ( char*         dest, 
---
>                          ( char         dest 
211c211
<                          ( char*         dest, 
---
>                          ( char          
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest, 
>                             int* destLen,
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         , 
>                             int* destLen,
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest 
>                             int* destLen,
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char          
>                             int* destLen,
211c211
<                          ( char*         dest, 
---
>                          ( char*         , 
211c211
<                          ( char*         dest, 
---
>                          ( char*          
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             int* destLen,
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             int* destLen,
211,212c211,212
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                            unsigned * destLen,
(98.2 %, 3672 bytes)
211c211
<                          ( char*         , 
---
>                          ( char*          
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             int* destLen,
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                            unsigned * destLen,
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             * destLen,
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                            unsigned int destLen,
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             int destLen,
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                            unsigned  destLen,
211,212c211,212
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*          
>                              destLen,
212c212
<                            unsigned int* destLen,
---
>                             int* destLen,
212c212
<                            unsigned int* destLen,
---
>                             * destLen,
212c212
<                            unsigned int* destLen,
---
>                             int destLen,
212c212
<                            unsigned int* destLen,
---
>                              destLen,
212c212
<                            unsigned int* destLen,
---
>                             int* ,
212c212
<                            unsigned int* destLen,
---
>                             * ,
212c212
<                            unsigned int* destLen,
---
>                             int ,
212c212
<                            unsigned int* destLen,
---
>                              ,
212c212
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
212c212
<                            unsigned int* destLen,
---
>                            unsigned  destLen,
212c212
<                            unsigned int* destLen,
---
>                            unsigned * ,
(98.2 %, 3669 bytes)
212c212
<                            unsigned * destLen,
---
>                            unsigned  destLen,
212c212
<                            unsigned * destLen,
---
>                            unsigned  ,
212c212
<                            unsigned * destLen,
---
>                            unsigned  destLen
212c212
<                            unsigned * destLen,
---
>                            unsigned  
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen,
>                            *         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  ,
>                            *         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen
>                            *         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  
>                            *         source, 
212c212
<                            unsigned * destLen,
---
>                            unsigned * ,
212c212
<                            unsigned * destLen,
---
>                            unsigned * 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            *         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            *         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            char         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            char         source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                                     source, 
212,213c212,213
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                                     source, 
212c212
<                            unsigned * destLen,
---
>                            unsigned * destLen
(98.2 %, 3662 bytes)
212c212
<                            unsigned * ,
---
>                            unsigned * 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                            *         source, 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                            char         source, 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                                     source, 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                            char*         , 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                            *         , 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                            char         , 
212,213c212,213
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * 
>                                     , 
213c213
<                            char*         source, 
---
>                            *         source, 
213c213
<                            char*         source, 
---
>                                     source, 
213c213
<                            char*         source, 
---
>                            *         , 
213c213
<                            char*         source, 
---
>                                     , 
213c213
<                            char*         source, 
---
>                            *         source 
213c213
<                            char*         source, 
---
>                                     source 
213c213
<                            char*         source, 
---
>                            *          
213c213
<                            char*         source, 
---
>                                      
213c213
<                            char*         source, 
---
>                            char         source, 
213c213
<                            char*         source, 
---
>                            char         , 
213c213
<                            char*         source, 
---
>                            char         source 
213c213
<                            char*         source, 
---
>                            char          
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source, 
>                             int  sourceLen,
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         , 
>                             int  sourceLen,
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source 
>                             int  sourceLen,
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char          
>                             int  sourceLen,
213c213
<                            char*         source, 
---
>                            char*         , 
213c213
<                            char*         source, 
---
>                            char*          
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                             int  sourceLen,
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                             int  sourceLen,
213,214c213,214
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                            unsigned   sourceLen,
(98.2 %, 3656 bytes)
213c213
<                            char*         , 
---
>                            char*          
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                             int  sourceLen,
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                            unsigned   sourceLen,
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                               sourceLen,
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                            unsigned int  ,
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                             int  ,
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                            unsigned   ,
213,214c213,214
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*          
>                               ,
214c214
<                            unsigned int  sourceLen,
---
>                             int  sourceLen,
214c214
<                            unsigned int  sourceLen,
---
>                               sourceLen,
214c214
<                            unsigned int  sourceLen,
---
>                             int  ,
214c214
<                            unsigned int  sourceLen,
---
>                               ,
214c214
<                            unsigned int  sourceLen,
---
>                             int  sourceLen
214c214
<                            unsigned int  sourceLen,
---
>                               sourceLen
214c214
<                            unsigned int  sourceLen,
---
>                             int  
214c214
<                            unsigned int  sourceLen,
---
>                               
214c214
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen,
214c214
<                            unsigned int  sourceLen,
---
>                            unsigned   ,
214c214
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen
(98.2 %, 3653 bytes)
214c214
<                            unsigned   sourceLen,
---
>                            unsigned   ,
214c214
<                            unsigned   sourceLen,
---
>                            unsigned   
214,215c214,215
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
214,215c214,215
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
214,215c214,215
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                            int           , 
(98.2 %, 3644 bytes)
214c214
<                            unsigned   ,
---
>                            unsigned   
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                            int           , 
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       , 
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                            int           blockSize100k 
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k 
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                            int            
214,215c214,215
<                            unsigned   ,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                        
215c215
<                            int           blockSize100k, 
---
>                                       blockSize100k, 
215c215
<                            int           blockSize100k, 
---
>                                       , 
215c215
<                            int           blockSize100k, 
---
>                                       blockSize100k 
215c215
<                            int           blockSize100k, 
---
>                                        
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k, 
>                                       verbosity, 
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       , 
>                                       verbosity, 
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k 
>                                       verbosity, 
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                        
>                                       verbosity, 
215c215
<                            int           blockSize100k, 
---
>                            int           , 
215c215
<                            int           blockSize100k, 
---
>                            int            
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       verbosity, 
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity, 
215,216c215,216
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                            int           , 
(98.2 %, 3631 bytes)
215c215
<                            int           , 
---
>                            int            
215,216c215,216
<                            int           , 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity, 
214a215
>                            int            
216d216
<                            int           verbosity, 
215,216c215,216
<                            int           , 
<                            int           verbosity, 
---
>                            int            
>                                       , 
215,216c215,216
<                            int           , 
<                            int           verbosity, 
---
>                            int            
>                            int           verbosity 
215,216c215,216
<                            int           , 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity 
215,216c215,216
<                            int           , 
<                            int           verbosity, 
---
>                            int            
>                            int            
215,216c215,216
<                            int           , 
<                            int           verbosity, 
---
>                            int            
>                                        
216c216
<                            int           verbosity, 
---
>                                       verbosity, 
216c216
<                            int           verbosity, 
---
>                                       , 
216c216
<                            int           verbosity, 
---
>                                       verbosity 
216c216
<                            int           verbosity, 
---
>                                        
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity, 
>                                       workFactor )
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       , 
>                                       workFactor )
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity 
>                                       workFactor )
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                                        
>                                       workFactor )
216c216
<                            int           verbosity, 
---
>                            int           , 
216c216
<                            int           verbosity, 
---
>                            int            
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                       workFactor )
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                       workFactor )
216,217c216,217
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                            int            )
(98.2 %, 3622 bytes)
216c216
<                            int           , 
---
>                            int            
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                                       workFactor )
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                            int            )
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                                        )
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                            int           workFactor 
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                                       workFactor 
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                            int            
216,217c216,217
<                            int           , 
<                            int           workFactor )
---
>                            int            
>                                        
217c217
<                            int           workFactor )
---
>                                       workFactor )
217c217
<                            int           workFactor )
---
>                                        )
217c217
<                            int           workFactor )
---
>                                       workFactor 
217c217
<                            int           workFactor )
---
>                                        
217,218c217,218
<                            int           workFactor )
< ;
---
>                                       workFactor )
> 
217,218c217,218
<                            int           workFactor )
< ;
---
>                                        )
> 
217,218c217,218
<                            int           workFactor )
< ;
---
>                                       workFactor 
> 
217,218c217,218
<                            int           workFactor )
< ;
---
>                                        
> 
217c217
<                            int           workFactor )
---
>                            int            )
217c217
<                            int           workFactor )
---
>                            int            
217,218c217,218
<                            int           workFactor )
< ;
---
>                            int            )
> 
217,218c217,218
<                            int           workFactor )
< ;
---
>                            int            
> 
217c217
<                            int           workFactor )
---
>                            int            )
222c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
(98.2 %, 3612 bytes)
217c217
<                            int            )
---
>                            int            
217,218c217,218
<                            int            )
< ;
---
>                            int            
> 
217c217
<                            int            )
---
>                            int            
222c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
217,218c217
<                            int            )
< ;
---
>                            int            
222c221,222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress 
217c217
<                            int            )
---
>                            int            
222c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> int  
217,218c217
<                            int            )
< ;
---
>                            int            
222c221,222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> 
> int  
217c217
<                            int            )
---
>                            int            
222c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>   
217,218c217
<                            int            )
< ;
---
>                            int            
222c221,222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> 
>   
218c218
< ;
---
> 
218d217
< ;
222c221,222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress 
218d217
< ;
222c221,222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> 
> int  
218d217
< ;
222c221,222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
> 
>   
218c218
< ;
---
> 
223c223
<                            ( char*         dest, 
---
>                             char*         dest, 
218d217
< ;
222,223c221,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
218d217
< ;
222,223c221,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> 
> int  
>                             char*         dest, 
218d217
< ;
222,223c221,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> 
>   
>                             char*         dest, 
222c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
222c222
< int BZ_APIBZ2_bzBuffToBuffDecompress 
---
>   
222,223c222,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
222,223c222,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char*         dest, 
222,223c222,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                            ( *         dest, 
222,223c222,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( *         dest, 
222,223c222,223
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ_APIBZ2_bzBuffToBuffDecompress 
>                             *         dest, 
(98.2 %, 3609 bytes)
222c222
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>   
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char*         dest, 
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( *         dest, 
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             *         dest, 
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( char         dest, 
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char         dest, 
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            (          dest, 
222,223c222,223
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                                      dest, 
223c223
<                            ( char*         dest, 
---
>                             char*         dest, 
223c223
<                            ( char*         dest, 
---
>                             *         dest, 
223c223
<                            ( char*         dest, 
---
>                             char         dest, 
223c223
<                            ( char*         dest, 
---
>                                      dest, 
223c223
<                            ( char*         dest, 
---
>                             char*         , 
223c223
<                            ( char*         dest, 
---
>                             *         , 
223c223
<                            ( char*         dest, 
---
>                             char         , 
223c223
<                            ( char*         dest, 
---
>                                      , 
223c223
<                            ( char*         dest, 
---
>                            ( *         dest, 
223c223
<                            ( char*         dest, 
---
>                            (          dest, 
223c223
<                            ( char*         dest, 
---
>                            ( *         , 
223c223
<                            ( char*         dest, 
---
>                            (          , 
223c223
<                            ( char*         dest, 
---
>                            ( *         dest 
223c223
<                            ( char*         dest, 
---
>                            (          dest 
223c223
<                            ( char*         dest, 
---
>                            ( *          
223c223
<                            ( char*         dest, 
---
>                            (           
223c223
<                            ( char*         dest, 
---
>                            ( char         dest, 
223c223
<                            ( char*         dest, 
---
>                            ( char         , 
223c223
<                            ( char*         dest, 
---
>                            ( char         dest 
223c223
<                            ( char*         dest, 
---
>                            ( char          
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest, 
>                               int* destLen,
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         , 
>                               int* destLen,
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest 
>                               int* destLen,
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char          
>                               int* destLen,
223c223
<                            ( char*         dest, 
---
>                            ( char*         , 
223c223
<                            ( char*         dest, 
---
>                            ( char*          
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               int* destLen,
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
223,224c223,224
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                              unsigned * destLen,
(98.2 %, 3605 bytes)
223c223
<                            ( char*         , 
---
>                            ( char*          
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned * destLen,
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               * destLen,
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned int destLen,
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int destLen,
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned  destLen,
223,224c223,224
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*          
>                                destLen,
224c224
<                              unsigned int* destLen,
---
>                               int* destLen,
224c224
<                              unsigned int* destLen,
---
>                               * destLen,
224c224
<                              unsigned int* destLen,
---
>                               int destLen,
224c224
<                              unsigned int* destLen,
---
>                                destLen,
224c224
<                              unsigned int* destLen,
---
>                               int* ,
224c224
<                              unsigned int* destLen,
---
>                               * ,
224c224
<                              unsigned int* destLen,
---
>                               int ,
224c224
<                              unsigned int* destLen,
---
>                                ,
224c224
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
224c224
<                              unsigned int* destLen,
---
>                              unsigned  destLen,
224c224
<                              unsigned int* destLen,
---
>                              unsigned * ,
(98.2 %, 3602 bytes)
224c224
<                              unsigned * destLen,
---
>                              unsigned  destLen,
224c224
<                              unsigned * destLen,
---
>                              unsigned  ,
224c224
<                              unsigned * destLen,
---
>                              unsigned  destLen
224c224
<                              unsigned * destLen,
---
>                              unsigned  
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen,
>                              *         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  ,
>                              *         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen
>                              *         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  
>                              *         source, 
224c224
<                              unsigned * destLen,
---
>                              unsigned * ,
224c224
<                              unsigned * destLen,
---
>                              unsigned * 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              *         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              char         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                                       source, 
224,225c224,225
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
224c224
<                              unsigned * destLen,
---
>                              unsigned * destLen
(98.2 %, 3595 bytes)
224c224
<                              unsigned * ,
---
>                              unsigned * 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              char*         , 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              *         , 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                              char         , 
224,225c224,225
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * 
>                                       , 
225c225
<                              char*         source, 
---
>                              *         source, 
225c225
<                              char*         source, 
---
>                                       source, 
225c225
<                              char*         source, 
---
>                              *         , 
225c225
<                              char*         source, 
---
>                                       , 
225c225
<                              char*         source, 
---
>                              *         source 
225c225
<                              char*         source, 
---
>                                       source 
225c225
<                              char*         source, 
---
>                              *          
225c225
<                              char*         source, 
---
>                                        
225c225
<                              char*         source, 
---
>                              char         source, 
225c225
<                              char*         source, 
---
>                              char         , 
225c225
<                              char*         source, 
---
>                              char         source 
225c225
<                              char*         source, 
---
>                              char          
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source, 
>                               int  sourceLen,
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         , 
>                               int  sourceLen,
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source 
>                               int  sourceLen,
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char          
>                               int  sourceLen,
225c225
<                              char*         source, 
---
>                              char*         , 
225c225
<                              char*         source, 
---
>                              char*          
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                               int  sourceLen,
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                               int  sourceLen,
225,226c225,226
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                              unsigned   sourceLen,
(98.2 %, 3589 bytes)
225c225
<                              char*         , 
---
>                              char*          
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                               int  sourceLen,
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                              unsigned   sourceLen,
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                                 sourceLen,
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                              unsigned int  ,
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                               int  ,
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                              unsigned   ,
225,226c225,226
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*          
>                                 ,
226c226
<                              unsigned int  sourceLen,
---
>                               int  sourceLen,
226c226
<                              unsigned int  sourceLen,
---
>                                 sourceLen,
226c226
<                              unsigned int  sourceLen,
---
>                               int  ,
226c226
<                              unsigned int  sourceLen,
---
>                                 ,
226c226
<                              unsigned int  sourceLen,
---
>                               int  sourceLen
226c226
<                              unsigned int  sourceLen,
---
>                                 sourceLen
226c226
<                              unsigned int  sourceLen,
---
>                               int  
226c226
<                              unsigned int  sourceLen,
---
>                                 
226c226
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen,
226c226
<                              unsigned int  sourceLen,
---
>                              unsigned   ,
(98.3 %, 3586 bytes)
226c226
<                              unsigned   sourceLen,
---
>                              unsigned   ,
226c226
<                              unsigned   sourceLen,
---
>                              unsigned   
226,227c226,227
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
226,227c226,227
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
226,227c226,227
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                              int           ,
(98.3 %, 3577 bytes)
226c226
<                              unsigned   ,
---
>                              unsigned   
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                                         small,
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                              int           ,
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                                         ,
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                              int           small
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                                         small
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                              int           
226,227c226,227
<                              unsigned   ,
<                              int           small,
---
>                              unsigned   
>                                         
227c227
<                              int           small,
---
>                                         small,
227c227
<                              int           small,
---
>                                         ,
227c227
<                              int           small,
---
>                                         small
227c227
<                              int           small,
---
>                                         
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                                         small,
>                                         verbosity )
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                                         ,
>                                         verbosity )
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                                         small
>                                         verbosity )
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                                         
>                                         verbosity )
227c227
<                              int           small,
---
>                              int           ,
227c227
<                              int           small,
---
>                              int           
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                         verbosity )
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
227,228c227,228
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                              int            )
(98.3 %, 3572 bytes)
227c227
<                              int           ,
---
>                              int           
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                              int            )
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                          )
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                              int           verbosity 
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                         verbosity 
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                              int            
227,228c227,228
<                              int           ,
<                              int           verbosity )
---
>                              int           
>                                          
228c228
<                              int           verbosity )
---
>                                         verbosity )
228c228
<                              int           verbosity )
---
>                                          )
228c228
<                              int           verbosity )
---
>                                         verbosity 
228c228
<                              int           verbosity )
---
>                                          
228,229c228,229
<                              int           verbosity )
< ;
---
>                                         verbosity )
> 
228,229c228,229
<                              int           verbosity )
< ;
---
>                                          )
> 
228,229c228,229
<                              int           verbosity )
< ;
---
>                                         verbosity 
> 
228,229c228,229
<                              int           verbosity )
< ;
---
>                                          
> 
228c228
<                              int           verbosity )
---
>                              int            )
228c228
<                              int           verbosity )
---
>                              int            
228,229c228,229
<                              int           verbosity )
< ;
---
>                              int            )
> 
(98.3 %, 3563 bytes)
228c228
<                              int            )
---
>                              int            
228,229c228,229
<                              int            )
< ;
---
>                              int            
> 
228c228
<                              int            )
---
>                              int            
243c243
< ;
---
> 
228,229c228,230
<                              int            )
< ;
---
>                              int            
> 
> 
243d243
< ;
228c228
<                              int            )
---
>                              int            
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread ()
228,229c228,229
<                              int            )
< ;
---
>                              int            
> 
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread ()
228c228
<                              int            )
---
>                              int            
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
>  BZ_APIBZ2_bzread ()
228,229c228
<                              int            )
< ;
---
>                              int            
243d241
< ;
247c245,247
< int BZ_APIBZ2_bzread ()
---
> 
> 
>  BZ_APIBZ2_bzread ()
229c229
< ;
---
> 
229d228
< ;
243c242,243
< ;
---
> 
> 
229c229
< ;
---
> 
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread ()
(98.3 %, 3562 bytes)
243c243
< ;
---
> 
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
>  BZ_APIBZ2_bzread ()
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
> int  ()
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
>   ()
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
> int BZ_APIBZ2_bzread )
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
>  BZ_APIBZ2_bzread )
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
> int  )
243d242
< ;
247c246,247
< int BZ_APIBZ2_bzread ()
---
> 
>   )
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread ()
247c247
< int BZ_APIBZ2_bzread ()
---
>   ()
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread )
247c247
< int BZ_APIBZ2_bzread ()
---
>   )
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread (
247c247
< int BZ_APIBZ2_bzread ()
---
>   (
247c247
< int BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread 
247c247
< int BZ_APIBZ2_bzread ()
---
>   
(98.3 %, 3559 bytes)
247c247
<  BZ_APIBZ2_bzread ()
---
>   ()
247c247
<  BZ_APIBZ2_bzread ()
---
>   )
247c247
<  BZ_APIBZ2_bzread ()
---
>   (
247c247
<  BZ_APIBZ2_bzread ()
---
>   
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>   ()
> 
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>   )
> 
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>   (
> 
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>   
> 
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread )
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread 
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>  BZ_APIBZ2_bzread )
> 
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>  BZ_APIBZ2_bzread 
> 
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread )
249c249
<    int bzerr;
---
>     bzerr;
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread 
249c249
<    int bzerr;
---
>     bzerr;
247,249c247,249
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzread )
> 
>     bzerr;
247,249c247,249
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzread 
> 
>     bzerr;
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread (
247,248c247,248
<  BZ_APIBZ2_bzread ()
< {
---
>  BZ_APIBZ2_bzread (
> 
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread (
249c249
<    int bzerr;
---
>     bzerr;
247,249c247,249
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzread (
> 
>     bzerr;
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread (
249c249
<    int bzerr;
---
>    int ;
247,249c247,249
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzread (
> 
>    int ;
247c247
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread (
249c249
<    int bzerr;
---
>     ;
247,249c247,249
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzread (
> 
>     ;
248c248
< {
---
> 
248,249c248,249
< {
<    int bzerr;
---
> 
>     bzerr;
248,249c248,249
< {
<    int bzerr;
---
> 
>    int ;
248,249c248,249
< {
<    int bzerr;
---
> 
>     ;
248,249c248,249
< {
<    int bzerr;
---
> 
>    int bzerr
248,249c248,249
< {
<    int bzerr;
---
> 
>     bzerr
248,249c248,249
< {
<    int bzerr;
---
> 
>    int 
248,249c248,249
< {
<    int bzerr;
---
> 
>     
249c249
<    int bzerr;
---
>     bzerr;
249c249
<    int bzerr;
---
>     ;
249c249
<    int bzerr;
---
>     bzerr
249c249
<    int bzerr;
---
>     
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     bzerr;
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     ;
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     bzerr
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249c249
<    int bzerr;
---
>    int ;
249c249
<    int bzerr;
---
>    int 
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int ;
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int 
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int ;
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int 
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int ;
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int 
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249c249
<    int bzerr;
---
>    int bzerr
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>    if ( == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>     ( == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>    if  == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
249,250c249,250
<    int bzerr;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr
>      == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     ( == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>      == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     (bzerr  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     bzerr  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>     (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>       BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if  == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if   BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr ==  || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if  ==  || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if bzerr   || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if    || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ( == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ( ==  || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (   || bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ( == BZ_OK  bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (  BZ_OK  bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ( ==   bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END) ; else ;
(98.3 %, 3552 bytes)
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END) ; else ;
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (   ||  == BZ_STREAM_END) ; else ;
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (     == BZ_STREAM_END) ; else ;
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (   || bzerr  BZ_STREAM_END) ; else ;
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  BZ_STREAM_END) ; else ;
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (   ||   BZ_STREAM_END) ; else ;
250c250
<    if (  BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (      BZ_STREAM_END) ; else ;
(98.3 %, 3545 bytes)
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (      BZ_STREAM_END) ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (     == ) ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (      ) ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (     == BZ_STREAM_END ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (      BZ_STREAM_END ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (     ==  ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (       ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  BZ_STREAM_END) ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  ) ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  BZ_STREAM_END ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr   ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  BZ_STREAM_END)  else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  )  else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr  BZ_STREAM_END  else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr    else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == ) ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr ==  ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == )  else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr ==   else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == ) ;  ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr ==  ;  ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == )   ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr ==    ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END ; else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END  else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END ;  ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END   ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END ; else 
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END  else 
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END ;  
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END   
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END)  else ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END)   ;
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END)  else 
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END)   
250,251c250,251
<    if (    bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (    bzerr == BZ_STREAM_END)  else ;
> 
250,251c250,251
<    if (    bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   ;
> 
250,251c250,251
<    if (    bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (    bzerr == BZ_STREAM_END)  else 
> 
250,251c250,251
<    if (    bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   
> 
250c250
<    if (    bzerr == BZ_STREAM_END) ; else ;
---
>    if (    bzerr == BZ_STREAM_END) ;  ;
(98.3 %, 3540 bytes)
250,251c250,251
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   
> 
250c250
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr == BZ_STREAM_END)   
250,251c250,251
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   
> 
250c250
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr == BZ_STREAM_END)   
250,251c250,251
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   
> 
250c250
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr == BZ_STREAM_END)   
250,251c250,251
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   
> 
251c251
< }
---
> 
251c251
< }
---
> 
251c251
< }
---
> 
251c251
< }
---
> 
251c251
< }
---
> 
251c251
< }
---
> 
251c251
< }
---
> 
251c251
< }
---
> 
Termination check: size was 4596; now 3540
===< pass_ternary :: c >===
===< pass_balanced :: curly >===
248,251d247
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
254a251,252
> 
>  
\ No newline at end of file
===< pass_balanced :: curly3 >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: replace-simple-typedef >===
29c29
< typedef  BZFILE;
---
> 
44c44
<       BZFILE* , 
---
>       int* , 
51c51
<       BZFILE* , 
---
>       int* , 
66c66
<       BZFILE* , 
---
>       int* , 
73c73
<       BZFILE*       , 
---
>       int*       , 
81c81
<       BZFILE*       , 
---
>       int*       , 
142c142
<                BZFILE* , 
---
>                int* , 
151c151
<                     BZFILE*       , 
---
>                     int*       , 
160c160
<                     BZFILE*       , 
---
>                     int*       , 
187c187
<              BZFILE* b, 
---
>              int* b, 
199c199
<                        BZFILE* , 
---
>                        int* , 
(98.3 %, 3494 bytes)
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: remove-pointer >===
===< pass_special :: b >===
===< pass_ints :: c >===
===< pass_ints :: d >===
Termination check: size was 3540; now 3494
===< pass_ternary :: c >===
===< pass_balanced :: curly2 >===
248,251c248
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
> ;
254a252
>  
\ No newline at end of file
===< pass_balanced :: angles >===
13c13
< #include <stdio.h>
---
> #include 
254a255
>  
\ No newline at end of file
===< pass_clang :: union-to-struct >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: move-function-body >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: replace-dependent-name >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_comments :: 0 >===
===< pass_ints :: a >===
===< pass_ints :: b >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-12 >===
9,13c9
< #define BZ_OK                0
< 
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> .h>
9,13c9
< #define BZ_OK                0
< 
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #h>
9,13c9
< #define BZ_OK                0
< 
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define >
9,15c9
< #define BZ_OK                0
< 
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define  func
---
> #define BZ_OK                #   define  func
11,15c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define  func
---
> define  func
11,15c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define  func
---
> #func
11,16c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
---
> #define #   define BZ_EXTERN 
11,16c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
---
> #define BZ_STREAM_END        define BZ_EXTERN 
13,16c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
---
> BZ_EXTERN 
13,31c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #* BZ_APIBZ2_bzReadOpen ( 
13,31c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #include BZ_APIBZ2_bzReadOpen ( 
13,31c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #include <( 
13,32c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdioint*  ,   
13,32c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdio.*  ,   
13,32c13
< #include <stdio.h>
< 
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdio.h,   
15,33c15
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> FILE* , 
15,33c15
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   * , 
15,33c15
< #   define  func
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   define  , 
16,34c16
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> int   , 
16,34c16
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #   , 
16,35c16
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #   define int   ,
31,35c31
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
>  ,
31,36c31
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  * void* ,    
31,36c31
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  * BZ_APIBZ2_bzReadOpen * ,    
32,36c32
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>       ,    
32,37c32
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
---
>       intint    
32,38c32
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
---
>       int*  )
33,40c33
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
---
>       ;
33,42c33
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>       FILEvoid BZ_APIBZ2_bzReadGetUnused ( 
33,42c33
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>       FILE* BZ_APIBZ2_bzReadGetUnused ( 
34,42c34
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>       ( 
34,43c34
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
---
>       int   int*    , 
35,43c35
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
---
>       *    , 
35,43c35
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
---
>       int   , 
36,43d35
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
36,44c36
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       void* , 
36,44c36
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       void* , 
37,44d36
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
38,45c38
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>    **  ,  
40,45c40
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>   *  ,  
42,45c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>  ,  
42,46c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
---
>  void int*     
42,46c42
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
---
>  void BZ_APIBZ2_bzReadGetUnused *     
43,47c43
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    );
---
>       );
43,47c43
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    );
---
>       int;
43,49c43
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
---
>       int*    BZ_APIBZ2_bzRead ( 
44,49c44
<       int* , 
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
---
>       ( 
44,50c44
<       int* , 
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
---
>       intint*    , 
44,50c44
<       int* , 
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
---
>       int* *    , 
45,50c45
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
---
>       , 
45,51c45
<       void**  ,  
<       int*     
<    );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
---
>       voidint* , 
(98.3 %, 3432 bytes)
43,48c43
<       );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
<       void*   , 
---
>       , 
43,49c43
<       );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
---
>       )int      
45,50c45
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
---
>   );
45,50c45
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
---
>   BZ_APIBZ2_bzRead ;
46,52c46
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>       * BZ_APIBZ2_bzWriteOpen ( 
46,52c46
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>       intBZ_APIBZ2_bzWriteOpen ( 
46,52c46
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>       int*    ( 
47,52d46
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
47,52d46
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
47,53c47
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
---
>       int* ,      
48,53d47
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
48,54c48
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       void* , 
49,54d48
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
49,54d48
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
50,55c50
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
>    , 
50,56c50
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>    )int   , 
52,56c52
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>  , 
52,57c52
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
---
>  * int    
52,58c52
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
---
>  * BZ_APIBZ2_bzWriteOpen );
53,58c53
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
---
>       ;
53,60c53
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
---
>       intvoid BZ_APIBZ2_bzWrite ( 
53,60c53
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
---
>       int*  BZ_APIBZ2_bzWrite ( 
54,60c54
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
---
>       ( 
54,61c54
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
---
>       FILEint*    , 
54,61c54
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
---
>       FILE* *    , 
55,61c55
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
---
>       , 
55,62c55
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
---
>       int   int* , 
56,62c56
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
---
>       * , 
57,62d56
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
57,62d56
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
58,63c58
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
---
>    *   , 
58,63c58
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
---
>    ), 
60,64c60
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
---
>  int      
60,65c60
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
---
>  void );
60,65c60
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
---
>  void BZ_APIBZ2_bzWrite ;
61,67c61
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
---
>       void BZ_APIBZ2_bzWriteClose ( 
61,67c61
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
---
>       intBZ_APIBZ2_bzWriteClose ( 
61,67c61
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
---
>       int*    ( 
62,67d61
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
62,67d61
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
63,68d62
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
63,68d62
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
63,69c63
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
---
>       void*       , 
64,69d63
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
64,69d63
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
65,70c65
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>    , 
65,71c65
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>    )unsigned * , 
67,71c67
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  * , 
67,71c67
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  void , 
67,72c67
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>  void BZ_APIBZ2_bzWriteClose unsigned *  
68,72c68
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>       *  
68,73c68
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
---
>       int);
68,73c68
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
---
>       int*          ;
69,75c69
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>       void BZ_APIBZ2_bzWriteClose64 ( 
69,75c69
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>       intBZ_APIBZ2_bzWriteClose64 ( 
69,75c69
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>       int*       ( 
70,75d69
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
70,76c70
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
---
>       int           *          , 
71,76c71
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
---
>       , 
71,77c71
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
---
>       unsigned int*       , 
71,77c71
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
---
>       unsigned * *       , 
72,77c72
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
---
>       , 
72,78c72
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>       unsigned int           , 
73,78c73
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>    , 
73,79c73
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>    )unsigned * , 
75,79c75
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  * , 
75,79c75
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  void , 
75,80c75
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  void BZ_APIBZ2_bzWriteClose64 unsigned * , 
76,80c76
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
76,80c76
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       int, 
76,81c76
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int*          unsigned * , 
77,81c77
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
77,81c77
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int, 
77,82c77
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       int*       unsigned * 
78,82c78
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       * 
78,83c78
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       int           );
79,83c79
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       ;
79,88c79
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned BZ_APIBZ2_bzBuffToBuffCompress ( 
79,88c79
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>       unsigned * ( 
80,88d79
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
80,89c80
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned *         , 
81,89d80
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
81,89d80
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
81,89d80
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
81,89d80
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
82,90d81
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
82,91c82
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned *         , 
83,91c83
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    , 
83,92c83
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>    )unsigned   ,
88,92c88
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>   ,
88,93c88
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>   BZ_APIBZ2_bzBuffToBuffCompress int           , 
89,93c89
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>       , 
89,94c89
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
---
>       charint           , 
90,94d89
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
90,94d89
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
90,96c90
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       unsigned );
90,96c90
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       unsigned * ;
91,98c91
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       BZ_APIBZ2_bzBuffToBuffDecompress ( 
91,98c91
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>       char( 
91,99c91
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       char*         char*         , 
92,99c92
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       *         , 
92,99c92
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       unsigned   , 
93,99d92
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
93,100c93
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       int           * ,
94,100c94
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       ,
94,101c94
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       int           char*         , 
95,101c95
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       *         , 
96,101c96
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    , 
96,102c96
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>    )unsigned   ,
98,102c98
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>   ,
98,103c98
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress int           , 
99,103c99
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>       , 
99,104c99
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>       charint           )
99,104c99
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>       char*         )
100,110c100
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
---
>       ;
100,125c100
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
---
>       unsigned * BZ_APIBZ2_bzWriteOpen 
100,125c100
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
---
>       unsigned * BZ_APIBZ2_bzWriteOpen 
101,126c101
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       ( int*  ,      
101,126c101
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       charint*  ,      
101,126c101
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       char*         *  ,      
102,126c102
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
>       ,      
102,127c102
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
---
>       unsigned   FILE* , 
103,127c103
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
---
>       * , 
104,127d103
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
104,128c104
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
---
>       int   , 
104,128c104
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
---
>       int           , 
110,129c110
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
---
> int   ,
125,129c125
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
---
> ,
125,130c125
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
---
> * int    )
126,130c126
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
---
>                     )
126,131c126
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
---
>                     ( ;
126,136c126
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                     ( intvoid BZ_APIBZ2_bzWrite
126,136c126
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                     ( int*  BZ_APIBZ2_bzWrite
127,137c127
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
>                       ( int*    , 
127,137c127
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
>                       FILEint*    , 
127,137c127
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
>                       FILE* *    , 
128,137c128
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
>                       , 
128,138c128
<                       int   , 
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
---
>                       int   int* , 
129,138c129
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
---
>                       * , 
129,138c129
<                       int   ,
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
---
>                       int   , 
130,139c130
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
<                void*   , 
---
>                       void*   , 
130,139c130
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
<                void*   , 
---
>                       int    *   , 
131,139c131
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
<                void*   , 
---
> , 
136,140c136
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
---
> int      )
136,140c136
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
---
> void )
137,141c137
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
< ;
---
>              ;
137,145c137
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>              ( void BZ_APIBZ2_bzWriteClose
137,145c137
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>              ( intBZ_APIBZ2_bzWriteClose
137,146c137
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
---
>              ( int*    ( int*          , 
138,146c138
<                int* , 
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
---
>                int*          , 
138,146c138
<                int* , 
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
---
>                int*          , 
139,146d138
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
139,147c139
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
---
>                int*       , 
139,147c139
<                void*   , 
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
---
>                void*       , 
140,147d139
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
140,148c140
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
<                     int           ,
---
>                int           ,
140,148c140
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
<                     int           ,
---
>                int      ,
141,149c141
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
---
> unsigned * ,
145,149c145
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
---
> * ,
145,149c145
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
---
> void ,
146,150c146
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
---
>                   unsigned *  )
146,150c146
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
---
>                   ( *  )
146,150c146
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
---
>                   ( int)
146,151c146
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
---
>                   ( int*          ;
147,154c147
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     void BZ_APIBZ2_bzWriteClose64
147,154c147
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     intBZ_APIBZ2_bzWriteClose64
147,155c147
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
>                     int*       ( int*          , 
148,155c148
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
>                     int*          , 
148,155c148
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
>                     int           *          , 
149,155c149
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
>                     , 
149,156c149
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
---
>                     unsigned int*       , 
149,156c149
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
---
>                     unsigned * *       , 
150,156c150
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
---
>                     , 
150,157c150
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
<                     int           ,
---
>                     unsigned int           ,
150,157c150
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
<                     int           ,
---
>                     unsigned *  ,
151,158c151
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
---
> unsigned * ,
154,158c154
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
---
> * ,
154,158c154
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
---
> void ,
155,159c155
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   unsigned * ,
155,159c155
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   ( * ,
155,159c155
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   ( int,
155,160c155
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   ( int*          unsigned * ,
156,160c156
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
---
>                     * ,
156,160c156
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
---
>                     int,
156,161c156
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
---
>                     int*       unsigned *  )
157,161c157
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
---
>                     *  )
157,161c157
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
---
>                     int           )
158,162c158
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
---
>                     ;
158,166c158
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
---
>                     unsigned * BZ_APIBZ2_bzReadOpen 
158,166c158
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
---
>                     unsigned * BZ_APIBZ2_bzReadOpen 
159,167c159
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
>                     ( int*  , 
159,167c159
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
>                     unsigned int*  , 
159,167c159
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
>                     unsigned * *  , 
160,167c160
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
>                     , 
160,168c160
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
---
>                     unsigned FILE* , 
160,168c160
<                     unsigned * ,
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
---
>                     unsigned * * , 
161,168c161
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
---
>                     , 
161,169c161
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
---
>                     unsigned int   ,
161,169c161
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
---
>                     unsigned *  ,
162,170c162
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
---
> int   ,
166,170c166
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
---
> ,
166,171c166
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
> * void* ,
167,171c167
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
>                    * ,
167,171c167
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
>                    ( ,
167,172c167
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
---
>                    ( intint    )
167,172c167
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
---
>                    ( int*  )
168,177c168
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
---
>                      ;
168,181c168
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
---
>                      FILEBZ_APIBZ2_bzRead 
168,182c168
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      FILE* ( int*    bzerror, 
169,182c169
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int*    bzerror, 
169,182c169
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   *    bzerror, 
170,182c170
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      bzerror, 
170,182c170
<                      int   ,
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>                      int   , 
171,183c171
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
---
>                      int* b, 
171,183c171
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
---
>                      void* b, 
171,183c171
<                      void* ,
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
---
>                      void* b, 
172,183c172
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
---
>                      , 
172,184c172
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
---
>                      int    void*   buf, 
177,184c177
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
---
>  *   buf, 
181,184c181
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
---
>  buf, 
182,184c182
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
---
>            , 
182,185c182
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
<              int     len )
---
>            ( int     len )
182,185c182
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
<              int     len )
---
>            ( intlen )
182,185c182
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    )
182,188c182
<            ( int*    bzerror, 
<              int* b, 
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
---
>            ( int*    bzerror; 
183,193c183
<              int* b, 
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              void BZ_APIBZ2_bzReadGetUnused 
183,193c183
<              int* b, 
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              intBZ_APIBZ2_bzReadGetUnused 
183,194c183
<              int* b, 
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
---
>              int* ( int*    , 
183,194c183
<              int* b, 
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
---
>              int* bint*    , 
184,194c184
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
---
>              *    , 
184,194c184
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
---
>              void, 
184,195c184
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
---
>              void*   int* , 
184,195c184
<              void*   buf, 
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
---
>              void*   buf* , 
185,195c185
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
---
>              , 
185,196c185
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
<                        void**  , 
---
>              int     void**  , 
185,196c185
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
<                        void**  , 
---
>              int     len **  , 
188,196c188
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
<                        void**  , 
---
>    *  , 
193,196c193
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
<                        void**  , 
---
> , 
193,197c193
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( int*    , 
<                        int* , 
<                        void**  , 
<                        int*     )
---
> void int*     )
194,197c194
<                      ( int*    , 
<                        int* , 
<                        void**  , 
<                        int*     )
---
>                      *     )
194,197c194
<                      ( int*    , 
<                        int* , 
<                        void**  , 
<                        int*     )
---
>                      ( )
194,198c194
<                      ( int*    , 
<                        int* , 
<                        void**  , 
<                        int*     )
< ;
---
>                      ( int;
194,206c194
<                      ( int*    , 
<                        int* , 
<                        void**  , 
<                        int*     )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>                      ( int*    BZ_APIBZ2_bzBuffToBuffCompress 
195,207c195
<                        int* , 
<                        void**  , 
<                        int*     )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
>                        ( char*         , 
195,207c195
<                        int* , 
<                        void**  , 
<                        int*     )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
>                        intchar*         , 
195,207c195
<                        int* , 
<                        void**  , 
<                        int*     )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
>                        int* *         , 
(98.4 %, 3324 bytes)
194,206c194
<                      ( )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
---
>                      ( , 
195,207c195
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
---
> unsigned   ,
203,207c203
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
---
>  ,
204,208c204
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
---
>                          int           , 
204,208c204
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
---
>                          ( , 
204,209c204
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
---
>                          ( charint           , 
205,209d204
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
205,209d204
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
205,210c205
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
---
>                            unsigned )
205,211c205
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
---
>                            unsigned * ;
206,215c206
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            BZ_APIBZ2_bzBuffToBuffDecompress 
206,216c206
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
>                            char( char*         , 
206,216c206
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
>                            char*         char*         , 
207,216c207
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
>                            *         , 
207,216c207
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
>                            unsigned   , 
208,217c208
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
---
>                            unsigned * ,
208,217c208
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
---
>                            int           * ,
209,217c209
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
---
>                            ,
209,218c209
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
---
>                            int           char*         , 
210,218c210
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
---
>                            *         , 
210,218c210
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
---
>                            int            , 
211,219c211
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
---
> unsigned   ,
215,219c215
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
---
>  ,
216,220c216
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
---
>                            int           ,
216,220c216
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
---
>                            ( ,
216,221c216
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
---
>                            ( charint            )
216,221c216
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
---
>                            ( char*         )
217,236c217
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>                              ;
217,240c217
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
---
>                              unsigned BZ_APIBZ2_bzread ()
217,240c217
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
---
>                              unsigned * ()
218,240c218
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
---
>                              )
218,241c218
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
---
>                              char{
218,242c218
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>                              char*         int bzerr;
219,242c219
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>                              bzerr;
219,242c219
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>                              unsigned   ;
220,243c220
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>                              if (    bzerr == BZ_STREAM_END)   ;
220,243c220
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>                              int           (    bzerr == BZ_STREAM_END)   ;
221,243c221
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>                              bzerr == BZ_STREAM_END)   ;
221,243c221
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>                              int            == BZ_STREAM_END)   ;
236,243c236
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
> BZ_STREAM_END)   ;
240,243c240
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>  )   ;
240,243c240
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>  BZ_APIBZ2_bzread ;
240,244c240
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>  BZ_APIBZ2_bzread (}
241,247d240
< {
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
242,247c242
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    
\ No newline at end of file
242,247c242
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    int 
\ No newline at end of file
242,247c242
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    int bzerr
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if 
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if (    
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if (    bzerr 
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if (    bzerr == 
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if (    bzerr == BZ_STREAM_END
\ No newline at end of file
243,247c243
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if (    bzerr == BZ_STREAM_END)   
\ No newline at end of file
244,247d243
< }
< 
< 
< 
===< pass_clex :: rm-toks-2 >===
9c9
< #define BZ_OK                0
---
> BZ_OK                0
9c9
< #define BZ_OK                0
---
> #0
9,11c9
< #define BZ_OK                0
< 
< #define BZ_STREAM_END        9
---
> #define #define BZ_STREAM_END        9
9,11c9
< #define BZ_OK                0
< 
< #define BZ_STREAM_END        9
---
> #define BZ_OK                define BZ_STREAM_END        9
11c11
< #define BZ_STREAM_END        9
---
> BZ_STREAM_END        9
11c11
< #define BZ_STREAM_END        9
---
> #9
11,13c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
11,13c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        include <stdio.h>
13c13
< #include <stdio.h>
---
> <stdio.h>
(98.4 %, 3296 bytes)
9,10d8
< #0
< 
11c11
< #define BZ_STREAM_END        9
---
> BZ_STREAM_END        9
11c11
< #define BZ_STREAM_END        9
---
> #9
11,13c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
11,13c11
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        include <stdio.h>
13c13
< #include <stdio.h>
---
> <stdio.h>
13c13
< #include <stdio.h>
---
> #stdio.h>
13c13
< #include <stdio.h>
---
> #include .h>
13c13
< #include <stdio.h>
---
> #include <h>
(98.4 %, 3292 bytes)
9c9
< #define BZ_STREAM_END        9
---
> #9
9,11c9
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
9,11c9
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        include <stdio.h>
11c11
< #include <stdio.h>
---
> <stdio.h>
11c11
< #include <stdio.h>
---
> #stdio.h>
11c11
< #include <stdio.h>
---
> #include .h>
11c11
< #include <stdio.h>
---
> #include <h>
11c11
< #include <stdio.h>
---
> #include <stdio>
11,13c11
< #include <stdio.h>
< 
< #   define  func
---
> #include <stdio.#   define  func
11,13c11
< #include <stdio.h>
< 
< #   define  func
---
> #include <stdio.hdefine  func
13c13
< #   define  func
---
> func
13,14c13
< #   define  func
< #   define BZ_EXTERN 
---
> #   #   define BZ_EXTERN 
13,14c13
< #   define  func
< #   define BZ_EXTERN 
---
> #   define  define BZ_EXTERN 
14c14
< #   define BZ_EXTERN 
---
> BZ_EXTERN 
14,29c14
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #   * BZ_APIBZ2_bzReadOpen ( 
14,29c14
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #   define BZ_APIBZ2_bzReadOpen ( 
29c29
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  ( 
29,30c29
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
>  * int*  ,   
29,30c29
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
>  * BZ_APIBZ2_bzReadOpen *  ,   
30c30
<       int*  ,   
---
>       ,   
30,31c30
<       int*  ,   
<       FILE* , 
---
>       intFILE* , 
(98.4 %, 3283 bytes)
13,28c13
< #   define  define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #   define  * BZ_APIBZ2_bzReadOpen ( 
13,28c13
< #   define  define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #   define  define BZ_APIBZ2_bzReadOpen ( 
28c28
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  ( 
28,29c28
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
>  * int*  ,   
28,29c28
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
>  * BZ_APIBZ2_bzReadOpen *  ,   
29c29
<       int*  ,   
---
>       ,   
29,30c29
<       int*  ,   
<       FILE* , 
---
>       intFILE* , 
29,30c29
<       int*  ,   
<       FILE* , 
---
>       int*  * , 
30c30
<       FILE* , 
---
>       , 
30,31c30
<       FILE* , 
<       int   , 
---
>       FILEint   , 
31d30
<       int   , 
31d30
<       int   , 
31d30
<       int   , 
32d31
<       int   ,
32,33c32
<       int   ,
<       void* ,    
---
>       int   * ,    
33c33
<       void* ,    
---
>       ,    
33,34c33
<       void* ,    
<       int    
---
>       voidint    
33,35c33
<       void* ,    
<       int    
<    )
---
>       void* )
34,37c34
<       int    
<    )
< 
<   ;
---
>       ;
35,39c35
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>    void BZ_APIBZ2_bzReadGetUnused ( 
37,39c37
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   BZ_APIBZ2_bzReadGetUnused ( 
39c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  ( 
39,40c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       );
---
>  void );
39,40c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       );
---
>  void BZ_APIBZ2_bzReadGetUnused ;
40,42c40
<       );
< 
<   BZ_APIBZ2_bzRead ( 
---
>       BZ_APIBZ2_bzRead ( 
40,42c40
<       );
< 
<   BZ_APIBZ2_bzRead ( 
---
>       )( 
42,43c42
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
---
>   int*    , 
42,43c42
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
---
>   BZ_APIBZ2_bzRead *    , 
43c43
<       int*    , 
---
>       , 
43,44c43
<       int*    , 
<       int* , 
---
>       intint* , 
43,44c43
<       int*    , 
<       int* , 
---
>       int*    * , 
44c44
<       int* , 
---
>       , 
44,45c44
<       int* , 
<       void*   , 
---
>       intvoid*   , 
44,45c44
<       int* , 
<       void*   , 
---
>       int* *   , 
45c45
<       void*   , 
---
>       , 
45,46c45
<       void*   , 
<       int      
---
>       voidint      
45,47c45
<       void*   , 
<       int      
<    );
---
>       void*   );
46,47c46
<       int      
<    );
---
>       ;
47,49c47
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>    * BZ_APIBZ2_bzWriteOpen ( 
47,49c47
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>    )BZ_APIBZ2_bzWriteOpen ( 
49c49
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  ( 
49,50c49
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
---
>  * int*  ,      
49,50c49
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
---
>  * BZ_APIBZ2_bzWriteOpen *  ,      
50c50
<       int*  ,      
---
>       ,      
50,51c50
<       int*  ,      
<       FILE* , 
---
>       intFILE* , 
50,51c50
<       int*  ,      
<       FILE* , 
---
>       int*  * , 
51c51
<       FILE* , 
---
>       , 
51,52c51
<       FILE* , 
<       int   , 
---
>       FILEint   , 
53d52
<       int   , 
53d52
<       int   , 
53d52
<       int   , 
53d52
<       int   , 
53,55c53
<       int   , 
<       int    
<    );
---
>       int   );
54,55c54
<       int    
<    );
---
>       ;
55,57c55
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
---
>    void BZ_APIBZ2_bzWrite ( 
55,57c55
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
---
>    )BZ_APIBZ2_bzWrite ( 
57c57
<  void BZ_APIBZ2_bzWrite ( 
---
>  ( 
57,58c57
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
---
>  void int*    , 
57,58c57
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
---
>  void BZ_APIBZ2_bzWrite *    , 
58c58
<       int*    , 
---
>       , 
58,59c58
<       int*    , 
<       int* , 
---
>       intint* , 
58,59c58
<       int*    , 
<       int* , 
---
>       int*    * , 
59c59
<       int* , 
---
>       , 
59,60c59
<       int* , 
<       void*   , 
---
>       intvoid*   , 
59,60c59
<       int* , 
<       void*   , 
---
>       int* *   , 
60c60
<       void*   , 
---
>       , 
60,61c60
<       void*   , 
<       int      
---
>       voidint      
60,62c60
<       void*   , 
<       int      
<    );
---
>       void*   );
61,62c61
<       int      
<    );
---
>       ;
62,64c62
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
---
>    void BZ_APIBZ2_bzWriteClose ( 
62,64c62
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
---
>    )BZ_APIBZ2_bzWriteClose ( 
64c64
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  ( 
64,65c64
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
---
>  void int*          , 
64,65c64
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
---
>  void BZ_APIBZ2_bzWriteClose *          , 
65c65
<       int*          , 
---
>       , 
65,66c65
<       int*          , 
<       int*       , 
---
>       intint*       , 
65,66c65
<       int*          , 
<       int*       , 
---
>       int*          *       , 
66c66
<       int*       , 
---
>       , 
66,67c66
<       int*       , 
<       int           , 
---
>       intint           , 
67d66
<       int           , 
67d66
<       int           , 
67,68c67
<       int           , 
<       unsigned * , 
---
>       int           * , 
68c68
<       unsigned * , 
---
>       , 
68,69c68
<       unsigned * , 
<       unsigned *  
---
>       unsigned unsigned *  
68,69c68
<       unsigned * , 
<       unsigned *  
---
>       unsigned * *  
69,70c69
<       unsigned *  
<    );
---
>       );
69,70c69
<       unsigned *  
<    );
---
>       unsigned ;
70,72c70
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>    void BZ_APIBZ2_bzWriteClose64 ( 
70,72c70
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>    )BZ_APIBZ2_bzWriteClose64 ( 
72c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>  ( 
72,73c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
---
>  void int*          , 
72,73c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
---
>  void BZ_APIBZ2_bzWriteClose64 *          , 
73c73
<       int*          , 
---
>       , 
73,74c73
<       int*          , 
<       int*       , 
---
>       intint*       , 
73,74c73
<       int*          , 
<       int*       , 
---
>       int*          *       , 
74c74
<       int*       , 
---
>       , 
74,75c74
<       int*       , 
<       int           , 
---
>       intint           , 
75d74
<       int           , 
75d74
<       int           , 
75,76c75
<       int           , 
<       unsigned * , 
---
>       int           * , 
76c76
<       unsigned * , 
---
>       , 
76,77c76
<       unsigned * , 
<       unsigned * , 
---
>       unsigned unsigned * , 
76,77c76
<       unsigned * , 
<       unsigned * , 
---
>       unsigned * * , 
77c77
<       unsigned * , 
---
>       , 
77,78c77
<       unsigned * , 
<       unsigned * , 
---
>       unsigned unsigned * , 
77,78c77
<       unsigned * , 
<       unsigned * , 
---
>       unsigned * * , 
78c78
<       unsigned * , 
---
>       , 
78,79c78
<       unsigned * , 
<       unsigned * 
---
>       unsigned unsigned * 
78,79c78
<       unsigned * , 
<       unsigned * 
---
>       unsigned * * 
79,80c79
<       unsigned * 
<    );
---
>       );
79,80c79
<       unsigned * 
<    );
---
>       unsigned ;
80,85c80
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    BZ_APIBZ2_bzBuffToBuffCompress ( 
80,85c80
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    )( 
85,86c85
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   char*         , 
85,86c85
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   BZ_APIBZ2_bzBuffToBuffCompress *         , 
86c86
<       char*         , 
---
>       , 
86,87c86
<       char*         , 
<       unsigned * ,
---
>       charunsigned * ,
86,87c86
<       char*         , 
<       unsigned * ,
---
>       char*         * ,
87c87
<       unsigned * ,
---
>       ,
87,88c87
<       unsigned * ,
<       char*         , 
---
>       unsigned char*         , 
87,88c87
<       unsigned * ,
<       char*         , 
---
>       unsigned * *         , 
88c88
<       char*         , 
---
>       , 
88,89c88
<       char*         , 
<       unsigned   ,
---
>       charunsigned   ,
88,89c88
<       char*         , 
<       unsigned   ,
---
>       char*         ,
89d88
<       unsigned   ,
89,90c89
<       unsigned   ,
<       int           , 
---
>       unsigned   , 
91d90
<       int           , 
91d90
<       int           , 
91d90
<       int           , 
91,93c91
<       int           , 
<       int            
<    );
---
>       int           );
92,93c92
<       int            
<    );
---
>       ;
93,95c93
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    BZ_APIBZ2_bzBuffToBuffDecompress ( 
93,95c93
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    )( 
95,96c95
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   char*         , 
95,96c95
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress *         , 
96c96
<       char*         , 
---
>       , 
96,97c96
<       char*         , 
<       unsigned * ,
---
>       charunsigned * ,
96,97c96
<       char*         , 
<       unsigned * ,
---
>       char*         * ,
97c97
<       unsigned * ,
---
>       ,
97,98c97
<       unsigned * ,
<       char*         , 
---
>       unsigned char*         , 
97,98c97
<       unsigned * ,
<       char*         , 
---
>       unsigned * *         , 
98c98
<       char*         , 
---
>       , 
98,99c98
<       char*         , 
<       unsigned   ,
---
>       charunsigned   ,
98,99c98
<       char*         , 
<       unsigned   ,
---
>       char*         ,
99d98
<       unsigned   ,
99,100c99
<       unsigned   ,
<       int           , 
---
>       unsigned   , 
100d99
<       int           , 
100d99
<       int           , 
101,107c101
<       int           )
< 
< 
< 
< 
< 
< ;
---
>       ;
101,122c101
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
---
>       int           * BZ_APIBZ2_bzWriteOpen 
107,122c107
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
< * BZ_APIBZ2_bzWriteOpen 
---
> BZ_APIBZ2_bzWriteOpen 
122,123c122
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
> ( int*  ,      
122,123c122
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
> * int*  ,      
123c123
<                     ( int*  ,      
---
>                     *  ,      
123c123
<                     ( int*  ,      
---
>                     ( ,      
123,124c123
<                     ( int*  ,      
<                       FILE* , 
---
>                     ( intFILE* , 
123,124c123
<                     ( int*  ,      
<                       FILE* , 
---
>                     ( int*  * , 
124c124
<                       FILE* , 
---
>                       , 
124,125c124
<                       FILE* , 
<                       int   , 
---
>                       FILEint   , 
125d124
<                       int   , 
125d124
<                       int   , 
125d124
<                       int   , 
126d125
<                       int   ,
126,127c126
<                       int   ,
<                       int    )
---
>                       int   )
127,128c127
<                       int    )
< ;
---
>                       ;
127,133c127
<                       int    )
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
>                       int    void BZ_APIBZ2_bzWrite
128,133c128
< ;
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
---
> BZ_APIBZ2_bzWrite
133,134c133
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
> ( int*    , 
133,134c133
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
> void int*    , 
134c134
<              ( int*    , 
---
>              *    , 
134c134
<              ( int*    , 
---
>              ( , 
134,135c134
<              ( int*    , 
<                int* , 
---
>              ( intint* , 
134,135c134
<              ( int*    , 
<                int* , 
---
>              ( int*    * , 
135c135
<                int* , 
---
>                , 
135,136c135
<                int* , 
<                void*   , 
---
>                intvoid*   , 
135,136c135
<                int* , 
<                void*   , 
---
>                int* *   , 
136c136
<                void*   , 
---
>                , 
136,137c136
<                void*   , 
<                int      )
---
>                voidint      )
136,137c136
<                void*   , 
<                int      )
---
>                void*   )
137,138c137
<                int      )
< ;
---
>                ;
137,142c137
<                int      )
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
>                int      void BZ_APIBZ2_bzWriteClose
138,142c138
< ;
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
---
> BZ_APIBZ2_bzWriteClose
142,143c142
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
---
> ( int*          , 
142,143c142
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
---
> void int*          , 
143c143
<                   ( int*          , 
---
>                   *          , 
143c143
<                   ( int*          , 
---
>                   ( , 
143,144c143
<                   ( int*          , 
<                     int*       , 
---
>                   ( intint*       , 
143,144c143
<                   ( int*          , 
<                     int*       , 
---
>                   ( int*          *       , 
144c144
<                     int*       , 
---
>                     , 
144,145c144
<                     int*       , 
<                     int           ,
---
>                     intint           ,
144,145c144
<                     int*       , 
<                     int           ,
---
>                     int*       ,
145d144
<                     int           ,
145,146c145
<                     int           ,
<                     unsigned * ,
---
>                     int           * ,
146c146
<                     unsigned * ,
---
>                     ,
146,147c146
<                     unsigned * ,
<                     unsigned *  )
---
>                     unsigned unsigned *  )
146,147c146
<                     unsigned * ,
<                     unsigned *  )
---
>                     unsigned * *  )
147c147
<                     unsigned *  )
---
>                     )
147,148c147
<                     unsigned *  )
< ;
---
>                     unsigned ;
147,151c147
<                     unsigned *  )
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
>                     unsigned *  void BZ_APIBZ2_bzWriteClose64
148,151c148
< ;
< 
< 
< void BZ_APIBZ2_bzWriteClose64
---
> BZ_APIBZ2_bzWriteClose64
151,152c151
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
> ( int*          , 
151,152c151
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
> void int*          , 
152c152
<                   ( int*          , 
---
>                   *          , 
152c152
<                   ( int*          , 
---
>                   ( , 
152,153c152
<                   ( int*          , 
<                     int*       , 
---
>                   ( intint*       , 
152,153c152
<                   ( int*          , 
<                     int*       , 
---
>                   ( int*          *       , 
153c153
<                     int*       , 
---
>                     , 
153,154c153
<                     int*       , 
<                     int           ,
---
>                     intint           ,
153,154c153
<                     int*       , 
<                     int           ,
---
>                     int*       ,
154d153
<                     int           ,
154,155c154
<                     int           ,
<                     unsigned * ,
---
>                     int           * ,
155c155
<                     unsigned * ,
---
>                     ,
155,156c155
<                     unsigned * ,
<                     unsigned * ,
---
>                     unsigned unsigned * ,
155,156c155
<                     unsigned * ,
<                     unsigned * ,
---
>                     unsigned * * ,
156c156
<                     unsigned * ,
---
>                     ,
156,157c156
<                     unsigned * ,
<                     unsigned * ,
---
>                     unsigned unsigned * ,
156,157c156
<                     unsigned * ,
<                     unsigned * ,
---
>                     unsigned * * ,
157c157
<                     unsigned * ,
---
>                     ,
157,158c157
<                     unsigned * ,
<                     unsigned *  )
---
>                     unsigned unsigned *  )
157,158c157
<                     unsigned * ,
<                     unsigned *  )
---
>                     unsigned * *  )
158c158
<                     unsigned *  )
---
>                     )
158,159c158
<                     unsigned *  )
< ;
---
>                     unsigned ;
158,163c158
<                     unsigned *  )
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
---
>                     unsigned *  * BZ_APIBZ2_bzReadOpen 
159,163c159
< ;
< 
< 
< 
< * BZ_APIBZ2_bzReadOpen 
---
> BZ_APIBZ2_bzReadOpen 
163,164c163
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
> ( int*  , 
163,164c163
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
> * int*  , 
164c164
<                    ( int*  , 
---
>                    *  , 
164c164
<                    ( int*  , 
---
>                    ( , 
164,165c164
<                    ( int*  , 
<                      FILE* , 
---
>                    ( intFILE* , 
164,165c164
<                    ( int*  , 
<                      FILE* , 
---
>                    ( int*  * , 
165c165
<                      FILE* , 
---
>                      , 
165,166c165
<                      FILE* , 
<                      int   ,
---
>                      FILEint   ,
165,166c165
<                      FILE* , 
<                      int   ,
---
>                      FILE* ,
167d166
<                      int   ,
167d166
<                      int   ,
167d166
<                      int   ,
167,168c167
<                      int   ,
<                      void* ,
---
>                      int   * ,
168c168
<                      void* ,
---
>                      ,
168,169c168
<                      void* ,
<                      int    )
---
>                      voidint    )
168,169c168
<                      void* ,
<                      int    )
---
>                      void* )
169,174c169
<                      int    )
< 
< 
< 
< 
<  ;
---
>                      ;
169,178c169
<                      int    )
< 
< 
< 
< 
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
---
>                      int    BZ_APIBZ2_bzRead 
174,179c174
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  ( int*    bzerror, 
178,179c178
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  int*    bzerror, 
179c179
<            ( int*    bzerror, 
---
>            *    bzerror, 
179c179
<            ( int*    bzerror, 
---
>            ( bzerror, 
179c179
<            ( int*    bzerror, 
---
>            ( int, 
179,180c179
<            ( int*    bzerror, 
<              int* b, 
---
>            ( int*    int* b, 
179,180c179
<            ( int*    bzerror, 
<              int* b, 
---
>            ( int*    bzerror* b, 
180c180
<              int* b, 
---
>              b, 
180c180
<              int* b, 
---
>              int, 
180,181c180
<              int* b, 
<              void*   buf, 
---
>              int* void*   buf, 
180,181c180
<              int* b, 
<              void*   buf, 
---
>              int* b*   buf, 
181c181
<              void*   buf, 
---
>              buf, 
181c181
<              void*   buf, 
---
>              void, 
181,182c181
<              void*   buf, 
<              int     len )
---
>              void*   int     len )
181,182c181
<              void*   buf, 
<              int     len )
---
>              void*   buflen )
182c182
<              int     len )
---
>              )
182,185c182
<              int     len )
< 
<    
<    ; 
---
>              int     ; 
182,190c182
<              int     len )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>              int     len void BZ_APIBZ2_bzReadGetUnused 
185,190c185
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>    BZ_APIBZ2_bzReadGetUnused 
190,191c190
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( )
---
> ( )
190,191c190
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( )
---
> void )
191,192c191
<                      ( )
< ;
---
>                      ;
191,200c191
<                      ( )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
>                      ( BZ_APIBZ2_bzBuffToBuffCompress 
192,201c192
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
> ( char*         , 
200,201c200
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
>  char*         , 
201c201
<                          ( char*         , 
---
>                          *         , 
201c201
<                          ( char*         , 
---
>                          ( , 
201,202c201
<                          ( char*         , 
<                            unsigned * ,
---
>                          ( charunsigned * ,
201,202c201
<                          ( char*         , 
<                            unsigned * ,
---
>                          ( char*         * ,
202c202
<                            unsigned * ,
---
>                            ,
202,203c202
<                            unsigned * ,
<                            char*         , 
---
>                            unsigned char*         , 
202,203c202
<                            unsigned * ,
<                            char*         , 
---
>                            unsigned * *         , 
203c203
<                            char*         , 
---
>                            , 
203,204c203
<                            char*         , 
<                            unsigned   ,
---
>                            charunsigned   ,
203,204c203
<                            char*         , 
<                            unsigned   ,
---
>                            char*         ,
204d203
<                            unsigned   ,
204,205c204
<                            unsigned   ,
<                            int           , 
---
>                            unsigned   , 
206d205
<                            int           , 
206d205
<                            int           , 
206d205
<                            int           , 
206,207c206
<                            int           , 
<                            int            )
---
>                            int           )
207,208c207
<                            int            )
< ;
---
>                            ;
207,212c207
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
>                            int            BZ_APIBZ2_bzBuffToBuffDecompress 
208,213c208
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
> ( char*         , 
212,213c212
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
>  char*         , 
213c213
<                            ( char*         , 
---
>                            *         , 
213c213
<                            ( char*         , 
---
>                            ( , 
213,214c213
<                            ( char*         , 
<                              unsigned * ,
---
>                            ( charunsigned * ,
213,214c213
<                            ( char*         , 
<                              unsigned * ,
---
>                            ( char*         * ,
214c214
<                              unsigned * ,
---
>                              ,
214,215c214
<                              unsigned * ,
<                              char*         , 
---
>                              unsigned char*         , 
214,215c214
<                              unsigned * ,
<                              char*         , 
---
>                              unsigned * *         , 
215c215
<                              char*         , 
---
>                              , 
215,216c215
<                              char*         , 
<                              unsigned   ,
---
>                              charunsigned   ,
215,216c215
<                              char*         , 
<                              unsigned   ,
---
>                              char*         ,
216d215
<                              unsigned   ,
217d216
<                              int           ,
217d216
<                              int           ,
217,218c217
<                              int           ,
<                              int            )
---
>                              int           )
218,233c218
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>                              ;
218,237c218
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
---
>                              int            BZ_APIBZ2_bzread ()
233,237c233
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
---
> ()
237c237
<  BZ_APIBZ2_bzread ()
---
>  )
237,238c237
<  BZ_APIBZ2_bzread ()
< {
---
>  BZ_APIBZ2_bzread {
237,239c237
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
---
>  BZ_APIBZ2_bzread (int bzerr;
238,239c238
< {
<    int bzerr;
---
> bzerr;
239c239
<    int bzerr;
---
>    ;
239,240c239
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    int if (    bzerr == BZ_STREAM_END)   ;
239,240c239
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    int bzerr(    bzerr == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    bzerr == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr )   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr == ;
240,241c240
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>    if (    bzerr == BZ_STREAM_END}
240,244c240
<    if (    bzerr == BZ_STREAM_END)   ;
< }
< 
< 
< 
---
>    if (    bzerr == BZ_STREAM_END)   
\ No newline at end of file
241,244d240
< }
< 
< 
< 
===< pass_clex :: rm-toks-1 >===
9c9
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
9c9
< #define BZ_STREAM_END        9
---
> #BZ_STREAM_END        9
9c9
< #define BZ_STREAM_END        9
---
> #define 9
9,11c9
< #define BZ_STREAM_END        9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        #include <stdio.h>
11c11
< #include <stdio.h>
---
> include <stdio.h>
11c11
< #include <stdio.h>
---
> #<stdio.h>
11c11
< #include <stdio.h>
---
> #include stdio.h>
11c11
< #include <stdio.h>
---
> #include <.h>
11c11
< #include <stdio.h>
---
> #include <stdioh>
11c11
< #include <stdio.h>
---
> #include <stdio.>
11,13c11
< #include <stdio.h>
< 
< #   define  define BZ_EXTERN 
---
> #include <stdio.h#   define  define BZ_EXTERN 
13c13
< #   define  define BZ_EXTERN 
---
> define  define BZ_EXTERN 
13c13
< #   define  define BZ_EXTERN 
---
> #   define BZ_EXTERN 
13c13
< #   define  define BZ_EXTERN 
---
> #   define  BZ_EXTERN 
(98.4 %, 3275 bytes)
13c13
< #   define BZ_EXTERN 
---
> #   BZ_EXTERN 
13,28c13
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
---
> #   define * BZ_APIBZ2_bzReadOpen ( 
28c28
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  BZ_APIBZ2_bzReadOpen ( 
28c28
<  * BZ_APIBZ2_bzReadOpen ( 
---
>  * ( 
28,29c28
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
---
>  * BZ_APIBZ2_bzReadOpen int*  ,   
29c29
<       int*  ,   
---
>       *  ,   
29c29
<       int*  ,   
---
>       int,   
29,30c29
<       int*  ,   
<       FILE* , 
---
>       int*  FILE* , 
30c30
<       FILE* , 
---
>       * , 
30c30
<       FILE* , 
---
>       FILE, 
30,31c30
<       FILE* , 
<       int   , 
---
>       FILE* int   , 
31c31
<       int   , 
---
>       , 
31,32c31
<       int   , 
<       int   ,
---
>       int   int   ,
32c32
<       int   ,
---
>       ,
32,33c32
<       int   ,
<       void* ,    
---
>       int   void* ,    
33c33
<       void* ,    
---
>       * ,    
33c33
<       void* ,    
---
>       void,    
33,34c33
<       void* ,    
<       int    
---
>       void* int    
34,35c34
<       int    
<    )
---
>       )
35,37c35
<    )
< 
<   ;
---
>    ;
37,39c37
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>   void BZ_APIBZ2_bzReadGetUnused ( 
39c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  BZ_APIBZ2_bzReadGetUnused ( 
39c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
---
>  void ( 
39,40c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       );
---
>  void BZ_APIBZ2_bzReadGetUnused );
40c40
<       );
---
>       ;
40,42c40
<       );
< 
<   BZ_APIBZ2_bzRead ( 
---
>       )BZ_APIBZ2_bzRead ( 
42c42
<   BZ_APIBZ2_bzRead ( 
---
>   ( 
42,43c42
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
---
>   BZ_APIBZ2_bzRead int*    , 
43c43
<       int*    , 
---
>       *    , 
43c43
<       int*    , 
---
>       int, 
43,44c43
<       int*    , 
<       int* , 
---
>       int*    int* , 
44c44
<       int* , 
---
>       * , 
44c44
<       int* , 
---
>       int, 
44,45c44
<       int* , 
<       void*   , 
---
>       int* void*   , 
45c45
<       void*   , 
---
>       *   , 
45c45
<       void*   , 
---
>       void, 
45,46c45
<       void*   , 
<       int      
---
>       void*   int      
46,47c46
<       int      
<    );
---
>       );
47c47
<    );
---
>    ;
47,49c47
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>    )* BZ_APIBZ2_bzWriteOpen ( 
49c49
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  BZ_APIBZ2_bzWriteOpen ( 
49c49
<  * BZ_APIBZ2_bzWriteOpen ( 
---
>  * ( 
49,50c49
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
---
>  * BZ_APIBZ2_bzWriteOpen int*  ,      
50c50
<       int*  ,      
---
>       *  ,      
50c50
<       int*  ,      
---
>       int,      
50,51c50
<       int*  ,      
<       FILE* , 
---
>       int*  FILE* , 
51c51
<       FILE* , 
---
>       * , 
51c51
<       FILE* , 
---
>       FILE, 
51,52c51
<       FILE* , 
<       int   , 
---
>       FILE* int   , 
52c52
<       int   , 
---
>       , 
52,53c52
<       int   , 
<       int   , 
---
>       int   int   , 
53c53
<       int   , 
---
>       , 
53,54c53
<       int   , 
<       int    
---
>       int   int    
54,55c54
<       int    
<    );
---
>       );
55c55
<    );
---
>    ;
55,57c55
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
---
>    )void BZ_APIBZ2_bzWrite ( 
57c57
<  void BZ_APIBZ2_bzWrite ( 
---
>  BZ_APIBZ2_bzWrite ( 
57c57
<  void BZ_APIBZ2_bzWrite ( 
---
>  void ( 
57,58c57
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
---
>  void BZ_APIBZ2_bzWrite int*    , 
58c58
<       int*    , 
---
>       *    , 
58c58
<       int*    , 
---
>       int, 
58,59c58
<       int*    , 
<       int* , 
---
>       int*    int* , 
59c59
<       int* , 
---
>       * , 
59c59
<       int* , 
---
>       int, 
59,60c59
<       int* , 
<       void*   , 
---
>       int* void*   , 
60c60
<       void*   , 
---
>       *   , 
60c60
<       void*   , 
---
>       void, 
60,61c60
<       void*   , 
<       int      
---
>       void*   int      
61,62c61
<       int      
<    );
---
>       );
62c62
<    );
---
>    ;
62,64c62
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
---
>    )void BZ_APIBZ2_bzWriteClose ( 
64c64
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  BZ_APIBZ2_bzWriteClose ( 
64c64
<  void BZ_APIBZ2_bzWriteClose ( 
---
>  void ( 
64,65c64
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
---
>  void BZ_APIBZ2_bzWriteClose int*          , 
65c65
<       int*          , 
---
>       *          , 
65c65
<       int*          , 
---
>       int, 
65,66c65
<       int*          , 
<       int*       , 
---
>       int*          int*       , 
66c66
<       int*       , 
---
>       *       , 
66c66
<       int*       , 
---
>       int, 
66,67c66
<       int*       , 
<       int           , 
---
>       int*       int           , 
67c67
<       int           , 
---
>       , 
67,68c67
<       int           , 
<       unsigned * , 
---
>       int           unsigned * , 
68c68
<       unsigned * , 
---
>       * , 
68c68
<       unsigned * , 
---
>       unsigned , 
68,69c68
<       unsigned * , 
<       unsigned *  
---
>       unsigned * unsigned *  
69c69
<       unsigned *  
---
>       *  
69,70c69
<       unsigned *  
<    );
---
>       unsigned );
70c70
<    );
---
>    ;
70,72c70
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>    )void BZ_APIBZ2_bzWriteClose64 ( 
72c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>  BZ_APIBZ2_bzWriteClose64 ( 
72c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
---
>  void ( 
72,73c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
---
>  void BZ_APIBZ2_bzWriteClose64 int*          , 
73c73
<       int*          , 
---
>       *          , 
73c73
<       int*          , 
---
>       int, 
73,74c73
<       int*          , 
<       int*       , 
---
>       int*          int*       , 
74c74
<       int*       , 
---
>       *       , 
74c74
<       int*       , 
---
>       int, 
74,75c74
<       int*       , 
<       int           , 
---
>       int*       int           , 
75c75
<       int           , 
---
>       , 
75,76c75
<       int           , 
<       unsigned * , 
---
>       int           unsigned * , 
76c76
<       unsigned * , 
---
>       * , 
76c76
<       unsigned * , 
---
>       unsigned , 
76,77c76
<       unsigned * , 
<       unsigned * , 
---
>       unsigned * unsigned * , 
77c77
<       unsigned * , 
---
>       * , 
77c77
<       unsigned * , 
---
>       unsigned , 
77,78c77
<       unsigned * , 
<       unsigned * , 
---
>       unsigned * unsigned * , 
78c78
<       unsigned * , 
---
>       * , 
78c78
<       unsigned * , 
---
>       unsigned , 
78,79c78
<       unsigned * , 
<       unsigned * 
---
>       unsigned * unsigned * 
79c79
<       unsigned * 
---
>       * 
79,80c79
<       unsigned * 
<    );
---
>       unsigned );
80c80
<    );
---
>    ;
80,85c80
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>    )BZ_APIBZ2_bzBuffToBuffCompress ( 
85c85
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
---
>   ( 
85,86c85
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   BZ_APIBZ2_bzBuffToBuffCompress char*         , 
86c86
<       char*         , 
---
>       *         , 
86c86
<       char*         , 
---
>       char, 
86,87c86
<       char*         , 
<       unsigned * ,
---
>       char*         unsigned * ,
87c87
<       unsigned * ,
---
>       * ,
87c87
<       unsigned * ,
---
>       unsigned ,
87,88c87
<       unsigned * ,
<       char*         , 
---
>       unsigned * char*         , 
88c88
<       char*         , 
---
>       *         , 
88c88
<       char*         , 
---
>       char, 
88,89c88
<       char*         , 
<       unsigned   ,
---
>       char*         unsigned   ,
89c89
<       unsigned   ,
---
>       ,
89,90c89
<       unsigned   ,
<       int           , 
---
>       unsigned   int           , 
90c90
<       int           , 
---
>       , 
90,91c90
<       int           , 
<       int           , 
---
>       int           int           , 
91c91
<       int           , 
---
>       , 
91,92c91
<       int           , 
<       int            
---
>       int           int            
92,93c92
<       int            
<    );
---
>       );
93c93
<    );
---
>    ;
93,95c93
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>    )BZ_APIBZ2_bzBuffToBuffDecompress ( 
95c95
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
>   ( 
95,96c95
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   BZ_APIBZ2_bzBuffToBuffDecompress char*         , 
96c96
<       char*         , 
---
>       *         , 
96c96
<       char*         , 
---
>       char, 
96,97c96
<       char*         , 
<       unsigned * ,
---
>       char*         unsigned * ,
97c97
<       unsigned * ,
---
>       * ,
97c97
<       unsigned * ,
---
>       unsigned ,
97,98c97
<       unsigned * ,
<       char*         , 
---
>       unsigned * char*         , 
98c98
<       char*         , 
---
>       *         , 
98c98
<       char*         , 
---
>       char, 
98,99c98
<       char*         , 
<       unsigned   ,
---
>       char*         unsigned   ,
99c99
<       unsigned   ,
---
>       ,
99,100c99
<       unsigned   ,
<       int           , 
---
>       unsigned   int           , 
100c100
<       int           , 
---
>       , 
100,101c100
<       int           , 
<       int           )
---
>       int           int           )
101c101
<       int           )
---
>       )
101,107c101
<       int           )
< 
< 
< 
< 
< 
< ;
---
>       int           ;
107,121d106
< ;
< 
< 
< 
< 
< 
< 
<                      
< 
< 
< 
< 
< 
< 
< 
122c122
< * BZ_APIBZ2_bzWriteOpen 
---
> BZ_APIBZ2_bzWriteOpen 
122,123c122
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
---
> * ( int*  ,      
123c123
<                     ( int*  ,      
---
>                     int*  ,      
123c123
<                     ( int*  ,      
---
>                     ( *  ,      
123c123
<                     ( int*  ,      
---
>                     ( int,      
123,124c123
<                     ( int*  ,      
<                       FILE* , 
---
>                     ( int*  FILE* , 
124c124
<                       FILE* , 
---
>                       * , 
124c124
<                       FILE* , 
---
>                       FILE, 
124,125c124
<                       FILE* , 
<                       int   , 
---
>                       FILE* int   , 
125c125
<                       int   , 
---
>                       , 
125,126c125
<                       int   , 
<                       int   ,
---
>                       int   int   ,
126c126
<                       int   ,
---
>                       ,
126,127c126
<                       int   ,
<                       int    )
---
>                       int   int    )
127c127
<                       int    )
---
>                       )
127,128c127
<                       int    )
< ;
---
>                       int    ;
128,132d127
< ;
< 
< 
< 
< 
133c133
< void BZ_APIBZ2_bzWrite
---
> BZ_APIBZ2_bzWrite
133,134c133
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
---
> void ( int*    , 
134c134
<              ( int*    , 
---
>              int*    , 
134c134
<              ( int*    , 
---
>              ( *    , 
134c134
<              ( int*    , 
---
>              ( int, 
134,135c134
<              ( int*    , 
<                int* , 
---
>              ( int*    int* , 
135c135
<                int* , 
---
>                * , 
135c135
<                int* , 
---
>                int, 
135,136c135
<                int* , 
<                void*   , 
---
>                int* void*   , 
136c136
<                void*   , 
---
>                *   , 
136c136
<                void*   , 
---
>                void, 
136,137c136
<                void*   , 
<                int      )
---
>                void*   int      )
137c137
<                int      )
---
>                )
137,138c137
<                int      )
< ;
---
>                int      ;
138,141d137
< ;
< 
< 
< 
142c142
< void BZ_APIBZ2_bzWriteClose
---
> BZ_APIBZ2_bzWriteClose
142,143c142
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
---
> void ( int*          , 
143c143
<                   ( int*          , 
---
>                   int*          , 
143c143
<                   ( int*          , 
---
>                   ( *          , 
143c143
<                   ( int*          , 
---
>                   ( int, 
143,144c143
<                   ( int*          , 
<                     int*       , 
---
>                   ( int*          int*       , 
144c144
<                     int*       , 
---
>                     *       , 
144c144
<                     int*       , 
---
>                     int, 
144,145c144
<                     int*       , 
<                     int           ,
---
>                     int*       int           ,
145c145
<                     int           ,
---
>                     ,
145,146c145
<                     int           ,
<                     unsigned * ,
---
>                     int           unsigned * ,
146c146
<                     unsigned * ,
---
>                     * ,
146c146
<                     unsigned * ,
---
>                     unsigned ,
146,147c146
<                     unsigned * ,
<                     unsigned *  )
---
>                     unsigned * unsigned *  )
147c147
<                     unsigned *  )
---
>                     *  )
147c147
<                     unsigned *  )
---
>                     unsigned )
147,148c147
<                     unsigned *  )
< ;
---
>                     unsigned *  ;
148,150d147
< ;
< 
< 
151c151
< void BZ_APIBZ2_bzWriteClose64
---
> BZ_APIBZ2_bzWriteClose64
151,152c151
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
---
> void ( int*          , 
152c152
<                   ( int*          , 
---
>                   int*          , 
152c152
<                   ( int*          , 
---
>                   ( *          , 
152c152
<                   ( int*          , 
---
>                   ( int, 
152,153c152
<                   ( int*          , 
<                     int*       , 
---
>                   ( int*          int*       , 
153c153
<                     int*       , 
---
>                     *       , 
153c153
<                     int*       , 
---
>                     int, 
153,154c153
<                     int*       , 
<                     int           ,
---
>                     int*       int           ,
154c154
<                     int           ,
---
>                     ,
154,155c154
<                     int           ,
<                     unsigned * ,
---
>                     int           unsigned * ,
155c155
<                     unsigned * ,
---
>                     * ,
155c155
<                     unsigned * ,
---
>                     unsigned ,
155,156c155
<                     unsigned * ,
<                     unsigned * ,
---
>                     unsigned * unsigned * ,
156c156
<                     unsigned * ,
---
>                     * ,
156c156
<                     unsigned * ,
---
>                     unsigned ,
156,157c156
<                     unsigned * ,
<                     unsigned * ,
---
>                     unsigned * unsigned * ,
157c157
<                     unsigned * ,
---
>                     * ,
157c157
<                     unsigned * ,
---
>                     unsigned ,
157,158c157
<                     unsigned * ,
<                     unsigned *  )
---
>                     unsigned * unsigned *  )
158c158
<                     unsigned *  )
---
>                     *  )
158c158
<                     unsigned *  )
---
>                     unsigned )
158,159c158
<                     unsigned *  )
< ;
---
>                     unsigned *  ;
159,162d158
< ;
< 
< 
< 
163c163
< * BZ_APIBZ2_bzReadOpen 
---
> BZ_APIBZ2_bzReadOpen 
163,164c163
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
---
> * ( int*  , 
164c164
<                    ( int*  , 
---
>                    int*  , 
164c164
<                    ( int*  , 
---
>                    ( *  , 
164c164
<                    ( int*  , 
---
>                    ( int, 
164,165c164
<                    ( int*  , 
<                      FILE* , 
---
>                    ( int*  FILE* , 
165c165
<                      FILE* , 
---
>                      * , 
165c165
<                      FILE* , 
---
>                      FILE, 
165,166c165
<                      FILE* , 
<                      int   ,
---
>                      FILE* int   ,
166c166
<                      int   ,
---
>                      ,
166,167c166
<                      int   ,
<                      int   ,
---
>                      int   int   ,
167c167
<                      int   ,
---
>                      ,
167,168c167
<                      int   ,
<                      void* ,
---
>                      int   void* ,
168c168
<                      void* ,
---
>                      * ,
168c168
<                      void* ,
---
>                      void,
168,169c168
<                      void* ,
<                      int    )
---
>                      void* int    )
169c169
<                      int    )
---
>                      )
169,174c169
<                      int    )
< 
< 
< 
< 
<  ;
---
>                      int    ;
174,177d173
<  ;
< 
< 
< 
178,179c178
<  BZ_APIBZ2_bzRead 
<            ( int*    bzerror, 
---
>  ( int*    bzerror, 
179c179
<            ( int*    bzerror, 
---
>            int*    bzerror, 
179c179
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
179c179
<            ( int*    bzerror, 
---
>            ( intbzerror, 
179c179
<            ( int*    bzerror, 
---
>            ( int*    , 
179,180c179
<            ( int*    bzerror, 
<              int* b, 
---
>            ( int*    bzerrorint* b, 
180c180
<              int* b, 
---
>              * b, 
180c180
<              int* b, 
---
>              intb, 
180c180
<              int* b, 
---
>              int* , 
(98.4 %, 3268 bytes)
179,180c179
<            ( int*    , 
<              int* b, 
---
>            ( int*    int* b, 
180c180
<              int* b, 
---
>              * b, 
180c180
<              int* b, 
---
>              intb, 
180c180
<              int* b, 
---
>              int* , 
180,181c180
<              int* b, 
<              void*   buf, 
---
>              int* bvoid*   buf, 
181c181
<              void*   buf, 
---
>              *   buf, 
181c181
<              void*   buf, 
---
>              voidbuf, 
181c181
<              void*   buf, 
---
>              void*   , 
(98.4 %, 3267 bytes)
180,181c180
<              int* , 
<              void*   buf, 
---
>              int* void*   buf, 
181c181
<              void*   buf, 
---
>              *   buf, 
181c181
<              void*   buf, 
---
>              voidbuf, 
181c181
<              void*   buf, 
---
>              void*   , 
181,182c181
<              void*   buf, 
<              int     len )
---
>              void*   bufint     len )
182c182
<              int     len )
---
>              len )
182c182
<              int     len )
---
>              int     )
(98.4 %, 3264 bytes)
181,182c181
<              void*   , 
<              int     len )
---
>              void*   int     len )
182c182
<              int     len )
---
>              len )
182c182
<              int     len )
---
>              int     )
182,185c182
<              int     len )
< 
<    
<    ; 
---
>              int     len ; 
185,190c185
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>    void BZ_APIBZ2_bzReadGetUnused 
190c190
< void BZ_APIBZ2_bzReadGetUnused 
---
> BZ_APIBZ2_bzReadGetUnused 
190,191c190
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( )
---
> void ( )
191c191
<                      ( )
---
>                      )
191,192c191
<                      ( )
< ;
---
>                      ( ;
192,200c192
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
> BZ_APIBZ2_bzBuffToBuffCompress 
200,201c200
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
>  ( char*         , 
(98.4 %, 3260 bytes)
182,185c182
<              int     )
< 
<    
<    ; 
---
>              int     ; 
185,190c185
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
---
>    void BZ_APIBZ2_bzReadGetUnused 
190c190
< void BZ_APIBZ2_bzReadGetUnused 
---
> BZ_APIBZ2_bzReadGetUnused 
190,191c190
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( )
---
> void ( )
191c191
<                      ( )
---
>                      )
191,192c191
<                      ( )
< ;
---
>                      ( ;
192,200c192
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
---
> BZ_APIBZ2_bzBuffToBuffCompress 
200,201c200
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
---
>  ( char*         , 
201c201
<                          ( char*         , 
---
>                          char*         , 
201c201
<                          ( char*         , 
---
>                          ( *         , 
201c201
<                          ( char*         , 
---
>                          ( char, 
201,202c201
<                          ( char*         , 
<                            unsigned * ,
---
>                          ( char*         unsigned * ,
202c202
<                            unsigned * ,
---
>                            * ,
202c202
<                            unsigned * ,
---
>                            unsigned ,
202,203c202
<                            unsigned * ,
<                            char*         , 
---
>                            unsigned * char*         , 
203c203
<                            char*         , 
---
>                            *         , 
203c203
<                            char*         , 
---
>                            char, 
203,204c203
<                            char*         , 
<                            unsigned   ,
---
>                            char*         unsigned   ,
204c204
<                            unsigned   ,
---
>                            ,
204,205c204
<                            unsigned   ,
<                            int           , 
---
>                            unsigned   int           , 
205c205
<                            int           , 
---
>                            , 
205,206c205
<                            int           , 
<                            int           , 
---
>                            int           int           , 
206c206
<                            int           , 
---
>                            , 
206,207c206
<                            int           , 
<                            int            )
---
>                            int           int            )
207c207
<                            int            )
---
>                            )
207,208c207
<                            int            )
< ;
---
>                            int            ;
208,212c208
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
---
> BZ_APIBZ2_bzBuffToBuffDecompress 
212,213c212
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
---
>  ( char*         , 
213c213
<                            ( char*         , 
---
>                            char*         , 
213c213
<                            ( char*         , 
---
>                            ( *         , 
213c213
<                            ( char*         , 
---
>                            ( char, 
213,214c213
<                            ( char*         , 
<                              unsigned * ,
---
>                            ( char*         unsigned * ,
214c214
<                              unsigned * ,
---
>                              * ,
214c214
<                              unsigned * ,
---
>                              unsigned ,
214,215c214
<                              unsigned * ,
<                              char*         , 
---
>                              unsigned * char*         , 
215c215
<                              char*         , 
---
>                              *         , 
215c215
<                              char*         , 
---
>                              char, 
215,216c215
<                              char*         , 
<                              unsigned   ,
---
>                              char*         unsigned   ,
216c216
<                              unsigned   ,
---
>                              ,
216,217c216
<                              unsigned   ,
<                              int           ,
---
>                              unsigned   int           ,
217c217
<                              int           ,
---
>                              ,
217,218c217
<                              int           ,
<                              int            )
---
>                              int           int            )
218c218
<                              int            )
---
>                              )
218,233c218
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>                              int            ;
233,237c233
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
---
> BZ_APIBZ2_bzread ()
237c237
<  BZ_APIBZ2_bzread ()
---
>  ()
237c237
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread )
237,238c237
<  BZ_APIBZ2_bzread ()
< {
---
>  BZ_APIBZ2_bzread ({
238,239c238
< {
<    int bzerr;
---
> int bzerr;
239c239
<    int bzerr;
---
>    bzerr;
239c239
<    int bzerr;
---
>    int ;
239,240c239
<    int bzerr;
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    int bzerrif (    bzerr == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    (    bzerr == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if bzerr == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    == BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr BZ_STREAM_END)   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr == )   ;
240c240
<    if (    bzerr == BZ_STREAM_END)   ;
---
>    if (    bzerr == BZ_STREAM_END;
240,241c240
<    if (    bzerr == BZ_STREAM_END)   ;
< }
---
>    if (    bzerr == BZ_STREAM_END)   }
241,244d240
< }
< 
< 
< 
(98.4 %, 3257 bytes)
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>    bzerr == BZ_STREAM_END)   ;
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>    (    == BZ_STREAM_END)   ;
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>    (    bzerr BZ_STREAM_END)   ;
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>    (    bzerr == )   ;
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>    (    bzerr == BZ_STREAM_END;
240,241c240
<    (    bzerr == BZ_STREAM_END)   ;
< }
---
>    (    bzerr == BZ_STREAM_END)   }
241,244d240
< }
< 
< 
< 
Termination check: size was 3494; now 3257
===< pass_ternary :: c >===
===< pass_balanced :: curly3 >===
===< pass_balanced :: angles >===
11c11
< #include <stdio.h>
---
> #include 
244a245
>  
\ No newline at end of file
===< pass_balanced :: curly-only >===
238c238
< {
---
> 
241d240
< }
244a244,245
> 
>  
\ No newline at end of file
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_peep :: a >===
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
11c11
< #include <stdio.h>
---
> #include 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
28,35c28
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
---
>  * BZ_APIBZ2_bzReadOpen 
244a238
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
29c29
<       int*  ,   
---
>       int*     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
30c30
<       FILE* , 
---
>       FILE*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
31c31
<       int   , 
---
>       int    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
32c32
<       int   ,
---
>       int   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
33c33
<       void* ,    
---
>       void*     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
37c37
<   ;
---
>   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
39,40c39
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       );
---
>  void BZ_APIBZ2_bzReadGetUnused ;
244a244
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
40c40
<       );
---
>       )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
42,47c42
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
---
>   BZ_APIBZ2_bzRead ;
244a240
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
43c43
<       int*    , 
---
>       int*     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
44c44
<       int* , 
---
>       int*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
45c45
<       void*   , 
---
>       void*    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
47c47
<    );
---
>    )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
49,55c49
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
---
>  * BZ_APIBZ2_bzWriteOpen ;
244a239
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
50c50
<       int*  ,      
---
>       int*        
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
51c51
<       FILE* , 
---
>       FILE*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
52c52
<       int   , 
---
>       int    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
53c53
<       int   , 
---
>       int    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
55c55
<    );
---
>    )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
57,62c57
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
---
>  void BZ_APIBZ2_bzWrite ;
244a240
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
58c58
<       int*    , 
---
>       int*     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
59c59
<       int* , 
---
>       int*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
60c60
<       void*   , 
---
>       void*    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
62c62
<    );
---
>    )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
64,70c64
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
---
>  void BZ_APIBZ2_bzWriteClose ;
244a239
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
65c65
<       int*          , 
---
>       int*           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
66c66
<       int*       , 
---
>       int*        
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
67c67
<       int           , 
---
>       int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
68c68
<       unsigned * , 
---
>       unsigned *  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
70c70
<    );
---
>    )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
72,80c72
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>  void BZ_APIBZ2_bzWriteClose64 ;
244a237
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
73c73
<       int*          , 
---
>       int*           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
74c74
<       int*       , 
---
>       int*        
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
75c75
<       int           , 
---
>       int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
76c76
<       unsigned * , 
---
>       unsigned *  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
77c77
<       unsigned * , 
---
>       unsigned *  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
78c78
<       unsigned * , 
---
>       unsigned *  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
80c80
<    );
---
>    )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
85,93c85
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>   BZ_APIBZ2_bzBuffToBuffCompress ;
244a237
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
86c86
<       char*         , 
---
>       char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
87c87
<       unsigned * ,
---
>       unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
88c88
<       char*         , 
---
>       char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
89c89
<       unsigned   ,
---
>       unsigned   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
90c90
<       int           , 
---
>       int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
91c91
<       int           , 
---
>       int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
93c93
<    );
---
>    )
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
95,101c95
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>   BZ_APIBZ2_bzBuffToBuffDecompress 
244a239
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
96c96
<       char*         , 
---
>       char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
97c97
<       unsigned * ,
---
>       unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
98c98
<       char*         , 
---
>       char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
99c99
<       unsigned   ,
---
>       unsigned   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
100c100
<       int           , 
---
>       int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
107c107
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
123,127c123
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
---
>                     
244a241
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
123c123
<                     ( int*  ,      
---
>                     ( int*        
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
124c124
<                       FILE* , 
---
>                       FILE*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
125c125
<                       int   , 
---
>                       int    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
126c126
<                       int   ,
---
>                       int   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
128c128
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
134,137c134
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
---
>              
244a242
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
134c134
<              ( int*    , 
---
>              ( int*     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
135c135
<                int* , 
---
>                int*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
136c136
<                void*   , 
---
>                void*    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
138c138
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
143,147c143
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
---
>                   
244a241
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
143c143
<                   ( int*          , 
---
>                   ( int*           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
144c144
<                     int*       , 
---
>                     int*        
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
145c145
<                     int           ,
---
>                     int           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
146c146
<                     unsigned * ,
---
>                     unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
148c148
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
152,158c152
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
---
>                   
244a239
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
152c152
<                   ( int*          , 
---
>                   ( int*           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
153c153
<                     int*       , 
---
>                     int*        
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
154c154
<                     int           ,
---
>                     int           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
155c155
<                     unsigned * ,
---
>                     unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
156c156
<                     unsigned * ,
---
>                     unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
157c157
<                     unsigned * ,
---
>                     unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
159c159
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
164,169c164
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
---
>                    
244a240
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
164c164
<                    ( int*  , 
---
>                    ( int*   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
165c165
<                      FILE* , 
---
>                      FILE*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
166c166
<                      int   ,
---
>                      int   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
167c167
<                      int   ,
---
>                      int   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
168c168
<                      void* ,
---
>                      void* 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
174c174
<  ;
---
>  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
179,182c179
<            ( int*    , 
<              int* , 
<              void*   , 
<              int     )
---
>            
244a242
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
179c179
<            ( int*    , 
---
>            ( int*     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
180c180
<              int* , 
---
>              int*  
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
181c181
<              void*   , 
---
>              void*    
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
185c185
<    ; 
---
>     
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
191c191
<                      ( )
---
>                      
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
192c192
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
201,207c201
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
---
>                          
244a239
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
201c201
<                          ( char*         , 
---
>                          ( char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
202c202
<                            unsigned * ,
---
>                            unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
203c203
<                            char*         , 
---
>                            char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
204c204
<                            unsigned   ,
---
>                            unsigned   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
205c205
<                            int           , 
---
>                            int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
206c206
<                            int           , 
---
>                            int            
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
208c208
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
213,218c213
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
---
>                            
244a240
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
213c213
<                            ( char*         , 
---
>                            ( char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
214c214
<                              unsigned * ,
---
>                              unsigned * 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
215c215
<                              char*         , 
---
>                              char*          
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
216c216
<                              unsigned   ,
---
>                              unsigned   
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
217c217
<                              int           ,
---
>                              int           
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
233c233
< ;
---
> 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
237c237
<  BZ_APIBZ2_bzread ()
---
>  BZ_APIBZ2_bzread 
244a245
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
238,241d237
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
< }
244a241,242
> 
>  
\ No newline at end of file
239c239
<    int bzerr;
---
>    int bzerr
244a245
>  
\ No newline at end of file
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>       ;
244a245
>  
\ No newline at end of file
240c240
<    (    bzerr == BZ_STREAM_END)   ;
---
>    (    bzerr == BZ_STREAM_END)   
244a245
>  
\ No newline at end of file
===< pass_indent :: regular >===
1d0
<  
4,9c3
< 
< 
< 
< 
< 
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END 9
13,112c7
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
<   
< 
< 
< 
<  * BZ_APIBZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
<   ;
< 
<  void BZ_APIBZ2_bzReadGetUnused ( 
<       );
< 
<   BZ_APIBZ2_bzRead ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  * BZ_APIBZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    );
< 
<  void BZ_APIBZ2_bzWrite ( 
<       int*    , 
<       int* , 
<       void*   , 
<       int      
<    );
< 
<  void BZ_APIBZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ_APIBZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
---
> #define BZ_EXTERN
114c9
<                      
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
115a11
>     ;
116a13
> void BZ_APIBZ2_bzReadGetUnused();
117a15
> BZ_APIBZ2_bzRead(int *, int *, void *, int);
118a17
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
119a19
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
120a21
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
122,128c23,24
< * BZ_APIBZ2_bzWriteOpen 
<                     ( int*  ,      
<                       FILE* , 
<                       int   , 
<                       int   ,
<                       int    )
< ;
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
>                               unsigned *, unsigned *);
129a26,27
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
>                                int);
130a29
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
131a31
>     ;
133,138c33
< void BZ_APIBZ2_bzWrite
<              ( int*    , 
<                int* , 
<                void*   , 
<                int      )
< ;
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
139a35
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
140a37
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
142,148c39,40
< void BZ_APIBZ2_bzWriteClose
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned *  )
< ;
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
>                               unsigned *, unsigned *);
149a42
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
151,159c44
< void BZ_APIBZ2_bzWriteClose64
<                   ( int*          , 
<                     int*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned *  )
< ;
---
>     ;
160a46
> BZ_APIBZ2_bzRead(int *, int *, void *, int)
161a48
>     ;
163,169c50
< * BZ_APIBZ2_bzReadOpen 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int    )
---
> void BZ_APIBZ2_bzReadGetUnused();
170a52,53
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
>                                int);
171a55
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
172a57
>     ;
174,240c59,61
<  ;
< 
< 
< 
<  BZ_APIBZ2_bzRead 
<            ( int*    , 
<              int* , 
<              void*   , 
<              int     )
< 
<    
<    ; 
< 
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      ( )
< ;
< 
< 
< 
< 
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffCompress 
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned   ,
<                            int           , 
<                            int           , 
<                            int            )
< ;
< 
< 
< 
<  BZ_APIBZ2_bzBuffToBuffDecompress 
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned   ,
<                              int           ,
<                              int            )
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
<  BZ_APIBZ2_bzread ()
< {
<    int bzerr;
<    (    bzerr == BZ_STREAM_END)   ;
---
> BZ_APIBZ2_bzread() {
>   int bzerr;
>   (bzerr == BZ_STREAM_END);
242,244d62
< 
< 
< 
(99.3 %, 1464 bytes)
===< pass_clex :: rm-toks-9 >===
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #>
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #define #define BZ_EXTERN
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #define BZ_STREAM_END define BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> BZ_EXTERN
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #*BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdioint *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.*, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.h, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #*, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define , int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpenint, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int **, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, , int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *)
9,11c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, ;
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intvoid BZ_APIBZ2_bzReadGetUnused();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, BZ_APIBZ2_bzReadGetUnused();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, );
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void ;
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *BZ_APIBZ2_bzRead(int *, int *, void *, int);
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, (int *, int *, void *, int);
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, intint *, int *, void *, int);
11,15c11
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
>     *, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> , int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused*, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused(, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused()void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int );
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *;
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int*, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int), int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpenint, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, ;
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, (int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intint *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int*, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int), void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int );
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *;
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int*, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int), int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void , unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteCloseunsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(*, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int , unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int );
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *;
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, intBZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, (int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned **, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, , int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned **, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *), int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void , unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(*, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int , unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int ,
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, ;
23,26c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
23,26c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *(char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *)char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, , int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *,
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, int);
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char );
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *;
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned(char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int*, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, , unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intunsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char , int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, , int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *)
29,31c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, ;
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, (int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedint *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int*, int, int, int);
31,33c31
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
>     , int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpenint, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, ;
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, (int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intint *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int*, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int), void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int );
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *;
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int*, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int), int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void , unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteCloseunsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(*, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int , unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int );
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *;
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, intBZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, (int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned **, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, , int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned **, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *), int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void , unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(*, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int , unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int ,
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, ;
39,42c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
39,42c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               (int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned **, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, , FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned **, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *), int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpenint, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int **, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, , int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *)
42,44c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, ;
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intBZ_APIBZ2_bzRead(int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, (int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, intint *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void , int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, void *, int)
44,46c44
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
>     void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int )
46,48c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
---
> BZ_APIBZ2_bzRead(int *;
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, void BZ_APIBZ2_bzReadGetUnused();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int BZ_APIBZ2_bzReadGetUnused();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, );
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void ;
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *, (char *, unsigned *, char *, unsigned, int, int,
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *, intchar *, unsigned *, char *, unsigned, int, int,
48,52c48
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>     *, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> , unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused*, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused(, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused()char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, , int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *,
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, int);
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char );
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *;
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned(char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int*, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, , unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intunsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char , int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, , int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *)
55,57c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, ;
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char BZ_APIBZ2_bzread() {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *() {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, ) {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned{
55,60c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int bzerr;
55,60c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, intbzerr;
55,60c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, ;
55,61c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int(bzerr == BZ_STREAM_END);
57,61c57
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>     bzerr == BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> == BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzreadBZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread();
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread() ;
60,62c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   }
60,62c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int 
\ No newline at end of file
60,62c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int bzerr
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
62d61
< }
===< pass_clex :: rm-toks-6 >===
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define .h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END h>
5c5
< #include <stdio.h>
---
> >
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> ##define BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include define BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <BZ_EXTERN
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio*BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.h(int *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> int *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #*, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define , FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> **, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int , int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, , void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE **, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, , int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intint)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, )
9,11c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int;
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void BZ_APIBZ2_bzReadGetUnused();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void BZ_APIBZ2_bzReadGetUnused();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, );
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int;
11,15c11
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
>     BZ_APIBZ2_bzRead(int *, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> (int *, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void int *, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused*, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused(, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused()int *, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int );
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *;
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int*, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int), FILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> FILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> **, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int , int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, , int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, ;
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intvoid BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int*, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int), int *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> int *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int );
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *;
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int*, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int), int *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> int *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int , unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int , unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, ;
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, (int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned **, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *), int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int , unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int , unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int,
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
24c24
<                               unsigned *, unsigned *);
---
>                               ;
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *(char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *)unsigned *, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned , int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, , int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *,
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int);
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned);
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, ;
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, intBZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, (char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intchar *, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                *, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)unsigned *, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> *, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned , int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, , int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *)
29,31c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, ;
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned*BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int*, FILE *, int, int, int);
31,33c31
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
>     , FILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> FILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> **, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int , int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, , int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, ;
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intvoid BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int*, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int), int *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> int *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int );
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *;
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int*, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int), int *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> int *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int , unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int , unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, ;
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, (int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned **, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *), int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int , unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int , unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int,
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *);
40c40
<                               unsigned *, unsigned *);
---
>                               ;
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, (int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned **, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *), FILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> FILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> **, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int , int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, , void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE **, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, , int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intint)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, )
42,44c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int;
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, BZ_APIBZ2_bzRead(int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void (int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, int *, void *, int)
44,46c44
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
>     int *, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int )
46,48c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
---
> BZ_APIBZ2_bzRead(int *, int *;
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void BZ_APIBZ2_bzReadGetUnused();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void BZ_APIBZ2_bzReadGetUnused();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void *();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void *, );
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int;
48,52c48
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>     BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> (char *, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void char *, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused*, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused(, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused()unsigned *, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned , int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, , int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *,
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int);
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned);
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, ;
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, intBZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, (char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intchar *, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                *, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)unsigned *, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> *, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned , int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, , int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *)
55,57c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, ;
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedBZ_APIBZ2_bzread() {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, () {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int) {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, {
55,60c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, intint bzerr;
57,60c57
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
>     bzerr;
59,60c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> ;
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread(bzerr == BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread(bzerr == BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread() == BZ_STREAM_END);
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   BZ_STREAM_END);
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int );
61d60
<   (bzerr == BZ_STREAM_END);
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   }
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
62d61
< }
===< pass_clex :: rm-toks-4 >===
3,4d2
< #define BZ_STREAM_END 9
< 
3,4d2
< #define BZ_STREAM_END 9
< 
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END stdio.h>
5c5
< #include <stdio.h>
---
> .h>
5c5
< #include <stdio.h>
---
> #h>
5c5
< #include <stdio.h>
---
> #include >
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <#define BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <stdiodefine BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <stdio.BZ_EXTERN
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.h*BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #(int *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define int *, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpenFILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(*, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int , int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, , int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int*, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, , int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, intint)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, )
9,11c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void ;
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *void BZ_APIBZ2_bzReadGetUnused();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, BZ_APIBZ2_bzReadGetUnused();
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int();
11,13c11
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
>     );
13c13
< void BZ_APIBZ2_bzReadGetUnused();
---
> ;
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzRead(int *, int *, void *, int);
13,15c13
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzReadGetUnused(int *, int *, void *, int);
(99.3 %, 1432 bytes)
13,15c13
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *, int *, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> , int *, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzReadint *, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(*, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int , void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int , int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, );
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void ;
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void **BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int)int *, FILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, FILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, FILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpenFILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(*, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int , int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, , int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, ;
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, intvoid BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int)int *, int *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *, int *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void , int *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWriteint *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(*, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int , void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int , int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, );
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void ;
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int)int *, int *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *, int *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void , int *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteCloseint *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(*, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int , int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, , unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int **, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, , unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, intunsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned );
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *;
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)int *, int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> *, int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void , int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(*, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int , int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, , unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int **, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, , unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, intunsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned ,
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *unsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned , unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *unsigned *);
24c24
<                               unsigned *, unsigned *);
---
>                               *);
24c24
<                               unsigned *, unsigned *);
---
>                               unsigned );
24c24
<                               unsigned *, unsigned *);
---
>                               unsigned *;
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned (char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *)*, unsigned *, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> , unsigned *, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompressunsigned *, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(*, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned , unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, , int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned,
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, ;
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intBZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                (char *, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intchar *, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)*, unsigned *, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> , unsigned *, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompressunsigned *, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(*, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char , char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned , unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, , int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned)
29,31c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, ;
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int*BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int(int *, FILE *, int, int, int);
31,33c31
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
>     int *, FILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, FILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, FILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpenFILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(*, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int , int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, , int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, ;
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, intvoid BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int)int *, int *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *, int *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void , int *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWriteint *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(*, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int , void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int , int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, );
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void ;
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int)int *, int *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *, int *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void , int *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteCloseint *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(*, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int , int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, , unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int **, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, , unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, intunsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned );
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *;
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)int *, int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> *, int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void , int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(*, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int , int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, , unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int **, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, , unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, intunsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned ,
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *unsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned , unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *unsigned *);
40c40
<                               unsigned *, unsigned *);
---
>                               *);
40c40
<                               unsigned *, unsigned *);
---
>                               unsigned );
40c40
<                               unsigned *, unsigned *);
---
>                               unsigned *;
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *)int *, FILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, FILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, FILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpenFILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(*, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int , int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, , int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int*, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, , int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, intint)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, )
42,44c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void ;
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *BZ_APIBZ2_bzRead(int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, (int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, intint *, int *, void *, int)
44,46c44
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
>     *, int *, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> , int *, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzReadint *, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(*, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int , void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int , int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int *int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int *, )
46,48c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
---
> BZ_APIBZ2_bzRead(int *, int *, void ;
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void *void BZ_APIBZ2_bzReadGetUnused();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void *, BZ_APIBZ2_bzReadGetUnused();
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int();
48,50c48
<     ;
< 
< void BZ_APIBZ2_bzReadGetUnused();
---
>     );
50c50
< void BZ_APIBZ2_bzReadGetUnused();
---
> ;
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
50,52c50
< void BZ_APIBZ2_bzReadGetUnused();
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzReadGetUnused(char *, unsigned *, char *, unsigned, int, int,
(99.3 %, 1400 bytes)
50,52c50
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, unsigned *, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> , unsigned *, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompressunsigned *, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(*, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned , unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, , int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned,
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, ;
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intBZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                (char *, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intchar *, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)*, unsigned *, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> , unsigned *, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompressunsigned *, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(*, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char , char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned , unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, , int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned)
55,57c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, ;
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, intBZ_APIBZ2_bzread() {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, () {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int) {
57,59c57
<     ;
< 
< BZ_APIBZ2_bzread() {
---
>     {
59,60c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> int bzerr;
59,60c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzreadbzerr;
59,60c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(;
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread() (bzerr == BZ_STREAM_END);
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   bzerr == BZ_STREAM_END);
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int == BZ_STREAM_END);
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerrBZ_STREAM_END);
61c61
<   (bzerr == BZ_STREAM_END);
---
>   );
61c61
<   (bzerr == BZ_STREAM_END);
---
>   (;
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr }
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
62d61
< }
Termination check: size was 3257; now 1400
===< pass_include_includes :: 0 >===
===< pass_ternary :: c >===
===< pass_balanced :: curly2 >===
1c1
< 
---
>  
59,62c59,60
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() ;
>  
\ No newline at end of file
===< pass_balanced :: angles >===
1c1
< 
---
>  
5c5
< #include <stdio.h>
---
> #include 
62a63
>  
\ No newline at end of file
===< pass_clang :: return-void >===
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
===< pass_clang :: copy-propagation >===
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-array-index-var >===
===< pass_comments :: 0 >===
===< pass_clex :: rm-toks-7 >===
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END >
5,6d4
< #include <stdio.h>
< 
5,6d4
< #include <stdio.h>
< 
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include BZ_EXTERN
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <*BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdioBZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.(int *, FILE *, int, int, void *, int)
5,9c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.hint *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpenint, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
9,11c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, ;
9,13c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int;
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, BZ_APIBZ2_bzRead(int *, int *, void *, int);
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void (int *, int *, void *, int);
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *int *, int *, void *, int);
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, *, int *, void *, int);
9,15c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, int *, void *, int);
11,15c11
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
>     int *, void *, int);
13,15c13
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *, void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> , void *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzReadvoid *, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(*, int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int , int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *int);
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, );
15c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int ;
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int **BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void (int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *int *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, *, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int, FILE *, int, int, int);
15,17c15
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int)FILE *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, int, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpenint, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(, int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int int, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int);
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE );
17c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *;
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intBZ_APIBZ2_bzWrite(int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, (int *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, intint *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, *, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int, int *, void *, int);
17,19c17
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int)int *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *, void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void , void *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWritevoid *, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(*, int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int , int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *int);
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, );
19c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int ;
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void (int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *int *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, *, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int, int *, int, unsigned *, unsigned *);
19,21c19
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int)int *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *, int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void , int, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteCloseint, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(, unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int unsigned *, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int **, unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, , unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int unsigned *);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int **);
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, );
21c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int;
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *(int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, int *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, int *, int, unsigned *, unsigned *,
21,23c21
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)int *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> *, int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void , int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64int, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(, unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int unsigned *, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, , unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int unsigned *,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int **,
23c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, ,
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, intunsigned *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, *, unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned , unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *unsigned *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, *);
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned );
23,24c23
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *;
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned (char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *char *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, *, unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned , unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *unsigned *, char *, unsigned, int, int,
24,26c24
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *)*, char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> , char *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(*, unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *unsigned, int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, , int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, int,
26c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char ,
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *int);
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, );
26,27c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned;
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int(char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, char *, unsigned *, char *, unsigned, int, int)
26,29c26
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int*, unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                , unsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intunsigned *, char *, unsigned, int, int)
27,29c27
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)*, char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> , char *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(*, unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char , unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *unsigned, int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, , int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, int)
29c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char )
29,31c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *;
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedBZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, (int *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, intint *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, *, FILE *, int, int, int);
29,33c29
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int, FILE *, int, int, int);
31,33c31
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
>     FILE *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *, int, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpenint, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(, int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int int, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int);
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE );
33c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *;
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intBZ_APIBZ2_bzWrite(int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, (int *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, intint *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, *, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int, int *, void *, int);
33,35c33
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int)int *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *, void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void , void *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWritevoid *, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(*, int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int , int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *int);
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, );
35c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int ;
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void (int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *int *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, *, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int, int *, int, unsigned *, unsigned *);
35,37c35
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int)int *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *, int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void , int, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteCloseint, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(, unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int unsigned *, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int **, unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, , unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int unsigned *);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int **);
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, );
37c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int;
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *(int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, int *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, int *, int, unsigned *, unsigned *,
37,39c37
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)int *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> *, int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void , int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64int, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(, unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int unsigned *, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, , unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int unsigned *,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int **,
39c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, ,
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, intunsigned *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, *, unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned , unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *unsigned *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, *);
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned );
39,40c39
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *;
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *(int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, int *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *, FILE *, int, int, void *, int)
40,42c40
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *)FILE *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, int, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpenint, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(, int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int int, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, void *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
42c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int)
42,44c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, ;
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, intBZ_APIBZ2_bzRead(int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, (int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void int *, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void **, int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, , int *, void *, int)
42,46c42
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, intint *, void *, int)
44,46c44
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
>     *, void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> , void *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzReadvoid *, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(*, int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int , int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *int)
46c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, )
46,48c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
---
> BZ_APIBZ2_bzRead(int *, int ;
46,50c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
---
> BZ_APIBZ2_bzRead(int *, int *;
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void (char *, unsigned *, char *, unsigned, int, int,
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *char *, unsigned *, char *, unsigned, int, int,
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *, *, unsigned *, char *, unsigned, int, int,
46,52c46
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int, unsigned *, char *, unsigned, int, int,
48,52c48
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>     unsigned *, char *, unsigned, int, int,
50,52c50
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> , char *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompresschar *, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(*, unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char , unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *unsigned, int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, , int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned int, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, int,
52c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char ,
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *int);
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, );
52,53c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned;
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int(char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, char *, unsigned *, char *, unsigned, int, int)
52,55c52
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int*, unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                , unsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intunsigned *, char *, unsigned, int, int)
53,55c53
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)*, char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> , char *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompresschar *, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(*, unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char , unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *unsigned, int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, , int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, int)
55c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char )
55,57c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *;
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, BZ_APIBZ2_bzread() {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned() {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, ) {
55,59c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int{
55,60c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int bzerr;
55,60c55
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, intbzerr;
58,60d57
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> (bzerr == BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzreadbzerr == BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread(== BZ_STREAM_END);
59,61c59
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzread() BZ_STREAM_END);
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   );
60,61c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int ;
60,62c60
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int bzerr}
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
61,62c61
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
62d61
< }
===< pass_clex :: rm-toks-3 >===
3c3
< #define BZ_STREAM_END 9
---
> 9
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> ##include <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define include <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END <stdio.h>
5c5
< #include <stdio.h>
---
> stdio.h>
5c5
< #include <stdio.h>
---
> #.h>
5c5
< #include <stdio.h>
---
> #include h>
5c5
< #include <stdio.h>
---
> #include <>
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <stdio#define BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <stdio.define BZ_EXTERN
5,7c5
< #include <stdio.h>
< 
< #define BZ_EXTERN
---
> #include <stdio.hBZ_EXTERN
7,8d6
< #define BZ_EXTERN
< 
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
7,9c7
< #define BZ_EXTERN
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define (int *, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> int *, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> **, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen, FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(FILE *, int, int, void *, int)
9c9
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
(99.3 %, 1381 bytes)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> int *, FILE *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> **, FILE *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen, FILE *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(FILE *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE , int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *int, void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, , void *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intvoid *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, *, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void )
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *;
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, ;
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, intBZ_APIBZ2_bzRead(int *, int *, void *, int);
9,13c9
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
>     (int *, int *, void *, int);
11,13c11
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> int *, int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *, int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead, int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, void *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, int);
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void );
13c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *;
13,15c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
13,15c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, intBZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
13,15c13
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzRead(int *, int *, void *, int)(int *, FILE *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> int *, FILE *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> **, FILE *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen, FILE *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(FILE *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int, int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE , int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *int, int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, , int);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intint);
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, );
15c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int;
15,17c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
15,17c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, intBZ_APIBZ2_bzWrite(int *, int *, void *, int);
15,17c15
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int)(int *, int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> int *, int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite, int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int);
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void );
17c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *;
17,19c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
17,19c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, intBZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
17,19c17
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int)(int *, int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> int *, int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void *, int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose, int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int , unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *unsigned *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, *, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
19c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, ;
19,21c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
19,21c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
19,21c19
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)(int *, int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> int *, int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void *, int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64, int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int , unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
21c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
21,22c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, unsigned *);
21,22c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, unsigned *);
21,22c21
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, unsigned *);
22c22
<                               unsigned *, unsigned *);
---
>                               unsigned *);
22c22
<                               unsigned *, unsigned *);
---
>                               unsigned *);
22c22
<                               unsigned *, unsigned *);
---
>                               unsigned *);
22c22
<                               unsigned *, unsigned *);
---
>                               unsigned *, ;
22,24c22
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
22,24c22
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *(char *, unsigned *, char *, unsigned, int, int,
22,24c22
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *)char *, unsigned *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, unsigned *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, unsigned *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(unsigned *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char , int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *int, int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , int,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsignedint,
24c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, ,
24,25c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, intint);
24,25c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, );
24,25c24
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int;
25,27c25
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
25,27c25
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int(char *, unsigned *, char *, unsigned, int, int)
25,27c25
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)char *, unsigned *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> *, unsigned *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, unsigned *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(unsigned *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, char *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, unsigned, int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char , int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *int, int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, , int)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedint)
27c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, )
27,29c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int;
27,31c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
27,31c27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, intBZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
29,31c29
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
>     (int *, FILE *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> int *, FILE *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> **, FILE *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen, FILE *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(FILE *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, int, int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE , int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *int, int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, , int);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, intint);
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, );
31c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int;
31,33c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
31,33c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, intBZ_APIBZ2_bzWrite(int *, int *, void *, int);
31,33c31
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int)(int *, int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> int *, int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void *, int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite, int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, void *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, int);
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void );
33c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *;
33,35c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
33,35c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, intBZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
33,35c33
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWrite(int *, int *, void *, int)(int *, int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> int *, int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void *, int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose, int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int, unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int , unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *unsigned *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, *, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *);
35c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, ;
35,37c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
35,37c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
35,37c35
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)(int *, int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> int *, int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void *, int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64, int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int, unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int , unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
37c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *,
37,38c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, unsigned *);
37,38c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, unsigned *);
37,38c37
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, unsigned *);
38c38
<                               unsigned *, unsigned *);
---
>                               unsigned *);
38c38
<                               unsigned *, unsigned *);
---
>                               unsigned *);
38c38
<                               unsigned *, unsigned *);
---
>                               unsigned *);
38c38
<                               unsigned *, unsigned *);
---
>                               unsigned *, ;
38,40c38
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
38,40c38
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
38,40c38
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *)(int *, FILE *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> int *, FILE *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> **, FILE *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen, FILE *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(FILE *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int, int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE , int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *int, void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, , void *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intvoid *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, *, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int)
40c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void )
40,42c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *;
40,44c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, BZ_APIBZ2_bzRead(int *, int *, void *, int)
40,44c40
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int(int *, int *, void *, int)
42,44c42
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
>     int *, int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *, int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead, int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, void *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int *, int)
44c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> BZ_APIBZ2_bzRead(int *, int *, void )
44,46c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
---
> BZ_APIBZ2_bzRead(int *, int *, void *;
44,48c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
---
> BZ_APIBZ2_bzRead(int *, int *, void *, ;
44,50c44
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzRead(int *, int *, void *, intBZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
46,50c46
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>     (char *, unsigned *, char *, unsigned, int, int,
48,50c48
< ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> char *, unsigned *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> *, unsigned *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, unsigned *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(unsigned *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char , int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *int, int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , int,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsignedint,
50c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, ,
50,51c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, intint);
50,51c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, );
50,51c50
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int;
51,53c51
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
51,53c51
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int(char *, unsigned *, char *, unsigned, int, int)
51,53c51
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int)char *, unsigned *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> *, unsigned *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, unsigned *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(unsigned *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, char *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, unsigned, int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char , int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *int, int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, , int)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedint)
53c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, )
53,55c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int;
53,57c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, BZ_APIBZ2_bzread() {
53,57c53
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int() {
55,57c55
<     ;
< 
< BZ_APIBZ2_bzread() {
---
>     ) {
57c57
< BZ_APIBZ2_bzread() {
---
> {
57,58c57
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzreadint bzerr;
57,58c57
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(bzerr;
57,58c57
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() ;
58d57
<   int bzerr;
58,59c58
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr == BZ_STREAM_END);
58,59c58
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr== BZ_STREAM_END);
59c59
<   (bzerr == BZ_STREAM_END);
---
>   BZ_STREAM_END);
59c59
<   (bzerr == BZ_STREAM_END);
---
>   ();
59c59
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr ;
59,60c59
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == }
59,60c59
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
59,60c59
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
60d59
< }
Termination check: size was 1400; now 1381
===< pass_include_includes :: 0 >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-unused-var >===
===< pass_clang :: simplify-if >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: replace-dependent-name >===
===< pass_comments :: 0 >===
===< pass_ints :: a >===
===< pass_ints :: b >===
===< pass_ints :: c >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-15 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *, FILE *, int, int, void *, int)
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #, FILE *, int, int, void *, int)
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define FILE *, int, int, void *, int)
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #define BZ_STREAM_END *, int, int, void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> , int, int, void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #int, int, void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include , int, void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <int, void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio, void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.void *, int)
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> #include <stdio.h*, int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> , int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *int)
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen)
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(;
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
---
> *BZ_APIBZ2_bzReadOpen(int ;
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *BZ_APIBZ2_bzRead(int *, int *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, (int *, int *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE int *, int *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE **, int *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, , int *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intint *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, *, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
7,13c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
(99.4 %, 1326 bytes)
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int, int, int);
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int, int, int);
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void , int, int);
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *int, int);
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, , int);
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, intint);
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int));
9c9
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> ;
9,11c9
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
9,11c9
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpenBZ_APIBZ2_bzWrite(int *, int *, void *, int);
(99.4 %, 1274 bytes)
11,12d10
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
11,12d10
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
(99.4 %, 1222 bytes)
9,11c9
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> unsigned *);
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *);
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void );
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose;
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *(int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int*, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, , int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void ,
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64unsigned *, unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(*, unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int , unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int );
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *;
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int(char *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, char *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *, char *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               char *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned , int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *), int,
16c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> int,
16c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress,
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(int);
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char );
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *;
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned (char *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *char *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char , unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int*, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, , unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intunsigned, int, int)
17,19c17
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                , int, int)
17,19c17
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intint, int)
17,19c17
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int), int)
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> int)
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress)
19,21c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(;
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, (int *, FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned int *, FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned **, FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, , FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char FILE *, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char **, int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, , int, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedint, int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, , int, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, intint, int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, , int);
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, intint);
21,23c21
<     ;
< 
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
>     );
23c23
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> ;
23,25c23
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
23,25c23
< *BZ_APIBZ2_bzWriteOpen(int *, FILE *, int, int, int);
< 
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
---
> *BZ_APIBZ2_bzWriteOpenBZ_APIBZ2_bzWrite(int *, int *, void *, int);
(99.4 %, 1170 bytes)
25,26d24
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
25,26d24
< void BZ_APIBZ2_bzWrite(int *, int *, void *, int);
< 
(99.5 %, 1118 bytes)
23,25c23
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> unsigned *);
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *);
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void );
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose;
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *(int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int*, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, , int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *)unsigned *,
27c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> *,
27c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void ,
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64unsigned *, unsigned *);
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(*, unsigned *);
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int , unsigned *);
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *unsigned *);
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, *);
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int );
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *;
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, intBZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, (int *, FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned int *, FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned **, FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, , FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned FILE *, int, int, void *, int)
27,30c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned **, int, int, void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               , int, int, void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned int, int, void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, int, void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, int, void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned , void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *void *, int)
28,30c28
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
>                               unsigned *, unsigned *)*, int)
30c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> , int)
30c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *int)
30c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> *BZ_APIBZ2_bzReadOpen)
30,32c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(;
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int BZ_APIBZ2_bzRead(int *, int *, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *(int *, int *, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, int *, int *, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int *, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int *, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int *, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int*, void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, , void *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, intvoid *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, *, int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void , int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *int)
30,34c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, )
30,36c30
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int;
34,39d33
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
34,39d33
< BZ_APIBZ2_bzRead(int *, int *, void *, int)
< 
<     ;
< 
< ;
< 
(99.5 %, 1063 bytes)
32,34c32
<     ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>     , int,
34c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> int,
34c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress,
34,35c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(int);
34,35c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char );
34,35c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *;
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned (char *, unsigned *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *char *, unsigned *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, *, unsigned *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char , unsigned *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *unsigned *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, *, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int*, unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, , unsigned, int, int)
34,37c34
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, intunsigned, int, int)
35,37c35
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                , int, int)
35,37c35
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intint, int)
35,37c35
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int), int)
37c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> int)
37c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress)
37,39c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(;
37,41c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char BZ_APIBZ2_bzread() {
37,41c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *() {
37,41c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, ) {
37,41c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned {
37,42c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *int bzerr;
37,42c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, bzerr;
37,42c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char ;
37,43c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *(bzerr == BZ_STREAM_END);
37,43c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, bzerr == BZ_STREAM_END);
37,43c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned== BZ_STREAM_END);
37,43c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, BZ_STREAM_END);
37,43c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int);
37,43c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, ;
37,44c37
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int}
39,44c39
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>     
\ No newline at end of file
41,44d40
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
41,44c41
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread
\ No newline at end of file
41,44c41
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread(
\ No newline at end of file
41,44c41
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() 
\ No newline at end of file
42,44c42
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
42,44c42
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int 
\ No newline at end of file
42,44c42
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int bzerr
\ No newline at end of file
43,44c43
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
43,44c43
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
43,44c43
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
43,44c43
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
43,44c43
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
43,44c43
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
44d43
< }
===< pass_clex :: rm-toks-13 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> (int *, FILE *, int, int, void *, int);
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #int *, FILE *, int, int, void *, int);
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #define *, FILE *, int, int, void *, int);
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #define BZ_STREAM_END , FILE *, int, int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> FILE *, int, int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #*, int, int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #include , int, int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #include <int, int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #include <stdio, int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #include <stdio.int, void *, int);
5,7c5
< #include <stdio.h>
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> #include <stdio.h, void *, int);
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> void *, int);
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> **, int);
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ_APIBZ2_bzReadOpen, int);
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int);
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int );
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ_APIBZ2_bzReadOpen(int *;
7,9c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
---
> *BZ_APIBZ2_bzReadOpen(int *, ;
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, (int *, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, intint *, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, *, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, int *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int, unsigned *, unsigned *);
7,11c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)unsigned *, unsigned *);
9,11c9
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *, unsigned *);
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> , unsigned *);
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void unsigned *);
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose*);
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose();
11c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int ;
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int (int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *int *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, *, int *, int, unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, int *, int, unsigned *, unsigned *,
(99.5 %, 1022 bytes)
11,13c11
< void BZ_APIBZ2_bzWriteClose();
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
11,13c11
< void BZ_APIBZ2_bzWriteClose();
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose()*, unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> , unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64*,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(,
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int unsigned *, unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, , unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int unsigned *);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int **);
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, );
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int;
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned (char *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *char *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, *, unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned , unsigned *, char *, unsigned, int, int,
13,16c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *unsigned *, char *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               *, char *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned , char *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *char *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, *, unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned , unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *unsigned, int, int,
14,16c14
<                               unsigned *, unsigned *);
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>                               unsigned *, unsigned *), int, int,
16c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> int, int,
16c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, int,
16c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(int,
16c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char ,
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *int);
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, );
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned ;
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, (char *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char char *, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char **, unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , unsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsignedunsigned *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, *, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, char *, unsigned, int, int)
16,19c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int*, unsigned, int, int)
17,19c17
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                , unsigned, int, int)
17,19c17
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intunsigned, int, int)
17,19c17
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int), int, int)
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> int, int)
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, int)
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(int)
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char )
19,21c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *;
19,23c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, ;
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, (int *, int *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char int *, int *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char **, int *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, , int *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsignedint *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, *, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int, unsigned *, unsigned *);
19,25c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int, unsigned *, unsigned *);
21,25c21
<     ;
< 
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
>     unsigned *, unsigned *);
23,25c23
< ;
< 
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> *, unsigned *);
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> , unsigned *);
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void unsigned *);
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose*);
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose();
25c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose(int ;
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int (int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *int *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, *, int *, int, unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose(int *, int *, int, unsigned *, unsigned *);
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(int *, int *, int, int *, int, unsigned *, unsigned *,
(99.5 %, 981 bytes)
25,27c25
< void BZ_APIBZ2_bzWriteClose();
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
25,27c25
< void BZ_APIBZ2_bzWriteClose();
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose()*, unsigned *,
27c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> , unsigned *,
27c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void unsigned *,
27c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64*,
27c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(,
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int unsigned *, unsigned *);
27,28c27
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, unsigned *);
(99.5 %, 928 bytes)
25,28c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(*BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
25,28c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(unsigned BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
25,28c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(unsigned *(int *, FILE *, int, int, void *, int)
25,28c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, int *, FILE *, int, int, void *, int)
25,28c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *,
<                               unsigned *, unsigned *);
< 
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, unsigned *, FILE *, int, int, void *, int)
(99.6 %, 838 bytes)
25c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, int)
25c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int *, FILE *, int, int, void *, int)
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, int )
25,27c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int *, FILE *, int, int, void *, int)
< 
<     ;
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, int *;
(99.6 %, 805 bytes)
25,29c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, , unsigned, int, int,
25,29c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int)
< 
<     ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> void BZ_APIBZ2_bzWriteClose(unsigned *, intunsigned, int, int,
27,29c27
<     ;
< 
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
>     , int, int,
29c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> int, int,
29c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress, int,
29c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(int,
29c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
---
> BZ_APIBZ2_bzBuffToBuffCompress(char ,
29,30c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *int);
29,30c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, );
29,30c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned ;
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, (char *, unsigned *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char char *, unsigned *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char **, unsigned *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , unsigned *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsignedunsigned *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, *, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, char *, unsigned, int, int)
29,32c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int*, unsigned, int, int)
30,32c30
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                , unsigned, int, int)
30,32c30
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                intunsigned, int, int)
30,32c30
<                                int);
< 
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
>                                int), int, int)
32c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> int, int)
32c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress, int)
32c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(int)
32c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char )
32,34c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *;
32,36c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, BZ_APIBZ2_bzread() {
32,36c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned () {
32,36c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *) {
32,36c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, {
32,37c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char int bzerr;
32,37c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *bzerr;
32,37c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, ;
32,38c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned(bzerr == BZ_STREAM_END);
32,38c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, bzerr == BZ_STREAM_END);
32,38c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int== BZ_STREAM_END);
32,38c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, BZ_STREAM_END);
32,38c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
< 
<     ;
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int);
35,38d34
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
36,38d35
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
36,39c36
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread
\ No newline at end of file
36,39c36
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread(
\ No newline at end of file
36,39c36
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() 
\ No newline at end of file
37,39c37
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
37,39c37
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int 
\ No newline at end of file
37,39c37
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int bzerr
\ No newline at end of file
38,39c38
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
38,39c38
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
38,39c38
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
38,39c38
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
38,39c38
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
38,39c38
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
39d38
< }
Termination check: size was 1381; now 805
===< pass_ternary :: c >===
===< pass_balanced :: curly >===
1c1
< 
---
>  
36,39c36,37
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() 
>  
\ No newline at end of file
===< pass_balanced :: curly3 >===
===< pass_balanced :: parens >===
1c1
< 
---
>  
7c7
< *BZ_APIBZ2_bzReadOpen(int *, FILE *, int, int, void *, int);
---
> *BZ_APIBZ2_bzReadOpen;
39a40
>  
\ No newline at end of file
1c1
< 
---
>  
11c11
< void BZ_APIBZ2_bzWriteClose();
---
> void BZ_APIBZ2_bzWriteClose;
39a40
>  
\ No newline at end of file
1c1
< 
---
>  
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64;
39a39
>  
\ No newline at end of file
1c1
< 
---
>  
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress;
39a39
>  
\ No newline at end of file
1c1
< 
---
>  
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress
39a40
>  
\ No newline at end of file
1c1
< 
---
>  
25c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int)
---
> void BZ_APIBZ2_bzWriteClose
39a40
>  
\ No newline at end of file
1c1
< 
---
>  
29,30c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress;
39a39
>  
\ No newline at end of file
1c1
< 
---
>  
32c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress
39a40
>  
\ No newline at end of file
(99.6 %, 769 bytes)
11c11
< void BZ_APIBZ2_bzWriteClose();
---
> void BZ_APIBZ2_bzWriteClose;
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64;
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress;
19c19
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress
25c25
< void BZ_APIBZ2_bzWriteClose(unsigned *, int)
---
> void BZ_APIBZ2_bzWriteClose
29,30c29
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> BZ_APIBZ2_bzBuffToBuffCompress;
32c32
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
---
> BZ_APIBZ2_bzBuffToBuffDecompress
36c36
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
38c38
<   (bzerr == BZ_STREAM_END);
---
>   ;
===< pass_balanced :: angles >===
5c5
< #include <stdio.h>
---
> #include 
===< pass_clang :: param-to-local >===
===< pass_clang :: reduce-pointer-level >===
7c7
< *BZ_APIBZ2_bzReadOpen;
---
> BZ_APIBZ2_bzReadOpen;
(99.6 %, 768 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-var >===
7c7
< BZ_APIBZ2_bzReadOpen;
---
> 
(99.6 %, 747 bytes)
===< pass_clang :: reduce-array-size >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: replace-undefined-function >===
16,17c16
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> 
29,30c28
< BZ_APIBZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int,
<                                int);
---
> 
11c11
< void BZ_APIBZ2_bzWriteClose();
---
> 
25d24
< void BZ_APIBZ2_bzWriteClose(unsigned *, int)
27d25
<     ;
(99.7 %, 517 bytes)
11c11
< void BZ_APIBZ2_bzWriteClose();
---
> 
24d23
< void BZ_APIBZ2_bzWriteClose(unsigned *, int)
26d24
<     ;
18d17
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
20d18
<     ;
30d27
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
32d28
<     ;
(99.8 %, 436 bytes)
18d17
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
20d18
<     ;
28d25
< BZ_APIBZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int, int)
30d26
<     ;
(99.9 %, 262 bytes)
===< pass_peep :: a >===
9c9
< ;
---
> 
9c9
< ;
---
> 
9c9
< ;
---
> 
(99.9 %, 261 bytes)
20c20
< ;
---
> 
20c20
< ;
---
> 
20c20
< ;
---
> 
(99.9 %, 260 bytes)
5c5
< #include <stdio.h>
---
> #include 
13,14c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64;
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int * int *, int, unsigned *, unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int * int, unsigned *, unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned * unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int, unsigned *, unsigned *
14c14
<                               unsigned *, unsigned *);
---
>                               unsigned * unsigned *);
14c14
<                               unsigned *, unsigned *);
---
>                               unsigned *, unsigned *)
28c28
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
28,31c28
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() 
(99.9 %, 259 bytes)
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned * unsigned *,
13c13
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *
14c14
<                               unsigned *, unsigned *);
---
>                               unsigned * unsigned *);
14c14
<                               unsigned *, unsigned *);
---
>                               unsigned *, unsigned *)
28c28
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread {
28,31c28
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() 
29c29
<   int bzerr;
---
>   int bzerr
30c30
<   (bzerr == BZ_STREAM_END);
---
>   ;
30c30
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END)
===< pass_ints :: a >===
===< pass_ints :: e >===
===< pass_indent :: regular >===
1c1
<  
---
> 
7,12d6
< 
< 
< 
< 
< 
< 
16,27d9
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
32d13
<  
\ No newline at end of file
(99.9 %, 239 bytes)
===< pass_clex :: rm-toks-2 >===
3c3
< #define BZ_STREAM_END 9
---
> BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #9
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END include <stdio.h>
5c5
< #include <stdio.h>
---
> <stdio.h>
5c5
< #include <stdio.h>
---
> #stdio.h>
5c5
< #include <stdio.h>
---
> #include .h>
5c5
< #include <stdio.h>
---
> #include <h>
5c5
< #include <stdio.h>
---
> #include <stdio>
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> #include <stdio.void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> #include <stdio.hBZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> (int *, int *, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void int *, int *, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64*, int *, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(, int *, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int int *, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, , int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int *, int *, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *, int *, int , unsigned *,
(99.9 %, 233 bytes)
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int *int unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **unsigned *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, *, unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, int unsigned unsigned *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, int unsigned **,
(99.9 %, 223 bytes)
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, int *,
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *,
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , ,
7,8c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned unsigned *, unsigned *);
7,8c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned **, unsigned *);
(99.9 %, 212 bytes)
7,8c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *);
7,8c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *,
<                               unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int **, unsigned *);
(99.9 %, 179 bytes)
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int unsigned unsigned *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int unsigned *, unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int unsigned **);
(99.9 %, 169 bytes)
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , );
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned ;
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *);
< 
< BZ_APIBZ2_bzread() {
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *BZ_APIBZ2_bzread() {
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *);
< 
< BZ_APIBZ2_bzread() {
---
> void BZ_APIBZ2_bzWriteClose64(int **, int , unsigned *)() {
9c9
< BZ_APIBZ2_bzread() {
---
> ) {
9c9
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread{
9,10c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(int bzerr;
(99.9 %, 158 bytes)
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int ;
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
---
> void BZ_APIBZ2_bzWriteClose64(int **, int *BZ_APIBZ2_bzread() {
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
---
> void BZ_APIBZ2_bzWriteClose64(int **, int *)() {
9c9
< BZ_APIBZ2_bzread() {
---
> ) {
9c9
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread{
9,10c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread(int bzerr;
9,10c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> BZ_APIBZ2_bzread() bzerr;
10c10
<   int bzerr;
---
>   ;
10,11c10
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int (bzerr == BZ_STREAM_END);
10,11c10
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerrbzerr == BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   == BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == ;
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END}
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
12d11
< }
Termination check: size was 805; now 158
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: remove-unused-var >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-undefined-function >===
===< pass_special :: b >===
===< pass_ints :: b >===
===< pass_clex :: rm-toks-12 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> BZ_APIBZ2_bzWriteClose64(int **, int *);
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #(int **, int *);
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #define int **, int *);
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #define BZ_STREAM_END **, int *);
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> *, int *);
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #, int *);
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #include int *);
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #include <*);
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #include <stdio);
5,7c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> #include <stdio.;
5,9c5
< #include <stdio.h>
< 
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
---
> #include <stdio.hBZ_APIBZ2_bzread() {
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
---
> () {
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
---
> void ) {
7,9c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
---
> void BZ_APIBZ2_bzWriteClose64{
7,10c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> void BZ_APIBZ2_bzWriteClose64(int bzerr;
7,10c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> void BZ_APIBZ2_bzWriteClose64(int bzerr;
7,10c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
---
> void BZ_APIBZ2_bzWriteClose64(int *;
7,11c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> void BZ_APIBZ2_bzWriteClose64(int **(bzerr == BZ_STREAM_END);
7,11c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> void BZ_APIBZ2_bzWriteClose64(int **, bzerr == BZ_STREAM_END);
7,11c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int == BZ_STREAM_END);
7,11c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int *BZ_STREAM_END);
7,11c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
< 
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> void BZ_APIBZ2_bzWriteClose64(int **, int *));
9,11c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> ;
9,12c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread}
9,12c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread(
\ No newline at end of file
9,12c9
< BZ_APIBZ2_bzread() {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzread() 
\ No newline at end of file
10,12c10
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
10,12c10
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int 
\ No newline at end of file
10,12c10
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int bzerr
\ No newline at end of file
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
11,12c11
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
12d11
< }
===< pass_clex :: rm-tok-pattern-4 >===
3c3
< #define BZ_STREAM_END 9
---
> define BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
>  BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> define  9
3c3
< #define BZ_STREAM_END 9
---
>   9
3c3
< #define BZ_STREAM_END 9
---
> define BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 9
---
>  BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 9
---
> define  
3c3
< #define BZ_STREAM_END 9
---
>   
3c3
< #define BZ_STREAM_END 9
---
> # BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #  9
3c3
< #define BZ_STREAM_END 9
---
> # BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 9
---
> #  
3c3
< #define BZ_STREAM_END 9
---
> # BZ_STREAM_END 9
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #  9
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> # BZ_STREAM_END 
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #  
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define  9
3c3
< #define BZ_STREAM_END 9
---
> #define  
3c3
< #define BZ_STREAM_END 9
---
> #define  9
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define  
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define  9
5c5
< #include <stdio.h>
---
> # <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define  
5c5
< #include <stdio.h>
---
> # <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define  9
5c5
< #include <stdio.h>
---
>  <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define  
5c5
< #include <stdio.h>
---
>  <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
> include <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
> # <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
>  <stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
> #include stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
> include stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
> # stdio.h>
3c3
< #define BZ_STREAM_END 9
---
> #define BZ_STREAM_END 
5c5
< #include <stdio.h>
---
>  stdio.h>
5c5
< #include <stdio.h>
---
> include <stdio.h>
5c5
< #include <stdio.h>
---
>  <stdio.h>
5c5
< #include <stdio.h>
---
> include stdio.h>
5c5
< #include <stdio.h>
---
>  stdio.h>
5c5
< #include <stdio.h>
---
> include <.h>
5c5
< #include <stdio.h>
---
>  <.h>
5c5
< #include <stdio.h>
---
> include .h>
5c5
< #include <stdio.h>
---
>  .h>
5c5
< #include <stdio.h>
---
> # <stdio.h>
5c5
< #include <stdio.h>
---
> # stdio.h>
5c5
< #include <stdio.h>
---
> # <.h>
5c5
< #include <stdio.h>
---
> # .h>
5c5
< #include <stdio.h>
---
> # <stdioh>
5c5
< #include <stdio.h>
---
> # stdioh>
5c5
< #include <stdio.h>
---
> # <h>
5c5
< #include <stdio.h>
---
> # h>
5c5
< #include <stdio.h>
---
> #include stdio.h>
5c5
< #include <stdio.h>
---
> #include .h>
5c5
< #include <stdio.h>
---
> #include stdioh>
5c5
< #include <stdio.h>
---
> #include h>
5c5
< #include <stdio.h>
---
> #include stdio.>
5c5
< #include <stdio.h>
---
> #include .>
5c5
< #include <stdio.h>
---
> #include stdio>
5c5
< #include <stdio.h>
---
> #include >
5c5
< #include <stdio.h>
---
> #include <.h>
5c5
< #include <stdio.h>
---
> #include <h>
5c5
< #include <stdio.h>
---
> #include <.>
5c5
< #include <stdio.h>
---
> #include <>
5c5
< #include <stdio.h>
---
> #include <.h
5c5
< #include <stdio.h>
---
> #include <h
5c5
< #include <stdio.h>
---
> #include <.
5c5
< #include <stdio.h>
---
> #include <
5c5
< #include <stdio.h>
---
> #include <stdioh>
5c5
< #include <stdio.h>
---
> #include <stdio>
5c5
< #include <stdio.h>
---
> #include <stdioh
5c5
< #include <stdio.h>
---
> #include <stdio
5c5
< #include <stdio.h>
---
> #include <stdioh>
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio>
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdioh
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.>
5c5
< #include <stdio.h>
---
> #include <stdio.
5c5
< #include <stdio.h>
---
> #include <stdio.>
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.>
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> void (int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> void (int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.>
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  (int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  (int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> void (int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  (int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> void BZ_APIBZ2_bzWriteClose64int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
> void int **, int *);
5c5
< #include <stdio.h>
---
> #include <stdio.h
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  int **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  (int **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64int **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  int **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  ( **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64 **, int *);
7c7
< void BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>   **, int *);
(99.9 %, 154 bytes)
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  (int **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  int **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  ( **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>   **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  (int *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  int *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  ( *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>   *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64int **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64 **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64int *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64 *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64int *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64 *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64int , int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64 , int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( **, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( *, int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( , int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( ** int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( * int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64( * int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int *);
7c7
<  BZ_APIBZ2_bzWriteClose64(int **, int *);
---
>  BZ_APIBZ2_bzWriteClose64(int *, int *);
(99.9 %, 148 bytes)
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(   
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int );
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int ;
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int )
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int 
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int );
9c9
< BZ_APIBZ2_bzread() {
---
> () {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int ;
9c9
< BZ_APIBZ2_bzread() {
---
> () {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int )
9c9
< BZ_APIBZ2_bzread() {
---
> () {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int *);
---
>  BZ_APIBZ2_bzWriteClose64(  int 
9c9
< BZ_APIBZ2_bzread() {
---
> () {
(99.9 %, 147 bytes)
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int ;
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int 
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int ;
9c9
< BZ_APIBZ2_bzread() {
---
> () {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int 
9c9
< BZ_APIBZ2_bzread() {
---
> () {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int ;
9c9
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int 
9c9
< BZ_APIBZ2_bzread() {
---
> BZ_APIBZ2_bzread) {
7c7
<  BZ_APIBZ2_bzWriteClose64(  int );
---
>  BZ_APIBZ2_bzWriteClose64(  int ;
9c9
< BZ_APIBZ2_bzread() {
---
> ) {
(99.9 %, 144 bytes)
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
>  {
>    bzerr;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> ) 
>    bzerr;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
>  
>    bzerr;
9c9
< BZ_APIBZ2_bzread) {
---
> BZ_APIBZ2_bzread {
9c9
< BZ_APIBZ2_bzread) {
---
> BZ_APIBZ2_bzread 
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread {
>    bzerr;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread 
>    bzerr;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread {
>   int ;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread 
>   int ;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread {
>    ;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread 
>    ;
9c9
< BZ_APIBZ2_bzread) {
---
> BZ_APIBZ2_bzread) 
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>    bzerr;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>   int ;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>    ;
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>   int bzerr
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>    bzerr
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>   int 
9,10c9,10
< BZ_APIBZ2_bzread) {
<   int bzerr;
---
> BZ_APIBZ2_bzread) 
>    
10c10
<   int bzerr;
---
>    bzerr;
10c10
<   int bzerr;
---
>    ;
10c10
<   int bzerr;
---
>    bzerr
10c10
<   int bzerr;
---
>    
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>    bzerr;
>   bzerr == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>    ;
>   bzerr == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>    bzerr
>   bzerr == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>    
>   bzerr == BZ_STREAM_END);
10c10
<   int bzerr;
---
>   int ;
10c10
<   int bzerr;
---
>   int 
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int ;
>   bzerr == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int 
>   bzerr == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int ;
>   ( == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int 
>   ( == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int ;
>    == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int 
>    == BZ_STREAM_END);
10c10
<   int bzerr;
---
>   int bzerr
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>   bzerr == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>   ( == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>    == BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>   (bzerr  BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>   bzerr  BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>   (  BZ_STREAM_END);
10,11c10,11
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerr
>     BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   bzerr == BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>    == BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   bzerr  BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>     BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   bzerr == );
11c11
<   (bzerr == BZ_STREAM_END);
---
>    == );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   bzerr  );
11c11
<   (bzerr == BZ_STREAM_END);
---
>     );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   ( == BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (  BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   ( == );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (  );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   ( == BZ_STREAM_END;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (  BZ_STREAM_END;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   ( == ;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (  ;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  BZ_STREAM_END);
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  BZ_STREAM_END;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  ;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  BZ_STREAM_END)
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  )
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  BZ_STREAM_END
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr  
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == );
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == ;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == )
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == 
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == );
> 
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == ;
> 
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == )
> 
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
> 
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END;
> 
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
> 
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END;
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END;
> 
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
> 
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END)
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
> 
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END)
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
> 
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END)
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
> 
11c11
<   (bzerr == BZ_STREAM_END);
---
>   (bzerr == BZ_STREAM_END)
11,12c11,12
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
> 
12c12
< }
---
> 
12c12
< }
---
> 
12c12
< }
---
> 
12c12
< }
---
> 
12c12
< }
---
> 
12c12
< }
---
> 
12c12
< }
---
> 
12c12
< }
---
> 
Termination check: size was 158; now 144
===< pass_balanced :: curly3 >===
===< pass_clang :: param-to-global >===
7,9c7,8
<  BZ_APIBZ2_bzWriteClose64(  int 
< 
< BZ_APIBZ2_bzread) {
---
>  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
> BZ_APIBZ2_bzWriteClose64(  void) {
(99.9 %, 173 bytes)
===< pass_clang :: param-to-local >===
===< pass_clang :: return-void >===
===< pass_clang :: reduce-pointer-level >===
===< pass_clang :: remove-unused-function >===
8,11c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> 
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: replace-undefined-function >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-12 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
---
> BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
---
> #;
3,8c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> #define BZ_APIBZ2_bzWriteClose64(  void) {
3,8c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> #define BZ_STREAM_END (  void) {
5,8c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> void) {
5,8c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> #) {
5,8c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> #include {
5,9c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
---
> #include <int bzerr;
5,9c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
---
> #include <stdiobzerr;
5,9c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
---
> #include <stdio.;
5,10c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> #include <stdio.h(bzerr == BZ_STREAM_END);
7,10c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>  bzerr == BZ_STREAM_END);
7,10c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>  int == BZ_STREAM_END);
7,10c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzreadBZ_STREAM_END);
8,10c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> );
8,10c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzWriteClose64;
8,11c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzWriteClose64(  }
8,11c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzWriteClose64(  void
\ No newline at end of file
8,11c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
> BZ_APIBZ2_bzWriteClose64(  void) 
\ No newline at end of file
9,11c9
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
9,11c9
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int 
\ No newline at end of file
9,11c9
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
< }
---
>   int bzerr
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr 
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
11d10
< }
===< pass_clex :: rm-toks-4 >===
3,4d2
< #define BZ_STREAM_END 9
< 
3,4d2
< #define BZ_STREAM_END 9
< 
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END stdio.h>
5c5
< #include <stdio.h>
---
> .h>
5c5
< #include <stdio.h>
---
> #h>
5c5
< #include <stdio.h>
---
> #include >
5,7c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
---
> #include <int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
5,7c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
---
> #include <stdioBZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
5,7c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
---
> #include <stdio.;
5,8c5
< #include <stdio.h>
< 
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> #include <stdio.hBZ_APIBZ2_bzWriteClose64(  void) {
7,8c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
>  (  void) {
7,8c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
>  int void) {
7,8c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
< BZ_APIBZ2_bzWriteClose64(  void) {
---
>  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread) {
8c8
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> {
8,9c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
---
> BZ_APIBZ2_bzWriteClose64int bzerr;
8,9c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
---
> BZ_APIBZ2_bzWriteClose64(  bzerr;
8,9c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
---
> BZ_APIBZ2_bzWriteClose64(  void;
8,10c8
< BZ_APIBZ2_bzWriteClose64(  void) {
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
> BZ_APIBZ2_bzWriteClose64(  void) (bzerr == BZ_STREAM_END);
9,10c9
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   bzerr == BZ_STREAM_END);
9,10c9
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int == BZ_STREAM_END);
9,10c9
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int bzerrBZ_STREAM_END);
10c10
<   (bzerr == BZ_STREAM_END);
---
>   );
10c10
<   (bzerr == BZ_STREAM_END);
---
>   (;
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr }
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == 
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END
\ No newline at end of file
10,11c10
<   (bzerr == BZ_STREAM_END);
< }
---
>   (bzerr == BZ_STREAM_END)
\ No newline at end of file
11d10
< }
Termination check: size was 144; now 173
===< pass_clang :: rename-fun >===
8c8
< BZ_APIBZ2_bzWriteClose64(  void) {
---
> fn1(  void) {
(99.9 %, 152 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
7c7
<  int BZ_APIBZ2_bzWriteClose64_BZ_APIBZ2_bzread;
---
>  int a;
9,10c9,10
<   int bzerr;
<   (bzerr == BZ_STREAM_END);
---
>   int b;
>   (b == BZ_STREAM_END);
(99.9 %, 104 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
2d1
< 
7,8c6,8
<  int a;
< fn1(  void) {
---
> int a;
> fn1 ( void )
> {
10c10
<   (b == BZ_STREAM_END);
---
>   ( b == BZ_STREAM_END );
7c7
<  int a;
---
> int a;
9,10c9,10
<   int b;
<   (b == BZ_STREAM_END);
---
>     int b;
>     (b == BZ_STREAM_END);
(99.9 %, 105 bytes)
9,10c9,10
<   int b;
<   ( b == BZ_STREAM_END );
---
>     int b;
>     ( b == BZ_STREAM_END );
7,8c7
< fn1 ( void )
< {
---
> fn1(void) {
10c9
<   ( b == BZ_STREAM_END );
---
>   (b == BZ_STREAM_END);
(99.9 %, 109 bytes)
7,10c7,9
< fn1 ( void )
< {
<     int b;
<     ( b == BZ_STREAM_END );
---
> fn1(void) {
>   int b;
>   (b == BZ_STREAM_END);
(100.0 %, 100 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 5 times
  method pass_balanced :: angles-only worked 14 times and failed 10 times
  method pass_balanced :: curly worked 69 times and failed 54 times
  method pass_balanced :: curly-only worked 0 times and failed 3 times
  method pass_balanced :: curly2 worked 26 times and failed 14 times
  method pass_balanced :: curly3 worked 6 times and failed 0 times
  method pass_balanced :: parens worked 1 times and failed 9 times
  method pass_balanced :: parens-only worked 224 times and failed 80 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 1 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 1 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 1 times and failed 0 times
  method pass_clang :: param-to-local worked 0 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 19 times and failed 4 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 2 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 35 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 3 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 3 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 1 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 153 times and failed 3136 times
  method pass_clex :: rm-toks-1 worked 6 times and failed 326 times
  method pass_clex :: rm-toks-10 worked 29 times and failed 665 times
  method pass_clex :: rm-toks-11 worked 1 times and failed 532 times
  method pass_clex :: rm-toks-12 worked 2 times and failed 403 times
  method pass_clex :: rm-toks-13 worked 5 times and failed 160 times
  method pass_clex :: rm-toks-14 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-15 worked 139 times and failed 1180 times
  method pass_clex :: rm-toks-16 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-2 worked 9 times and failed 368 times
  method pass_clex :: rm-toks-3 worked 1 times and failed 315 times
  method pass_clex :: rm-toks-4 worked 2 times and failed 347 times
  method pass_clex :: rm-toks-5 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-6 worked 0 times and failed 326 times
  method pass_clex :: rm-toks-7 worked 0 times and failed 318 times
  method pass_clex :: rm-toks-8 worked 7 times and failed 552 times
  method pass_clex :: rm-toks-9 worked 7 times and failed 934 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 2 times and failed 0 times
  method pass_ints :: a worked 122 times and failed 2 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 3 times and failed 6484 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 1 times and failed 0 times
  method pass_unifdef :: 0 worked 13 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454559305.8218/bzip2.c' reduced to:

#define BZ_STREAM_END 9

#include <stdio.h>

int a;
fn1(void) {
  int b;
  (b == BZ_STREAM_END);
}
1272.82user 353.07system 18:43.22elapsed 144%CPU (0avgtext+0avgdata 61088maxresident)k
0inputs+4990712outputs (0major+143936557minor)pagefaults 0swaps
