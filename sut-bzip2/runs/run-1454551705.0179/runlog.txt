===< 20812 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
5055d5054
< #include <ctype.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
5067d5066
< #   include <fcntl.h>
5068d5067
< #   include <sys/types.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
5105d5104
< #     include <io.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
5105d5104
< #     include <fcntl.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1220,1222c1220
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
333,335c333
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
361,429c361
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
721,723c721
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
732c732
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1091,1101c1091
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
1278,1283c1278
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
---
>       zs->state_in_len == 255)  else {                                       \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
1593,1595d1592
< {
<    bzFile* bzf = NULL;
<    int     ret;
1597,1638d1593
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1639,1640d1638
< {
<    bzFile* bzf = (bzFile*)b;
1642,1652d1639
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_balanced :: curly2 >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct ; 
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct ;
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct ;
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;;
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) ;
1033,1088c1033
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(80.6 %, 39819 bytes)
1025,1080c1025
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1046,1073c1046
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) ;
(81.1 %, 38643 bytes)
1135,1187c1135
< {
<    Int32   n;
<    EState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
---
> ;
1219,1230c1219
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
(81.9 %, 37137 bytes)
1167,1178c1167
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
> ;
1183,1198c1183
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1210,1242c1210
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.0 %, 36897 bytes)
1172,1187c1172
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
> ;
1199,1231c1199
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
(82.2 %, 36536 bytes)
1184,1216c1184
< {
<    DState* s;
< 
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
> ;
1238,1250c1238
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
(82.7 %, 35523 bytes)
1206,1218c1206
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
---
> ;
1223,1238c1223
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1249,1257c1249
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1272,1309c1272
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(82.8 %, 35296 bytes)
1211,1226c1211
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
> ;
1237,1245c1237
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1260,1297c1260
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.0 %, 34941 bytes)
1222,1230c1222
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct ;
1245,1282c1245
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1292,1322c1292
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1310,1321c1310
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.3 %, 34129 bytes)
1255,1285c1255
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
> ;
1273,1284c1273
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>    while (True) ;
(83.6 %, 33556 bytes)
1265,1268c1265
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> ;
1279,1311c1279
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1322,1363c1322
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(83.7 %, 33447 bytes)
1276,1308c1276
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1319,1360c1319
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
(84.1 %, 32584 bytes)
1287,1328c1287
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
> ;
1333,1346c1333
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
(84.5 %, 31734 bytes)
1292,1305c1292
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
---
> ;
1314,1335c1314
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
(84.6 %, 31528 bytes)
1301,1322c1301
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
> ;
1331,1343c1331
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
> ;
1359,1399c1359
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
(84.7 %, 31285 bytes)
1347,1387c1347
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
---
> ;
1398,1437c1398
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
(85.2 %, 30281 bytes)
1358,1397c1358
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
---
> ;
1389,1392c1389
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm.avail_out > 0) ; else ;      
(85.7 %, 29363 bytes)
1368,1370c1368
< {
<    return BZ_VERSION;
< }
---
> ;
1389,1391c1389
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
(85.7 %, 29339 bytes)
1387,1389c1387
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> ;
1396,1398c1396
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
(85.7 %, 29292 bytes)
1394,1396c1394
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> ;
1401,1410c1401
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1405,1407c1405
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
(85.7 %, 29245 bytes)
1399,1408c1399
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> ;
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
1405,1407c1405
<    } else {
<       return -1;
<    }
---
>    } else ;
(85.7 %, 29220 bytes)
1403,1405c1403
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else {
<       return -1;
<    }
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
1411,1420c1411
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
(85.8 %, 29198 bytes)
1409,1418c1409
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
> ;
1413,1415c1413
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK);else{
1415,1417c1415
<    }else{
<       return -1;
<    }
---
>    }else;
(85.8 %, 29074 bytes)
1414,1417c1414
< {
<    
<    return 0;
< }
---
> ;
1422,1436c1422
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1427,1432c1427
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
(85.8 %, 29055 bytes)
1419,1433c1419
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> ;
1424,1429c1424
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>    if(((bzFile*)b)->writing);else
1426,1428c1426
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK);
(86.0 %, 28760 bytes)
1424,1441c1424
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;;
1445,1451c1445
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
---
> ;
1733c1733
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1735c1735
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
(86.0 %, 28646 bytes)
1727c1727
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;;
1729c1729
<    = { "", "", ".tar", ".tar" };
---
>    = ;;
===< pass_balanced :: curly3 >===
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] ;
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
(86.1 %, 28523 bytes)
833,901c833
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] ;
915,968c915
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
(87.8 %, 24993 bytes)
847,900c847
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] ;
1354,1371c1354
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
(89.1 %, 22249 bytes)
1301,1318c1301
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] ;
1604c1604
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
(89.3 %, 21940 bytes)
1587c1587
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    ;
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21904 bytes)
1589c1589
<    = { "", "", ".tar", ".tar" };
---
>    ;
(89.3 %, 21876 bytes)
===< pass_clang :: callexpr-to-value >===
1279c1279
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(89.3 %, 21849 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(89.4 %, 21821 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,717c716
< static
< Int32 incs[14] ;
---
> 
(89.4 %, 21787 bytes)
716,717c716
< static
< Int32 incs[14] ;
---
> 
833c833
< UInt32 BZ2_crc32Table[256] ;
---
> 
(89.4 %, 21764 bytes)
832c832
< UInt32 BZ2_crc32Table[256] ;
---
> 
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21736 bytes)
846c846
< Int32 BZ2_rNums[512] ;
---
> 
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
(89.4 %, 21714 bytes)
1178c1178
<    Int32   n, ret;
---
>    Int32    ret;
1178c1178
<    Int32   n, ret;
---
>    Int32   n;
(89.4 %, 21712 bytes)
1178c1178
<    Int32    ret;
---
>    
1300c1300
< static char *bzerrorstrings[] ;
---
> 
(89.4 %, 21699 bytes)
1300c1300
< static char *bzerrorstrings[] ;
---
> 
1391c1391
< Int32   verbosity;
---
> 
(89.4 %, 21668 bytes)
1391c1391
< Int32   verbosity;
---
> 
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(89.4 %, 21650 bytes)
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1392c1392
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(89.4 %, 21635 bytes)
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1392c1392
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(89.4 %, 21625 bytes)
1392c1392
< Bool      deleteOutputOnInterrupt;
---
> 
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21591 bytes)
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1393c1393
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(89.5 %, 21576 bytes)
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1393c1393
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(89.5 %, 21561 bytes)
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1393c1393
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(89.5 %, 21547 bytes)
1393c1393
< Bool       noisy;
---
> 
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(89.5 %, 21530 bytes)
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1394c1394
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(89.5 %, 21517 bytes)
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1394c1394
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(89.5 %, 21499 bytes)
1394c1394
< Int32     blockSize100k;
---
> 
1395c1395
< Int32   exitValue;
---
> 
(89.5 %, 21475 bytes)
1395c1395
< Int32   exitValue;
---
> 
1407c1407
< Int32   opMode;
---
> 
(89.5 %, 21457 bytes)
1407c1407
< Int32   opMode;
---
> 
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21442 bytes)
1408c1408
< Int32   srcMode;
---
> 
1412c1412
< Int32   longestFileName;
---
> 
(89.5 %, 21426 bytes)
1412c1412
< Int32   longestFileName;
---
> 
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
(89.6 %, 21402 bytes)
1413c1413
< Char    inName [FILE_NAME_LEN];
---
> 
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
(89.6 %, 21371 bytes)
1414c1414
< Char    outName[FILE_NAME_LEN];
---
> 
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
(89.6 %, 21340 bytes)
1415c1415
< Char    tmpName[FILE_NAME_LEN];
---
> 
1416c1416
< Char    *progName;
---
> 
(89.6 %, 21309 bytes)
1416c1416
< Char    *progName;
---
> 
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(89.6 %, 21291 bytes)
1417c1417
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
(89.6 %, 21253 bytes)
1418c1418
< FILE    *outputHandleJustInCase;
---
> 
1419c1419
< Int32   workFactor;
---
> 
(89.6 %, 21221 bytes)
1419c1419
< Int32   workFactor;
---
> 
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(89.7 %, 21202 bytes)
1568,1569c1568
< static 
< struct MY_STAT fileMetaInfo;
---
> 
1585,1586c1585
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21166 bytes)
1584,1585c1584
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
1586,1587c1586
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21128 bytes)
1585,1586c1585
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    ;
---
> 
(89.7 %, 21088 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) < 2) & 0x4)) & 0xF)
621c621
<       s->tPos = GET_LL(s->tPos);
---
>       s-tPos = GET_LL(s->tPos);
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) < 2) & 0x4)) & 0xF)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
(89.7 %, 21086 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) < 2) & 0x4)) & 0xF)
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
617c617
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s->ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
(89.7 %, 21084 bytes)
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i) << 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i) < 16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
>       cccc = BZ2_indexIntoF ( s-tPos, s->cftab );    \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ((a)  (b)) ? (a) : (b)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
(89.7 %, 21082 bytes)
617c617
<    (((UInt32)s-ll16[i]) | (GET_LL4(i) < 16))
---
>    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
620c620
<       cccc = BZ2_indexIntoF ( s->tPos, s-cftab );    \
---
>       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ((a)  (b)) ? (a) : (b)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
(89.7 %, 21080 bytes)
665c665
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin(a,b) ((a)  (b)) ? (a) : (b)
689c689
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 < ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
(89.7 %, 21078 bytes)
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 < ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 < ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
(89.7 %, 21076 bytes)
689,690c689,690
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1 < ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 << ((zz) & 31))
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) > 5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
(89.7 %, 21074 bytes)
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 < ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
(89.7 %, 21072 bytes)
690,691c690,691
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1 < ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 << ((zz) & 31)))
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz) > 5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
(89.7 %, 21070 bytes)
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 < ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz) > 5]
(89.7 %, 21068 bytes)
691,692c691,692
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1 < ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) > 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
> #define      WORD_BH(zz)  bhtab[(zz)  5]
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
1641c1641
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) (strcmp(aa-name, (s))==0)
(89.7 %, 21066 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
1641c1641
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) (strcmp(aa-name, (s))==0)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)-lastErr == BZ_STREAM_END) return 0;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
1193c1193
<    bzf->strm.next_out = buf;
---
>    bzf-strm.next_out = buf;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
1192c1192
<    bzf->strm.avail_out = len;
---
>    bzf-strm.avail_out = len;
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
934c934
<    case lll: s->state = lll;                      \
---
>    case lll: s-state = lll;                      \
(89.7 %, 21064 bytes)
766c766
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1)  8] - ftab[(b) << 8])
1277c1277
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (((bzFile*)b)-lastErr == BZ_STREAM_END) return 0;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) < 8])
1193c1193
<    bzf->strm.next_out = buf;
---
>    bzf-strm.next_out = buf;
766c766
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) < 8])
1192c1192
<    bzf->strm.avail_out = len;
---
>    bzf-strm.avail_out = len;
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
934c934
<    case lll: s->state = lll;                      \
---
>    case lll: s-state = lll;                      \
767c767
< #define SETMASK (1 << 21)
---
> #define SETMASK (1 < 21)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
(89.7 %, 21062 bytes)
767c767
< #define SETMASK (1 < 21)
---
> #define SETMASK (1  21)
795c795
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1186c1186
<    if (bzf->writing)
---
>    if (bzf-writing)
(89.7 %, 21060 bytes)
1183c1183
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1186c1186
<    if (bzf->writing)
---
>    if (bzf-writing)
1342c1342
< #include <signal.h>
---
> #include signal.h
1343c1343
< #include <errno.h>
---
> #include errno.h
1354c1354
< #   include <fcntl.h>
---
> #   include fcntl.h
1355c1355
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: remove-unused-function >===
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> 
968,969c968
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
---
> 
628,629c628
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
949,950c948
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
(89.8 %, 20966 bytes)
628,629c628
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
949,950c948
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
893,895c893
< static
< void makeMaps_e ( EState* s )
< ;
---
> 
(89.8 %, 20889 bytes)
892,894c892
< static
< void makeMaps_e ( EState* s )
< ;
---
> 
898,900c898
< static
< void generateMTFValues ( EState* s )
< ;
---
> 
(89.8 %, 20851 bytes)
896,898c896
< static
< void generateMTFValues ( EState* s )
< ;
---
> 
968,970c968
< static
< int bz_config_ok ( void )
< ;
---
> 
(89.8 %, 20806 bytes)
966,968c966
< static
< int bz_config_ok ( void )
< ;
---
> 
972,974c972
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> 
(89.9 %, 20772 bytes)
970,972c970
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> 
974,976c974
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
---
> 
(89.9 %, 20700 bytes)
972,974c972
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
---
> 
978,980c978
< static
< void prepare_new_block ( EState* s )
< ;
---
> 
984,986c984
< static
< void init_RL ( EState* s )
< ;
---
> 
(89.9 %, 20643 bytes)
976,978c976
< static
< void prepare_new_block ( EState* s )
< ;
---
> 
982,984c982
< static
< void init_RL ( EState* s )
< ;
---
> 
(89.9 %, 20598 bytes)
980,982c980
< static
< void init_RL ( EState* s )
< ;
---
> 
985,987c985
< static
< Bool isempty_RL ( EState* s )
< ;
---
> 
(90.0 %, 20563 bytes)
983,985c983
< static
< Bool isempty_RL ( EState* s )
< ;
---
> 
1019,1021c1019
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> 
(90.0 %, 20525 bytes)
1017,1019c1017
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> 
1045,1047c1045
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
---
> 
(90.0 %, 20476 bytes)
1043,1045c1043
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
---
> 
1054,1056c1054
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> 
(90.0 %, 20423 bytes)
1052,1054c1052
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> 
1226,1232c1226
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
> 
(90.1 %, 20369 bytes)
1224,1230c1224
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
> 
(90.2 %, 20185 bytes)
===< pass_clang :: remove-unused-var >===
===< pass_clang :: move-function-body >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: empty-struct-to-int >===
1409,1410c1409
<    struct  
<    UInt64;
---
>    
1589c1589
<    struct zzzz 
---
>     int 
(90.2 %, 20178 bytes)
===< pass_clang :: replace-undefined-function >===
===< pass_clang :: replace-dependent-name >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_clex :: rm-toks-13 >===
9,13c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> BZ_FINISH            2
9,13c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> #2
9,15c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #define #define BZ_OK                0
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> define BZ_OK                0
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #BZ_OK                0
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #define 0
11,16c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_RUN               #define BZ_RUN_OK            1
12,16c12
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            1
(90.2 %, 20070 bytes)
9,14c9
< #2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> ##define BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
11,15c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                #define BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
12,16c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #BZ_SEQUENCE_ERROR    (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          -1)
14,16c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> 1)
14,16c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #)
14,17c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define #define BZ_PARAM_ERROR       (-2)
14,17c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_FINISH_OK         define BZ_PARAM_ERROR       (-2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> BZ_PARAM_ERROR       (-2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #(-2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define -2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_STREAM_END        2)
16,17c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> )
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> ##define BZ_MEM_ERROR         (-3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define define BZ_MEM_ERROR         (-3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    BZ_MEM_ERROR         (-3)
(90.2 %, 20009 bytes)
16,18c16
< #define define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define #define BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define define define BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define define BZ_MEM_ERROR         ((-5)
(90.3 %, 19948 bytes)
16,18c16
< #define define define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define define #define BZ_UNEXPECTED_EOF    (-7)
16,18c16
< #define define define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define define define define BZ_UNEXPECTED_EOF    (-7)
(90.3 %, 19881 bytes)
16,17c16
< #define define #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define define )
16,18c16
< #define define #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define ##define BZ_CONFIG_ERROR      (-9)
16,18c16
< #define define #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define #define define BZ_CONFIG_ERROR      (-9)
(90.3 %, 19815 bytes)
16,21c16
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define define next_in;
17,21c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> ;
17,22c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #unsigned int avail_in;
17,22c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define int avail_in;
17,22c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      avail_in;
17,22c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (;
17,23c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-unsigned int total_in_lo32;
17,23c17
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9int total_in_lo32;
19,23c19
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> total_in_lo32;
20,23c20
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    ;
20,24c20
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct unsigned int total_in_hi32;
21,24c21
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       int total_in_hi32;
21,24c21
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char total_in_hi32;
21,24c21
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *;
21,26c21
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char *next_inchar *next_out;
(90.4 %, 19722 bytes)
21,25c21
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       total_out_lo32;
21,25c21
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       int ;
21,26c21
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_in_hi32unsigned int total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *;
23,28c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outvoid *state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       *state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int ;
24,30c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_outvoid *(*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *(*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32bzalloc)(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       )(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32*,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int,int);
(90.4 %, 19634 bytes)
25,26c25
<       unsigned (*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       unsigned void (*bzfree)(void *,void *);
25,26c25
<       unsigned (*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       unsigned ((*bzfree)(void *,void *);
25,26c25
<       unsigned (*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       unsigned (**bzfree)(void *,void *);
25,26c25
<       unsigned (*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       unsigned (*bzallocbzfree)(void *,void *);
25,26c25
<       unsigned (*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       unsigned (*bzalloc))(void *,void *);
(90.4 %, 19596 bytes)
25,26c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (*opaque;
25,26c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**;
25,27c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       unsigned (**bzfree} 
25,28c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)bz_stream;
25,28c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)(;
25,32c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void #include <stdio.h>
25,32c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *include <stdio.h>
25,32c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,<stdio.h>
25,32c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void stdio.h>
25,32c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void *.h>
25,32c25
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void *)h>
26,32c26
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       >
26,34c26
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void #   define BZ_API(func) func
26,34c26
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *define BZ_API(func) func
26,34c26
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaqueBZ_API(func) func
27,34c27
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
28,34c28
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func) func
28,34c28
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream) func
32,34c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func
32,35c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> ##   define BZ_EXTERN extern
32,35c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include define BZ_EXTERN extern
32,35c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <BZ_EXTERN extern
32,35c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioextern
32,40c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
32,40c32
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.hint BZ_API(BZ2_bzCompressInit) ( 
34,40c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_API(BZ2_bzCompressInit) ( 
34,40c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   (BZ2_bzCompressInit) ( 
34,40c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ2_bzCompressInit) ( 
34,40c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API) ( 
34,40c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(( 
34,41c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(funcbz_stream* strm, 
34,41c34
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(func) * strm, 
35,41c35
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> strm, 
35,41c35
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   , 
35,42c35
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define int        blockSize100k, 
35,42c35
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_EXTERN blockSize100k, 
40,42c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> , 
40,43c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int        verbosity, 
40,43c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int verbosity, 
40,43c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int BZ_API, 
40,44c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_API(int        workFactor 
40,44c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
40,45c40
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) );
41,45c41
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       ;
41,47c41
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_streamBZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
41,47c41
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* int BZ_API(BZ2_bzCompress) ( 
41,47c41
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* strmBZ_API(BZ2_bzCompress) ( 
42,47c42
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       (BZ2_bzCompress) ( 
42,47c42
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        BZ2_bzCompress) ( 
(90.5 %, 19488 bytes)
41,45c41
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
---
>    int action 
41,45c41
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
---
>    )action 
43,46c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> );
43,46c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN ;
43,48c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
43,48c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIint BZ_API(BZ2_bzCompressEnd) ( 
43,48c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ_API(BZ2_bzCompressEnd) ( 
43,48c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress(BZ2_bzCompressEnd) ( 
43,48c43
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) BZ2_bzCompressEnd) ( 
44,48c44
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       ) ( 
(90.5 %, 19412 bytes)
43,49c43
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
45,49c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> int BZ_API(BZ2_bzDecompressInit) ( 
45,49c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzDecompressInit) ( 
(90.6 %, 19329 bytes)
45,48c45
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
> int       small
45,48c45
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
> int small
45,49c45
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> int BZ_API);
45,49c45
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> int BZ_API(;
45,51c45
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> int BZ_API(BZ2_bzDecompressInitBZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
45,51c45
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> int BZ_API(BZ2_bzDecompressInit) int BZ_API(BZ2_bzDecompress) ( 
46,51c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       BZ_API(BZ2_bzDecompress) ( 
46,51c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream (BZ2_bzDecompress) ( 
46,51c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *BZ2_bzDecompress) ( 
46,51c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *strm) ( 
47,51c47
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       ( 
47,52c47
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       int       bz_stream* strm 
47,52c47
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       int       verbosity* strm 
48,52c48
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       strm 
48,53c48
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>       int       );
49,53c49
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>    ;
49,55c49
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
51,55c51
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> int BZ_API(BZ2_bzDecompressEnd) ( 
(90.6 %, 19248 bytes)
48,52c48
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
>       int       ;
48,58c48
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       )#define BZ_MAX_UNUSED 5000
50,58c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
50,58c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN BZ_MAX_UNUSED 5000
50,58c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int 5000
50,60c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APItypedef void BZFILE;
50,60c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(void BZFILE;
50,60c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEndBZFILE;
50,60c50
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ;
51,62c51
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
51,62c51
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream BZFILE* BZ_API(BZ2_bzReadOpen) ( 
51,62c51
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream ** BZ_API(BZ2_bzReadOpen) ( 
52,62c52
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    BZ_API(BZ2_bzReadOpen) ( 
52,62c52
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )(BZ2_bzReadOpen) ( 
58,62c58
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
58,62c58
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #) ( 
58,62c58
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ( 
58,63c58
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED int*  bzerror,   
60,63c60
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
60,63c60
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef bzerror,   
60,63c60
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void ,   
60,64c60
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEFILE* f, 
62,64c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> * f, 
62,64c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN f, 
62,64c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
62,65c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* int   verbosity, 
62,65c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIverbosity, 
62,65c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
62,66c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenint   small,
62,66c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) small,
63,66c63
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
63,67c63
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intvoid* unused,    
63,67c63
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  * unused,    
63,67c63
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorunused,    
64,67c64
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
64,68c64
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILEint   nUnused 
64,68c64
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* nUnused 
64,69c64
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* f);
65,69c65
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
65,71c65
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
65,71c65
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzReadClose) ( 
66,71c66
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       BZ_API(BZ2_bzReadClose) ( 
66,71c66
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   (BZ2_bzReadClose) ( 
66,71c66
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   smallBZ2_bzReadClose) ( 
67,71c67
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       ) ( 
67,71c67
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void( 
67,72c67
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* int*    bzerror, 
67,72c67
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* unused*    bzerror, 
68,72c68
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       bzerror, 
68,72c68
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       int   , 
69,73c69
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    BZFILE* b 
69,73c69
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    )* b 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> b 
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN );
71,74c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void ;
71,76c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
71,76c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(void BZ_API(BZ2_bzReadGetUnused) ( 
71,76c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadCloseBZ_API(BZ2_bzReadGetUnused) ( 
71,76c71
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) (BZ2_bzReadGetUnused) ( 
(90.6 %, 19176 bytes)
71,75c71
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void * b, 
73,75c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
73,75c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void void**  unused,  
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API**  unused,  
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(*  unused,  
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedunused,  
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ,  
74,76d73
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
74,76d73
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
74,76d73
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
74,78c74
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror);
75,78c75
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
75,80c75
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILEBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
75,80c75
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* int BZ_API(BZ2_bzRead) ( 
75,80c75
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bBZ_API(BZ2_bzRead) ( 
76,80c76
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       (BZ2_bzRead) ( 
76,80c76
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       voidBZ2_bzRead) ( 
76,80c76
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*) ( 
76,80c76
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  ( 
76,81c76
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  unusedint*    bzerror, 
77,81c77
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
77,81c77
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       intbzerror, 
77,81c77
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       int*    , 
78,82c78
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    BZFILE* b, 
78,82c78
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )* b, 
80,82c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
80,82c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
80,83c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int void*   buf, 
80,83c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API*   buf, 
80,83c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(buf, 
80,83c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead, 
80,84c80
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) int     len 
81,84c81
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
81,85c81
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int);
81,85c81
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    ;
81,87c81
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    bzerrorBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
82,87c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
82,87c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
82,87c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
82,87c82
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* b(BZ2_bzWriteOpen) ( 
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ2_bzWriteOpen) ( 
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void) ( 
83,87c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   ( 
83,88c83
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void*   bufint*  bzerror,      
84,88c84
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       *  bzerror,      
84,88c84
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int     bzerror,      
85,88c85
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ,      
85,89c85
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )FILE* f, 
87,89c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> * f, 
87,89c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN f, 
87,89c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
87,90c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* int   blockSize100k, 
87,90c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIblockSize100k, 
87,90c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
87,91c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity, 
87,91c87
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) verbosity, 
88,91c88
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
88,92c88
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intint   workFactor 
88,92c88
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  workFactor 
88,93c88
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror);
89,93c89
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
89,95c89
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILEBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
89,95c89
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* void BZ_API(BZ2_bzWrite) ( 
89,95c89
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fBZ_API(BZ2_bzWrite) ( 
90,95c90
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       (BZ2_bzWrite) ( 
90,95c90
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ2_bzWrite) ( 
90,95c90
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100k) ( 
91,95c91
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ( 
91,96c91
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   int*    bzerror, 
91,96c91
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   verbosity*    bzerror, 
92,96c92
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       bzerror, 
92,96c92
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   , 
93,97c93
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    BZFILE* b, 
93,97c93
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )* b, 
95,97c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
95,97c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
95,98c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void void*   buf, 
95,98c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API*   buf, 
95,98c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(buf, 
95,98c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, 
95,99c95
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) int     len 
96,99c96
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
96,100c96
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int);
96,100c96
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    ;
96,102c96
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    bzerrorBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
97,102c97
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
97,102c97
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEBZ_API(BZ2_bzWriteClose) ( 
97,102c97
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* (BZ2_bzWriteClose) ( 
97,102c97
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* bBZ2_bzWriteClose) ( 
98,102c98
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       ) ( 
98,102c98
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void( 
98,103c98
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   int*          bzerror, 
98,103c98
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   buf*          bzerror, 
99,103c99
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       bzerror, 
99,103c99
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       int     , 
100,104c100
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
100,104c100
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
102,104c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
102,104c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
102,105c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
102,105c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
102,105c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
102,106c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in, 
102,106c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int* nbytes_in, 
103,106c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
103,106c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intnbytes_in, 
103,106c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          , 
103,107c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerrorunsigned int* nbytes_out 
104,107c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
104,107c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE* nbytes_out 
104,107c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       nbytes_out 
104,108c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       b);
105,108c105
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       ;
105,110c105
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
105,110c105
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonvoid BZ_API(BZ2_bzWriteClose64) ( 
106,110c106
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_API(BZ2_bzWriteClose64) ( 
106,110c106
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned (BZ2_bzWriteClose64) ( 
106,110c106
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ2_bzWriteClose64) ( 
106,110c106
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ) ( 
106,110c106
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in( 
107,110d106
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
107,111c107
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
107,111c107
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
107,111c107
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* , 
108,112c108
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
108,112c108
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
110,112c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
110,112c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
110,113c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
110,113c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
110,113c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
110,114c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32, 
110,114c110
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) int* nbytes_in_lo32, 
111,114c111
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
111,114c111
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intnbytes_in_lo32, 
111,114c111
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          , 
111,115c111
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerrorunsigned int* nbytes_in_hi32, 
112,115c112
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
112,115c112
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE* nbytes_in_hi32, 
112,115c112
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       nbytes_in_hi32, 
113,115d112
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
113,115d112
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
113,116c113
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           int* nbytes_out_lo32, 
113,116c113
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandon* nbytes_out_lo32, 
114,116c114
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
114,116c114
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
114,117c114
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
114,117c114
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
114,117c114
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32* nbytes_out_hi32
115,117c115
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
115,118c115
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
115,118c115
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
115,123c115
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
115,123c115
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32int BZ_API(BZ2_bzBuffToBuffCompress) ( 
116,123c116
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffCompress) ( 
116,123c116
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned (BZ2_bzBuffToBuffCompress) ( 
116,123c116
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ2_bzBuffToBuffCompress) ( 
116,123c116
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ) ( 
116,123c116
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32( 
117,123d116
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
117,124c117
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned *         dest, 
117,124c117
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned intdest, 
117,124c117
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* , 
118,125c118
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
118,125c118
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
123,125c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
123,125c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
123,125c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompresssource, 
123,126c123
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) , 
124,126d123
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
124,127c124
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
124,127c124
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
124,127c124
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
125,127d124
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
125,128c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned blockSize100k, 
125,128c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int, 
125,129c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* int           verbosity, 
125,129c125
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenverbosity, 
126,129c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
126,130c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       charint           workFactor 
126,130c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         workFactor 
126,131c126
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         source);
127,131c127
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
127,133c127
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
127,133c127
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
127,133c127
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ_API(BZ2_bzBuffToBuffDecompress) ( 
128,133c128
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
128,133c128
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
128,133c128
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k) ( 
129,133c129
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
129,134c129
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           char*         dest, 
129,134c129
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbosity*         dest, 
130,134c130
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       dest, 
130,134c130
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           , 
131,135c131
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
131,135c131
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
133,135c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
133,135c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
133,135c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
133,136c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
133,136c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
133,136c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
133,136c133
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) , 
134,136d133
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
134,137c134
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
134,137c134
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
134,137c134
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
135,137d134
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
135,138c135
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned small, 
135,138c135
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int, 
135,139c135
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* int           verbosity 
135,139c135
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* destLenverbosity 
136,140c136
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
136,140c136
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       char;
136,145c136
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
136,145c136
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         sourceconst char * BZ_API(BZ2_bzlibVersion) (
137,145c137
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char * BZ_API(BZ2_bzlibVersion) (
137,145c137
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned * BZ_API(BZ2_bzlibVersion) (
137,145c137
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ_API(BZ2_bzlibVersion) (
137,145c137
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen(BZ2_bzlibVersion) (
138,145c138
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ2_bzlibVersion) (
138,145c138
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           ) (
138,145c138
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           small(
139,145d138
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
139,147c139
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           );
140,147c140
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>    ;
140,149c140
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
145,149c145
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZFILE * BZ_API(BZ2_bzopen) (
(90.7 %, 19091 bytes)
139,142c139
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           path,
139,142c139
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           ),
141,143c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> const char *mode
141,143c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN char *mode
141,143c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE *mode
141,143c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * mode
141,144c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API);
141,144c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(;
141,146c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenBZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
141,146c141
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZFILE * BZ_API(BZ2_bzdopen) (
142,146c142
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       * BZ_API(BZ2_bzdopen) (
142,146c142
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const BZ_API(BZ2_bzdopen) (
142,146c142
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char (BZ2_bzdopen) (
142,146c142
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *BZ2_bzdopen) (
142,146c142
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *path) (
143,146c143
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (
143,147c143
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const int        fd,
143,147c143
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char fd,
143,147c143
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char *,
144,148c144
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    const char *mode
144,148c144
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    )char *mode
146,148c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> *mode
146,148c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN mode
146,149c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE );
146,149c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * ;
146,151c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN int BZ_API(BZ2_bzread) (
146,151c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(int BZ_API(BZ2_bzread) (
146,151c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopenBZ_API(BZ2_bzread) (
146,151c146
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (BZ2_bzread) (
147,151c147
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       BZ2_bzread) (
147,151c147
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       int        ) (
147,151c147
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       int        fd(
148,151d147
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
148,152c148
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>       const * b, 
148,152c148
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>       const char b, 
148,152c148
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>       const char *, 
149,153c149
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
>    void* buf, 
149,153c149
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
>    )* buf, 
151,153c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> buf, 
151,153c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN , 
151,154c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN int int len 
151,154c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN int BZ_APIlen 
151,155c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API();
151,155c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzread;
151,157c151
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) BZ_EXTERN int BZ_API(BZ2_bzwrite) (
152,157c152
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       int BZ_API(BZ2_bzwrite) (
152,157c152
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILEBZ_API(BZ2_bzwrite) (
152,157c152
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* (BZ2_bzwrite) (
152,157c152
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* bBZ2_bzwrite) (
153,157c153
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       ) (
(90.7 %, 19023 bytes)
151,155c151
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(void*   buf, 
151,155c151
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API()*   buf, 
153,155c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> buf, 
153,155c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN , 
153,156c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int int     len 
153,156c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_APIlen 
153,157c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API();
153,157c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite;
153,159c153
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) BZ_EXTERN int BZ_API(BZ2_bzflush) (
154,159c154
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       int BZ_API(BZ2_bzflush) (
154,159c154
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILEBZ_API(BZ2_bzflush) (
154,159c154
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* (BZ2_bzflush) (
154,159c154
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* bBZ2_bzflush) (
155,159c155
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       ) (
(90.8 %, 18948 bytes)
153,157c153
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int BZ_API(;
153,159c153
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API()BZ_EXTERN void BZ_API(BZ2_bzclose) (
155,159c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> void BZ_API(BZ2_bzclose) (
155,159c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN BZ_API(BZ2_bzclose) (
155,159c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int (BZ2_bzclose) (
155,159c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_APIBZ2_bzclose) (
155,159c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API() (
155,159c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush(
155,160c155
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) BZFILE* b
(90.8 %, 18879 bytes)
155,159c155
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> char * BZ_API(BZ2_bzerror) (
155,159c155
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void * BZ_API(BZ2_bzerror) (
155,159c155
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_APIBZ_API(BZ2_bzerror) (
155,159c155
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_API((BZ2_bzerror) (
155,159c155
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror) (
155,159c155
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_API(BZ2_bzclose) ) (
156,159c156
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       (
156,160c156
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>       BZFILEBZFILE *b, 
156,160c156
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>       BZFILE* *b, 
157,160c157
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>    b, 
157,160c157
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>    ), 
159,161c159
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> int    *errnum
(90.8 %, 18822 bytes)
155,168c155
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror_BZLIB_PRIVATE_H
155,170c155
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror) #include <stdlib.h>
156,170c156
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       include <stdlib.h>
156,170c156
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE <stdlib.h>
156,170c156
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *stdlib.h>
156,170c156
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *b.h>
157,170c157
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       h>
157,170c157
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    >
157,175c157
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int    *#define BZ_VERSION  "1.0.2, 30-Dec-2001"
158,175c158
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    define BZ_VERSION  "1.0.2, 30-Dec-2001"
158,175c158
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    )BZ_VERSION  "1.0.2, 30-Dec-2001"
168,175c168
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> "1.0.2, 30-Dec-2001"
168,177c168
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #typedef char            Char;
168,177c168
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define char            Char;
170,177c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
170,177c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #;
170,178c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include typedef unsigned char   Bool;
170,178c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <unsigned char   Bool;
170,178c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlibchar   Bool;
170,178c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.Bool;
170,178c170
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.h;
175,178d174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
175,179c175
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #unsigned char   UChar;
175,179c175
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define char   UChar;
175,179c175
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  UChar;
177,179c177
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
177,180c177
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
177,180c177
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            int             Int32;
177,180c177
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            CharInt32;
178,180c178
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> ;
178,181c178
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef typedef unsigned int    UInt32;
178,181c178
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned unsigned int    UInt32;
178,181c178
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   int    UInt32;
178,181c178
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   BoolUInt32;
179,181c179
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
179,182c179
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef typedef short           Int16;
179,182c179
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned short           Int16;
179,182c179
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Int16;
180,182d179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
180,182d179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
180,182d179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
180,183c180
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             short  UInt16;
180,183c180
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32UInt16;
181,183c181
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> ;
181,185c181
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef #define True  ((Bool)1)
181,185c181
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned define True  ((Bool)1)
181,185c181
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    True  ((Bool)1)
181,185c181
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32((Bool)1)
182,185c182
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> (Bool)1)
182,185c182
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef Bool)1)
182,185c182
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           )1)
182,185c182
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int161)
183,185c183
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> )
183,186c183
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef #define False ((Bool)0)
183,186c183
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned define False ((Bool)0)
183,186c183
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  False ((Bool)0)
183,186c183
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16((Bool)0)
185,186c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
185,186c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
185,186c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
185,186c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
185,186c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
185,188c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((#define __inline__  
185,188c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Booldefine __inline__  
185,188c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)__inline__  
185,191c185
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define True  ((Bool)1#define AssertH(cond,errcode) \
186,191c186
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> define AssertH(cond,errcode) \
186,191c186
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #AssertH(cond,errcode) \
186,191c186
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define (cond,errcode) \
186,191c186
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False cond,errcode) \
186,191c186
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False (,errcode) \
(90.8 %, 18772 bytes)
186,188c186
< #define False cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define False \
186,190c186
< #define False cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define False cond#define VPrintf0(zf) \
(90.9 %, 18726 bytes)
186,189c186
< #define False \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define False )
188,189d187
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
(90.9 %, 18677 bytes)
186,188c186
< #define False )
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define False ,zf,za1)
187,188c187
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> zf,za1)
187,188c187
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #,za1)
187,188c187
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define za1)
(90.9 %, 18631 bytes)
186,187c186
< #define False ,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define False za2) \
186,187c186
< #define False ,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define False ,) \
(90.9 %, 18598 bytes)
186,188c186
< #define False za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define False #define VPrintf3(zf,za1,za2,za3) \
186,188c186
< #define False za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define False za2define VPrintf3(zf,za1,za2,za3) \
(90.9 %, 18561 bytes)
186,187c186
< #define False #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define False fprintf(stderr,zf,za1,za2,za3)
186,187c186
< #define False #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define False #(stderr,zf,za1,za2,za3)
(91.0 %, 18523 bytes)
186,187c186
< #define False fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define False define VPrintf4(zf,za1,za2,za3,za4) \
186,187c186
< #define False fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define False fprintfVPrintf4(zf,za1,za2,za3,za4) \
(91.0 %, 18491 bytes)
186c186
< #define False define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define False \
186,187c186
< #define False define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define False define fprintf(stderr,zf,za1,za2,za3,za4)
(91.0 %, 18455 bytes)
186,187c186
< #define False \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define False za4)
187c187
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    )
187,188c187
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
>    fprintf#define VPrintf5(zf,za1,za2,za3,za4,za5) \
(91.0 %, 18420 bytes)
186,187c186
< #define False za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define False ,za4,za5) \
186,187c186
< #define False za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define False za4za4,za5) \
(91.0 %, 18384 bytes)
186,187c186
< #define False ,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define False ,za2,za3,za4,za5)
186,187c186
< #define False ,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define False ,za2,za3,za4,za5)
(91.0 %, 18348 bytes)
186,189c186
< #define False ,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
186,189c186
< #define False ,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False ,) (strm->bzalloc)(strm->opaque,(nnn),1)
186,189c186
< #define False ,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False ,za2(strm->bzalloc)(strm->opaque,(nnn),1)
(91.1 %, 18312 bytes)
186c186
< #define False nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False nnn),1)
186c186
< #define False nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False nnn),1)
186c186
< #define False nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define False nnn) ,1)
(91.1 %, 18277 bytes)
186,187c186
< #define False nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False ->bzfree)(strm->opaque,(ppp))
186,187c186
< #define False nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define False nnnbzfree)(strm->opaque,(ppp))
(91.1 %, 18243 bytes)
186,191c186
< #define False ->bzfree)(strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
---
> #define False define BZ_HDR_B 0x42   
186,191c186
< #define False ->bzfree)(strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
---
> #define False ->BZ_HDR_B 0x42   
186,191c186
< #define False ->bzfree)(strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
---
> #define False ->bzfree0x42   
(91.1 %, 18208 bytes)
186,189c186
< #define False define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define False BZ_HDR_0 0x30   
186,189c186
< #define False define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define False define 0x30   
(91.2 %, 18126 bytes)
186,193c186
< #define False BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define False 0
186,194c186
< #define False BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define False BZ_HDR_0 #define BZ_RUNB 1
190,194c190
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> define BZ_RUNB 1
190,194c190
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #BZ_RUNB 1
190,194c190
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define 1
190,196c190
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE #define BZ_N_GROUPS 6
191,196c191
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> define BZ_N_GROUPS 6
191,196c191
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #BZ_N_GROUPS 6
191,196c191
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define 6
191,197c191
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
193,197c193
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   50
193,197c193
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #BZ_G_SIZE   50
193,197c193
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define 50
193,198c193
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA #define BZ_N_ITERS  4
194,198c194
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  4
194,198c194
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #BZ_N_ITERS  4
194,198c194
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define 4
194,200c194
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_RUNB #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
196,200c196
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
196,200c196
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
196,200c196
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define (2 + (900000 / BZ_G_SIZE))
196,200c196
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_GROUPS 2 + (900000 / BZ_G_SIZE))
197,200c197
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> + (900000 / BZ_G_SIZE))
197,200c197
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #(900000 / BZ_G_SIZE))
197,200c197
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define 900000 / BZ_G_SIZE))
197,200c197
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_G_SIZE   / BZ_G_SIZE))
198,200c198
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> BZ_G_SIZE))
198,200c198
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #))
198,200c198
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define )
198,208c198
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_N_ITERS  #define BZ_RAND_DECLS                          \
200,208c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
200,208c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #BZ_RAND_DECLS                          \
200,208c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define \
200,209c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS Int32 rNToGo;                               \
200,209c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (rNToGo;                               \
200,209c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 ;                               \
200,209c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + \
200,210c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (Int32 rTPos                                 \
200,210c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 rTPos                                 \
200,210c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / \
200,212c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE#define BZ_RAND_INIT_MASK                      \
200,212c200
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE)define BZ_RAND_INIT_MASK                      \
208,212c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> BZ_RAND_INIT_MASK                      \
208,212c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #\
208,213c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define s->rNToGo = 0;                              \
208,213c208
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          ->rNToGo = 0;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    rNToGo = 0;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 = 0;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo0;                              \
209,213c209
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo;                               ;                              \
210,213c210
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    \
210,214c210
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 s->rTPos  = 0                               \
210,214c210
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 ->rTPos  = 0                               \
212,214c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> rTPos  = 0                               \
212,214c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #= 0                               \
212,214c212
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #define 0                               \
213,214d212
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
213,216c213
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>    #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
213,216c213
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
>    sdefine BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
(91.2 %, 18028 bytes)
212,214c212
< #define BZ_RAND_INIT_MASK                      \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_INIT_MASK                      1 : 0)
214c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> : 0)
214c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #0)
214c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define )
214,216c214
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
---
> #define BZ_RAND_MASK #define BZ_RAND_UPD_MASK                       \
(91.2 %, 17984 bytes)
212,215c212
< #define BZ_RAND_INIT_MASK                      1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_INIT_MASK                      == 0)                                            \
212,215c212
< #define BZ_RAND_INIT_MASK                      1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_INIT_MASK                      1 0)                                            \
(91.3 %, 17910 bytes)
212,221c212
< #define BZ_RAND_INIT_MASK                      == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_RAND_INIT_MASK                      crcVar)              \
212,221c212
< #define BZ_RAND_INIT_MASK                      == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_RAND_INIT_MASK                      == )              \
212,221c212
< #define BZ_RAND_INIT_MASK                      == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_RAND_INIT_MASK                      == 0\
(91.3 %, 17810 bytes)
212,218c212
< #define BZ_RAND_INIT_MASK                      crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_RAND_INIT_MASK                      (crcVar,cha)              \
212,218c212
< #define BZ_RAND_INIT_MASK                      crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_RAND_INIT_MASK                      crcVarcrcVar,cha)              \
(91.4 %, 17713 bytes)
212,220c212
< #define BZ_RAND_INIT_MASK                      (crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      2
212,221c212
< #define BZ_RAND_INIT_MASK                      (crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_INIT_MASK                      (#define BZ_M_FLUSHING  3
212,221c212
< #define BZ_RAND_INIT_MASK                      (crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_INIT_MASK                      (crcVardefine BZ_M_FLUSHING  3
(91.4 %, 17631 bytes)
212,217c212
< #define BZ_RAND_INIT_MASK                      2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_RAND_INIT_MASK                      #define BZ_S_INPUT     2
213,217c213
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> define BZ_S_INPUT     2
213,217c213
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #BZ_S_INPUT     2
213,217c213
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define 2
213,219c213
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_FLUSHING  #define BZ_N_RADIX 2
(91.4 %, 17553 bytes)
212,216c212
< #define BZ_RAND_INIT_MASK                      #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_RAND_INIT_MASK                      define BZ_N_SHELL 18
212,216c212
< #define BZ_RAND_INIT_MASK                      #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_RAND_INIT_MASK                      #BZ_N_SHELL 18
(91.5 %, 17483 bytes)
212,213c212
< #define BZ_RAND_INIT_MASK                      define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_RAND_INIT_MASK                      2)
212,213c212
< #define BZ_RAND_INIT_MASK                      define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_RAND_INIT_MASK                      define )
(91.5 %, 17399 bytes)
212,227c212
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_RAND_INIT_MASK                      state;
212,227c212
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_RAND_INIT_MASK                      2;
219,230c219
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> UInt32   avail_in_expect;
220,230c220
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    avail_in_expect;
220,230c220
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    struct ;
222,232d221
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
222,233c222
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream*  arr1;
222,233c222
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* arr1;
(91.6 %, 17270 bytes)
222,225c222
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       origPtr;
222,225c222
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32;
222,228c222
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  UInt32*  ptr;
222,228c222
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  arr1*  ptr;
223,228c223
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       ptr;
223,228c223
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32;
(91.6 %, 17197 bytes)
222,228c222
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32UChar*   zbits;
225,228c225
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       *   zbits;
225,228c225
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32zbits;
225,228c225
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  ;
225,231c225
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UInt32*  ptrInt32    workFactor;
226,231c226
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       workFactor;
226,231c226
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UChar;
226,234c226
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UChar*   UInt32   state_in_ch;
226,234c226
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UChar*   blockstate_in_ch;
(91.7 %, 17110 bytes)
226,235c226
<       UChar;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       UCharnblockMAX;
229,235c229
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       ;
229,236c229
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt32   Int32    numZ;
229,236c229
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt32   state_in_chnumZ;
(91.7 %, 16983 bytes)
229,235c229
<       ;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       256];
230,235c230
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       ];
230,235c230
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    ;
230,236c230
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    numZUChar    unseqToSeq[256];
231,236c231
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       unseqToSeq[256];
231,236c231
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    [256];
231,236c231
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    state_out_pos256];
234,236c234
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       ];
234,236c234
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    ;
(91.8 %, 16891 bytes)
230,238c230
<       Int32    ;
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       Int32    UInt32   blockCRC;
231,238c231
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       blockCRC;
231,238c231
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       UChar    ;
231,239c231
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeqUInt32   combinedCRC;
231,239c231
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeq[combinedCRC;
231,239c231
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeq[256;
231,242c231
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar    unseqToSeq[256]Int32    verbosity;
234,242c234
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       verbosity;
234,242c234
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UInt32   ;
(91.8 %, 16789 bytes)
231,240c231
<       UChar    ;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       UChar    Int32    nMTF;
232,240c232
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       nMTF;
232,240c232
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       UInt32   ;
232,241c232
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   combinedCRCInt32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
235,241c235
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       mtfFreq    [BZ_MAX_ALPHA_SIZE];
235,241c235
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_MAX_ALPHA_SIZE];
235,241c235
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    verbosityBZ_MAX_ALPHA_SIZE];
236,241c236
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       ];
236,241c236
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
(91.9 %, 16661 bytes)
232,235c232
<       UInt32   ;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UInt32   UChar    selectorMtf[BZ_MAX_SELECTORS];
233,235c233
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       selectorMtf[BZ_MAX_SELECTORS];
233,235c233
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    [BZ_MAX_SELECTORS];
233,235c233
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    BZ_MAX_SELECTORS];
233,235c233
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [];
233,235c233
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE;
233,237c233
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE]UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
234,237c234
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
234,237c234
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
234,237c234
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
234,237c234
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [][BZ_MAX_ALPHA_SIZE];
234,237c234
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_SELECTORS[BZ_MAX_ALPHA_SIZE];
234,237c234
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_SELECTORS]BZ_MAX_ALPHA_SIZE];
235,237c235
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ];
235,237c235
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ;
235,238c235
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selectorMtfInt32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
235,238c235
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selectorMtf[code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
235,238c235
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selectorMtf[BZ_MAX_SELECTORS[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
235,238c235
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selectorMtf[BZ_MAX_SELECTORS]BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
237,238c237
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ][BZ_MAX_ALPHA_SIZE];
237,238c237
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    [BZ_MAX_ALPHA_SIZE];
237,238c237
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len     BZ_MAX_ALPHA_SIZE];
(91.9 %, 16574 bytes)
235,237c235
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
236,237c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ][BZ_MAX_ALPHA_SIZE];
236,237c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_MAX_ALPHA_SIZE];
236,237c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    code    BZ_MAX_ALPHA_SIZE];
236,237c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    code    [];
236,237c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    code    [BZ_N_GROUPS;
236,239c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    code    [BZ_N_GROUPS]UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
236,239c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    code    [BZ_N_GROUPS][len_pack[BZ_MAX_ALPHA_SIZE][4];
236,239c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE[BZ_MAX_ALPHA_SIZE][4];
236,239c236
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]BZ_MAX_ALPHA_SIZE][4];
237,239c237
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       ][4];
237,239c237
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    [4];
237,239c237
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    rfreq   4];
237,239c237
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    rfreq   [];
237,239c237
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       Int32    rfreq   [BZ_N_GROUPS;
237,241c237
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>       Int32    rfreq   [BZ_N_GROUPS]}
(92.0 %, 16490 bytes)
237,261c237
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    rfreq   [BZ_X_OUTPUT      2
237,261c237
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    rfreq   []2
239,263c239
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    #define BZ_X_MAGIC_1     10
240,263c240
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    define BZ_X_MAGIC_1     10
240,263c240
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    EStateBZ_X_MAGIC_1     10
248,263c248
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> 10
250,263d249
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> define BZ_X_MAGIC_2     11
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> #BZ_X_MAGIC_2     11
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> #define 11
260,265c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_IDLE        #define BZ_X_MAGIC_3     12
(92.0 %, 16396 bytes)
250,253c250
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> define BZ_X_BLKHDR_1    14
250,253c250
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #BZ_X_BLKHDR_1    14
250,253c250
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #define 14
250,254c250
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
251,254c251
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> define BZ_X_BLKHDR_2    15
251,254c251
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #BZ_X_BLKHDR_2    15
251,254c251
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define 15
251,255c251
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_MAGIC_3     #define BZ_X_BLKHDR_3    16
(92.0 %, 16309 bytes)
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_2     #BZ_X_BLKHDR_5    18
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_2     #define 18
(92.1 %, 16224 bytes)
250,253c250
< #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_MAGIC_2     BZ_X_BCRC_2      21
250,253c250
< #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_MAGIC_2     define 21
(92.1 %, 16133 bytes)
250,253c250
< #define BZ_X_MAGIC_2     BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_MAGIC_2     24
250,254c250
< #define BZ_X_MAGIC_2     BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_MAGIC_2     BZ_X_BCRC_2      #define BZ_X_ORIGPTR_1   25
251,254c251
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
---
> define BZ_X_ORIGPTR_1   25
(92.2 %, 16032 bytes)
250,254c250
< #define BZ_X_MAGIC_2     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
251,254c251
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> define BZ_X_MAPPING_1   28
251,254c251
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #BZ_X_MAPPING_1   28
251,254c251
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #define 28
251,255c251
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_ORIGPTR_1   #define BZ_X_MAPPING_2   29
(92.2 %, 15945 bytes)
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_2     #BZ_X_SELECTOR_2  31
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_2     #define 31
(92.3 %, 15860 bytes)
250,253c250
< #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
---
> #define BZ_X_MAGIC_2     BZ_X_CODING_2    34
250,253c250
< #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
---
> #define BZ_X_MAGIC_2     define 34
(92.3 %, 15769 bytes)
250,253c250
< #define BZ_X_MAGIC_2     BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MAGIC_2     37
250,254c250
< #define BZ_X_MAGIC_2     BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MAGIC_2     BZ_X_CODING_2    #define BZ_X_MTF_3       38
(92.4 %, 15668 bytes)
250,254c250
< #define BZ_X_MAGIC_2     37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MAGIC_2     #define BZ_X_MTF_6       41
251,254c251
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> define BZ_X_MTF_6       41
251,254c251
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #BZ_X_MTF_6       41
251,254c251
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #define 41
251,255c251
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_MTF_3       #define BZ_X_ENDHDR_2    42
(92.4 %, 15581 bytes)
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
250,253c250
< #define BZ_X_MAGIC_2     #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_MAGIC_2     #BZ_X_ENDHDR_4    44
(92.4 %, 15496 bytes)
250,253c250
< #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_MAGIC_2     BZ_X_CCRC_1      47
250,253c250
< #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_MAGIC_2     define 47
250,254c250
< #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    #define BZ_X_CCRC_2      48
(92.5 %, 15405 bytes)
250,253c250
< #define BZ_X_MAGIC_2     BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_MAGIC_2     50
250,259c250
< #define BZ_X_MAGIC_2     BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_2     BZ_X_CCRC_1      #define MTFA_SIZE 4096
251,259c251
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
251,259c251
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #MTFA_SIZE 4096
251,259c251
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define 4096
251,260c251
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define BZ_X_CCRC_2      #define MTFL_SIZE 16
252,260c252
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> define MTFL_SIZE 16
(92.5 %, 15304 bytes)
250,266c250
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_X_MAGIC_2     * strm;
256,266c256
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> strm;
256,266c256
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #;
256,269c256
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define Int32    state;
256,269c256
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define MTFA_SIZE state;
257,269c257
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> ;
257,272c257
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #UChar    state_out_ch;
257,272c257
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define state_out_ch;
257,272c257
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFL_SIZE ;
263,273c263
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> Int32    state_out_len;
264,273c264
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>    state_out_len;
264,273c264
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>    struct ;
266,273d265
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
266,274c266
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       bz_streamblockRandomised;
266,274c266
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       bz_stream* ;
266,275c266
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_stream* strmBZ_RAND_DECLS;
(92.6 %, 15184 bytes)
266,274c266
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       ;
266,275c266
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       Bool     Bool     smallDecompress;
266,275c266
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       Bool     blockRandomisedsmallDecompress;
(92.7 %, 15047 bytes)
266,272d265
<       ;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
267,273c267
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
---
>       tPos;
267,273c267
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
---
>       Bool     ;
(92.7 %, 14921 bytes)
266,269c266
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
---
>       nblock_used;
266,269c266
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
---
>       UInt32   ;
266,270c266
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
---
>       UInt32   tPosInt32    cftab[257];
267,270c267
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
---
>       cftab[257];
267,270c267
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
---
>       Int32    [257];
267,270c267
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
---
>       Int32    k0257];
268,270c268
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
---
>       ];
268,270c268
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
---
>       Int32    ;
(92.8 %, 14841 bytes)
266,271c266
<       UInt32   ;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       UInt32   UInt32   *tt;
267,271c267
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       *tt;
267,271c267
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       Int32    tt;
267,271c267
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       Int32    cftab;
(92.8 %, 14774 bytes)
267,275c267
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       Int32    UInt32   storedCombinedCRC;
267,275c267
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       Int32    ttstoredCombinedCRC;
270,275c270
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       ;
(92.8 %, 14667 bytes)
267,273c267
<       Int32    ttstoredCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    ttstoredCombinedCRC256];
268,273c268
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       ];
268,273c268
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       UInt32   ;
268,274c268
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   calculatedBlockCRCBool     inUse16[16];
269,274c269
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       inUse16[16];
269,274c269
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   [16];
269,274c269
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   calculatedCombinedCRC16];
272,274c272
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       ];
272,274c272
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       Int32    ;
(92.9 %, 14553 bytes)
268,273c268
<       UInt32   ;
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UInt32   UChar    mtfa   [MTFA_SIZE];
269,273c269
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       mtfa   [MTFA_SIZE];
269,273c269
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       Bool     [MTFA_SIZE];
269,273c269
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       Bool     inUse16MTFA_SIZE];
269,273c269
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       Bool     inUse16[];
269,273c269
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       Bool     inUse16[16;
269,274c269
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Bool     inUse16[16]Int32    mtfbase[256 / MTFL_SIZE];
270,274c270
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       mtfbase[256 / MTFL_SIZE];
270,274c270
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    [256 / MTFL_SIZE];
270,274c270
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseq256 / MTFL_SIZE];
270,274c270
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseq[/ MTFL_SIZE];
270,274c270
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseq[256MTFL_SIZE];
270,274c270
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseq[256]];
273,274c273
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       ;
273,275c273
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    UChar    selector   [BZ_MAX_SELECTORS];
273,275c273
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   selector   [BZ_MAX_SELECTORS];
273,275c273
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [[BZ_MAX_SELECTORS];
273,275c273
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZEBZ_MAX_SELECTORS];
273,275c273
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE]];
274,275c274
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       ;
(92.9 %, 14485 bytes)
273,275d272
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
274,276c274
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
274,276c274
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
274,276c274
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
274,276c274
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [][BZ_MAX_ALPHA_SIZE];
274,276c274
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_SELECTORS[BZ_MAX_ALPHA_SIZE];
274,276c274
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_SELECTORS]BZ_MAX_ALPHA_SIZE];
275,276c275
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ];
(93.0 %, 14385 bytes)
273,275c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ][BZ_MAX_ALPHA_SIZE];
273,275c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    [BZ_MAX_ALPHA_SIZE];
273,275c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  BZ_MAX_ALPHA_SIZE];
273,275c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [];
273,275c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS;
273,276c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS]Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
273,276c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS][base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
273,276c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
273,276c273
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
275,276c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ][BZ_MAX_ALPHA_SIZE];
275,276c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_MAX_ALPHA_SIZE];
275,276c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  BZ_MAX_ALPHA_SIZE];
275,276c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [];
275,276c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS;
275,277c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS]Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
275,277c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS][perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
275,277c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
275,277c275
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
276,277c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ][BZ_MAX_ALPHA_SIZE];
276,277c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_MAX_ALPHA_SIZE];
276,277c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   BZ_MAX_ALPHA_SIZE];
276,277c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   [];
276,277c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   [BZ_N_GROUPS;
276,278c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    base   [BZ_N_GROUPS]Int32    minLens[BZ_N_GROUPS];
276,278c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    base   [BZ_N_GROUPS][minLens[BZ_N_GROUPS];
276,278c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE[BZ_N_GROUPS];
276,278c276
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]BZ_N_GROUPS];
277,278c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       ];
277,278c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
---
>       Int32    ;
277,281c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
---
>       Int32    perm   Int32    save_i;
277,281c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
---
>       Int32    perm   [save_i;
277,281c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
---
>       Int32    perm   [BZ_N_GROUPS;
277,282c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    perm   [BZ_N_GROUPS]Int32    save_j;
277,282c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    perm   [BZ_N_GROUPS][save_j;
277,282c277
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE;
(93.0 %, 14309 bytes)
277,284c277
<       Int32    ;
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
---
>       Int32    Int32    save_nGroups;
280,284c280
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
---
>       save_nGroups;
280,284c280
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
---
>       Int32    ;
280,285c280
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
---
>       Int32    save_iInt32    save_nSelectors;
281,285c281
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
---
>       save_nSelectors;
281,285c281
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
---
>       Int32    ;
(93.1 %, 14197 bytes)
280,285c280
<       Int32    ;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
---
>       Int32    Int32    save_nextSym;
281,285c281
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
---
>       save_nextSym;
281,285c281
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
---
>       Int32    ;
281,286c281
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
---
>       Int32    save_nSelectorsInt32    save_nblockMAX;
282,286c282
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
---
>       save_nblockMAX;
282,286c282
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
---
>       Int32    ;
(93.1 %, 14069 bytes)
281,286c281
<       Int32    ;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
---
>       Int32    Int32    save_curr;
282,286c282
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
---
>       save_curr;
282,286c282
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
---
>       Int32    ;
282,287c282
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
---
>       Int32    save_nblockMAXInt32    save_zt;
283,287c283
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
---
>       save_zt;
283,287c283
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
---
>       Int32    ;
(93.2 %, 13954 bytes)
282,287c282
<       Int32    ;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
---
>       Int32    Int32    save_gSel;
283,287c283
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
---
>       save_gSel;
283,287c283
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
---
>       Int32    ;
283,288c283
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
---
>       Int32    save_ztInt32    save_gMinlen;
284,288c284
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
---
>       save_gMinlen;
284,288c284
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
---
>       Int32    ;
(93.2 %, 13846 bytes)
283,287c283
<       Int32    ;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       Int32    *   save_gPerm;
284,287c284
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       save_gPerm;
284,287c284
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
---
>       Int32    ;
(93.3 %, 13749 bytes)
283,293c283
<       Int32    *   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32    s->tPos = s->tt[s->tPos];                 \
283,293c283
<       Int32    *   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32    *   ->tPos = s->tt[s->tPos];                 \
283,293c283
<       Int32    *   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32    *   save_gPermtPos = s->tt[s->tPos];                 \
285,293c285
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    = s->tt[s->tPos];                 \
286,293c286
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    s->tt[s->tPos];                 \
286,293c286
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DState->tt[s->tPos];                 \
292,293c292
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> tt[s->tPos];                 \
292,293c292
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #[s->tPos];                 \
292,293c292
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define s->tPos];                 \
292,293c292
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST->tPos];                 \
292,293c292
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST(tPos];                 \
(93.3 %, 13689 bytes)
292,293c292
< #define s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define ->tPos & 0xff);           \
292,293c292
< #define s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define stPos & 0xff);           \
292,293c292
< #define s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define s->& 0xff);           \
(93.3 %, 13640 bytes)
292,295c292
< #define stPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define stPos BZ_GET_FAST_C(cccc)                   \
292,295c292
< #define stPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define stPos & (cccc)                   \
(93.4 %, 13591 bytes)
292,294c292
< #define stPos BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
---
> #define stPos cccc = (UChar)(c_tPos & 0xff);            \
292,294c292
< #define stPos BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
---
> #define stPos BZ_GET_FAST_C= (UChar)(c_tPos & 0xff);            \
(93.4 %, 13499 bytes)
292,293c292
< #define stPos cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
---
> #define stPos >>= 8;
292,293c292
< #define stPos cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
---
> #define stPos cccc 8;
(93.4 %, 13444 bytes)
292,297c292
< #define stPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    
< 
< #define GET_LL4(i)                             \
---
> #define stPos define GET_LL4(i)                             \
292,297c292
< #define stPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    
< 
< #define GET_LL4(i)                             \
---
> #define stPos >>= GET_LL4(i)                             \
292,297c292
< #define stPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    
< 
< #define GET_LL4(i)                             \
---
> #define stPos >>= 8(i)                             \
(93.5 %, 13366 bytes)
292,293c292
< #define stPos define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define stPos s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
292,293c292
< #define stPos define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define stPos define ->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
292,293c292
< #define stPos define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define stPos define GET_LL4ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
(93.5 %, 13303 bytes)
292c292
< #define stPos s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define stPos (((i)  2) & 0x4)) & 0xF)
292c292
< #define stPos s->ll4[(i) >> 1])) >> (((i)  2) & 0x4)) & 0xF)
---
> #define stPos s((i)  2) & 0x4)) & 0xF)
(93.5 %, 13281 bytes)
292c292
< #define stPos (((i)  2) & 0x4)) & 0xF)
---
> #define stPos )
292,294c292
< #define stPos (((i)  2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define stPos (#define SET_LL(i,n)                          \
292,294c292
< #define stPos (((i)  2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define stPos ((define SET_LL(i,n)                          \
(93.5 %, 13258 bytes)
292,297c292
< #define stPos )
< 
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
---
> #define stPos (i) \
294,297c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
---
> i) \
294,297c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
---
> #) \
294,297c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
---
> #define \
294,298c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
> #define SET_LL(((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
294,298c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
> #define SET_LL(((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
294,298c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
> #define SET_LL(i(UInt32)s-ll16[i]) | (GET_LL4(i)  16))
294,298c294
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
> #define SET_LL(i,UInt32)s-ll16[i]) | (GET_LL4(i)  16))
(93.6 %, 13189 bytes)
292,293c292
< #define stPos (i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
> #define stPos i]) | (GET_LL4(i)  16))
292,293c292
< #define stPos (i) \
<    (((UInt32)s-ll16[i]) | (GET_LL4(i)  16))
---
> #define stPos (]) | (GET_LL4(i)  16))
(93.6 %, 13163 bytes)
292,294c292
< #define stPos i]) | (GET_LL4(i)  16))
< 
< #define BZ_GET_SMALL(cccc)                            \
---
> #define stPos define BZ_GET_SMALL(cccc)                            \
292,294c292
< #define stPos i]) | (GET_LL4(i)  16))
< 
< #define BZ_GET_SMALL(cccc)                            \
---
> #define stPos iBZ_GET_SMALL(cccc)                            \
(93.6 %, 13137 bytes)
292,293c292
< #define stPos define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
> #define stPos , s-cftab );    \
292,293c292
< #define stPos define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
> #define stPos define s-cftab );    \
292,293c292
< #define stPos define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s-tPos, s-cftab );    \
---
> #define stPos define BZ_GET_SMALL-cftab );    \
(93.6 %, 13046 bytes)
292,293c292
< #define stPos , s-cftab );    \
<       s-tPos = GET_LL(s->tPos);
---
> #define stPos s->tPos);
292,293c292
< #define stPos , s-cftab );    \
<       s-tPos = GET_LL(s->tPos);
---
> #define stPos , ->tPos);
292,293c292
< #define stPos , s-cftab );    \
<       s-tPos = GET_LL(s->tPos);
---
> #define stPos , stPos);
(93.7 %, 13006 bytes)
292,328c292
< #define stPos s->tPos);
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
---
> #define stPos \
292,331c292
< #define stPos s->tPos);
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define stPos s#define fvswap(zzp1, zzp2, zzn)       \
292,331c292
< #define stPos s->tPos);
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define stPos s->define fvswap(zzp1, zzp2, zzn)       \
(93.7 %, 12937 bytes)
292,299c292
< #define stPos \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define stPos define fmin(a,b) ((a)  (b)) ? (a) : (b)
295,299c295
< #define fvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> fmin(a,b) ((a)  (b)) ? (a) : (b)
295,299c295
< #define fvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #(a,b) ((a)  (b)) ? (a) : (b)
295,299c295
< #define fvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define a,b) ((a)  (b)) ? (a) : (b)
(93.7 %, 12886 bytes)
292c292
< #define stPos define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define stPos )) ? (a) : (b)
292c292
< #define stPos define fmin(a,b) ((a)  (b)) ? (a) : (b)
---
> #define stPos define ) ? (a) : (b)
(93.7 %, 12861 bytes)
292,294c292
< #define stPos )) ? (a) : (b)
< 
< #define fpush(lz,hz) 
---
> #define stPos (lz,hz) 
292,294c292
< #define stPos )) ? (a) : (b)
< 
< #define fpush(lz,hz) 
---
> #define stPos )lz,hz) 
(93.7 %, 12832 bytes)
292,296c292
< #define stPos (lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define stPos #define FALLBACK_QSORT_SMALL_THRESH 10
292,296c292
< #define stPos (lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
---
> #define stPos (define FALLBACK_QSORT_SMALL_THRESH 10
(93.8 %, 12800 bytes)
292,299c292
< #define stPos #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
---
> #define stPos fpush
292,300c292
< #define stPos #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define stPos ##undef fpop
292,300c292
< #define stPos #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
---
> #define stPos #define undef fpop
(93.8 %, 12698 bytes)
292,297c292
< #define stPos fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #define stPos #undef FALLBACK_QSORT_STACK_SIZE
293,297c293
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_STACK_SIZE
293,297c293
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #FALLBACK_QSORT_STACK_SIZE
293,303c293
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #undef #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
294,303c294
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
294,303c294
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
294,303c294
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #undef (zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
295,303c295
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
(93.8 %, 12618 bytes)
292,298c292
< #define stPos #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #define stPos ) > 5] |= (1  ((zz) & 31))
292,298c292
< #define stPos #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) > 5] |= (1  ((zz) & 31))
---
> #define stPos #> 5] |= (1  ((zz) & 31))
(93.9 %, 12545 bytes)
292c292
< #define stPos ) > 5] |= (1  ((zz) & 31))
---
> #define stPos ))
292c292
< #define stPos ) > 5] |= (1  ((zz) & 31))
---
> #define stPos ) )
(93.9 %, 12521 bytes)
292,293c292
< #define stPos ))
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
---
> #define stPos 5] &= ~(1  ((zz) & 31))
292,293c292
< #define stPos ))
< #define     CLEAR_BH(zz)  bhtab[(zz)  5] &= ~(1  ((zz) & 31))
---
> #define stPos )] &= ~(1  ((zz) & 31))
(93.9 %, 12480 bytes)
292c292
< #define stPos 5] &= ~(1  ((zz) & 31))
---
> #define stPos )
292,293c292
< #define stPos 5] &= ~(1  ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #define stPos 5#define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
(93.9 %, 12458 bytes)
292,293c292
< #define stPos )
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #define stPos 5] & (1  ((zz) & 31)))
293c293
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> ] & (1  ((zz) & 31)))
293c293
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #& (1  ((zz) & 31)))
293c293
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #define     (1  ((zz) & 31)))
293c293
< #define     ISSET_BH(zz)  (bhtab[(zz)  5] & (1  ((zz) & 31)))
---
> #define     ISSET_BH1  ((zz) & 31)))
(93.9 %, 12417 bytes)
292c292
< #define stPos 5] & (1  ((zz) & 31)))
---
> #define stPos )
292,293c292
< #define stPos 5] & (1  ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz)  5]
---
> #define stPos 5#define      WORD_BH(zz)  bhtab[(zz)  5]
(94.0 %, 12396 bytes)
292,293c292
< #define stPos )
< #define      WORD_BH(zz)  bhtab[(zz)  5]
---
> #define stPos ]
293d292
< #define      WORD_BH(zz)  bhtab[(zz)  5]
(94.0 %, 12355 bytes)
292,293c292
< #define stPos ]
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define stPos )
293,296d292
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
< 
< 
< 
293,296d292
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
< 
< 
< 
(94.0 %, 12314 bytes)
292,300c292
< #define stPos )
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> #define stPos #undef UNALIGNED_BH
296,300c296
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> undef UNALIGNED_BH
296,300c296
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
---
> #UNALIGNED_BH
296,323c296
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #undef       #define mswap(zz1, zz2) \
297,323c297
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> define mswap(zz1, zz2) \
297,323c297
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #mswap(zz1, zz2) \
297,323c297
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #undef     (zz1, zz2) \
298,323c298
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> zz1, zz2) \
(94.0 %, 12229 bytes)
292,318c292
< #define stPos #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define stPos define mvswap(zzp1, zzp2, zzn)       \
292,318c292
< #define stPos #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define stPos #mvswap(zzp1, zzp2, zzn)       \
(94.1 %, 12155 bytes)
292,297c292
< #define stPos define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define stPos (a,b) ((a) < (b)) ? (a) : (b)
292,297c292
< #define stPos define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define stPos define a,b) ((a) < (b)) ? (a) : (b)
(94.1 %, 12100 bytes)
292c292
< #define stPos (a,b) ((a) < (b)) ? (a) : (b)
---
> #define stPos ) ? (a) : (b)
292c292
< #define stPos (a,b) ((a) < (b)) ? (a) : (b)
---
> #define stPos (? (a) : (b)
(94.1 %, 12084 bytes)
292,294c292
< #define stPos ) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define stPos lz,hz,dz) 
292,294c292
< #define stPos ) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define stPos ) ,hz,dz) 
292,294c292
< #define stPos ) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define stPos ) ? hz,dz) 
(94.1 %, 12055 bytes)
292,294c292
< #define stPos lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define stPos ,dz) 
292,294c292
< #define stPos lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define stPos lzdz) 
(94.1 %, 12025 bytes)
292,295c292
< #define stPos ,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define stPos ]-nextLo[az])
292,295c292
< #define stPos ,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define stPos ,-nextLo[az])
(94.2 %, 11985 bytes)
292,294c292
< #define stPos ]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define stPos bz)                                        \
292,294c292
< #define stPos ]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define stPos ])                                        \
(94.2 %, 11949 bytes)
292,297c292
< #define stPos bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define stPos BZ_N_QSORT)
292,297c292
< #define stPos bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define stPos bz)
(94.2 %, 11817 bytes)
292,299c292
< #define stPos BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
---
> #define stPos undef mpush
292,299c292
< #define stPos BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
---
> #define stPos BZ_N_QSORTmpush
293,299d292
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
(94.3 %, 11740 bytes)
292,296c292
< #define stPos undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
---
> #define stPos mnextswap
292,297c292
< #define stPos undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> #define stPos undef #undef MAIN_QSORT_SMALL_THRESH
(94.3 %, 11680 bytes)
292,301c292
< #define stPos mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #define stPos (b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
293,301c293
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
293,301c293
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #) (ftab[((b)+1) < 8] - ftab[(b) << 8])
293,301c293
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #undef (ftab[((b)+1) < 8] - ftab[(b) << 8])
294,301c294
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> ftab[((b)+1) < 8] - ftab[(b) << 8])
294,301c294
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #[((b)+1) < 8] - ftab[(b) << 8])
294,301c294
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #undef ((b)+1) < 8] - ftab[(b) << 8])
295,301c295
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> (b)+1) < 8] - ftab[(b) << 8])
(94.4 %, 11559 bytes)
292c292
< #define stPos (b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #define stPos < 8] - ftab[(b) << 8])
292c292
< #define stPos (b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
---
> #define stPos (8] - ftab[(b) << 8])
(94.4 %, 11541 bytes)
292,293c292
< #define stPos < 8] - ftab[(b) << 8])
< #define SETMASK (1  21)
---
> #define stPos #define SETMASK (1  21)
292,293c292
< #define stPos < 8] - ftab[(b) << 8])
< #define SETMASK (1  21)
---
> #define stPos < define SETMASK (1  21)
(94.4 %, 11518 bytes)
292,293c292
< #define stPos #define SETMASK (1  21)
< #define CLEARMASK (~(SETMASK))
---
> #define stPos SETMASK))
292,293c292
< #define stPos #define SETMASK (1  21)
< #define CLEARMASK (~(SETMASK))
---
> #define stPos #))
(94.4 %, 11473 bytes)
292,317c292
< #define stPos SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define stPos define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
292,317c292
< #define stPos SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define stPos SETMASKWEIGHTOF(zz0)  ((zz0) & 0xffffff00)
(94.4 %, 11394 bytes)
292,293c292
< #define stPos define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define stPos define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
292,293c292
< #define stPos define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define stPos define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
(94.5 %, 11350 bytes)
292,293c292
< #define stPos define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define stPos define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
292,293c292
< #define stPos define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define stPos define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
292,293c292
< #define stPos define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define stPos define DEPTHOF(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
(94.5 %, 11306 bytes)
292c292
< #define stPos define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define stPos ) ? (zz2) : (zz3))
292c292
< #define stPos define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define stPos define ? (zz2) : (zz3))
292c292
< #define stPos define MYMAX(zz2,zz3) ((zz2)  (zz3) ? (zz2) : (zz3))
---
> #define stPos define MYMAX(zz2) : (zz3))
(94.5 %, 11272 bytes)
292,294c292
< #define stPos ) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define stPos (zw1,zw2)                           \
292,294c292
< #define stPos ) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define stPos ) zw1,zw2)                           \
(94.5 %, 11234 bytes)
292,293c292
< #define stPos (zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define stPos (zw2)) |                    \
292,293c292
< #define stPos (zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define stPos (zw2)) |                    \
(94.5 %, 11170 bytes)
292,293c292
< #define stPos (zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define stPos zw1),DEPTHOF(zw2)))
292,293c292
< #define stPos (zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define stPos (),DEPTHOF(zw2)))
292,293c292
< #define stPos (zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define stPos (zw2,DEPTHOF(zw2)))
(94.6 %, 11118 bytes)
292,294c292
< #define stPos zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
---
> #define stPos z)                                     \
292,294c292
< #define stPos zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
---
> #define stPos zw1)                                     \
292,294c292
< #define stPos zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
---
> #define stPos zw1)\
(94.6 %, 11082 bytes)
292,363c292
< #define stPos z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define stPos (nz)                           \
292,363c292
< #define stPos z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define stPos znz)                           \
292,363c292
< #define stPos z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define stPos z)                                     )                           \
(94.7 %, 10901 bytes)
292,346c292
< #define stPos (nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> #define stPos define RETURN(rrr)                               \
292,346c292
< #define stPos (nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> #define stPos (RETURN(rrr)                               \
(94.7 %, 10761 bytes)
292,295c292
< #define stPos define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define stPos vvv,nnn)                     \
292,295c292
< #define stPos define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define stPos define ,nnn)                     \
292,295c292
< #define stPos define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define stPos define RETURNnnn)                     \
(94.8 %, 10683 bytes)
292,293c292
< #define stPos vvv,nnn)                     \
<    case lll: s-state = lll;                      \
---
> #define stPos ;                      \
292,293c292
< #define stPos vvv,nnn)                     \
<    case lll: s-state = lll;                      \
---
> #define stPos vvv\
(94.8 %, 10626 bytes)
292,295c292
< #define stPos ;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
---
> #define stPos )                        \
293,295d292
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
293,295d292
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
(94.8 %, 10558 bytes)
292,295c292
< #define stPos )                        \
<    GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define stPos (lll,uuu)                          \
292,295c292
< #define stPos )                        \
<    GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define stPos )                        lll,uuu)                          \
293,295c293
<    GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
>    ,uuu)                          \
(94.9 %, 10492 bytes)
292,293c292
< #define stPos (lll,uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define stPos )
292,296c292
< #define stPos (lll,uuu)                          \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define stPos (#define GET_MTF_VAL(label1,label2,lval)           \
(94.9 %, 10434 bytes)
292,343c292
< #define stPos )
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define stPos BZ_API(BZ2_bzCompressInit) 
295,343c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
295,343c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #BZ2_bzCompressInit) 
295,343c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> #define ) 
295,344c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> #define GET_MTF_VAL( bz_stream* strm, 
295,344c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> #define GET_MTF_VAL(bz_stream* strm, 
295,344c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> #define GET_MTF_VAL(label1* strm, 
295,344c295
< #define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> #define GET_MTF_VAL(label1,strm, 
(95.0 %, 10325 bytes)
295,298c295
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> ,
295,299c295
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> (int        workFactor )
295,299c295
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> (BZ2_bzCompressInitworkFactor )
296,299c296
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     )
296,300c296
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
---
>                     ( ;
296,312c296
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>                     ( bz_stream#define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
296,312c296
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>                     ( bz_stream* define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
296,312c296
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>                     ( bz_stream* strmADD_CHAR_TO_BLOCK(zs,zchh0)               \
297,312c297
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>                      (zs,zchh0)               \
297,312c297
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>                      int        zs,zchh0)               \
(95.0 %, 10160 bytes)
295,325c295
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompressInitworkFactor (BZ2_bzCompress) ( bz_stream *strm, int action )
296,325c296
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ2_bzCompress) ( bz_stream *strm, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> ) ( bz_stream *strm, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #( bz_stream *strm, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define bz_stream *strm, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK*strm, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(strm, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs, int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,int action )
308,325c308
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0action )
(95.1 %, 10078 bytes)
308,313c308
< #define ADD_CHAR_TO_BLOCK*strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCKbz_stream *strm )
308,313c308
< #define ADD_CHAR_TO_BLOCK*strm, int action )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> #define ADD_CHAR_TO_BLOCK**strm )
(95.1 %, 10020 bytes)
308,318c308
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> #define ADD_CHAR_TO_BLOCKbz_stream , 
308,319c308
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> #define ADD_CHAR_TO_BLOCKbz_stream *int        verbosity,
308,319c308
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> #define ADD_CHAR_TO_BLOCKbz_stream *strm verbosity,
309,319c309
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
317,320c317
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int        small )
317,320c317
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int small )
317,320c317
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API)
317,321c317
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
---
> int BZ_API(;
317,338c317
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressInitint BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
318,338c318
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                      BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
318,338c318
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                      ( (BZ2_bzDecompress) ( bz_stream *strm )
318,338c318
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                      ( bz_streamBZ2_bzDecompress) ( bz_stream *strm )
318,338c318
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                      ( bz_stream* ) ( bz_stream *strm )
318,338c318
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                      ( bz_stream* strm( bz_stream *strm )
319,338c319
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                        bz_stream *strm )
319,338c319
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                        int        *strm )
319,338c319
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                        int        verbositystrm )
320,338c320
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                        )
320,339c320
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
---
>                        int        ;
320,343c320
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>                        int        small int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
321,343c321
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> (BZ2_bzDecompressEnd)  ( bz_stream *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ2_bzDecompressEnd)  ( bz_stream *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API)  ( bz_stream *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(( bz_stream *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressbz_stream *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) *strm )
338,343c338
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress) ( strm )
(95.1 %, 9956 bytes)
338,346c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> eee)                    \
338,346c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> ()                    \
338,346c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> (BZ2_bzDecompressEnd\
338,349c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
> (BZ2_bzDecompressEnd)  typedef 
338,350c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> (BZ2_bzDecompressEnd)  ( struct {
338,350c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> (BZ2_bzDecompressEnd)  ( bz_stream {
338,351c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> (BZ2_bzDecompressEnd)  ( bz_stream *FILE*     handle;
338,351c338
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> (BZ2_bzDecompressEnd)  ( bz_stream *strm *     handle;
339,351c339
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
346,351c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
346,352c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #Char      buf[BZ_MAX_UNUSED];
346,352c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define buf[BZ_MAX_UNUSED];
346,352c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR[BZ_MAX_UNUSED];
346,352c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(BZ_MAX_UNUSED];
346,352c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee];
346,352c346
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    ;
349,353c349
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> Int32     bufN;
350,353c350
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    bufN;
350,353c350
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct ;
351,353d350
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
351,354c351
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEwriting;
351,354c351
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     ;
351,355c351
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     handlebz_stream strm;
352,355c352
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       strm;
352,355c352
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      ;
352,356c352
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      bufInt32     lastErr;
(95.2 %, 9874 bytes)
351,356c351
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bzFile;
351,356c351
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      ;
351,364c351
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZFILE* BZ_API(BZ2_bzWriteOpen) 
352,364c352
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
352,364c352
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ_API(BZ2_bzWriteOpen) 
352,364c352
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm(BZ2_bzWriteOpen) 
353,364c353
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
353,364c353
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     ) 
353,365c353
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr( int*  bzerror,      
354,365c354
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
354,365c354
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      *  bzerror,      
354,365c354
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkbzerror,      
355,365c355
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
356,366c356
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
356,366c356
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile* f, 
364,366c364
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
364,366c364
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
364,367c364
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
364,367c364
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
364,367c364
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
364,368c364
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity,
365,368c365
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
365,368c365
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
365,369c365
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
365,369c365
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
365,369c365
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
366,370c366
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
366,375c366
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILEvoid BZ_API(BZ2_bzWrite)
366,375c366
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE* BZ_API(BZ2_bzWrite)
366,375c366
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       FILE* f(BZ2_bzWrite)
367,375c367
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       BZ2_bzWrite)
367,375c367
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   )
367,376c367
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   blockSize100k( int*    bzerror, 
368,376c368
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int*    bzerror, 
368,376c368
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   *    bzerror, 
368,376c368
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   verbositybzerror, 
369,376c369
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       , 
369,377c369
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   BZFILE* b, 
369,377c369
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>                       int   workFactor * b, 
370,377c370
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
375,377c375
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
375,378c375
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void void*   buf, 
375,378c375
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API*   buf, 
375,378c375
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(buf, 
375,378c375
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite, 
376,379c376
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              int     len )
376,379c376
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( len )
376,379c376
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int)
376,380c376
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>              ( int*    ;
376,384c376
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>              ( int*    bzerrorvoid BZ_API(BZ2_bzWriteClose)
377,384c377
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZ_API(BZ2_bzWriteClose)
377,384c377
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE(BZ2_bzWriteClose)
377,384c377
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE* BZ2_bzWriteClose)
377,384c377
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE* b)
378,385c378
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                ( int*          bzerror, 
378,385c378
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                voidint*          bzerror, 
378,385c378
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                void*   *          bzerror, 
378,385c378
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                void*   bufbzerror, 
379,385c379
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                , 
379,386c379
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     BZFILE*       b, 
379,386c379
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                int     len *       b, 
380,386c380
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
384,386c384
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
384,387c384
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
384,387c384
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
384,387c384
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
384,388c384
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in,
385,388c385
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   int* nbytes_in,
385,388c385
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( * nbytes_in,
385,388c385
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intnbytes_in,
385,388c385
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          ,
385,389c385
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerrorunsigned int* nbytes_out )
386,389c386
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
386,389c386
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE* nbytes_out )
386,389c386
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       nbytes_out )
386,389c386
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b)
387,390c387
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     ;
387,393c387
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     int           void BZ_API(BZ2_bzWriteClose64)
387,393c387
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     int           abandonBZ_API(BZ2_bzWriteClose64)
388,393c388
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     (BZ2_bzWriteClose64)
388,393c388
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned BZ2_bzWriteClose64)
388,393c388
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int)
388,394c388
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* ( int*          bzerror, 
388,394c388
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_inint*          bzerror, 
389,394c389
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     *          bzerror, 
389,394c389
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned bzerror, 
389,394c389
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int, 
389,395c389
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* BZFILE*       b, 
389,395c389
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                     unsigned int* nbytes_out *       b, 
390,395c390
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
393,395c393
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
393,396c393
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
393,396c393
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
393,396c393
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
393,397c393
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   int* nbytes_in_lo32,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( * nbytes_in_lo32,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intnbytes_in_lo32,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          ,
394,398c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_hi32,
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE* nbytes_in_hi32,
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       nbytes_in_hi32,
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b,
396,398d395
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
396,399c396
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           int* nbytes_out_lo32,
396,399c396
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandon* nbytes_out_lo32,
397,399c397
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
397,399c397
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
397,400c397
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
397,400c397
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
397,400c397
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_hi32 )
398,400c398
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
398,400c398
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
398,401c398
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int;
398,405c398
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZFILE* BZ_API(BZ2_bzReadOpen) 
398,405c398
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_in_hi32* BZ_API(BZ2_bzReadOpen) 
399,405c399
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZ_API(BZ2_bzReadOpen) 
399,405c399
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned (BZ2_bzReadOpen) 
399,405c399
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZ2_bzReadOpen) 
399,405c399
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* ) 
399,406c399
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_lo32( int*  bzerror, 
400,406c400
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
400,406c400
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned *  bzerror, 
400,406c400
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned intbzerror, 
400,406c400
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* , 
400,407c400
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned int* nbytes_out_hi32 FILE* f, 
401,407c401
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
405,407c405
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
405,407c405
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE, 
405,408c405
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* int   verbosity,
405,408c405
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIverbosity,
405,408c405
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(,
405,409c405
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpenint   small,
406,409c406
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    small,
406,409c406
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( ,
406,410c406
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intvoid* unused,
406,410c406
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  * unused,
406,410c406
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorunused,
407,410c407
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
407,411c407
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILEint   nUnused )
407,411c407
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* nUnused )
407,411c407
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* f)
408,412c408
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      ;
408,416c408
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
408,416c408
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   verbosityBZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
409,416c409
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
409,416c409
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
409,416c409
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   small) ( int *bzerror, BZFILE *b )
410,416c410
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      ( int *bzerror, BZFILE *b )
410,416c410
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      voidint *bzerror, BZFILE *b )
410,416c410
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void* *bzerror, BZFILE *b )
410,416c410
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      void* unusedbzerror, BZFILE *b )
411,416c411
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      , BZFILE *b )
411,416c411
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   BZFILE *b )
411,416c411
<                      int   nUnused )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>                      int   nUnused *b )
412,416c412
< ;
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
416c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> )
416,417c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
---
> void ;
416,421c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_APIint BZ_API(BZ2_bzRead) 
416,421c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ_API(BZ2_bzRead) 
416,421c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose(BZ2_bzRead) 
416,421c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) BZ2_bzRead) 
416,421c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( ) 
416,422c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int ( int*    bzerror, 
416,422c416
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *int*    bzerror, 
(95.2 %, 9822 bytes)
416,422c416
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> void b, 
420,422c420
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> , 
420,423c420
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int void*   buf, 
420,423c420
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API*   buf, 
420,423c420
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(buf, 
420,423c420
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead, 
421,424c421
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            int     len )
421,424c421
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( len )
421,424c421
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int)
421,425c421
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    {
421,427c421
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzFile* bzf = (bzFile*)b;
422,427c422
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              * bzf = (bzFile*)b;
422,427c422
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILEbzf = (bzFile*)b;
422,427c422
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* = (bzFile*)b;
422,427c422
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b(bzFile*)b;
423,427c423
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile*)b;
423,427c423
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*)b;
423,427c423
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   )b;
423,427c423
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufb;
424,427c424
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              ;
424,429c424
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     BZ_SETERR(BZ_OK);
424,429c424
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     len (BZ_OK);
425,429c425
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
427,429c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
427,429c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* if (bzf == NULL || buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf (bzf == NULL || buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = bzf == NULL || buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (== NULL || buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFileNULL || buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*|| buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)buf == NULL || len < 0)
427,431c427
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b== NULL || len < 0)
429,431c429
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    NULL || len < 0)
429,431c429
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR|| len < 0)
429,431c429
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(len < 0)
429,431c429
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK< 0)
(95.2 %, 9776 bytes)
429,435c429
<    BZ_SETERR(len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR((len == 0)
429,435c429
<    BZ_SETERR(len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR(len len == 0)
429,435c429
<    BZ_SETERR(len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR(len < == 0)
(95.3 %, 9725 bytes)
429,433c429
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len bzf->strm.next_out = buf;
429,433c429
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len len ->strm.next_out = buf;
429,433c429
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len len == strm.next_out = buf;
429,433c429
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len len == 0.next_out = buf;
430,433c430
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>       next_out = buf;
432,433c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    = buf;
432,433c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzfbuf;
432,433c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->;
432,435c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strmwhile (True) 
432,435c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.(True) 
432,435c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.avail_out True) 
432,435c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.avail_out = ) 
432,437c432
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    bzf->strm.avail_out = lenreturn 0; 
433,437c433
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    0; 
433,437c433
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    bzf; 
(95.3 %, 9670 bytes)
433,440c433
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    BZFILE* b, 
433,440c433
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    0* b, 
434,440c434
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
438,440c438
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
438,441c438
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
438,441c438
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API**  unused, 
438,441c438
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(*  unused, 
438,441c438
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedunused, 
439,441c439
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      , 
439,442c439
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
439,442c439
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
439,442c439
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
439,442c439
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror)
440,443c440
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
440,451c440
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILEint BZ_API(BZ2_bzBuffToBuffCompress) 
440,451c440
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE* BZ_API(BZ2_bzBuffToBuffCompress) 
440,451c440
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZFILE* b(BZ2_bzBuffToBuffCompress) 
441,451c441
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ2_bzBuffToBuffCompress) 
441,451c441
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void) 
441,452c441
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void*( char*         dest, 
441,452c441
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void**  char*         dest, 
441,452c441
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        void**  unused*         dest, 
442,452c442
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        dest, 
442,452c442
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int, 
442,453c442
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    unsigned int* destLen,
442,453c442
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                        int*    nUnused int* destLen,
443,453c443
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
451,453c451
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
451,453c451
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int ,
451,454c451
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIchar*         source, 
451,454c451
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(*         source, 
451,454c451
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresssource, 
452,454c452
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          , 
452,455c452
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( unsigned int  sourceLen,
452,455c452
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charint  sourceLen,
452,455c452
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         sourceLen,
452,455c452
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         dest,
453,455d452
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
453,456c453
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned blockSize100k, 
453,456c453
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int, 
453,457c453
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* int           verbosity, 
453,457c453
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenverbosity, 
454,457c454
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
454,458c454
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            charint           workFactor )
454,458c454
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         workFactor )
454,458c454
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         source)
455,459c455
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
455,463c455
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned int BZ_API(BZ2_bzBuffToBuffDecompress) 
455,463c455
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned int  BZ_API(BZ2_bzBuffToBuffDecompress) 
455,463c455
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned int  sourceLen(BZ2_bzBuffToBuffDecompress) 
456,463c456
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ2_bzBuffToBuffDecompress) 
456,463c456
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           ) 
456,464c456
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           blockSize100k( char*         dest, 
457,464c457
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            char*         dest, 
457,464c457
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           *         dest, 
457,464c457
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           verbositydest, 
458,464c458
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            , 
458,465c458
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           unsigned int* destLen,
458,465c458
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int           workFactor int* destLen,
459,465c459
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
463,465c463
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
463,465c463
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int ,
463,466c463
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIchar*         source, 
463,466c463
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(*         source, 
463,466c463
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
464,466c464
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            , 
464,467c464
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( unsigned int  sourceLen,
464,467c464
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charint  sourceLen,
464,467c464
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         sourceLen,
464,467c464
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         dest,
465,467d464
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
465,468c465
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned small,
465,468c465
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int,
465,469c465
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* int           verbosity )
465,469c465
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenverbosity )
466,469c466
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
466,470c466
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              char;
466,479c466
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              char*         const char * BZ_API(BZ2_bzlibVersion)(void)
466,479c466
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              char*         sourcechar * BZ_API(BZ2_bzlibVersion)(void)
467,479c467
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              * BZ_API(BZ2_bzlibVersion)(void)
467,479c467
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned BZ_API(BZ2_bzlibVersion)(void)
467,479c467
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  (BZ2_bzlibVersion)(void)
467,479c467
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  sourceLenBZ2_bzlibVersion)(void)
468,479c468
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              )(void)
468,479c468
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           (void)
468,479c468
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           smallvoid)
469,479c469
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              )
469,480c469
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
---
>                              int           ;
469,490c469
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                              int           verbosity BZFILE * BZ_API(BZ2_bzopen)
470,490c470
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
479,490c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ_API(BZ2_bzopen)
479,490c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const (BZ2_bzopen)
479,490c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const char BZ2_bzopen)
479,490c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const char * )
479,491c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char * BZ_API( const char *path,
479,491c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char * BZ_API(const char *path,
479,491c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char * BZ_API(BZ2_bzlibVersionchar *path,
479,491c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char * BZ_API(BZ2_bzlibVersion)*path,
479,491c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char * BZ_API(BZ2_bzlibVersion)(path,
479,491c479
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char * BZ_API(BZ2_bzlibVersion)(void,
480,492c480
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
490,492c490
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> char *mode )
490,492c490
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE *mode )
490,492c490
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * mode )
490,492c490
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API)
490,493c490
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< ;
---
> BZFILE * BZ_API(;
490,497c490
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_API(BZ2_bzopenBZFILE * BZ_API(BZ2_bzdopen)
491,497c491
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                * BZ_API(BZ2_bzdopen)
491,497c491
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( BZ_API(BZ2_bzdopen)
491,497c491
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const (BZ2_bzdopen)
491,497c491
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZ2_bzdopen)
491,497c491
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *)
491,498c491
<                ( const char *path,
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                ( const char *path( int fd,
492,498c492
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  int fd,
492,498c492
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const fd,
492,498c492
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char ,
492,499c492
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>                  const char *const char *mode )
492,499c492
<                  const char *mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>                  const char *mode char *mode )
493,499c493
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
497,499c497
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> mode )
497,499c497
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE )
497,500c497
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< ;
---
> BZFILE * ;
497,504c497
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE * BZ_APIint BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
497,504c497
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE * BZ_API(BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
497,504c497
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE * BZ_API(BZ2_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
498,504c498
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                BZ2_bzread) (BZFILE* b, void* buf, int len )
498,504c498
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( ) (BZFILE* b, void* buf, int len )
498,504c498
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int (BZFILE* b, void* buf, int len )
498,504c498
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fdBZFILE* b, void* buf, int len )
499,504c499
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  * b, void* buf, int len )
499,504c499
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const b, void* buf, int len )
499,504c499
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char , void* buf, int len )
499,504c499
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *void* buf, int len )
499,504c499
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode * buf, int len )
500,504c500
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
504c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , int len )
504c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int int len )
504c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
504c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
504,505c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread{
504,506c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) int bzerr, nread;
504,506c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (bzerr, nread;
504,506c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE, nread;
504,506c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* nread;
504,506c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int *)b)->lastErr == BZ_STREAM_END) return 0;
504,507c504
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )b)->lastErr == BZ_STREAM_END) return 0;
505,507c505
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> b)->lastErr == BZ_STREAM_END) return 0;
506,507c506
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    )->lastErr == BZ_STREAM_END) return 0;
506,507c506
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int ->lastErr == BZ_STREAM_END) return 0;
506,507c506
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrlastErr == BZ_STREAM_END) return 0;
506,507c506
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, == BZ_STREAM_END) return 0;
506,507c506
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadBZ_STREAM_END) return 0;
507c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    ) return 0;
507c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if return 0;
507c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (0;
507c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((;
507,508c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((nread = 0;
507,508c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile= 0;
507,508c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*0;
507,508c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*);
507,509c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)bif (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
507,509c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)(bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
507,509c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
507,509c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
507,509c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
507,509c507
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)->lastErr == BZ_STREAM_END|| bzerr == BZ_STREAM_END) ; else ;
(95.3 %, 9615 bytes)
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ2_bzwrite) (BZFILE* b, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK ) (BZFILE* b, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || (BZFILE* b, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr BZFILE* b, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == * b, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_ENDb, void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) , void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; void* buf, int len )
507,512c507
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else * buf, int len )
508,512c508
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
512c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> , int len )
512c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int int len )
512c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
512c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
512,513c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
---
> int BZ_API(BZ2_bzwrite;
512,517c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) int BZ_API(BZ2_bzflush) (BZFILE *b)
512,517c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZ_API(BZ2_bzflush) (BZFILE *b)
512,517c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE(BZ2_bzflush) (BZFILE *b)
512,517c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* BZ2_bzflush) (BZFILE *b)
512,517c512
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b) (BZFILE *b)
(95.3 %, 9571 bytes)
512,522c512
< int BZ_API()
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(void BZ_API(BZ2_bzclose) (BZFILE* b)
513,522c513
< ;
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> BZ_API(BZ2_bzclose) (BZFILE* b)
517,522c517
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< ;
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> (BZ2_bzclose) (BZFILE* b)
(95.4 %, 9520 bytes)
513,522c513
< BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
513,522c513
< BZ_API(BZ2_bzclose) (BZFILE* b)
< ;
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
(95.4 %, 9466 bytes)
513d512
< BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
513,543c513
< BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> BZ_API#define BZ_UNIX      1
513,543c513
< BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> BZ_API(define BZ_UNIX      1
513,543c513
< BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> BZ_API(BZ2_bzerrorBZ_UNIX      1
513,543c513
< BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> BZ_API(BZ2_bzerror) 1
513,546c513
< BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
> BZ_API(BZ2_bzerror) (#define BZ_LCCWIN32  0
(95.4 %, 9421 bytes)
513,551c513
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> .h>
542,551c542
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> h>
542,551c542
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> #>
542,552c542
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define #include <errno.h>
542,552c542
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_UNIX      include <errno.h>
545,552c545
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> <errno.h>
545,552c545
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #errno.h>
545,552c545
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define .h>
545,552c545
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_LCCWIN32  h>
551,552c551
< #include <signal.h>
< #include <errno.h>
---
> >
551,554c551
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> ##define ERROR_IF_EOF(i)       
551,554c551
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include define ERROR_IF_EOF(i)       
551,554c551
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include <ERROR_IF_EOF(i)       
551,554c551
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include <signal(i)       
(95.4 %, 9378 bytes)
545,548c545
< #define BZ_LCCWIN32  h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define BZ_LCCWIN32  )  
545,549c545
< #define BZ_LCCWIN32  h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define BZ_LCCWIN32  h#define ERROR_IF_MINUS_ONE(i) 
(95.5 %, 9316 bytes)
545,553c545
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define BZ_LCCWIN32  fcntl.h>
546,553c546
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> .h>
546,553c546
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #h>
546,553c546
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define >
546,554c546
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE#   include <utime.h>
546,554c546
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(include <utime.h>
546,554c546
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(i<utime.h>
552,554c552
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> utime.h>
552,554c552
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #.h>
552,554c552
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #if h>
553,554c553
< #   include <fcntl.h>
< #   include <utime.h>
---
> >
553,556c553
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   #   define PATH_SEP    '/'
553,556c553
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include define PATH_SEP    '/'
553,556c553
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include <PATH_SEP    '/'
553,556c553
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include <fcntl'/'
553,557c553
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> #   include <fcntl.#   define MY_LSTAT    lstat
553,557c553
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> #   include <fcntl.hdefine MY_LSTAT    lstat
554,557c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> MY_LSTAT    lstat
554,557c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> #   lstat
554,558c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include #   define MY_STAT     stat
554,558c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include <define MY_STAT     stat
554,558c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include <utimeMY_STAT     stat
554,558c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include <utime.stat
554,559c554
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   include <utime.h#   define MY_S_ISREG  S_ISREG
556,559c556
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> define MY_S_ISREG  S_ISREG
556,559c556
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   MY_S_ISREG  S_ISREG
556,559c556
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   define S_ISREG
556,560c556
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> #   define PATH_SEP    #   define MY_S_ISDIR  S_ISDIR
(95.5 %, 9220 bytes)
556,559c556
< #   define S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
---
> #   define \
557,560c557
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> root=snocString((root), (name))
557,560c557
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   =snocString((root), (name))
557,560c557
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   define snocString((root), (name))
557,560c557
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   define MY_S_ISDIR  ((root), (name))
(95.5 %, 9141 bytes)
556,559c556
< #   define \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #   define #   define APPEND_FLAG(root, name) \
557,559c557
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
>       define APPEND_FLAG(root, name) \
557,559c557
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
>       rootAPPEND_FLAG(root, name) \
557,559c557
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
>       root=(root, name) \
(95.6 %, 9104 bytes)
557,558c557
<       define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
---
>       root), (name))
557,558c557
<       define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
---
>       define ), (name))
557,558c557
<       define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
---
>       define APPEND_FLAG, (name))
(95.6 %, 9048 bytes)
557,561c557
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
>       #      define NORETURN 
557,561c557
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
>       rootdefine NORETURN 
557,561c557
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
>       root)NORETURN 
557,563c557
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
---
>       root), #endif 
557,563c557
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
---
>       root), (endif 
557,570c557
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
>       root), (name#define True  ((Bool)1)
(95.6 %, 8996 bytes)
557,567c557
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
>       rootdefine define False ((Bool)0)
559,567c559
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> False ((Bool)0)
559,567c559
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #((Bool)0)
566,567c566
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
566,567c566
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
566,567c566
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
566,567c566
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
566,567c566
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
566,570c566
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define True  ((typedef int IntNative;
(95.6 %, 8965 bytes)
566,584c566
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define True  2
566,585c566
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define True  0#define SM_F2F           3
569,585c569
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> define SM_F2F           3
569,585c569
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> typedef SM_F2F           3
569,585c569
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> typedef int 3
569,588c569
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int IntNative#define OM_Z             1
583,588c583
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> define OM_Z             1
583,588c583
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #OM_Z             1
583,588c583
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #define 1
583,589c583
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_I2O           #define OM_UNZ           2
584,589c584
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> define OM_UNZ           2
584,589c584
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #OM_UNZ           2
584,589c584
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define 2
584,590c584
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define SM_F2O           #define OM_TEST          3
(95.7 %, 8880 bytes)
583,619c583
< #define SM_I2O           #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
---
> #define SM_I2O           struct  
583,620c583
< #define SM_I2O           #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
---
> #define SM_I2O           #UInt64;
(95.7 %, 8756 bytes)
583,763c583
< #define SM_I2O           struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<     int 
---
> #define SM_I2O           int 
584,763d583
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<     int 
(95.9 %, 8503 bytes)
583,604c583
< #define SM_I2O           int 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
> #define SM_I2O           -name, (s))==0)
584,604c584
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
>    name, (s))==0)
584,604c584
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
>    Cell, (s))==0)
604c604
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
> (s))==0)
604c604
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
> #s))==0)
604c604
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
> #define ))==0)
604c604
< #define ISFLAG(s) (strcmp(aa-name, (s))==0)
---
> #define ISFLAG)==0)
(95.9 %, 8442 bytes)
583,585c583
< #define SM_I2O           -name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define SM_I2O           IntNative argc, Char *argv[] )
583,585c583
< #define SM_I2O           -name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define SM_I2O           -argc, Char *argv[] )
(95.9 %, 8408 bytes)
583,589c583
< #define SM_I2O           IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           
\ No newline at end of file
583,589c583
< #define SM_I2O           IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           IntNative 
\ No newline at end of file
583,589c583
< #define SM_I2O           IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           IntNative argc
\ No newline at end of file
(95.9 %, 8370 bytes)
===< pass_clex :: rm-toks-10 >===
9,12d8
< #2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
9,12d8
< #2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
11,13c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> BZ_FLUSH_OK          2
11,13c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #2
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define #define BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                define BZ_FINISH_OK         3
12,14c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> BZ_FINISH_OK         3
12,14c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #3
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define #define BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_RUN_OK            define BZ_STREAM_END        4
13,15c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
13,15c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #4
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define define )
---
> #define #define define )
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define define )
---
> #define BZ_FLUSH_OK          define define )
(96.0 %, 8280 bytes)
12,14d11
< #3
< #define BZ_STREAM_END        4
< #define define )
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> BZ_CONFIG_ERROR      (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #(-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define -9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        9)
14,15c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> )
14,17c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #typedef 
14,18c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define struct {
14,18c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define define {
15,19c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
---
> int total_in_hi32;
15,19c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
---
> #total_in_hi32;
15,19c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
---
> #define ;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      char *next_out;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      (*next_out;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      (-next_out;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      (-9;
17,22c17
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
> unsigned int avail_out;
18,22c18
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>    int avail_out;
18,22c18
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>    struct avail_out;
19,22c19
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       ;
19,23c19
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       int unsigned (**bzfree)(void *,void *);
19,23c19
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       int total_in_hi32(**bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       **bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       char *bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       char *bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       char *next_out)(void *,void *);
22,23c22
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       (void *,void *);
22,23c22
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned void *,void *);
22,23c22
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned int *,void *);
22,23c22
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned int avail_out,void *);
23c23
<       unsigned (**bzfree)(void *,void *);
---
>       void *);
23c23
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned *);
23c23
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned ();
23c23
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (*;
23,24c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**void *opaque;
23,24c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree*opaque;
23,24c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree)opaque;
23,24c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree)(;
23,25c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       unsigned (**bzfree)(void } 
23,26c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)(void *bz_stream;
23,26c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)(void *,;
23,30c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void #include <stdio.h>
23,30c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void *include <stdio.h>
23,30c23
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void *)<stdio.h>
24,30c24
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       stdio.h>
24,30c24
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void .h>
24,30c24
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *h>
24,30c24
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaque>
25,32c25
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
26,32c26
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
26,32c26
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamBZ_API(func) func
30,32c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> (func) func
30,32c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func) func
30,32c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include ) func
30,32c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <func
30,33c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio#   define BZ_EXTERN extern
30,33c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.define BZ_EXTERN extern
30,33c30
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hBZ_EXTERN extern
32,33c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> extern
32,38c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
32,38c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define int BZ_API(BZ2_bzCompressInitworkFactor 
32,38c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_APIBZ_API(BZ2_bzCompressInitworkFactor 
32,38c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_API((BZ2_bzCompressInitworkFactor 
32,38c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_API(funcBZ2_bzCompressInitworkFactor 
32,39c32
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
---
> #   define BZ_API(func) );
33,39c33
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
---
> ;
33,41c33
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
---
> #   BZ_EXTERN ;
33,41c33
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
---
> #   define ;
33,43c33
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> #   define BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
38,43c38
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_API(BZ2_bzDecompressInit) ( 
38,43c38
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN (BZ2_bzDecompressInit) ( 
38,43c38
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ2_bzDecompressInit) ( 
(96.0 %, 8205 bytes)
38,40c38
< BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> verbosity, 
38,40c38
< BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_API, 
38,41c38
< BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> BZ_API(int       );
38,41c38
< BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> BZ_API(BZ2_bzDecompressInit);
38,41c38
< BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> BZ_API(BZ2_bzDecompressInit) ;
39,43c39
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
39,43c39
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream int BZ_API(BZ2_bzDecompressEnd) ( 
39,43c39
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream *BZ_API(BZ2_bzDecompressEnd) ( 
39,43c39
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream *strm(BZ2_bzDecompressEnd) ( 
(96.0 %, 8122 bytes)
38,41c38
< BZ_API(int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> BZ_API(bz_stream *strm 
38,41c38
< BZ_API(int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> BZ_API(int       *strm 
(96.1 %, 8057 bytes)
38,47c38
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_API(void BZFILE;
38,47c38
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_API(bz_stream BZFILE;
38,47c38
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_API(bz_stream *;
39,49c39
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
39,49c39
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )BZFILE* BZ_API(BZ2_bzReadOpen) ( 
45,49c45
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
45,49c45
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZ_API(BZ2_bzReadOpen) ( 
45,49c45
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define (BZ2_bzReadOpen) ( 
45,49c45
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZ2_bzReadOpen) ( 
47,49c47
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ) ( 
47,49c47
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef ( 
47,50c47
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void int*  bzerror,   
47,50c47
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILE*  bzerror,   
49,50c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> bzerror,   
49,50c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN ,   
49,51c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILEFILE* f, 
49,51c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* * f, 
49,51c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIf, 
49,51c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
49,52c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenint   verbosity, 
49,52c49
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) verbosity, 
50,52c50
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       , 
50,53c50
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       intint   small,
50,53c50
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  small,
50,53c50
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerror,
51,53d50
<       FILE* f, 
<       int   verbosity, 
<       int   small,
51,54c51
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* unused,    
51,54c51
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* unused,    
51,54c51
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* f,    
52,54d51
<       int   verbosity, 
<       int   small,
<       void* unused,    
52,54d51
<       int   verbosity, 
<       int   small,
<       void* unused,    
52,56c52
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   verbosity);
53,56c53
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
53,58c53
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   BZ_EXTERN void ;
53,58c53
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   smallvoid ;
54,58c54
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       ;
54,60c54
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       voidBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
54,60c54
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* void BZ_API(BZ2_bzReadGetUnused) ( 
54,60c54
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unusedBZ_API(BZ2_bzReadGetUnused) ( 
55,60c55
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       (BZ2_bzReadGetUnused) ( 
55,60c55
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ2_bzReadGetUnused) ( 
56,60c56
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    ) ( 
56,60c56
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )( 
58,61c58
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
58,61c58
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
58,61c58
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void bzerror, 
60,61c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> , 
60,62c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN BZFILE* b, 
60,62c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void * b, 
60,62c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIb, 
60,62c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(, 
60,63c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedvoid**  unused,  
60,63c60
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) **  unused,  
61,63c61
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
61,63c61
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       intunused,  
61,63c61
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    ,  
61,64c61
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerrorint*    nUnused 
62,64c62
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
62,64c62
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILEnUnused 
62,65c62
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* );
62,65c62
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b;
63,67c63
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
63,67c63
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       voidint BZ_API(BZ2_bzRead) ( 
63,67c63
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*BZ_API(BZ2_bzRead) ( 
63,67c63
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  (BZ2_bzRead) ( 
63,67c63
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedBZ2_bzRead) ( 
64,67c64
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       ) ( 
64,67c64
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int( 
64,68c64
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       int*    int*    bzerror, 
65,68c65
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    *    bzerror, 
65,68c65
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    )bzerror, 
67,68c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> , 
67,69c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN BZFILE* b, 
67,69c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int * b, 
67,69c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_APIb, 
67,69c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(, 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadvoid*   buf, 
67,70c67
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) *   buf, 
68,70c68
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
68,70c68
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int, 
68,71c68
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    int     len 
68,71c68
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorlen 
69,72c69
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       );
69,72c69
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE;
69,74c69
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
69,74c69
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* bBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
70,74c70
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       * BZ_API(BZ2_bzWriteOpen) ( 
70,74c70
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       voidBZ_API(BZ2_bzWriteOpen) ( 
70,74c70
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   (BZ2_bzWriteOpen) ( 
70,74c70
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZ2_bzWriteOpen) ( 
71,74c71
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       ) ( 
71,74c71
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     ( 
72,75c72
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    int*  bzerror,      
72,75c72
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )*  bzerror,      
74,75c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> bzerror,      
74,75c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN ,      
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILEFILE* f, 
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* * f, 
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_APIf, 
74,76c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
74,77c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint   blockSize100k, 
74,77c74
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) blockSize100k, 
75,77c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
75,78c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       intint   verbosity, 
75,78c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  verbosity, 
75,78c75
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerror, 
76,78d75
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
76,79c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEworkFactor 
76,80c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* );
76,80c76
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f;
77,82c77
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
77,82c77
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   void BZ_API(BZ2_bzWrite) ( 
77,82c77
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100kBZ_API(BZ2_bzWrite) ( 
78,82c78
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       (BZ2_bzWrite) ( 
78,82c78
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ2_bzWrite) ( 
78,82c78
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosity) ( 
79,82c79
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ( 
79,83c79
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   int*    bzerror, 
80,83c80
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    *    bzerror, 
80,83c80
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    )bzerror, 
82,83c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> , 
82,84c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN BZFILE* b, 
82,84c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void * b, 
82,84c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_APIb, 
82,84c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(, 
82,85c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWritevoid*   buf, 
82,85c82
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) *   buf, 
83,85c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
83,85c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int, 
83,86c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    int     len 
83,86c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorlen 
84,87c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       );
84,87c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE;
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* bvoid BZ_API(BZ2_bzWriteClose) ( 
85,89c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
85,89c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void(BZ2_bzWriteClose) ( 
85,89c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   BZ2_bzWriteClose) ( 
85,89c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   buf) ( 
86,89c86
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       ( 
86,90c86
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       int     int*          bzerror, 
87,90c87
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    *          bzerror, 
87,90c87
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    )bzerror, 
89,90c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> , 
89,91c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN BZFILE*       b, 
89,91c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void *       b, 
89,91c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIb, 
89,91c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(, 
89,92c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseint           abandon, 
89,92c89
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) abandon, 
90,92c90
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
90,93c90
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intunsigned int* nbytes_in, 
90,93c90
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          int* nbytes_in, 
90,93c90
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerror* nbytes_in, 
91,93c91
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       nbytes_in, 
91,93c91
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE, 
91,94c91
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       unsigned int* nbytes_out 
91,94c91
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bint* nbytes_out 
92,94c92
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       * nbytes_out 
92,94c92
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           nbytes_out 
92,95c92
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           abandon);
93,95c93
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       ;
93,97c93
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
93,97c93
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intvoid BZ_API(BZ2_bzWriteClose64) ( 
93,97c93
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ_API(BZ2_bzWriteClose64) ( 
93,97c93
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in(BZ2_bzWriteClose64) ( 
94,97c94
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ2_bzWriteClose64) ( 
94,97c94
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned ) ( 
94,97c94
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int( 
94,98c94
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* int*          bzerror, 
95,98c95
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    *          bzerror, 
95,98c95
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    )bzerror, 
97,98c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> , 
97,99c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN BZFILE*       b, 
97,99c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void *       b, 
97,99c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_APIb, 
97,99c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(, 
97,100c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64int           abandon, 
97,100c97
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) abandon, 
98,100c98
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
98,101c98
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intunsigned int* nbytes_in_lo32, 
98,101c98
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          int* nbytes_in_lo32, 
98,101c98
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerror* nbytes_in_lo32, 
99,101c99
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       nbytes_in_lo32, 
99,101c99
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE, 
99,102c99
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       unsigned int* nbytes_in_hi32, 
99,102c99
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bint* nbytes_in_hi32, 
100,102c100
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       * nbytes_in_hi32, 
100,102c100
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           nbytes_in_hi32, 
101,102d100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
101,102d100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
101,102d100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
101,102d100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
101,102d100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
102,103d101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
102,103d101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
102,103d101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
102,103d101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
102,103d101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
102,105c102
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_hi32);
103,105c103
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
103,110c103
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
103,110c103
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intint BZ_API(BZ2_bzBuffToBuffCompress) ( 
103,110c103
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_API(BZ2_bzBuffToBuffCompress) ( 
103,110c103
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32(BZ2_bzBuffToBuffCompress) ( 
104,110c104
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ2_bzBuffToBuffCompress) ( 
104,110c104
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned ) ( 
104,110c104
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int( 
104,111c104
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* char*         dest, 
105,111c105
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    *         dest, 
105,111c105
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    )dest, 
110,111c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> , 
110,112c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN unsigned int* destLen,
110,112c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int int* destLen,
110,112c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API* destLen,
110,112c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(destLen,
110,112c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress,
110,113c110
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) char*         source, 
111,113c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
111,113c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charsource, 
111,113c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         , 
111,114c111
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destunsigned int  sourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
112,114c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int,
112,115c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* int           blockSize100k, 
112,115c112
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLenblockSize100k, 
113,115c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
113,116c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       charint           verbosity, 
113,116c113
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         verbosity, 
114,116d113
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
114,116d113
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
114,117c114
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned workFactor 
114,118c114
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  );
114,118c114
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  sourceLen;
115,120c115
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
115,120c115
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
115,120c115
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kBZ_API(BZ2_bzBuffToBuffDecompress) ( 
116,120c116
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
116,120c116
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
116,120c116
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosity) ( 
117,120c117
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
117,121c117
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           char*         dest, 
118,121c118
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    *         dest, 
118,121c118
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )dest, 
120,121c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> , 
120,122c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN unsigned int* destLen,
120,122c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int int* destLen,
120,122c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API* destLen,
120,122c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(destLen,
120,122c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress,
120,123c120
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) char*         source, 
121,123c121
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
121,123c121
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       charsource, 
121,123c121
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         , 
121,124c121
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destunsigned int  sourceLen,
122,124c122
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
122,124c122
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
122,124c122
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int,
122,125c122
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* int           small, 
122,125c122
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLensmall, 
123,125c123
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
123,126c123
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       charint           );
123,126c123
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         );
123,126c123
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         source;
124,128c124
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
124,128c124
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned BZFILE * BZ_API(BZ2_bzopen) (
124,128c124
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  * BZ_API(BZ2_bzopen) (
124,128c124
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLenBZ_API(BZ2_bzopen) (
125,128c125
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       (BZ2_bzopen) (
125,128c125
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ2_bzopen) (
125,128c125
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           small) (
126,128c126
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       (
126,129c126
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           const char *path,
126,129c126
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           )char *path,
128,129c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> *path,
128,129c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN path,
128,129c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN BZFILE ,
128,130c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * const char *mode
128,130c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APIchar *mode
128,130c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(*mode
128,130c128
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenmode
(96.1 %, 8002 bytes)
128,131c128
< BZ_EXTERN BZFILE * BZ_API(*mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API() (
128,131c128
< BZ_EXTERN BZFILE * BZ_API(*mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(*(
129,132c129
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>    int        fd,
129,132c129
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>    )fd,
131,132c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> ,
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN const char *mode
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE char *mode
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * *mode
131,133c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APImode
131,134c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API();
131,134c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen;
131,136c131
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) BZ_EXTERN int BZ_API();
132,136c132
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       int BZ_API();
132,136c132
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       int        BZ_API();
132,136c132
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       int        fd();
133,136c133
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       );
133,136c133
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       const ;
133,138c133
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>       const char BZ_EXTERN int BZ_API();
133,138c133
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>       const char *int BZ_API();
134,138c134
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>    BZ_API();
134,138c134
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>    )();
136,138c136
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
> );
136,138c136
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
> BZ_EXTERN ;
136,140c136
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN int void BZ_API(BZ2_bzcloseBZ2_bzerror) (
136,140c136
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN int BZ_APIBZ_API(BZ2_bzcloseBZ2_bzerror) (
136,140c136
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN int BZ_API((BZ2_bzcloseBZ2_bzerror) (
136,140c136
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN int BZ_API()BZ2_bzcloseBZ2_bzerror) (
138,140c138
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> ) (
138,140c138
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN (
(96.1 %, 7965 bytes)
136,139c136
< BZ_EXTERN ;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN , 
138,140c138
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> int    *errnum
138,140c138
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> void *errnum
138,140c138
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> void BZ_APIerrnum
138,141c138
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> void BZ_API();
138,141c138
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror;
138,151c138
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror) #define _BZLIB_PRIVATE_H
139,151c139
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       define _BZLIB_PRIVATE_H
139,151c139
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       BZFILE _BZLIB_PRIVATE_H
139,153c139
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *#include <stdlib.h>
139,153c139
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *binclude <stdlib.h>
(96.1 %, 7897 bytes)
138,150c138
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> void BZ_API(h>
138,150c138
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> void BZ_API()>
148,154d147
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
148,154d147
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
148,154d147
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
(96.2 %, 7847 bytes)
148,151c148
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> char   Bool;
148,151c148
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #Bool;
148,151c148
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define ;
148,152c148
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  typedef unsigned char   UChar;
150,152c150
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
150,152c150
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
150,152c150
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            UChar;
151,152d150
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
151,152d150
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
151,152d150
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
151,153c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned Int32;
151,153c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   ;
151,154c151
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Booltypedef unsigned int    UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned UInt32;
152,154c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   ;
152,155c152
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   UChartypedef short           Int16;
153,155c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
153,155c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
153,155c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             ;
153,156c153
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32typedef unsigned short  UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> unsigned short  UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef short  UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned UInt16;
154,156c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    ;
154,158c154
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32#define True  ((Bool)1)
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef True  ((Bool)1)
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           ((Bool)1)
155,158c155
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int16(Bool)1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> Bool)1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef )1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned 1)
156,158c156
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned short  )
156,159c156
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False BZ_HDR_0 0x30   
---
> typedef unsigned short  UInt16#define False BZ_HDR_0 0x30   
158,159c158
< #define True  ((Bool)1)
< #define False BZ_HDR_0 0x30   
---
> define False BZ_HDR_0 0x30   
158,159c158
< #define True  ((Bool)1)
< #define False BZ_HDR_0 0x30   
---
> #False BZ_HDR_0 0x30   
158,159c158
< #define True  ((Bool)1)
< #define False BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x30   
158,159c158
< #define True  ((Bool)1)
< #define False BZ_HDR_0 0x30   
---
> #define True  0x30   
158,163c158
< #define True  ((Bool)1)
< #define False BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define True  (#define BZ_MAX_ALPHA_SIZE 258
(96.2 %, 7817 bytes)
158,165c158
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define #define BZ_RUNA 0
158,165c158
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define BZ_HDR_0 define BZ_RUNA 0
162,165c162
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> BZ_RUNA 0
162,165c162
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #0
162,166c162
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define #define BZ_RUNB 1
162,166c162
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define BZ_MAX_ALPHA_SIZE define BZ_RUNB 1
163,166c163
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> BZ_RUNB 1
163,166c163
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #1
163,168c163
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define #define BZ_N_GROUPS 6
163,168c163
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_CODE_LEN    define BZ_N_GROUPS 6
165,168c165
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> BZ_N_GROUPS 6
165,168c165
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #6
165,169c165
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define #define BZ_G_SIZE   50
165,169c165
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_RUNA define BZ_G_SIZE   50
166,169c166
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> BZ_G_SIZE   50
166,169c166
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #50
(96.2 %, 7753 bytes)
163,166d162
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
165,167c165
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> BZ_N_ITERS  4
165,167c165
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #4
165,169c165
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
165,169c165
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_GROUPS define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
166,169c166
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
166,169c166
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #(2 + (900000 / BZ_G_SIZE))
166,169c166
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define 2 + (900000 / BZ_G_SIZE))
166,169c166
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_G_SIZE   + (900000 / BZ_G_SIZE))
167,169c167
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> (900000 / BZ_G_SIZE))
167,169c167
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #900000 / BZ_G_SIZE))
167,169c167
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define / BZ_G_SIZE))
167,169c167
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_ITERS  BZ_G_SIZE))
169c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> ))
169c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #)
169,177c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define #define BZ_RAND_DECLS                          \
169,177c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS define BZ_RAND_DECLS                          \
169,177c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS (BZ_RAND_DECLS                          \
169,177c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_MAX_SELECTORS (2 \
169,178c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + Int32 rNToGo;                               \
169,178c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (rNToGo;                               \
169,178c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (900000 ;                               \
169,178c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / \
169,179c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZEInt32 rTPos                                 \
169,179c169
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE)rTPos                                 \
177,179c177
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> \
177,181c177
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> ##define BZ_RAND_INIT_MASK                      2)
177,181c177
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define define BZ_RAND_INIT_MASK                      2)
(96.3 %, 7608 bytes)
177,189c177
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
---
> ;
179,192c179
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
---
> UInt32*  ptr;
179,192c179
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
---
> #*  ptr;
179,192c179
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
---
> #define ptr;
179,192c179
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
---
> #define BZ_RAND_INIT_MASK                      ;
179,193c179
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar;
---
> #define BZ_RAND_INIT_MASK                      2UChar;
186,193c186
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar;
---
> ;
187,196c187
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar;
< 
<       
<       ;
---
>    ;
187,197c187
<    struct {
<       
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar;
< 
<       
<       ;
<       Int32    ;
---
>    struct Int32    ;
189,195d188
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar;
< 
<       
197d189
<       Int32    ;
189,198c189
<       UInt32;
< 
<       
<       UInt32*  ptr;
<       UChar;
< 
<       
<       ;
<       Int32    ;
<       UChar    ;
---
>       UInt32UChar    ;
192,195d191
<       UInt32*  ptr;
<       UChar;
< 
<       
197,198d192
<       Int32    ;
<       UChar    ;
(96.3 %, 7528 bytes)
190,192d189
<       UChar    ;
<       UInt32   ;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
190,192d189
<       UChar    ;
<       UInt32   ;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
(96.4 %, 7447 bytes)
189,192c189
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
190,192c190
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
190,192c190
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
190,192c190
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   ][BZ_MAX_ALPHA_SIZE];
190,192c190
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [[BZ_MAX_ALPHA_SIZE];
190,192c190
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_SELECTORSBZ_MAX_ALPHA_SIZE];
190,192c190
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_SELECTORS]];
191,192c191
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ;
191,193c191
<       UChar    ;
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
---
>       UChar    Int32    rfreq   [];
192,193c192
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
---
>       rfreq   [];
192,193c192
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
---
>       Int32    [];
192,193c192
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
---
>       Int32    code    ];
192,193c192
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
---
>       Int32    code    [;
192,195c192
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
< 
<    }
---
>       Int32    code    [BZ_N_GROUPS}
192,196c192
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [];
< 
<    }
<    EState;
---
>       Int32    code    [BZ_N_GROUPS]EState;
(96.4 %, 7381 bytes)
191,205c191
<       ;
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
---
>       #define BZ_X_MAGIC_2     50
192,205c192
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
---
>       define BZ_X_MAGIC_2     50
192,205c192
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
---
>       Int32    BZ_X_MAGIC_2     50
192,205c192
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
---
>       Int32    rfreq   50
192,211c192
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>       Int32    rfreq   [#define MTFA_SIZE 4096
192,211c192
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>       Int32    rfreq   []define MTFA_SIZE 4096
194,211c194
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>    MTFA_SIZE 4096
195,211c195
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
>    4096
195,212c195
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
>    EState#define MTFL_SIZE 16
203,212c203
< ;
< 
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> define MTFL_SIZE 16
205,212c205
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> MTFL_SIZE 16
205,212c205
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #16
205,218c205
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
---
> #define typedef
205,219c205
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_X_MAGIC_2     struct {
211,219c211
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> {
211,221c211
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
---
> #UInt32   ;
211,221c211
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
---
> #define ;
211,222c211
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
---
> #define MTFA_SIZE Int32    ttstoredCombinedCRC;
212,222c212
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
---
> ttstoredCombinedCRC;
(96.4 %, 7308 bytes)
205,216c205
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
---
> #;
211,217c211
< typedef
<    struct {
<       
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
---
> Bool     inUse16[16];
212,217c212
<    struct {
<       
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
---
>    inUse16[16];
212,217c212
<    struct {
<       
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
---
>    struct [16];
214,217c214
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
---
>       16];
214,217c214
<       UInt32   ;
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
---
>       UInt32   ];
215,217c215
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
---
>       ;
215,218c215
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       Int32    UChar    seqToUnseq[256];
215,218c215
<       Int32    ttstoredCombinedCRC;
<       UInt32   ;
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
---
>       Int32    ttstoredCombinedCRCseqToUnseq[256];
(96.5 %, 7235 bytes)
215,219c215
<       ;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
216,219c216
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       ][BZ_MAX_ALPHA_SIZE];
216,219c216
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    [BZ_MAX_ALPHA_SIZE];
216,219c216
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    seqToUnseqBZ_MAX_ALPHA_SIZE];
216,219c216
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    seqToUnseq[];
216,219c216
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    seqToUnseq[256;
216,221c216
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    seqToUnseq[256]Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [][BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS][];
219,221c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE;
219,222c219
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [][BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS][];
221,222c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE;
221,223c221
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    ;
---
>       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]Int32    ;
222,223c222
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    ;
---
>       ;
222,226c222
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    ;
< 
<       
<       Int32    ;
---
>       Int32    Int32    ;
(96.5 %, 7170 bytes)
224,229d223
<       
<       Int32    ;
<       Int32    ;
<       Int32    ;
<       Int32    *   save_gPerm;
< 
225,230c225
<       Int32    ;
<       Int32    ;
<       Int32    ;
<       Int32    *   save_gPerm;
< 
<    }
---
>       }
(96.5 %, 7080 bytes)
222,234c222
<       ;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
---
>       )
224,235c224
<    }
<    DState;
< 
< 
< 
< 
< 
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
---
>    ;
225,247c225
<    DState;
< 
< 
< 
< 
< 
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
---
>    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
225,247c225
<    DState;
< 
< 
< 
< 
< 
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
---
>    DStatedefine ADD_CHAR_TO_BLOCKbz_stream *strm )
231,247c231
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
---
> ADD_CHAR_TO_BLOCKbz_stream *strm )
231,247c231
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
---
> #*strm )
231,247c231
< #define stPos )
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
---
> #define strm )
232,247d231
< 
< 
< (BZ2_bzCompressInitworkFactor )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCKbz_stream *strm )
(96.6 %, 7004 bytes)
225,234c225
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ2_bzDecompressInit) 
225,234c225
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    #) 
225,235c225
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    #define ( bz_stream* strm, 
225,235c225
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    #define ADD_CHAR_TO_BLOCKbz_stream bz_stream* strm, 
225,235c225
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    #define ADD_CHAR_TO_BLOCKbz_stream ** strm, 
225,235c225
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    #define ADD_CHAR_TO_BLOCKbz_stream *strm strm, 
226,235c226
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> , 
234,236c234
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int        verbosity,
234,236c234
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int verbosity,
234,236c234
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API,
234,237c234
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(int        small )
234,237c234
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(BZ2_bzDecompressInitsmall )
235,237c235
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      )
235,238c235
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
---
>                      ( ;
235,255c235
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>                      ( bz_stream(BZ2_bzDecompressEnd)  ( bz_stream *strm )
235,255c235
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>                      ( bz_stream* BZ2_bzDecompressEnd)  ( bz_stream *strm )
235,255c235
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>                      ( bz_stream* strm)  ( bz_stream *strm )
236,255c236
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>                        ( bz_stream *strm )
236,255c236
<                        int        verbosity,
<                        int        small )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>                        int        bz_stream *strm )
(96.6 %, 6881 bytes)
234,253c234
< int BZ_API(BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
---
> int BZ_API(BZ2_bzDecompressInitsmall ;
235,259d234
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
252,260c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> define BZ_SETERR(eee)                    \
252,260c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> (BZ_SETERR(eee)                    \
252,260c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> (BZ2_bzDecompressEnd(eee)                    \
252,260c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> (BZ2_bzDecompressEnd)  eee)                    \
252,260c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> (BZ2_bzDecompressEnd)  ( )                    \
252,260c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> (BZ2_bzDecompressEnd)  ( bz_stream \
252,263c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
> (BZ2_bzDecompressEnd)  ( bz_stream *typedef 
252,264c252
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> (BZ2_bzDecompressEnd)  ( bz_stream *strm struct {
253,264c253
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> {
260,265c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
---
> Bool      writing;
260,265c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
---
> #writing;
260,265c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
---
> #define ;
260,266c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
---
> #define BZ_SETERRbz_stream strm;
260,266c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
---
> #define BZ_SETERR(strm;
260,266c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
---
> #define BZ_SETERR(eee;
260,267c260
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
> #define BZ_SETERR(eee)                    Int32     lastErr;
263,267c263
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
> lastErr;
264,267c264
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>    ;
264,268c264
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>    struct Bool      initialisedOk;
265,268c265
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       initialisedOk;
265,268c265
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      ;
265,269c265
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Bool      writing}
266,270c266
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bzFile;
266,270c266
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bz_stream ;
266,278c266
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strmBZFILE* BZ_API(BZ2_bzWriteOpen) 
267,278c267
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
267,278c267
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     BZ_API(BZ2_bzWriteOpen) 
267,278c267
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErr(BZ2_bzWriteOpen) 
268,278c268
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
268,278c268
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      ) 
268,279c268
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOk( int*  bzerror,      
269,279c269
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    int*  bzerror,      
270,279c270
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    *  bzerror,      
270,279c270
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFilebzerror,      
278,279c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ,      
278,280c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEFILE* f, 
278,280c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* * f, 
278,280c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_APIf, 
278,280c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(, 
278,281c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   blockSize100k, 
279,281c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     blockSize100k, 
279,281c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( , 
279,282c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intint   verbosity,
279,282c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  verbosity,
279,282c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerror,
280,282d279
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
280,283c280
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEworkFactor )
280,283c280
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* )
280,284c280
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       FILE* f;
281,289c281
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       void BZ_API(BZ2_bzWrite)
281,289c281
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ_API(BZ2_bzWrite)
281,289c281
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   blockSize100k(BZ2_bzWrite)
282,289c282
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       BZ2_bzWrite)
282,289c282
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   )
282,290c282
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   verbosity( int*    bzerror, 
283,290c283
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int*    bzerror, 
283,290c283
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   *    bzerror, 
283,290c283
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   workFactor bzerror, 
284,290c284
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> , 
289,291c289
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> BZFILE* b, 
289,291c289
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void * b, 
289,291c289
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_APIb, 
289,291c289
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(, 
289,292c289
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWritevoid*   buf, 
290,292c290
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              *   buf, 
290,292c290
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( buf, 
290,292c290
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int, 
290,293c290
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    int     len )
290,293c290
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerrorlen )
291,293c291
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                )
291,294c291
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE;
291,298c291
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE* void BZ_API(BZ2_bzWriteClose)
291,298c291
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE* bBZ_API(BZ2_bzWriteClose)
292,298c292
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                (BZ2_bzWriteClose)
292,298c292
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                voidBZ2_bzWriteClose)
292,298c292
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   )
292,299c292
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                void*   buf( int*          bzerror, 
293,299c293
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int*          bzerror, 
293,299c293
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     *          bzerror, 
293,299c293
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     len bzerror, 
294,299c294
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> , 
298,300c298
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
298,300c298
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void *       b, 
298,300c298
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_APIb, 
298,300c298
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(, 
298,301c298
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteCloseint           abandon,
299,301c299
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   abandon,
299,301c299
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( ,
299,302c299
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intunsigned int* nbytes_in,
299,302c299
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          int* nbytes_in,
299,302c299
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerror* nbytes_in,
300,302c300
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     nbytes_in,
300,302c300
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE,
300,303c300
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       unsigned int* nbytes_out )
300,303c300
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bint* nbytes_out )
301,303c301
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     * nbytes_out )
301,303c301
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           nbytes_out )
301,303c301
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandon)
302,304c302
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     ;
302,307c302
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned void BZ_API(BZ2_bzWriteClose64)
302,307c302
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intBZ_API(BZ2_bzWriteClose64)
302,307c302
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* (BZ2_bzWriteClose64)
302,307c302
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_inBZ2_bzWriteClose64)
303,307c303
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     )
303,308c303
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned ( int*          bzerror, 
303,308c303
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned intint*          bzerror, 
303,308c303
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* *          bzerror, 
303,308c303
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out bzerror, 
304,308c304
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> , 
307,309c307
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
307,309c307
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void *       b, 
307,309c307
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_APIb, 
307,309c307
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(, 
307,310c307
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose64int           abandon,
308,310c308
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   abandon,
308,310c308
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( ,
308,311c308
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intunsigned int* nbytes_in_lo32,
308,311c308
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          int* nbytes_in_lo32,
308,311c308
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerror* nbytes_in_lo32,
309,311c309
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     nbytes_in_lo32,
309,311c309
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE,
309,312c309
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       unsigned int* nbytes_in_hi32,
309,312c309
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bint* nbytes_in_hi32,
310,312c310
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
310,312c310
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           nbytes_in_hi32,
311,312d310
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
311,312d310
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
311,312d310
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
311,312d310
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
311,312d310
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
312,313d311
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
312,313d311
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
312,313d311
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
312,313d311
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
312,313d311
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
312,314c312
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32)
313,315c313
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     ;
313,319c313
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned BZFILE* BZ_API(BZ2_bzReadOpen) 
313,319c313
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ_API(BZ2_bzReadOpen) 
313,319c313
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ_API(BZ2_bzReadOpen) 
313,319c313
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_lo32(BZ2_bzReadOpen) 
314,319c314
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZ2_bzReadOpen) 
314,319c314
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned ) 
314,320c314
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int( int*  bzerror, 
314,320c314
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* int*  bzerror, 
314,320c314
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 *  bzerror, 
315,320c315
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> bzerror, 
319,320c319
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> , 
319,321c319
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILEFILE* f, 
319,321c319
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* * f, 
319,321c319
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_APIf, 
319,321c319
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(, 
319,322c319
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzReadOpenint   verbosity,
320,322c320
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    verbosity,
320,322c320
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( ,
320,323c320
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( intint   small,
320,323c320
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  small,
320,323c320
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerror,
321,323d320
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
321,324c321
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* unused,
321,324c321
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* unused,
321,324c321
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* f,
322,324d321
<                      int   verbosity,
<                      int   small,
<                      void* unused,
322,324d321
<                      int   verbosity,
<                      int   small,
<                      void* unused,
322,325c322
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbosity)
323,326c323
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      ;
323,330c323
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      int   void ;
323,330c323
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      int   small;
324,334c324
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int BZ_API(BZ2_bzRead) 
324,334c324
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      voidBZ_API(BZ2_bzRead) 
324,334c324
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      void* (BZ2_bzRead) 
324,334c324
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      void* unusedBZ2_bzRead) 
325,334c325
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      ) 
325,335c325
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   ( int*    bzerror, 
325,335c325
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   nUnused int*    bzerror, 
326,335c326
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> *    bzerror, 
330,335c330
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> bzerror, 
330,335c330
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void , 
334,336c334
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> BZFILE* b, 
334,336c334
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int * b, 
334,336c334
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_APIb, 
334,336c334
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(, 
334,337c334
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzReadvoid*   buf, 
335,337c335
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            *   buf, 
335,337c335
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( buf, 
335,337c335
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int, 
335,338c335
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    int     len )
335,338c335
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorlen )
336,338c336
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              )
336,339c336
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE{
336,341c336
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzFile* bzf = (bzFile*)b;
336,341c336
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b* bzf = (bzFile*)b;
337,341c337
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzf = (bzFile*)b;
337,341c337
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void= (bzFile*)b;
337,341c337
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   (bzFile*)b;
337,341c337
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufbzFile*)b;
338,341c338
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              *)b;
338,341c338
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     )b;
338,341c338
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     len b;
339,341c339
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
> ;
341,342d340
<    bzFile* bzf = (bzFile*)b;
< 
341,343c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile(len len == 0)
341,343c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* len len == 0)
341,343c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf len == 0)
341,343c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = == 0)
341,343c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (0)
341,343c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (bzFile)
341,344c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
---
>    bzFile* bzf = (bzFile*;
341,346c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*)bzf->strm.avail_out = len;
341,346c341
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*)b->strm.avail_out = len;
343,346c343
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    strm.avail_out = len;
343,346c343
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR.avail_out = len;
343,346c343
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR(avail_out = len;
(96.7 %, 6845 bytes)
341,344c341
<    bzFile* bzf = (0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (;
341,345c341
<    bzFile* bzf = (0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
---
>    bzFile* bzf = (00; 
342,345c342
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
---
>       ; 
344,346c344
<    bzf->strm.avail_out = len;
<    0; 
< }
---
>    }
344,350c344
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzfvoid BZ_API(BZ2_bzReadGetUnused) 
(96.7 %, 6808 bytes)
342,348c342
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       bzerror, 
343,348c343
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> , 
347,349c347
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> BZFILE* b, 
347,349c347
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void * b, 
347,349c347
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_APIb, 
347,349c347
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(, 
347,350c347
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedvoid**  unused, 
348,350c348
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      **  unused, 
348,350c348
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( *  unused, 
348,350c348
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( intunused, 
348,350c348
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    , 
348,351c348
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrorint*    nUnused )
349,351c349
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
349,351c349
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILEnUnused )
349,351c349
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* )
349,352c349
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        BZFILE* b;
350,360c350
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int BZ_API(BZ2_bzBuffToBuffCompress) 
350,360c350
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        voidBZ_API(BZ2_bzBuffToBuffCompress) 
350,360c350
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*(BZ2_bzBuffToBuffCompress) 
350,360c350
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  BZ2_bzBuffToBuffCompress) 
350,360c350
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unused) 
351,361c351
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        ( char*         dest, 
351,361c351
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        intchar*         dest, 
351,361c351
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    *         dest, 
351,361c351
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused dest, 
352,361c352
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> , 
360,362c360
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> unsigned int* destLen,
360,362c360
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int int* destLen,
360,362c360
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API* destLen,
360,362c360
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(destLen,
360,362c360
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompress,
361,363c361
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          char*         source, 
361,363c361
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( *         source, 
361,363c361
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( charsource, 
361,363c361
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         , 
361,364c361
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destunsigned int  sourceLen,
362,364c362
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
362,364c362
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned sourceLen,
362,364c362
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int,
362,365c362
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* int           blockSize100k, 
362,365c362
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLenblockSize100k, 
363,365c363
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
363,366c363
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            charint           verbosity, 
363,366c363
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         verbosity, 
364,366d363
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
364,366d363
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
364,367c364
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned workFactor )
364,367c364
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  )
364,368c364
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            unsigned int  sourceLen;
365,372c365
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int BZ_API(BZ2_bzBuffToBuffDecompress) 
365,372c365
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           BZ_API(BZ2_bzBuffToBuffDecompress) 
365,372c365
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           blockSize100k(BZ2_bzBuffToBuffDecompress) 
366,372c366
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ2_bzBuffToBuffDecompress) 
366,372c366
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           ) 
366,373c366
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           verbosity( char*         dest, 
367,373c367
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            char*         dest, 
367,373c367
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           *         dest, 
367,373c367
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           workFactor dest, 
368,373c368
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> , 
372,374c372
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> unsigned int* destLen,
372,374c372
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int int* destLen,
372,374c372
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API* destLen,
372,374c372
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(destLen,
372,374c372
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompress,
373,375c373
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            char*         source, 
373,375c373
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( *         source, 
373,375c373
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( charsource, 
373,375c373
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         , 
373,376c373
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destunsigned int  sourceLen,
374,376c374
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
374,376c374
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned sourceLen,
374,376c374
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int,
374,377c374
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* int           small,
374,377c374
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLensmall,
375,377c375
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
375,378c375
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              charint           verbosity )
375,378c375
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         verbosity )
375,378c375
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         source)
376,379c376
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              ;
376,388c376
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned const char * BZ_API(BZ2_bzlibVersion)(void)
376,388c376
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  char * BZ_API(BZ2_bzlibVersion)(void)
376,388c376
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              unsigned int  sourceLen* BZ_API(BZ2_bzlibVersion)(void)
377,388c377
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              BZ_API(BZ2_bzlibVersion)(void)
377,388c377
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           (BZ2_bzlibVersion)(void)
377,388c377
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           smallBZ2_bzlibVersion)(void)
378,388c378
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              )(void)
378,388c378
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           (void)
378,388c378
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>                              int           verbosity void)
379,388c379
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> )
388d387
< const char * BZ_API(BZ2_bzlibVersion)(void)
388,399c388
< const char * BZ_API(BZ2_bzlibVersion)(void)
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> const BZFILE * BZ_API(BZ2_bzopen)
(96.7 %, 6764 bytes)
388,399c388
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> *path,
398,399c398
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> path,
398,399c398
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE ,
398,400c398
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * const char *mode )
398,400c398
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_APIchar *mode )
398,400c398
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(*mode )
398,400c398
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(BZ2_bzopenmode )
(96.7 %, 6689 bytes)
398,404c398
< BZFILE * BZ_API(*mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API(( int fd,
398,404c398
< BZFILE * BZ_API(*mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API(*int fd,
398,404c398
< BZFILE * BZ_API(*mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API(*mode fd,
399,404c399
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ,
403,405c403
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> const char *mode )
403,405c403
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE char *mode )
403,405c403
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * *mode )
403,405c403
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_APImode )
403,405c403
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API()
403,406c403
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< ;
---
> BZFILE * BZ_API(BZ2_bzdopen;
404,410c404
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
404,410c404
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
404,410c404
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int (BZ2_bzread) (BZFILE* b, void* buf, int len )
404,410c404
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fdBZ2_bzread) (BZFILE* b, void* buf, int len )
405,410c405
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  ) (BZFILE* b, void* buf, int len )
405,410c405
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const (BZFILE* b, void* buf, int len )
405,410c405
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char BZFILE* b, void* buf, int len )
405,410c405
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf, int len )
405,410c405
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode b, void* buf, int len )
406,410c406
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> void* buf, int len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int * buf, int len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIbuf, int len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(, int len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzreadint len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) len )
410c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) ()
410,411c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) (BZFILE{
410,412c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* int bzerr, nread;
410,412c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* bbzerr, nread;
410,412c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, , nread;
410,412c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, voidnread;
410,412c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* ;
410,413c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bufif (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
410,413c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
410,413c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int ((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
410,413c410
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len (bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
411,413c411
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
412,413c412
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    *)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
412,413c412
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int )b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
412,413c412
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrb)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
412,413c412
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, )->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
412,413c412
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ((|| bzerr == BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzerr == BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile== BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*BZ_STREAM_END) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)) ; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b; else ;
413c413
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (((bzFile*)b)else ;
(96.7 %, 6664 bytes)
413,418c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (int BZ_API()
413,418c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK BZ_API()
413,418c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK || ()
413,418c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK || bzerr )
413,419c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
---
>    if (BZ_OK || bzerr == ;
413,448c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    if (BZ_OK || bzerr == BZ_STREAM_END#define BZ_UNIX      1
413,448c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) define BZ_UNIX      1
413,448c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; BZ_UNIX      1
413,448c413
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else 1
414,450d413
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
418,451c418
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
> define BZ_LCCWIN32  )  
418,451c418
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
> int BZ_LCCWIN32  )  
418,451c418
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
> int BZ_API)  
418,452c418
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> int BZ_API(#define ERROR_IF_MINUS_ONE(i) 
419,452c419
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> define ERROR_IF_MINUS_ONE(i) 
448,452c448
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> ERROR_IF_MINUS_ONE(i) 
448,452c448
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #(i) 
448,452c448
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define i) 
448,452c448
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define BZ_UNIX      ) 
451,457d450
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
(96.8 %, 6595 bytes)
448,455c448
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define h>
448,455c448
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define i>
454,455d453
< #if BZ_UNIX
< #   include <fcntl.h>
454,456c454
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #include <utime.h>
454,456c454
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #if <utime.h>
455,456c455
< #   include <fcntl.h>
< #   include <utime.h>
---
> utime.h>
455,456c455
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   .h>
(96.8 %, 6560 bytes)
455,460c455
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
---
> endif 
455,467c455
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
---
> utime#define True  0)
455,467c455
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
---
> utime.define True  0)
455,467c455
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
---
> utime.hTrue  0)
457,467c457
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
---
> 0)
457,467c457
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
---
> #   )
457,470c457
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
---
> #   define typedef int IntNative;
458,470c458
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
---
>       int IntNative;
458,470c458
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
---
>       rootdefine IntNative;
460,470c460
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
---
> ;
460,484c460
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> ##define SM_I2O           
\ No newline at end of file
467,484c467
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> define SM_I2O           
\ No newline at end of file
467,484c467
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #SM_I2O           
\ No newline at end of file
467,484c467
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #define 
\ No newline at end of file
467,484c467
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #define True  
\ No newline at end of file
467,484c467
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #define True  0
\ No newline at end of file
470,484d469
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
(96.8 %, 6494 bytes)
===< pass_clex :: rm-toks-9 >===
9,13c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
9,13c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> 4
11,14c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> ##define define )
11,14c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> #define define define )
11,14c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> #define BZ_OK                define )
12,14c12
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> )
12,15c12
< #3
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_CONFIG_ERROR      (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> define BZ_CONFIG_ERROR      (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #BZ_CONFIG_ERROR      (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        -9)
14,15c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> 9)
14,15c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #)
14,17c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define typedef 
14,18c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define define struct {
15,18c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> {
15,19c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
---
> #int total_in_hi32;
15,19c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
---
> #define total_in_hi32;
15,19c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
---
> #define BZ_CONFIG_ERROR      ;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      (char *next_out;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      (-*next_out;
15,21c15
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> #define BZ_CONFIG_ERROR      (-9next_out;
17,21c17
< typedef 
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
---
> ;
18,22c18
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>    unsigned int avail_out;
18,22c18
<    struct {
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>    struct int avail_out;
19,22c19
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       avail_out;
19,22c19
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       int ;
19,23c19
<       int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       int total_in_hi32unsigned (**bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       (**bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       char **bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       char **bzfree)(void *,void *);
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       char *next_outbzfree)(void *,void *);
22,23c22
<       unsigned int avail_out;
<       unsigned (**bzfree)(void *,void *);
---
>       )(void *,void *);
(96.9 %, 6428 bytes)
19,20c19
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
>       int *,void *);
20c20
<       unsigned (**bzfree)(void *,void *);
---
>       ,void *);
20c20
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned void *);
20c20
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (*);
20c20
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (*);
20c20
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (**;
20,21c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfreevoid *opaque;
20,21c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree)*opaque;
20,21c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree)(opaque;
20,21c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree)(void ;
20,22c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       unsigned (**bzfree)(void *} 
20,23c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)(void *,bz_stream;
20,23c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)(void *,void ;
20,27c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void *#include <stdio.h>
20,27c20
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       unsigned (**bzfree)(void *,void *)include <stdio.h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       <stdio.h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void stdio.h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *.h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaqueh>
22,27c22
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    >
23,29c23
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    #   define BZ_API(func) func
23,29c23
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamdefine BZ_API(func) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> BZ_API(func) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #(func) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.#   define BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hdefine BZ_EXTERN extern
29,30c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> BZ_EXTERN extern
29,30c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   extern
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(bz_stream *strm 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(bz_stream *strm 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(bz_stream *strm 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(func*strm 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(func) strm 
30,36c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
<    );
---
> );
30,36c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
<    );
---
> #   ;
30,42c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define #define BZ_MAX_UNUSED 5000
30,42c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_EXTERN define BZ_MAX_UNUSED 5000
35,42c35
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_MAX_UNUSED 5000
35,42c35
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_API5000
35,44c35
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_API(typedef void BZFILE;
35,44c35
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_API(bz_stream void BZFILE;
35,44c35
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_API(bz_stream *BZFILE;
36,44c36
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>    ;
36,46c36
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42,46c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42,46c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #* BZ_API(BZ2_bzReadOpen) ( 
42,46c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_API(BZ2_bzReadOpen) ( 
42,46c42
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED (BZ2_bzReadOpen) ( 
44,46c44
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
44,46c44
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef ) ( 
44,46c44
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void ( 
44,47c44
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILEint*  bzerror,   
46,47c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
46,47c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN bzerror,   
46,47c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE,   
46,48c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* FILE* f, 
46,48c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API* f, 
46,48c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(f, 
46,48c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen, 
46,49c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) int   verbosity, 
47,49c47
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
47,49c47
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int, 
47,50c47
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  int   small,
47,50c47
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  bzerrorsmall,
48,50c48
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
48,51c48
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEvoid* unused,    
48,51c48
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* * unused,    
48,51c48
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* funused,    
49,51c49
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
49,52c49
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
49,52c49
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   verbositynUnused 
50,53c50
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
50,53c50
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
50,55c50
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   smallBZ_EXTERN void ;
51,55c51
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void ;
51,55c51
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void;
51,57c51
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
51,57c51
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unusedvoid BZ_API(BZ2_bzReadGetUnused) ( 
52,57c52
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_API(BZ2_bzReadGetUnused) ( 
52,57c52
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   (BZ2_bzReadGetUnused) ( 
53,57c53
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    BZ2_bzReadGetUnused) ( 
53,57c53
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )) ( 
55,57c55
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
55,58c55
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
55,58c55
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
57,58c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> bzerror, 
57,58c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
57,59c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
57,59c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API* b, 
57,59c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(b, 
57,59c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused, 
57,60c57
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) void**  unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*  unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    unused,  
58,60c58
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror,  
59,60d58
<       BZFILE* b, 
<       void**  unused,  
59,61c59
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE*    nUnused 
59,61c59
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* nUnused 
59,62c59
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* b);
60,62c60
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       voidBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*int BZ_API(BZ2_bzRead) ( 
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  BZ_API(BZ2_bzRead) ( 
60,64c60
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unused(BZ2_bzRead) ( 
61,64c61
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ2_bzRead) ( 
61,64c61
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int) ( 
61,64c61
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    ( 
62,65c62
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
62,65c62
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
64,65c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> bzerror, 
64,65c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
64,66c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZFILE* b, 
64,66c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API* b, 
64,66c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(b, 
64,66c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead, 
64,67c64
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) void*   buf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
65,67c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
65,68c65
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
66,68c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
66,69c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
66,71c66
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* bBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void* BZ_API(BZ2_bzWriteOpen) ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZ_API(BZ2_bzWriteOpen) ( 
67,71c67
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   buf(BZ2_bzWriteOpen) ( 
68,71c68
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ2_bzWriteOpen) ( 
68,71c68
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     ) ( 
69,71c69
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    ( 
69,72c69
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )int*  bzerror,      
71,72c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> *  bzerror,      
71,72c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN bzerror,      
71,72c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE,      
71,73c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* FILE* f, 
71,73c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API* f, 
71,73c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(f, 
71,73c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
71,74c71
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   blockSize100k, 
72,74c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
72,74c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int, 
72,75c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
72,75c72
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
73,75c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
73,76c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILEint   workFactor 
73,76c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* workFactor 
73,77c73
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* f);
74,77c74
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
74,79c74
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
74,79c74
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100kvoid BZ_API(BZ2_bzWrite) ( 
75,79c75
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_API(BZ2_bzWrite) ( 
75,79c75
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   (BZ2_bzWrite) ( 
75,79c75
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityBZ2_bzWrite) ( 
76,79c76
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ) ( 
76,79c76
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ( 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
77,80c77
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
79,80c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> bzerror, 
79,80c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API* b, 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(b, 
79,81c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, 
79,82c79
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) void*   buf, 
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intbuf, 
80,82c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    , 
80,83c80
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    bzerrorint     len 
81,83c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
81,84c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE);
81,84c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* ;
81,86c81
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* bBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       voidBZ_API(BZ2_bzWriteClose) ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   (BZ2_bzWriteClose) ( 
82,86c82
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufBZ2_bzWriteClose) ( 
83,86c83
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       ) ( 
83,86c83
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     ( 
84,87c84
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    int*          bzerror, 
84,87c84
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    )*          bzerror, 
86,87c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> bzerror, 
86,87c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN , 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZFILE*       b, 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API*       b, 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(b, 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
86,89c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int           abandon, 
87,89c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
87,89c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
87,90c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          unsigned int* nbytes_in, 
87,90c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrorint* nbytes_in, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEnbytes_in, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       , 
88,91c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bunsigned int* nbytes_out 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           * nbytes_out 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonnbytes_out 
90,92c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
90,92c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned ;
90,94c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
90,94c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* void BZ_API(BZ2_bzWriteClose64) ( 
90,94c90
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_inBZ_API(BZ2_bzWriteClose64) ( 
91,94c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       (BZ2_bzWriteClose64) ( 
91,94c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ2_bzWriteClose64) ( 
91,94c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int) ( 
91,94c91
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ( 
92,95c92
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    int*          bzerror, 
92,95c92
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    )*          bzerror, 
94,95c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> bzerror, 
94,95c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN , 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZFILE*       b, 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API*       b, 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(b, 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
94,97c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) int           abandon, 
95,97c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
95,97c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int, 
95,98c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          unsigned int* nbytes_in_lo32, 
95,98c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrorint* nbytes_in_lo32, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEnbytes_in_lo32, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       , 
96,99c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bunsigned int* nbytes_in_hi32, 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           * nbytes_in_hi32, 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonnbytes_in_hi32, 
98,99c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned unsigned int* nbytes_out_lo32, 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intint* nbytes_out_lo32, 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* * nbytes_out_lo32, 
98,100c98
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32nbytes_out_lo32, 
99,100c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       , 
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned unsigned int* nbytes_out_hi32
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intint* nbytes_out_hi32
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* * nbytes_out_hi32
99,101c99
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32nbytes_out_hi32
100,102c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       );
100,102c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned ;
100,107c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
100,107c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* int BZ_API(BZ2_bzBuffToBuffCompress) ( 
100,107c100
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32BZ_API(BZ2_bzBuffToBuffCompress) ( 
101,107c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       (BZ2_bzBuffToBuffCompress) ( 
101,107c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ2_bzBuffToBuffCompress) ( 
101,107c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int) ( 
101,107c101
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ( 
102,108c102
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    char*         dest, 
102,108c102
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    )*         dest, 
107,108c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> dest, 
107,108c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN , 
107,109c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int unsigned int* destLen,
107,109c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIint* destLen,
107,109c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(* destLen,
107,109c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressdestLen,
107,109c107
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ,
108,109d107
<       char*         dest, 
<       unsigned int* destLen,
108,109d107
<       char*         dest, 
<       unsigned int* destLen,
108,109d107
<       char*         dest, 
<       unsigned int* destLen,
109,110d108
<       unsigned int* destLen,
<       char*         source, 
109,110d108
<       unsigned int* destLen,
<       char*         source, 
109,110d108
<       unsigned int* destLen,
<       char*         source, 
109,111c109
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
109,111c109
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
109,112c109
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLenint           blockSize100k, 
110,112c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       blockSize100k, 
110,112c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char, 
110,113c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         int           verbosity, 
110,113c110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         sourceverbosity, 
111,113c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
111,114c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int           workFactor 
111,114c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  workFactor 
111,115c111
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  sourceLen);
112,115c112
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
112,117c112
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
112,117c112
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
113,117c113
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
113,117c113
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
113,117c113
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityBZ2_bzBuffToBuffDecompress) ( 
114,117c114
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
114,117c114
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
115,118c115
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    char*         dest, 
115,118c115
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    )*         dest, 
117,118c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> dest, 
117,118c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN , 
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int unsigned int* destLen,
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIint* destLen,
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(* destLen,
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ,
118,119d117
<       char*         dest, 
<       unsigned int* destLen,
118,119d117
<       char*         dest, 
<       unsigned int* destLen,
118,119d117
<       char*         dest, 
<       unsigned int* destLen,
119,120d118
<       unsigned int* destLen,
<       char*         source, 
119,120d118
<       unsigned int* destLen,
<       char*         source, 
119,120d118
<       unsigned int* destLen,
<       char*         source, 
119,121c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intsourceLen,
119,121c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* ,
119,122c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLenint           small, 
120,122c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
120,122c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char, 
120,123c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         int           );
120,123c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         source);
121,123c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       ;
121,125c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       unsigned BZ_EXTERN BZFILE * BZ_API(*mode
121,125c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       unsigned int  BZFILE * BZ_API(*mode
121,125c121
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       unsigned int  sourceLen* BZ_API(*mode
122,125c122
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       BZ_API(*mode
122,125c122
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       int           (*mode
122,125c122
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       int           small*mode
123,125c123
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(*mode
---
>       mode
125,127d124
< BZ_EXTERN BZFILE * BZ_API(*mode
<    );
< 
125,127d124
< BZ_EXTERN BZFILE * BZ_API(*mode
<    );
< 
125,127d124
< BZ_EXTERN BZFILE * BZ_API(*mode
<    );
< 
(96.9 %, 6389 bytes)
123,125c123
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           (
123,126c123
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       int           )int        fd,
125,126c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> fd,
125,126c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> BZ_EXTERN ,
125,127c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE const char *mode
125,127c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * char *mode
125,127c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API*mode
125,127c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(mode
125,128c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen);
125,128c125
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) ;
126,130c126
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN ;
---
>       BZ_EXTERN ;
126,130c126
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN ;
---
>       int        ;
126,132c126
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
---
>       int        fdvoid BZ_API();
127,132c127
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
---
>       BZ_API();
127,132c127
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
---
>       const ();
127,132c127
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
---
>       const char );
127,132c127
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
---
>       const char *;
128,142c128
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    #define BZ_VERSION  "1.0.2, 30-Dec-2001"
128,142c128
<    );
<          
< BZ_EXTERN ;
< 
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    )define BZ_VERSION  "1.0.2, 30-Dec-2001"
130,142c130
< BZ_EXTERN ;
< 
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
130,142c130
< BZ_EXTERN ;
< 
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN "1.0.2, 30-Dec-2001"
132,143d131
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
132,144c132
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> void char            Char;
132,144c132
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> void BZ_APIChar;
132,144c132
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> void BZ_API(;
132,145c132
< void BZ_API();
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> void BZ_API()typedef unsigned char   Bool;
142,145c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> unsigned char   Bool;
142,145c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #char   Bool;
142,145c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define Bool;
(96.9 %, 6323 bytes)
132,133d131
< typedef char            Char;
< typedef unsigned char   Bool;
132,133d131
< typedef char            Char;
< typedef unsigned char   Bool;
132,134c132
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            char   UChar;
132,134c132
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            CharUChar;
133,134c133
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
133,135c133
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
133,135c133
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned int             Int32;
133,135c133
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Int32;
134,135d133
< typedef unsigned char   UChar;
< typedef int             Int32;
134,135d133
< typedef unsigned char   UChar;
< typedef int             Int32;
134,135d133
< typedef unsigned char   UChar;
< typedef int             Int32;
134,135d133
< typedef unsigned char   UChar;
< typedef int             Int32;
134,136c134
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UInt32;
135,136d134
< typedef int             Int32;
< typedef unsigned int    UInt32;
135,136d134
< typedef int             Int32;
< typedef unsigned int    UInt32;
135,136d134
< typedef int             Int32;
< typedef unsigned int    UInt32;
135,137c135
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             Int16;
136,137d135
< typedef unsigned int    UInt32;
< typedef short           Int16;
136,137d135
< typedef unsigned int    UInt32;
< typedef short           Int16;
136,137d135
< typedef unsigned int    UInt32;
< typedef short           Int16;
136,137d135
< typedef unsigned int    UInt32;
< typedef short           Int16;
136,138c136
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    UInt16;
137,138d136
< typedef short           Int16;
< typedef unsigned short  UInt16;
137,139d136
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
(96.9 %, 6260 bytes)
136,143c136
< typedef unsigned int    UInt32;
< 
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
---
> typedef unsigned int    UInt32#1
138,143c138
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
---
> 1
138,145c138
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
138,145c138
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
138,145c138
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_HDR_0 BZ_N_GROUPS 6
142,145c142
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> 6
142,146c142
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> ##define BZ_G_SIZE   50
142,146c142
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define define BZ_G_SIZE   50
142,146c142
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_ALPHA_SIZE BZ_G_SIZE   50
143,146c143
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> 50
143,147c143
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> ##define BZ_N_ITERS  4
145,147c145
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> define BZ_N_ITERS  4
145,147c145
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #BZ_N_ITERS  4
145,147c145
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define 4
145,149c145
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_GROUPS #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
146,149c146
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
146,149c146
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
146,149c146
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define (2 + (900000 / BZ_G_SIZE))
146,149c146
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_G_SIZE   2 + (900000 / BZ_G_SIZE))
147,149c147
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> + (900000 / BZ_G_SIZE))
147,149c147
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #(900000 / BZ_G_SIZE))
147,149c147
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define 900000 / BZ_G_SIZE))
147,149c147
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_ITERS  / BZ_G_SIZE))
149c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> BZ_G_SIZE))
149c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #))
149c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define )
149,157c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
---
> #define BZ_MAX_SELECTORS \
149,159c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_MAX_SELECTORS (#define BZ_RAND_INIT_MASK                      2)
149,159c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_MAX_SELECTORS (2 define BZ_RAND_INIT_MASK                      2)
149,159c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_MAX_SELECTORS (2 + BZ_RAND_INIT_MASK                      2)
149,159c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_MAX_SELECTORS (2 + (2)
149,159c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_MAX_SELECTORS (2 + (900000 )
149,166c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_MAX_SELECTORS (2 + (900000 / typedef
149,167c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZEstruct {
149,167c149
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE){
157,169c157
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
> ;
159,170c159
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
---
> UChar    selector   [BZ_MAX_SELECTORS];
159,170c159
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
---
> #selector   [BZ_MAX_SELECTORS];
159,170c159
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
---
> #define [BZ_MAX_SELECTORS];
159,170c159
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
---
> #define BZ_RAND_INIT_MASK                      BZ_MAX_SELECTORS];
159,170c159
< #define BZ_RAND_INIT_MASK                      2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
---
> #define BZ_RAND_INIT_MASK                      2];
166,170c166
< typedef
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
---
> ;
167,171c167
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
---
>    ;
167,172c167
<    struct {
<       
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
---
>    struct Int32    rfreq   [];
169,172c169
<       ;
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
---
>       rfreq   [];
170,172c170
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
---
>       [];
170,172c170
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
---
>       UChar    ];
170,172c170
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
---
>       UChar    selector   ;
170,174c170
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
< 
<    }
---
>       UChar    selector   [}
170,175c170
<       UChar    selector   [BZ_MAX_SELECTORS];
<       ;
<       Int32    rfreq   [];
< 
<    }
<    EState;
---
>       UChar    selector   [BZ_MAX_SELECTORSEState;
171,175d170
<       ;
<       Int32    rfreq   [];
< 
<    }
<    EState;
172,183d171
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
172,185c172
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
---
>       #16
172,185c172
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
---
>       Int32    16
172,191c172
<       Int32    rfreq   [];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
< 
< 
< 
< 
< 
< typedef
---
>       Int32    rfreq   typedef
(97.0 %, 6207 bytes)
170,190c170
<       UChar    selector   ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>       UChar    selector   {
172,192c172
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
---
>    UInt32   ;
173,192c173
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
---
>    ;
174,193d173
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       ;
181,194c181
< ;
< 
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
---
> UChar    seqToUnseq[256];
183,194c183
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
---
> seqToUnseq[256];
183,194c183
< #16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
---
> #[256];
189,194c189
< typedef
<    struct {
<       
<       UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
---
> 256];
190,194c190
<    struct {
<       
<       UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
---
>    ];
(97.0 %, 6142 bytes)
172,177c172
<    UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
172,177c172
<    UInt32   ;
<       ;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    UInt32   len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(97.0 %, 6077 bytes)
172,174c172
<    UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
172,174c172
<    UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    UChar    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(97.1 %, 6022 bytes)
172,173c172
<    Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       ;
---
>    ;
172,175c172
<    Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       ;
< 
<    }
---
>    Int32    }
(97.1 %, 5966 bytes)
172,184c172
<    ;
< 
<    }
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInitsmall )
---
>    int BZ_API(BZ2_bzDecompressInitsmall )
174,184c174
<    }
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInitsmall )
---
>    BZ_API(BZ2_bzDecompressInitsmall )
175,184c175
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInitsmall )
---
>    (BZ2_bzDecompressInitsmall )
175,184c175
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInitsmall )
---
>    #BZ2_bzDecompressInitsmall )
175,184c175
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInitsmall )
---
>    #define )
175,185c175
<    #define ADD_CHAR_TO_BLOCKbz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInitsmall )
< ;
---
>    #define ADD_CHAR_TO_BLOCKbz_stream ;
(97.1 %, 5904 bytes)
175,193c175
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    *strm )
175,193c175
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    (strm )
183,200d182
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
183,200d182
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
193,200d192
< (BZ2_bzDecompressEnd)  ( bz_stream *strm )
< ;
< 
< 
< 
< 
< 
< 
(97.1 %, 5843 bytes)
175,186c175
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    (BZ2_bzDecompressInitsmall typedef 
176,187c176
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> struct {
183,187c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> {
183,188c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
---
> #Bool      writing;
183,188c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
---
> #define writing;
183,188c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
---
> #define BZ_SETERR;
183,189c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
---
> #define BZ_SETERR(bz_stream strm;
183,189c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
---
> #define BZ_SETERR(eeestrm;
183,189c183
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
---
> #define BZ_SETERR(eee)                    ;
186,190c186
< typedef 
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
> Int32     lastErr;
187,190c187
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>    lastErr;
187,190c187
<    struct {
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>    struct ;
188,190d187
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
188,190d187
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
(97.2 %, 5771 bytes)
188,198c188
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
188,198c188
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      BZ2_bzWriteOpen) 
188,198c188
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOk) 
189,199c189
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ( int*  bzerror,      
190,199c190
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    int*  bzerror,      
190,199c190
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile*  bzerror,      
198,199c198
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> bzerror,      
198,199c198
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE,      
198,200c198
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* FILE* f, 
198,200c198
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API* f, 
198,200c198
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(f, 
198,200c198
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen, 
199,201c199
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     int   blockSize100k, 
199,201c199
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( blockSize100k, 
199,201c199
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int, 
199,202c199
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  int   verbosity,
199,202c199
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerrorverbosity,
200,202c200
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
200,203c200
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILEint   workFactor )
200,203c200
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* workFactor )
200,203c200
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* f)
201,204c201
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>                       ;
201,209c201
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   void BZ_API(BZ2_bzWrite)
201,209c201
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   blockSize100kBZ_API(BZ2_bzWrite)
202,209c202
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       (BZ2_bzWrite)
202,209c202
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ2_bzWrite)
202,209c202
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosity)
203,210c203
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       ( int*    bzerror, 
203,210c203
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   int*    bzerror, 
203,210c203
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   workFactor *    bzerror, 
204,210c204
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> bzerror, 
209,210c209
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> , 
209,211c209
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZFILE* b, 
209,211c209
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API* b, 
209,211c209
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(b, 
209,211c209
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWrite, 
210,212c210
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              void*   buf, 
210,212c210
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( *   buf, 
210,212c210
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intbuf, 
210,212c210
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    , 
210,213c210
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerrorint     len )
211,213c211
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                len )
211,213c211
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE)
211,214c211
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
---
>                BZFILE* ;
211,218c211
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZFILE* bvoid BZ_API(BZ2_bzWriteClose)
212,218c212
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZ_API(BZ2_bzWriteClose)
212,218c212
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void(BZ2_bzWriteClose)
212,218c212
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   BZ2_bzWriteClose)
212,218c212
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   buf)
213,219c213
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                ( int*          bzerror, 
213,219c213
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     int*          bzerror, 
213,219c213
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     len *          bzerror, 
214,219c214
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> bzerror, 
218,219c218
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> , 
218,220c218
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZFILE*       b, 
218,220c218
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API*       b, 
218,220c218
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(b, 
218,220c218
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose, 
219,221c219
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
219,221c219
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
219,221c219
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
219,222c219
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          unsigned int* nbytes_in,
219,222c219
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrorint* nbytes_in,
220,222c220
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
220,222c220
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEnbytes_in,
220,222c220
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       ,
220,223c220
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bunsigned int* nbytes_out )
221,223c221
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
221,223c221
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           * nbytes_out )
221,223c221
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonnbytes_out )
222,223c222
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
222,224c222
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned ;
222,227c222
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intvoid BZ_API(BZ2_bzWriteClose64)
222,227c222
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* BZ_API(BZ2_bzWriteClose64)
222,227c222
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_in(BZ2_bzWriteClose64)
223,227c223
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     BZ2_bzWriteClose64)
223,227c223
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned )
223,228c223
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int( int*          bzerror, 
223,228c223
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* int*          bzerror, 
223,228c223
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out *          bzerror, 
224,228c224
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> bzerror, 
227,228c227
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> , 
227,229c227
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZFILE*       b, 
227,229c227
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API*       b, 
227,229c227
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(b, 
227,229c227
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64, 
228,230c228
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   int           abandon,
228,230c228
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( abandon,
228,230c228
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int,
228,231c228
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          unsigned int* nbytes_in_lo32,
228,231c228
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrorint* nbytes_in_lo32,
229,231c229
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
229,231c229
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEnbytes_in_lo32,
229,231c229
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       ,
229,232c229
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bunsigned int* nbytes_in_hi32,
230,232c230
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
230,232c230
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           * nbytes_in_hi32,
230,232c230
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonnbytes_in_hi32,
231,232c231
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
231,233c231
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned unsigned int* nbytes_out_lo32,
231,233c231
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intint* nbytes_out_lo32,
231,233c231
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* * nbytes_out_lo32,
231,233c231
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32nbytes_out_lo32,
232,233c232
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     ,
232,234c232
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned unsigned int* nbytes_out_hi32 )
232,234c232
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intint* nbytes_out_hi32 )
232,234c232
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* * nbytes_out_hi32 )
232,234c232
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32nbytes_out_hi32 )
233,234c233
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     )
233,235c233
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned ;
233,239c233
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZFILE* BZ_API(BZ2_bzReadOpen) 
233,239c233
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* * BZ_API(BZ2_bzReadOpen) 
233,239c233
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_lo32BZ_API(BZ2_bzReadOpen) 
234,239c234
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     (BZ2_bzReadOpen) 
234,239c234
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned BZ2_bzReadOpen) 
234,239c234
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int) 
234,240c234
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* ( int*  bzerror, 
234,240c234
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>                     unsigned int* nbytes_out_hi32 int*  bzerror, 
235,240c235
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> *  bzerror, 
239,240c239
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> bzerror, 
239,240c239
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE, 
239,241c239
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* FILE* f, 
239,241c239
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API* f, 
239,241c239
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(f, 
239,241c239
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpen, 
240,242c240
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    int   verbosity,
240,242c240
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( verbosity,
240,242c240
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int,
240,243c240
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  int   small,
240,243c240
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerrorsmall,
241,243c241
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      ,
241,244c241
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEvoid* unused,
241,244c241
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* * unused,
241,244c241
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* funused,
242,244c242
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
242,245c242
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
242,245c242
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbositynUnused )
243,245c243
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
243,246c243
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      int   ;
243,250c243
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      int   smallvoid ;
244,250c244
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      ;
244,254c244
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      voidint BZ_API(BZ2_bzRead) 
244,254c244
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      void* BZ_API(BZ2_bzRead) 
244,254c244
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      void* unused(BZ2_bzRead) 
245,254c245
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      BZ2_bzRead) 
245,254c245
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   ) 
245,255c245
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   nUnused ( int*    bzerror, 
246,255c246
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
250,255c250
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> *    bzerror, 
250,255c250
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void bzerror, 
254,255c254
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> , 
254,256c254
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZFILE* b, 
254,256c254
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API* b, 
254,256c254
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(b, 
254,256c254
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzRead, 
255,257c255
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            void*   buf, 
255,257c255
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( *   buf, 
255,257c255
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intbuf, 
255,257c255
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    , 
255,258c255
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerrorint     len )
256,258c256
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              len )
256,258c256
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE)
256,259c256
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              BZFILE* {
256,261c256
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              BZFILE* bbzFile* bzf = (0)
257,261c257
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              * bzf = (0)
257,261c257
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              voidbzf = (0)
257,261c257
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              void*   = (0)
257,261c257
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              void*   buf(0)
258,261c258
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              0)
258,261c258
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              int     )
258,262c258
<              int     len )
< {
<    
<    bzFile* bzf = (0)
<       ; 
---
>              int     len ; 
259,262d258
< {
<    
<    bzFile* bzf = (0)
<       ; 
261,267c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
261,267c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFileBZ_API(BZ2_bzReadGetUnused) 
261,267c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* (BZ2_bzReadGetUnused) 
261,267c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf BZ2_bzReadGetUnused) 
261,267c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = ) 
261,268c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzFile* bzf = (( int*    bzerror, 
261,268c261
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzFile* bzf = (0int*    bzerror, 
262,268c262
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       *    bzerror, 
263,268c263
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> bzerror, 
267,268c267
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> , 
267,269c267
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZFILE* b, 
267,269c267
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API* b, 
267,269c267
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(b, 
267,269c267
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      void**  unused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( **  unused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*  unused, 
268,270c268
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    unused, 
269,270d268
<                        BZFILE* b, 
<                        void**  unused, 
269,270d268
<                        BZFILE* b, 
<                        void**  unused, 
269,271c269
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE*    nUnused )
269,271c269
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* nUnused )
269,271c269
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b)
270,272c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        ;
270,280c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        voidint BZ_API(BZ2_bzBuffToBuffCompress) 
270,280c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*BZ_API(BZ2_bzBuffToBuffCompress) 
270,280c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  (BZ2_bzBuffToBuffCompress) 
270,280c270
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedBZ2_bzBuffToBuffCompress) 
271,280c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        ) 
271,281c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int( char*         dest, 
271,281c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    char*         dest, 
271,281c271
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused *         dest, 
272,281c272
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> dest, 
280,281c280
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> , 
280,282c280
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int unsigned int* destLen,
280,282c280
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_APIint* destLen,
280,282c280
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(* destLen,
280,282c280
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressdestLen,
281,282c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ,
281,283c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
281,283c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
281,283c281
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         source, 
282,283d281
<                            unsigned int* destLen,
<                            char*         source, 
282,283d281
<                            unsigned int* destLen,
<                            char*         source, 
282,283d281
<                            unsigned int* destLen,
<                            char*         source, 
282,284c282
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intsourceLen,
282,284c282
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* ,
282,285c282
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLenint           blockSize100k, 
283,285c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            blockSize100k, 
283,285c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char, 
283,286c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         int           verbosity, 
283,286c283
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceverbosity, 
284,286c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
284,287c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int           workFactor )
284,287c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  workFactor )
284,287c284
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLen)
285,288c285
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
285,292c285
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           int BZ_API(BZ2_bzBuffToBuffDecompress) 
285,292c285
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           blockSize100kBZ_API(BZ2_bzBuffToBuffDecompress) 
286,292c286
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            (BZ2_bzBuffToBuffDecompress) 
286,292c286
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           BZ2_bzBuffToBuffDecompress) 
286,292c286
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosity) 
287,292d286
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
287,293c287
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           char*         dest, 
287,293c287
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           workFactor *         dest, 
288,293c288
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> dest, 
292,293c292
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> , 
292,294c292
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int unsigned int* destLen,
292,294c292
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIint* destLen,
292,294c292
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(* destLen,
292,294c292
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressdestLen,
293,294c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ,
293,295c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
293,295c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
293,295c293
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         source, 
294,295d293
<                              unsigned int* destLen,
<                              char*         source, 
294,295d293
<                              unsigned int* destLen,
<                              char*         source, 
294,295d293
<                              unsigned int* destLen,
<                              char*         source, 
294,296c294
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intsourceLen,
294,296c294
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* ,
294,297c294
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* destLenint           small,
295,297c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
295,297c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char,
295,298c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         int           verbosity )
295,298c295
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceverbosity )
296,298c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
296,299c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
---
>                              unsigned ;
296,308c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
---
>                              unsigned int  ;
296,318c296
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
---
>                              unsigned int  sourceLenBZFILE * BZ_API(*mode )
297,318c297
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
---
>                              * BZ_API(*mode )
297,318c297
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
---
>                              int           BZ_API(*mode )
297,318c297
<                              int           small,
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
---
>                              int           small(*mode )
298,318c298
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
---
>                              *mode )
298,318c298
<                              int           verbosity )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
---
>                              int           mode )
303,322d302
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZFILE * BZ_API(*mode )
< ;
< 
< 
< 
(97.2 %, 5721 bytes)
298,304c298
<                              int           mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                              int           ( int fd,
298,304c298
<                              int           mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                              int           mode int fd,
299,304c299
< ;
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> fd,
303,304c303
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ,
303,305c303
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE const char *mode )
303,305c303
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * char *mode )
303,305c303
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API*mode )
303,305c303
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API(mode )
304,305d303
<                ( int fd,
<                  const char *mode )
304,306c304
<                ( int fd,
<                  const char *mode )
< ;
---
>                ;
304,310c304
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
304,310c304
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
304,310c304
<                ( int fd,
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fd(BZ2_bzread) (BZFILE* b, void* buf, int len )
305,310c305
<                  const char *mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  BZ2_bzread) (BZFILE* b, void* buf, int len )
(97.2 %, 5654 bytes)
303,308c303
< BZFILE * BZ_API(mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE * BZ_API(BZFILE* b, void* buf, int len )
303,308c303
< BZFILE * BZ_API(mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZFILE * BZ_API(mode * b, void* buf, int len )
304,308c304
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int void* buf, int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API* buf, int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(buf, int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread, int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) int len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (len )
308c308
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE)
(97.3 %, 5628 bytes)
308,311c308
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) ((BZ_OK || bzerr == BZ_STREAM_END) ; else ;
308,311c308
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) (len BZ_OK || bzerr == BZ_STREAM_END) ; else ;
309,311c309
< {
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> || bzerr == BZ_STREAM_END) ; else ;
310,311c310
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    bzerr == BZ_STREAM_END) ; else ;
310,311c310
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int == BZ_STREAM_END) ; else ;
310,311c310
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrBZ_STREAM_END) ; else ;
310,311c310
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, ) ; else ;
310,311c310
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread; else ;
311c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    else ;
311c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ;
311,312c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (}
311,316c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK int BZ_API()
311,316c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK || BZ_API()
311,316c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK || bzerr ()
311,316c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
---
>    if (BZ_OK || bzerr == )
311,317c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END;
311,346c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) #define i) 
311,346c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; define i) 
311,346c311
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else i) 
312,346c312
< }
< 
< 
< 
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
---
> ) 
316,351d315
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
< 
< 
< 
< 
< 
316,352c316
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> int if BZ_UNIX
316,352c316
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> int BZ_APIBZ_UNIX
316,353c316
< int BZ_API()
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< utime.h>
---
> int BZ_API(utime.h>
317,353c317
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< utime.h>
---
> .h>
346,353c346
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< utime.h>
---
> h>
346,353c346
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< utime.h>
---
> #>
346,355c346
< #define i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< utime.h>
< 
< #   define \
---
> #define #   define \
(97.3 %, 5568 bytes)
316,319c316
< #if BZ_UNIX
< utime.h>
< 
< #   define \
---
> \
316,320c316
< #if BZ_UNIX
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
---
> #rootdefine NORETURN 
316,320c316
< #if BZ_UNIX
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
---
> #if NORETURN 
317,321d316
< utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
(97.3 %, 5520 bytes)
316,325c316
< #if NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #if 
\ No newline at end of file
318,325d317
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
318,325c318
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #
\ No newline at end of file
325d324
< #define True  
\ No newline at end of file
325c325
< #define True  
\ No newline at end of file
---
> #
\ No newline at end of file
(97.3 %, 5506 bytes)
===< pass_clex :: rm-toks-7 >===
9,12c9
< #2
< 
< #define BZ_OK                0
< #3
---
> 3
9,13c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
---
> #define 4
11,14c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> #define BZ_OK                #define define )
12,14c12
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> define define )
12,14c12
< #3
< #define BZ_STREAM_END        4
< #define define )
---
> #define )
13,14c13
< #define BZ_STREAM_END        4
< #define define )
---
> )
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_CONFIG_ERROR      (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define BZ_CONFIG_ERROR      (-9)
13,15c13
< #define BZ_STREAM_END        4
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
14,15c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> (-9)
14,15c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #-9)
14,15c14
< #define define )
< #define BZ_CONFIG_ERROR      (-9)
---
> #define 9)
15d14
< #define BZ_CONFIG_ERROR      (-9)
(97.3 %, 5479 bytes)
13,16c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        {
13,17c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      int ;
13,17c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (;
13,18c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-unsigned (**bzfree)(void *,void *);
13,18c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9(**bzfree)(void *,void *);
15,18c15
< typedef 
<    struct {
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
> **bzfree)(void *,void *);
16,18c16
<    struct {
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
>    *bzfree)(void *,void *);
16,18c16
<    struct {
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
>    struct bzfree)(void *,void *);
17,18c17
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
>       )(void *,void *);
17,18c17
<       int ;
<       unsigned (**bzfree)(void *,void *);
---
>       int (void *,void *);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       void *,void *);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned *,void *);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (,void *);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (*void *);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (***);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (**bzfree);
18c18
<       unsigned (**bzfree)(void *,void *);
---
>       unsigned (**bzfree);
18,19c18
<       unsigned (**bzfree)(void *,void *);
<       void *opaque;
---
>       unsigned (**bzfree)(void *opaque;
(97.3 %, 5464 bytes)
18,21c18
<       unsigned (**bzfree);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfreebz_stream;
19,21d18
<       void *opaque;
<    } 
<    bz_stream;
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       #include <stdio.h>
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void include <stdio.h>
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *<stdio.h>
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaquestdio.h>
20,25c20
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
21,25c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
21,25c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream>
25,26d24
< #include <stdio.h>
< 
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hfunc
27d26
< #   define BZ_API(func) func
27d26
< #   define BZ_API(func) func
27d26
< #   define BZ_API(func) func
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIextern
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(BZ_API(bz_stream *strm 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(func(bz_stream *strm 
27,33c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   define BZ_API(func) bz_stream *strm 
28,33c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> *strm 
28,33c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
---
> #   strm 
28,34c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
<    );
---
> #   define );
28,34c28
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_API(bz_stream *strm 
<    );
---
> #   define BZ_EXTERN ;
33,39d32
< BZ_API(bz_stream *strm 
<    );
< 
< 
< 
< 
< 
(97.4 %, 5425 bytes)
28,36c28
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN BZFILE;
34,36c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> ;
34,38c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
34,38c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZFILE* BZ_API(BZ2_bzReadOpen) ( 
34,38c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED * BZ_API(BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_API(BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef (BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILE) ( 
38c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN int*  bzerror,   
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE*  bzerror,   
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* bzerror,   
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API,   
38,40c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(FILE* f, 
38,40c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen* f, 
38,40c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) f, 
39,40c39
<       int*  bzerror,   
<       FILE* f, 
---
>       , 
39,41c39
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       intint   verbosity, 
39,41c39
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  verbosity, 
39,41c39
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerror, 
40,41d39
<       FILE* f, 
<       int   verbosity, 
40,42c40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILEsmall,
40,42c40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* ,
40,43c40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* fvoid* unused,    
41,43c41
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
41,43c41
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   unused,    
41,43c41
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosity,    
42,43d41
<       int   small,
<       void* unused,    
42,43d41
<       int   small,
<       void* unused,    
42,45c42
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   small);
43,45c43
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
43,47c43
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       voidBZ_EXTERN void ;
43,47c43
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* void ;
43,47c43
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* unused;
44,49c44
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
44,49c44
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   void BZ_API(BZ2_bzReadGetUnused) ( 
45,49c45
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    BZ_API(BZ2_bzReadGetUnused) ( 
45,49c45
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )(BZ2_bzReadGetUnused) ( 
47,49c47
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadGetUnused) ( 
47,49c47
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN ) ( 
47,49c47
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void ( 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZFILE* b, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused* b, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) b, 
50,51c50
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       intvoid**  unused,  
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    **  unused,  
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror*  unused,  
51,52c51
<       BZFILE* b, 
<       void**  unused,  
---
>       unused,  
51,52c51
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE,  
51,53c51
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* int*    nUnused 
51,53c51
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* b*    nUnused 
52,53c52
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
52,54c52
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void);
52,54c52
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*;
52,56c52
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
52,56c52
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedint BZ_API(BZ2_bzRead) ( 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ_API(BZ2_bzRead) ( 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int(BZ2_bzRead) ( 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    BZ2_bzRead) ( 
54,56c54
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    ) ( 
54,56c54
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )( 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int bzerror, 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API, 
56,58c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZFILE* b, 
56,58c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead* b, 
56,58c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) b, 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intvoid*   buf, 
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    *   buf, 
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorbuf, 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
58,60c58
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILEint     len 
58,60c58
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* len 
58,61c58
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b);
59,61c59
<       void*   buf, 
<       int     len 
<    );
---
>       ;
59,63c59
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       voidBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
59,63c59
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
59,63c59
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   buf* BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     (BZ2_bzWriteOpen) ( 
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ2_bzWriteOpen) ( 
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )) ( 
63c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ( 
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int*  bzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*  bzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* bzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API,      
63,65c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(FILE* f, 
63,65c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen* f, 
63,65c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) f, 
64,65c64
<       int*  bzerror,      
<       FILE* f, 
---
>       , 
64,66c64
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       intint   blockSize100k, 
64,66c64
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  blockSize100k, 
64,66c64
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerror, 
65,66d64
<       FILE* f, 
<       int   blockSize100k, 
65,67c65
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILEverbosity, 
65,67c65
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* , 
65,68c65
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* fint   workFactor 
66,68c66
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
66,69c66
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   );
66,69c66
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   blockSize100k;
67,71c67
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
67,71c67
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   void BZ_API(BZ2_bzWrite) ( 
67,71c67
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityBZ_API(BZ2_bzWrite) ( 
68,71c68
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       (BZ2_bzWrite) ( 
68,71c68
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ2_bzWrite) ( 
69,71c69
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    ) ( 
69,71c69
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )( 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void bzerror, 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API, 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZFILE* b, 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite* b, 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) b, 
72,73c72
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
72,74c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intvoid*   buf, 
72,74c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    *   buf, 
72,74c72
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorbuf, 
73,74c73
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
73,75c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILEint     len 
73,75c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* len 
73,76c73
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b);
74,76c74
<       void*   buf, 
<       int     len 
<    );
---
>       ;
74,78c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       voidBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
74,78c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   void BZ_API(BZ2_bzWriteClose) ( 
74,78c74
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufBZ_API(BZ2_bzWriteClose) ( 
75,78c75
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       (BZ2_bzWriteClose) ( 
75,78c75
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     BZ2_bzWriteClose) ( 
76,78c76
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    ) ( 
76,78c76
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )( 
78,79c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> int*          bzerror, 
78,79c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN *          bzerror, 
78,79c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void bzerror, 
78,79c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API, 
78,80c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZFILE*       b, 
78,80c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose*       b, 
78,80c78
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) b, 
79,80c79
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       , 
79,81c79
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intint           abandon, 
79,81c79
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          abandon, 
80,81d79
<       BZFILE*       b, 
<       int           abandon, 
80,81d79
<       BZFILE*       b, 
<       int           abandon, 
80,82c80
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEint* nbytes_in, 
80,82c80
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       * nbytes_in, 
80,82c80
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       bnbytes_in, 
81,82c81
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
81,83c81
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           unsigned int* nbytes_out 
81,83c81
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonint* nbytes_out 
82,83c82
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       * nbytes_out 
82,83c82
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned nbytes_out 
82,84c82
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int);
82,84c82
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* ;
82,86c82
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_inBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
83,86c83
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
83,86c83
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_API(BZ2_bzWriteClose64) ( 
83,86c83
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int(BZ2_bzWriteClose64) ( 
83,86c83
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ2_bzWriteClose64) ( 
84,86c84
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    ) ( 
84,86c84
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )( 
86,87c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> int*          bzerror, 
86,87c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN *          bzerror, 
86,87c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void bzerror, 
86,87c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API, 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZFILE*       b, 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64*       b, 
86,88c86
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) b, 
87,88c87
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       , 
87,89c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intint           abandon, 
87,89c87
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          abandon, 
88,89d87
<       BZFILE*       b, 
<       int           abandon, 
88,89d87
<       BZFILE*       b, 
<       int           abandon, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEint* nbytes_in_lo32, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       * nbytes_in_lo32, 
88,90c88
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       bnbytes_in_lo32, 
89,90c89
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           unsigned int* nbytes_in_hi32, 
89,91c89
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonint* nbytes_in_hi32, 
90,91c90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       * nbytes_in_hi32, 
90,91c90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned nbytes_in_hi32, 
90,91c90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int, 
90,92c90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* unsigned int* nbytes_out_lo32, 
90,92c90
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32int* nbytes_out_lo32, 
91,92c91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
91,92c91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
91,92c91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int, 
91,93c91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* unsigned int* nbytes_out_hi32
91,93c91
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32int* nbytes_out_hi32
92,93c92
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       * nbytes_out_hi32
92,93c92
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
92,94c92
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int);
92,94c92
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* ;
92,99c92
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
93,99c93
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffCompress) ( 
93,99c93
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffCompress) ( 
93,99c93
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int(BZ2_bzBuffToBuffCompress) ( 
93,99c93
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ2_bzBuffToBuffCompress) ( 
94,99c94
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    ) ( 
94,99c94
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )( 
99,100c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> char*         dest, 
99,100c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN *         dest, 
99,100c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int dest, 
99,100c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API, 
99,101c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(unsigned int* destLen,
99,101c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressint* destLen,
99,101c99
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) * destLen,
100,101c100
<       char*         dest, 
<       unsigned int* destLen,
---
>       destLen,
100,101c100
<       char*         dest, 
<       unsigned int* destLen,
---
>       char,
100,102c100
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         char*         source, 
100,102c100
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         dest*         source, 
101,102c101
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
101,102c101
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned , 
101,103c101
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intunsigned int  sourceLen,
101,103c101
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* int  sourceLen,
101,103c101
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLensourceLen,
102,103c102
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
102,104c102
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       charint           blockSize100k, 
102,104c102
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         blockSize100k, 
103,104d102
<       unsigned int  sourceLen,
<       int           blockSize100k, 
103,104d102
<       unsigned int  sourceLen,
<       int           blockSize100k, 
103,105c103
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned verbosity, 
103,105c103
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  , 
103,106c103
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  sourceLenint           workFactor 
104,106c104
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
104,107c104
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           );
104,107c104
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           blockSize100k;
105,109c105
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
105,109c105
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
105,109c105
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityBZ_API(BZ2_bzBuffToBuffDecompress) ( 
106,109c106
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
106,109c106
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
107,109c107
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    ) ( 
107,109c107
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )( 
109,110c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> char*         dest, 
109,110c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN *         dest, 
109,110c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int dest, 
109,110c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API, 
109,111c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(unsigned int* destLen,
109,111c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressint* destLen,
109,111c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) * destLen,
110,111c110
<       char*         dest, 
<       unsigned int* destLen,
---
>       destLen,
110,111c110
<       char*         dest, 
<       unsigned int* destLen,
---
>       char,
110,112c110
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         char*         source, 
110,112c110
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         dest*         source, 
111,112c111
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
111,112c111
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned , 
111,113c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intunsigned int  sourceLen,
111,113c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* int  sourceLen,
111,113c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLensourceLen,
112,113c112
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
112,114c112
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       charint           small, 
112,114c112
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         small, 
113,114d112
<       unsigned int  sourceLen,
<       int           small, 
113,114d112
<       unsigned int  sourceLen,
<       int           small, 
113,115c113
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned );
113,115c113
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  ;
113,117c113
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       unsigned int  sourceLenBZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
114,117c114
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       BZFILE * BZ_API(BZ2_bzdopen) (
114,117c114
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           * BZ_API(BZ2_bzdopen) (
114,117c114
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           smallBZ_API(BZ2_bzdopen) (
115,117c115
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (BZ2_bzdopen) (
115,117c115
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           BZ2_bzdopen) (
115,117c115
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           )) (
117c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> (
117,118c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> BZ_EXTERN int        fd,
117,118c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> BZ_EXTERN BZFILE fd,
117,118c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
> BZ_EXTERN BZFILE * ,
117,119c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APIconst char *mode
117,119c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(char *mode
117,119c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen*mode
117,119c117
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) mode
118,120c118
<       int        fd,
<       const char *mode
<    );
---
>       );
118,120c118
<       int        fd,
<       const char *mode
<    );
---
>       int        ;
118,122c118
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN ;
---
>       int        fdBZ_EXTERN ;
119,122c119
<       const char *mode
<    );
<          
< BZ_EXTERN ;
---
>       ;
119,124c119
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
>       const typedef char            Char;
119,124c119
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
>       const char char            Char;
119,124c119
<       const char *mode
<    );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
>       const char *Char;
120,124c120
<    );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
>    ;
(97.4 %, 5384 bytes)
118,122c118
<       );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
>       ;
118,123c118
<       );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       )typedef unsigned char   Bool;
120,123c120
< BZ_EXTERN ;
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> unsigned char   Bool;
120,123c120
< BZ_EXTERN ;
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> BZ_EXTERN char   Bool;
122,123c122
< typedef char            Char;
< typedef unsigned char   Bool;
---
> Bool;
122,123c122
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef ;
122,124c122
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            typedef unsigned char   UChar;
122,124c122
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            Charunsigned char   UChar;
123,124c123
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
123,124c123
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef UChar;
123,124c123
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned ;
123,125c123
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   typedef int             Int32;
123,125c123
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Boolint             Int32;
124,125c124
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> Int32;
124,125c124
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef ;
124,126c124
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned typedef unsigned int    UInt32;
124,126c124
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   unsigned int    UInt32;
124,126c124
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UCharint    UInt32;
125,126c125
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> UInt32;
125,126c125
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
(97.4 %, 5329 bytes)
125,131c125
< UInt32;
< 
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> define BZ_MAX_ALPHA_SIZE 258
125,131c125
< UInt32;
< 
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> UInt32BZ_MAX_ALPHA_SIZE 258
127,131c127
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> 258
127,132c127
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
---
> ##1
127,132c127
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
---
> #define 1
127,134c127
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_HDR_0 #define BZ_N_GROUPS 6
131,134c131
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> define BZ_N_GROUPS 6
131,134c131
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> #BZ_N_GROUPS 6
131,134c131
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
---
> #define 6
131,135c131
< #define BZ_MAX_ALPHA_SIZE 258
< #1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_ALPHA_SIZE #define BZ_G_SIZE   50
(97.4 %, 5282 bytes)
127,128c127
< #define BZ_HDR_0 #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_HDR_0 50
127,129c127
< #define BZ_HDR_0 #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_HDR_0 ##define BZ_N_ITERS  4
127,129c127
< #define BZ_HDR_0 #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_HDR_0 #define define BZ_N_ITERS  4
(97.4 %, 5240 bytes)
127,130c127
< #define BZ_HDR_0 50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_HDR_0 BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
128,130c128
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> (2 + (900000 / BZ_G_SIZE))
128,130c128
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #2 + (900000 / BZ_G_SIZE))
128,130c128
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define + (900000 / BZ_G_SIZE))
128,130c128
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_ITERS  (900000 / BZ_G_SIZE))
(97.5 %, 5206 bytes)
127c127
< #define BZ_HDR_0 BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_HDR_0 BZ_G_SIZE))
127c127
< #define BZ_HDR_0 BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_HDR_0 BZ_MAX_SELECTORS ))
(97.5 %, 5174 bytes)
127,137c127
< #define BZ_HDR_0 BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_HDR_0 2)
127,137c127
< #define BZ_HDR_0 BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< \
< 
< #define BZ_RAND_INIT_MASK                      2)
---
> #define BZ_HDR_0 BZ_G_SIZE)
(97.5 %, 5105 bytes)
127,138c127
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   ;
---
> #define BZ_HDR_0 selector   ;
127,138c127
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   ;
---
> #define BZ_HDR_0 2;
134,140c134
< typedef
<    struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
---
> ;
135,141d134
<    struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
< 
135,143c135
<    struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>    struct (BZ2_bzDecompressInitsmall )
137,143c137
<       ;
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       BZ2_bzDecompressInitsmall )
138,143c138
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       )
138,144c138
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
---
>       UChar    ;
138,151c138
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>       UChar    selector   #define BZ_SETERR(eee)                    \
140,151c140
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    define BZ_SETERR(eee)                    \
142,151c142
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZ_SETERR(eee)                    \
143,151c143
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (eee)                    \
143,151c143
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (eee)                    \
143,151c143
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (BZ2_bzDecompressInitsmall )                    \
144,151c144
< ;
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> \
151,153d150
< #define BZ_SETERR(eee)                    \
< 
< 
151,155c151
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #struct {
151,155c151
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #define {
151,156c151
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
---
> #define BZ_SETERRBool      initialisedOk;
151,156c151
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
---
> #define BZ_SETERR(initialisedOk;
151,156c151
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
---
> #define BZ_SETERR(eee;
151,157c151
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
<    }
---
> #define BZ_SETERR(eee)                    }
154,158c154
< typedef 
<    struct {
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> bzFile;
(97.5 %, 5059 bytes)
151,155c151
< typedef 
<    struct {
<       Bool      initialisedOk;
<    }
<    bzFile;
---
> bzFile;
152,155c152
<    struct {
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>    ;
152,163c152
<    struct {
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    struct BZFILE* BZ_API(BZ2_bzWriteOpen) 
153,163c153
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
153,163c153
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      BZ_API(BZ2_bzWriteOpen) 
153,163c153
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOk(BZ2_bzWriteOpen) 
154,163c154
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    BZ2_bzWriteOpen) 
155,163c155
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    ) 
155,164c155
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile( int*  bzerror,      
163,164c163
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> int*  bzerror,      
163,164c163
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE*  bzerror,      
163,164c163
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* bzerror,      
163,164c163
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API,      
163,165c163
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(FILE* f, 
163,165c163
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen* f, 
164,165c164
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     f, 
(97.6 %, 4997 bytes)
155,156c155
<    bzFile( int*  bzerror,      
<                       FILE* f, 
---
>    bzFilef, 
155,156c155
<    bzFile( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile( , 
155,157c155
<    bzFile( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    bzFile( intint   blockSize100k, 
155,157c155
<    bzFile( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    bzFile( int*  blockSize100k, 
155,157c155
<    bzFile( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    bzFile( int*  bzerror, 
(97.6 %, 4922 bytes)
155,157c155
<    bzFile( int*  blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>    bzFile( int*  )
155,158c155
<    bzFile( int*  blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< ;
---
>    bzFile( int*  blockSize100k;
156,163c156
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       void BZ_API(BZ2_bzWrite)
156,163c156
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   BZ_API(BZ2_bzWrite)
156,163c156
<                       int   verbosity,
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   verbosity(BZ2_bzWrite)
157,163c157
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       BZ2_bzWrite)
157,163c157
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                       int   )
157,164c157
<                       int   workFactor )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>                       int   workFactor ( int*    bzerror, 
(97.6 %, 4828 bytes)
155,162c155
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzFile( int*  ( int*    bzerror, 
156,162c156
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> int*    bzerror, 
161,162c161
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> *    bzerror, 
161,162c161
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void bzerror, 
161,162c161
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API, 
161,163c161
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZFILE* b, 
161,163c161
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWrite* b, 
162,163c162
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              b, 
162,163c162
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( , 
162,164c162
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intvoid*   buf, 
162,164c162
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    *   buf, 
162,164c162
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerrorbuf, 
163,164c163
<                BZFILE* b, 
<                void*   buf, 
---
>                , 
163,165c163
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILEint     len )
163,165c163
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* len )
163,165c163
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* b)
164,166c164
<                void*   buf, 
<                int     len )
< ;
---
>                ;
164,170c164
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                voidvoid BZ_API(BZ2_bzWriteClose)
164,170c164
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   BZ_API(BZ2_bzWriteClose)
164,170c164
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   buf(BZ2_bzWriteClose)
165,170c165
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZ2_bzWriteClose)
165,170c165
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                int     )
165,171c165
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>                int     len ( int*          bzerror, 
166,171c166
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
170,171c170
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> *          bzerror, 
170,171c170
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void bzerror, 
170,171c170
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API, 
170,172c170
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZFILE*       b, 
170,172c170
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose*       b, 
171,172c171
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   b, 
171,172c171
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( , 
171,173c171
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
171,173c171
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
171,173c171
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
172,173d171
<                     BZFILE*       b, 
<                     int           abandon,
172,174c172
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEint* nbytes_in,
172,174c172
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       * nbytes_in,
172,174c172
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       bnbytes_in,
173,174c173
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     ,
173,175c173
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           unsigned int* nbytes_out )
173,175c173
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonint* nbytes_out )
174,175c174
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     * nbytes_out )
174,175c174
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned nbytes_out )
174,175c174
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int)
174,176c174
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned int* ;
174,179c174
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_invoid BZ_API(BZ2_bzWriteClose64)
175,179c175
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     BZ_API(BZ2_bzWriteClose64)
175,179c175
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned (BZ2_bzWriteClose64)
175,179c175
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intBZ2_bzWriteClose64)
175,179c175
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* )
175,180c175
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out ( int*          bzerror, 
176,180c176
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
179,180c179
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> *          bzerror, 
179,180c179
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void bzerror, 
179,180c179
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API, 
179,181c179
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZFILE*       b, 
179,181c179
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64*       b, 
180,181c180
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   b, 
180,181c180
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( , 
180,182c180
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
180,182c180
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
180,182c180
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
181,182d180
<                     BZFILE*       b, 
<                     int           abandon,
181,183c181
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEint* nbytes_in_lo32,
181,183c181
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       * nbytes_in_lo32,
181,183c181
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       bnbytes_in_lo32,
182,183c182
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     ,
182,184c182
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           unsigned int* nbytes_in_hi32,
182,184c182
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonint* nbytes_in_hi32,
183,184c183
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
183,184c183
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned nbytes_in_hi32,
183,184c183
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int,
183,185c183
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* unsigned int* nbytes_out_lo32,
183,185c183
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32int* nbytes_out_lo32,
184,185c184
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
184,185c184
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
184,185c184
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int,
184,186c184
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* unsigned int* nbytes_out_hi32 )
184,186c184
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32int* nbytes_out_hi32 )
185,186c185
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
185,186c185
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
185,186c185
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int)
185,187c185
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int* ;
185,191c185
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_lo32BZFILE* BZ_API(BZ2_bzReadOpen) 
186,191c186
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     * BZ_API(BZ2_bzReadOpen) 
186,191c186
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned BZ_API(BZ2_bzReadOpen) 
186,191c186
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int(BZ2_bzReadOpen) 
186,191c186
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ2_bzReadOpen) 
186,191c186
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_hi32 ) 
187,192c187
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> ( int*  bzerror, 
191,192c191
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> int*  bzerror, 
191,192c191
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE*  bzerror, 
191,192c191
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* bzerror, 
191,192c191
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API, 
191,193c191
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(FILE* f, 
191,193c191
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpen* f, 
192,193c192
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    f, 
192,193c192
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( , 
192,194c192
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( intint   verbosity,
192,194c192
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  verbosity,
192,194c192
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerror,
193,194d192
<                      FILE* f, 
<                      int   verbosity,
193,195c193
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILEsmall,
193,195c193
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* ,
193,196c193
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* fvoid* unused,
194,196c194
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      * unused,
194,196c194
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   unused,
195,196d194
<                      int   small,
<                      void* unused,
195,196d194
<                      int   small,
<                      void* unused,
195,196d194
<                      int   small,
<                      void* unused,
195,197c195
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   small)
196,198c196
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      ;
196,202c196
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      voidvoid ;
196,202c196
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void* ;
196,206c196
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      void* unusedint BZ_API(BZ2_bzRead) 
197,206c197
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      BZ_API(BZ2_bzRead) 
197,206c197
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   (BZ2_bzRead) 
197,206c197
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   nUnused BZ2_bzRead) 
198,206c198
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> ) 
202,207c202
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
202,207c202
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void int*    bzerror, 
206,207c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> *    bzerror, 
206,207c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int bzerror, 
206,207c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API, 
206,208c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZFILE* b, 
206,208c206
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzRead* b, 
207,208c207
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            b, 
207,208c207
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( , 
207,209c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intvoid*   buf, 
207,209c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    *   buf, 
207,209c207
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerrorbuf, 
208,209c208
<              BZFILE* b, 
<              void*   buf, 
---
>              , 
208,210c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILEint     len )
208,210c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* len )
208,210c208
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* b)
209,211c209
<              void*   buf, 
<              int     len )
< {
---
>              {
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              voidbzFile* bzf = (0)
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              void*   * bzf = (0)
209,213c209
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              void*   bufbzf = (0)
210,213c210
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              = (0)
210,213c210
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              int     (0)
210,213c210
<              int     len )
< {
<    
<    bzFile* bzf = (0)
---
>              int     len 0)
211,213c211
< {
<    
<    bzFile* bzf = (0)
---
> )
213,214c213
<    bzFile* bzf = (0)
<       ; 
---
>    ; 
213,215c213
<    bzFile* bzf = (0)
<       ; 
< }
---
>    bzFile}
213,219c213
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* void BZ_API(BZ2_bzReadGetUnused) 
213,219c213
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf BZ_API(BZ2_bzReadGetUnused) 
213,219c213
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (BZ2_bzReadGetUnused) 
213,219c213
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (BZ2_bzReadGetUnused) 
213,219c213
<    bzFile* bzf = (0)
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (0) 
214,220c214
<       ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       ( int*    bzerror, 
(97.7 %, 4804 bytes)
213,219c213
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
214,219c214
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
218,219c218
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> *    bzerror, 
218,219c218
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void bzerror, 
218,219c218
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API, 
218,220c218
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZFILE* b, 
218,220c218
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnused* b, 
219,220c219
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      b, 
219,220c219
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( , 
219,221c219
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( intvoid**  unused, 
219,221c219
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    **  unused, 
219,221c219
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror*  unused, 
220,221c220
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        unused, 
220,221c220
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE, 
220,222c220
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* int*    nUnused )
220,222c220
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b*    nUnused )
221,222c221
<                        void**  unused, 
<                        int*    nUnused )
---
>                        nUnused )
221,222c221
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void)
221,223c221
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void*;
221,231c221
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  int BZ_API(BZ2_bzBuffToBuffCompress) 
221,231c221
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedBZ_API(BZ2_bzBuffToBuffCompress) 
222,231c222
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        (BZ2_bzBuffToBuffCompress) 
222,231c222
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        intBZ2_bzBuffToBuffCompress) 
222,231c222
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    ) 
222,232c222
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused ( char*         dest, 
223,232c223
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> char*         dest, 
231,232c231
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> *         dest, 
231,232c231
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int dest, 
231,232c231
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API, 
231,233c231
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(unsigned int* destLen,
231,233c231
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressint* destLen,
232,233c232
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          * destLen,
232,233c232
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( destLen,
232,233c232
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char,
232,234c232
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         char*         source, 
232,234c232
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         dest*         source, 
233,234c233
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            source, 
233,234c233
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned , 
233,235c233
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intunsigned int  sourceLen,
233,235c233
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* int  sourceLen,
233,235c233
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLensourceLen,
234,235c234
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            ,
234,236c234
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            charint           blockSize100k, 
234,236c234
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         blockSize100k, 
235,236d234
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
235,236d234
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
235,237c235
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned verbosity, 
235,237c235
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  , 
235,238c235
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLenint           workFactor )
236,238c236
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
236,238c236
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           )
236,239c236
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            int           blockSize100k;
237,243c237
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int BZ_API(BZ2_bzBuffToBuffDecompress) 
237,243c237
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           BZ_API(BZ2_bzBuffToBuffDecompress) 
237,243c237
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosity(BZ2_bzBuffToBuffDecompress) 
238,243c238
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ2_bzBuffToBuffDecompress) 
238,243c238
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           ) 
238,244c238
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>                            int           workFactor ( char*         dest, 
239,244c239
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
243,244c243
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> *         dest, 
243,244c243
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int dest, 
243,244c243
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API, 
243,245c243
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(unsigned int* destLen,
243,245c243
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressint* destLen,
244,245c244
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            * destLen,
244,245c244
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( destLen,
244,245c244
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char,
244,246c244
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         char*         source, 
244,246c244
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         dest*         source, 
245,246c245
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              source, 
245,246c245
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned , 
245,247c245
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intunsigned int  sourceLen,
245,247c245
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* int  sourceLen,
245,247c245
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLensourceLen,
246,247c246
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              ,
246,248c246
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              charint           small,
246,248c246
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         small,
246,248c246
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         source,
247,248d246
<                              unsigned int  sourceLen,
<                              int           small,
247,249c247
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned mode )
247,249c247
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned int  )
247,250c247
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
< ;
---
>                              unsigned int  sourceLen;
248,254c248
<                              int           small,
<                              int           mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(mode )
---
>                              BZFILE * BZ_API(mode )
248,254c248
<                              int           small,
<                              int           mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(mode )
---
>                              int           * BZ_API(mode )
248,254c248
<                              int           small,
<                              int           mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(mode )
---
>                              int           smallBZ_API(mode )
249,254c249
<                              int           mode )
< ;
< 
< 
< 
< BZFILE * BZ_API(mode )
---
>                              (mode )
254,258d253
< BZFILE * BZ_API(mode )
< ;
< 
< 
< 
254,258d253
< BZFILE * BZ_API(mode )
< ;
< 
< 
< 
254,258d253
< BZFILE * BZ_API(mode )
< ;
< 
< 
< 
(97.7 %, 4776 bytes)
249,254c249
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           ) (len )
249,254c249
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           mode (len )
250,254c250
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
> len )
254c254
< int BZ_API(BZ2_bzread) (len )
---
> )
254,255c254
< int BZ_API(BZ2_bzread) (len )
< {
---
> int {
254,256c254
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_APIint bzerr, nread;
254,256c254
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(bzerr, nread;
254,256c254
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread, nread;
254,256c254
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) nread;
254,256c254
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (;
254,257c254
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> int BZ_API(BZ2_bzread) (len if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
255,257c255
< {
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
256,257c256
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_OK || bzerr == BZ_STREAM_END) ; else ;
256,257c256
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int || bzerr == BZ_STREAM_END) ; else ;
256,257c256
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrbzerr == BZ_STREAM_END) ; else ;
256,257c256
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, == BZ_STREAM_END) ; else ;
256,257c256
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nreadBZ_STREAM_END) ; else ;
257c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    ) ; else ;
257c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ; else ;
257c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (else ;
257c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK ;
257,258c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (BZ_OK || }
257,262c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #if NORETURN 
---
>    if (BZ_OK || bzerr #if NORETURN 
257,262c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #if NORETURN 
---
>    if (BZ_OK || bzerr == if NORETURN 
257,262c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #if NORETURN 
---
>    if (BZ_OK || bzerr == BZ_STREAM_ENDNORETURN 
257,264c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #if NORETURN 
< 
< #endif 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) #endif 
257,264c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #if NORETURN 
< 
< #endif 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; endif 
257,270c257
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
< #if NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
258,270d257
< }
< 
< 
< 
< #if NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
262,270d261
< #if NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
262,270c262
< #if NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #
\ No newline at end of file
262,270c262
< #if NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #if 
\ No newline at end of file
(97.7 %, 4708 bytes)
===< pass_clex :: rm-toks-6 >===
9,11d8
< #2
< 
< #define BZ_OK                0
9,11d8
< #2
< 
< #define BZ_OK                0
11,12d10
< #define BZ_OK                0
< #3
11,12d10
< #define BZ_OK                0
< #3
11,12d10
< #define BZ_OK                0
< #3
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OK                BZ_CONFIG_ERROR      (-9)
12,13c12
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> (-9)
12,13c12
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> 9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #)
13,15c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define typedef 
13,16c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        struct {
13,16c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      {
13,17c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (int ;
13,17c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-;
13,18c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
<       unsigned (**bzfree);
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9unsigned (**bzfree);
15,18c15
< typedef 
<    struct {
<       int ;
<       unsigned (**bzfree);
---
> (**bzfree);
16,18c16
<    struct {
<       int ;
<       unsigned (**bzfree);
---
>    **bzfree);
16,18c16
<    struct {
<       int ;
<       unsigned (**bzfree);
---
>    struct *bzfree);
17,18c17
<       int ;
<       unsigned (**bzfree);
---
>       bzfree);
17,18c17
<       int ;
<       unsigned (**bzfree);
---
>       int );
18c18
<       unsigned (**bzfree);
---
>       ;
18,19c18
<       unsigned (**bzfree);
<       void *opaque;
---
>       unsigned void *opaque;
18,19c18
<       unsigned (**bzfree);
<       void *opaque;
---
>       unsigned (*opaque;
18,19c18
<       unsigned (**bzfree);
<       void *opaque;
---
>       unsigned (*opaque;
18,19c18
<       unsigned (**bzfree);
<       void *opaque;
---
>       unsigned (**;
18,20c18
<       unsigned (**bzfree);
<       void *opaque;
<    } 
---
>       unsigned (**bzfree} 
18,21c18
<       unsigned (**bzfree);
<       void *opaque;
<    } 
<    bz_stream;
---
>       unsigned (**bzfree)bz_stream;
(97.7 %, 4689 bytes)
18,21c18
<       ;
<       void *opaque;
<    } 
<    bz_stream;
---
>       bz_stream;
19,21c19
<       void *opaque;
<    } 
<    bz_stream;
---
>       ;
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void #include <stdio.h>
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *include <stdio.h>
19,25c19
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaque<stdio.h>
20,25c20
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
21,25c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
21,25c21
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streamh>
25c25
< #include <stdio.h>
---
> >
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include define BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <BZ_API(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio(func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func) func
25,27c25
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h) func
27c27
< #   define BZ_API(func) func
---
> func
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   #   define BZ_EXTERN ;
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define define BZ_EXTERN ;
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_APIBZ_EXTERN ;
27,28c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_API(;
27,34c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_API(func#define BZ_MAX_UNUSED 5000
27,34c27
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_API(func) define BZ_MAX_UNUSED 5000
28,34c28
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_MAX_UNUSED 5000
28,34c28
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   5000
28,36c28
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define typedef void BZFILE;
28,36c28
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN void BZFILE;
34,36c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZFILE;
34,36c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #;
34,38c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
34,38c34
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZFILE* BZ_API(BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ_API(BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void (BZ2_bzReadOpen) ( 
36,38c36
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILEBZ2_bzReadOpen) ( 
38c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ) ( 
38c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ( 
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILEint*  bzerror,   
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* *  bzerror,   
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,   
38,39c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(,   
38,40c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenFILE* f, 
38,40c38
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) * f, 
39,40c39
<       int*  bzerror,   
<       FILE* f, 
---
>       f, 
39,40c39
<       int*  bzerror,   
<       FILE* f, 
---
>       int, 
39,41c39
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
39,41c39
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
40,41c40
<       FILE* f, 
<       int   verbosity, 
---
>       , 
40,42c40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILEint   small,
40,42c40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* small,
40,42c40
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* f,
41,42d40
<       int   verbosity, 
<       int   small,
41,43c41
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   * unused,    
41,43c41
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosityunused,    
42,43c42
<       int   small,
<       void* unused,    
---
>       ,    
42,44c42
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
42,44c42
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   smallnUnused 
43,45c43
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
43,45c43
<       void* unused,    
<       int   nUnused 
<    );
---
>       void;
43,47c43
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* BZ_EXTERN void ;
43,47c43
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* unusedvoid ;
44,47c44
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       ;
44,49c44
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
45,49c45
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    void BZ_API(BZ2_bzReadGetUnused) ( 
45,49c45
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ_API(BZ2_bzReadGetUnused) ( 
47,49c47
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadGetUnused) ( 
47,49c47
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ2_bzReadGetUnused) ( 
47,49c47
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void ) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
49,50c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
49,51c49
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) * b, 
50,51c50
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
50,51c50
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    void**  unused,  
50,52c50
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror**  unused,  
51,52c51
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
51,52c51
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILEunused,  
51,52c51
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* ,  
51,53c51
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bint*    nUnused 
52,53c52
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
52,53c52
<       void**  unused,  
<       int*    nUnused 
---
>       voidnUnused 
52,54c52
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*);
52,54c52
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  ;
52,56c52
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       intBZ_API(BZ2_bzRead) ( 
53,56c53
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    (BZ2_bzRead) ( 
54,56c54
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    BZ2_bzRead) ( 
54,56c54
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )) ( 
56c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> ( 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int *    bzerror, 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_APIbzerror, 
56,57c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(, 
56,58c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadBZFILE* b, 
56,58c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) * b, 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerror*   buf, 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
58,60c58
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
58,60c58
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
59,61c59
<       void*   buf, 
<       int     len 
<    );
---
>       );
59,61c59
<       void*   buf, 
<       int     len 
<    );
---
>       void;
59,63c59
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
59,63c59
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       * BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     BZ_API(BZ2_bzWriteOpen) ( 
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
63c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
63c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEint*  bzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* *  bzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(,      
63,65c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
63,65c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) * f, 
64,65c64
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
64,65c64
<       int*  bzerror,      
<       FILE* f, 
---
>       int, 
64,66c64
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  int   blockSize100k, 
64,66c64
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorblockSize100k, 
(97.7 %, 4658 bytes)
65,66d64
<       int   blockSize100k, 
<       int   verbosity, 
65,66d64
<       int   blockSize100k, 
<       int   verbosity, 
(97.8 %, 4606 bytes)
64,68c64
<       int, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       intvoid BZ_API(BZ2_bzWrite) ( 
65,68c65
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_API(BZ2_bzWrite) ( 
65,68c65
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   (BZ2_bzWrite) ( 
66,68c66
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    BZ2_bzWrite) ( 
66,68c66
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )) ( 
68c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> ( 
68,69c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
68,69c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
68,69c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
68,69c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
68,70c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteBZFILE* b, 
68,70c68
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) * b, 
69,70c69
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
69,70c69
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
69,71c69
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
69,71c69
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerror*   buf, 
70,71c70
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
70,71c70
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
70,72c70
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
70,72c70
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
71,73c71
<       void*   buf, 
<       int     len 
<    );
---
>       );
71,73c71
<       void*   buf, 
<       int     len 
<    );
---
>       void;
71,75c71
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
71,75c71
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufvoid BZ_API(BZ2_bzWriteClose) ( 
72,75c72
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
72,75c72
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     (BZ2_bzWriteClose) ( 
73,75c73
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
73,75c73
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
75c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
75,77c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
75,77c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) *       b, 
76,77c76
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
76,77c76
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
76,78c76
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
76,78c76
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
77,78c77
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
77,79c77
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEunsigned int* nbytes_in, 
77,79c77
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       int* nbytes_in, 
77,79c77
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       b* nbytes_in, 
78,79c78
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       nbytes_in, 
78,79c78
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
78,80c78
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonunsigned int* nbytes_out 
79,80c79
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
79,80c79
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
79,80c79
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned intnbytes_out 
79,81c79
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* );
79,81c79
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* nbytes_in;
80,83c80
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
80,83c80
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned void BZ_API(BZ2_bzWriteClose64) ( 
80,83c80
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_API(BZ2_bzWriteClose64) ( 
80,83c80
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* (BZ2_bzWriteClose64) ( 
81,83c81
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    BZ2_bzWriteClose64) ( 
81,83c81
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )) ( 
83c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> ( 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
83,85c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
83,85c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) *       b, 
84,85c84
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
84,85c84
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
84,86c84
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
84,86c84
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
85,86c85
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
85,87c85
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEunsigned int* nbytes_in_lo32, 
85,87c85
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       int* nbytes_in_lo32, 
85,87c85
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       b* nbytes_in_lo32, 
86,87c86
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       nbytes_in_lo32, 
86,87c86
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
86,88c86
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonunsigned int* nbytes_in_hi32, 
87,88c87
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
87,88c87
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
87,88c87
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned intnbytes_in_hi32, 
87,88c87
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* , 
87,89c87
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32, 
88,89c88
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
88,89c88
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
88,89c88
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
88,89c88
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
88,90c88
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32
89,90c89
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
89,90c89
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
89,90c89
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
89,91c89
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
89,91c89
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_out_lo32;
90,96c90
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
90,96c90
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int BZ_API(BZ2_bzBuffToBuffCompress) ( 
90,96c90
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_API(BZ2_bzBuffToBuffCompress) ( 
90,96c90
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* (BZ2_bzBuffToBuffCompress) ( 
91,96c91
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    BZ2_bzBuffToBuffCompress) ( 
91,96c91
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )) ( 
96c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ( 
96,97c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
96,97c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
96,97c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
96,97c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
96,98c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
96,98c96
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int* destLen,
97,98c97
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
97,98c97
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
97,98c97
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
97,99c97
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
98,99c98
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
98,99c98
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
98,99c98
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
98,100c98
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
98,100c98
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
99,100c99
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
99,100c99
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
99,101c99
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
99,101c99
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         sourceblockSize100k, 
100,101c100
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
100,102c100
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
100,102c100
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  verbosity, 
100,102c100
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  sourceLen, 
101,102d100
<       int           blockSize100k, 
<       int           verbosity, 
101,102d100
<       int           blockSize100k, 
<       int           verbosity, 
101,104c101
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           blockSize100k);
102,104c102
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
102,106c102
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
102,106c102
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103,106c103
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103,106c103
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
104,106c104
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    BZ2_bzBuffToBuffDecompress) ( 
104,106c104
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )) ( 
106c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ( 
106,107c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
106,107c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
106,107c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
106,107c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
106,108c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
106,108c106
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int* destLen,
107,108c107
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
107,108c107
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
107,108c107
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
107,109c107
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
108,109c108
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
108,109c108
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
108,109c108
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
108,110c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
108,110c108
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
109,110c109
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
109,110c109
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
109,111c109
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
109,111c109
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourcesmall, 
110,111c110
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
110,112c110
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int           );
110,112c110
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  );
110,112c110
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  sourceLen;
111,114c111
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
111,114c111
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           BZFILE * BZ_API(BZ2_bzdopen) (
111,114c111
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           small* BZ_API(BZ2_bzdopen) (
112,114c112
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       BZ_API(BZ2_bzdopen) (
112,114c112
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           (BZ2_bzdopen) (
112,114c112
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       int           )BZ2_bzdopen) (
114c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> ) (
114c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN (
114,115c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       );
---
> BZ_EXTERN BZFILE );
114,115c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       );
---
> BZ_EXTERN BZFILE * ;
114,117c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       );
<          
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
114,117c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       );
<          
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(;
114,119c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopentypedef char            Char;
114,119c114
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) char            Char;
115,119c115
<       );
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
---
>       Char;
116,119d115
<          
< BZ_EXTERN ;
< 
< typedef char            Char;
(97.8 %, 4571 bytes)
114,117c114
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN unsigned char   Bool;
116,117c116
< typedef char            Char;
< typedef unsigned char   Bool;
---
> char   Bool;
116,117c116
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef Bool;
116,117c116
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef char            ;
116,118c116
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            Chartypedef unsigned char   UChar;
117,118c117
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
117,118c117
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
117,118c117
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned UChar;
117,118c117
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned char   ;
(97.8 %, 4525 bytes)
116,117c116
< typedef Bool;
< typedef unsigned char   UChar;
---
> typedef ;
116,118c116
< typedef Bool;
< typedef unsigned char   UChar;
< UInt32;
---
> typedef BoolUInt32;
117,118c117
< typedef unsigned char   UChar;
< UInt32;
---
> ;
117,120c117
< typedef unsigned char   UChar;
< UInt32;
< 
< #define BZ_HDR_0 2)
---
> typedef #define BZ_HDR_0 2)
117,120c117
< typedef unsigned char   UChar;
< UInt32;
< 
< #define BZ_HDR_0 2)
---
> typedef unsigned define BZ_HDR_0 2)
117,120c117
< typedef unsigned char   UChar;
< UInt32;
< 
< #define BZ_HDR_0 2)
---
> typedef unsigned char   BZ_HDR_0 2)
117,120c117
< typedef unsigned char   UChar;
< UInt32;
< 
< #define BZ_HDR_0 2)
---
> typedef unsigned char   UChar2)
118,120c118
< UInt32;
< 
< #define BZ_HDR_0 2)
---
> )
118,127c118
< UInt32;
< 
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> UInt32typedef
120,128c120
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
120,128c120
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
120,130c120
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
> #define ;
120,131c120
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   ;
---
> #define BZ_HDR_0 UChar    selector   ;
120,131c120
< #define BZ_HDR_0 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       UChar    selector   ;
---
> #define BZ_HDR_0 2selector   ;
127,131c127
< typedef
<    struct {
<       
<       ;
<       UChar    selector   ;
---
> ;
128,132d127
<    struct {
<       
<       ;
<       UChar    selector   ;
< 
128,135c128
<    struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
< 
<    }
---
>    struct }
(97.8 %, 4488 bytes)
120,125c120
< struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
---
> ;
120,127c120
< struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
< 
<    }
---
> struct }
122,128c122
<       ;
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       (BZ2_bzDecompressInitsmall )
123,128c123
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       BZ2_bzDecompressInitsmall )
123,128c123
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       UChar    )
125,130d124
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
125,136c125
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
---
>    typedef 
127,136d126
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
128,137c128
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
---
>    {
128,138c128
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
---
>    (Bool      initialisedOk;
128,138c128
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
---
>    (BZ2_bzDecompressInitsmall initialisedOk;
130,138d129
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       Bool      initialisedOk;
136,139c136
< typedef 
<    struct {
<       Bool      initialisedOk;
<    }
---
> }
137,139d136
<    struct {
<       Bool      initialisedOk;
<    }
137,140c137
<    struct {
<       Bool      initialisedOk;
<    }
<    bzFile( int*  )
---
>    struct ( int*  )
138,140c138
<       Bool      initialisedOk;
<    }
<    bzFile( int*  )
---
>       int*  )
138,140c138
<       Bool      initialisedOk;
<    }
<    bzFile( int*  )
---
>       Bool      *  )
138,140c138
<       Bool      initialisedOk;
<    }
<    bzFile( int*  )
---
>       Bool      initialisedOk)
139,141c139
<    }
<    bzFile( int*  )
< ;
---
>    ;
140,146c140
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    void BZ_API(BZ2_bzWrite)
140,146c140
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFileBZ_API(BZ2_bzWrite)
140,146c140
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile( (BZ2_bzWrite)
(97.8 %, 4440 bytes)
137,143c137
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    void BZ_API(BZ2_bzWrite)
137,143c137
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFileBZ_API(BZ2_bzWrite)
137,143c137
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile( (BZ2_bzWrite)
137,143c137
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile( intBZ2_bzWrite)
138,143d137
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
138,144c138
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
143,144c143
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> int*    bzerror, 
143,144c143
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void *    bzerror, 
143,144c143
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_APIbzerror, 
143,144c143
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(, 
143,145c143
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWriteBZFILE* b, 
144,145c144
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              * b, 
144,145c144
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( b, 
144,145c144
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int, 
144,146c144
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    void*   buf, 
144,146c144
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerror*   buf, 
145,146c145
<                BZFILE* b, 
<                void*   buf, 
---
>                buf, 
145,146c145
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE, 
145,147c145
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* int     len )
145,147c145
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* blen )
146,147c146
<                void*   buf, 
<                int     len )
---
>                )
146,148c146
<                void*   buf, 
<                int     len )
< ;
---
>                void;
146,152c146
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   void BZ_API(BZ2_bzWriteClose)
146,152c146
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   bufBZ_API(BZ2_bzWriteClose)
147,152c147
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                (BZ2_bzWriteClose)
147,152c147
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                int     BZ2_bzWriteClose)
148,152d147
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
148,153c148
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
152,153c152
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
152,153c152
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
152,153c152
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
152,153c152
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
152,154c152
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
153,154c153
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
153,154c153
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
153,154c153
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
153,155c153
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
153,155c153
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
154,155c154
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
154,156c154
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEunsigned int* nbytes_in,
154,156c154
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       int* nbytes_in,
154,156c154
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b* nbytes_in,
155,156c155
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     nbytes_in,
155,156c155
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
155,157c155
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonunsigned int* nbytes_out )
156,157c156
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
156,157c156
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
156,157c156
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned intnbytes_out )
156,157c156
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* )
156,158c156
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< ;
---
>                     unsigned int* nbytes_in;
157,161c157
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     void BZ_API(BZ2_bzWriteClose64)
157,161c157
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned BZ_API(BZ2_bzWriteClose64)
157,161c157
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int(BZ2_bzWriteClose64)
157,161c157
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* BZ2_bzWriteClose64)
158,161d157
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
158,162c158
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
161,162c161
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
161,162c161
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
161,162c161
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
161,162c161
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
161,163c161
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
162,163c162
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
162,163c162
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
162,163c162
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
162,164c162
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
162,164c162
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
163,164c163
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
163,165c163
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEunsigned int* nbytes_in_lo32,
163,165c163
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       int* nbytes_in_lo32,
163,165c163
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b* nbytes_in_lo32,
164,165c164
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     nbytes_in_lo32,
164,165c164
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
164,166c164
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonunsigned int* nbytes_in_hi32,
165,166c165
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
165,166c165
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
165,166c165
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned intnbytes_in_hi32,
165,166c165
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* ,
165,167c165
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32,
166,167c166
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
166,167c166
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
166,167c166
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
166,167c166
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
166,168c166
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32 )
167,168c167
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
167,168c167
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
167,168c167
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
167,168c167
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
167,169c167
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     unsigned int* nbytes_out_lo32;
168,173c168
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     BZFILE* BZ_API(BZ2_bzReadOpen) 
168,173c168
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned * BZ_API(BZ2_bzReadOpen) 
168,173c168
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned intBZ_API(BZ2_bzReadOpen) 
168,173c168
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* (BZ2_bzReadOpen) 
168,173c168
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_hi32 BZ2_bzReadOpen) 
169,173c169
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> ) 
173,174c173
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> ( int*  bzerror, 
173,174c173
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILEint*  bzerror, 
173,174c173
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* *  bzerror, 
173,174c173
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_APIbzerror, 
173,174c173
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(, 
173,175c173
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpenFILE* f, 
174,175c174
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    * f, 
174,175c174
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( f, 
174,175c174
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int, 
174,176c174
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  int   verbosity,
174,176c174
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerrorverbosity,
175,176c175
<                      FILE* f, 
<                      int   verbosity,
---
>                      ,
175,177c175
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILEint   small,
175,177c175
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* small,
175,177c175
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* f,
176,177d175
<                      int   verbosity,
<                      int   small,
176,178c176
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   * unused,
176,178c176
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   verbosityunused,
177,178c177
<                      int   small,
<                      void* unused,
---
>                      ,
177,179c177
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
177,179c177
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   smallnUnused )
178,179c178
<                      void* unused,
<                      int   nUnused )
---
>                      )
178,180c178
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      void;
178,184c178
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void* void ;
178,184c178
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void* unused;
179,188c179
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int BZ_API(BZ2_bzRead) 
179,188c179
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   BZ_API(BZ2_bzRead) 
179,188c179
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   nUnused (BZ2_bzRead) 
180,188c180
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZ2_bzRead) 
184,188c184
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> ) 
184,189c184
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void ( int*    bzerror, 
188,189c188
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
188,189c188
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int *    bzerror, 
188,189c188
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_APIbzerror, 
188,189c188
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(, 
188,190c188
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzReadBZFILE* b, 
189,190c189
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            * b, 
189,190c189
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( b, 
189,190c189
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int, 
189,191c189
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    void*   buf, 
189,191c189
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerror*   buf, 
190,191c190
<              BZFILE* b, 
<              void*   buf, 
---
>              buf, 
190,191c190
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE, 
190,192c190
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* int     len )
190,192c190
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* blen )
191,192c191
<              void*   buf, 
<              int     len )
---
>              )
191,193c191
<              void*   buf, 
<              int     len )
< {
---
>              void{
191,195c191
<              void*   buf, 
<              int     len )
< {
<    
<    ; 
---
>              void*   ; 
191,196c191
<              void*   buf, 
<              int     len )
< {
<    
<    ; 
< }
---
>              void*   buf}
192,200c192
<              int     len )
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              void BZ_API(BZ2_bzReadGetUnused) 
192,200c192
<              int     len )
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              int     BZ_API(BZ2_bzReadGetUnused) 
192,200c192
<              int     len )
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              int     len (BZ2_bzReadGetUnused) 
193,200c193
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ2_bzReadGetUnused) 
195,200c195
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
196,201c196
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
200,201c200
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
200,201c200
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void *    bzerror, 
200,201c200
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_APIbzerror, 
200,201c200
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(, 
200,202c200
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
201,202c201
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      * b, 
201,202c201
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( b, 
201,202c201
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int, 
201,203c201
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    void**  unused, 
201,203c201
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror**  unused, 
202,203c202
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        *  unused, 
202,203c202
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILEunused, 
202,203c202
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
202,204c202
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bint*    nUnused )
203,204c203
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
203,204c203
<                        void**  unused, 
<                        int*    nUnused )
---
>                        voidnUnused )
203,204c203
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*)
203,205c203
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void**  ;
203,213c203
<                        void**  unused, 
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedint BZ_API(BZ2_bzBuffToBuffCompress) 
204,213c204
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ_API(BZ2_bzBuffToBuffCompress) 
204,213c204
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int(BZ2_bzBuffToBuffCompress) 
204,213c204
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    BZ2_bzBuffToBuffCompress) 
204,213c204
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    nUnused ) 
205,214c205
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ( char*         dest, 
213,214c213
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> char*         dest, 
213,214c213
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int *         dest, 
213,214c213
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_APIdest, 
213,214c213
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(, 
213,215c213
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
214,215c214
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          int* destLen,
214,215c214
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( * destLen,
214,215c214
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( chardestLen,
214,215c214
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         ,
214,216c214
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destchar*         source, 
215,216c215
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            *         source, 
215,216c215
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned source, 
215,216c215
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int, 
215,217c215
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* unsigned int  sourceLen,
215,217c215
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLenint  sourceLen,
216,217c216
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
216,217c216
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char,
216,218c216
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         int           blockSize100k, 
216,218c216
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         sourceblockSize100k, 
217,218c217
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
217,219c217
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
217,219c217
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  verbosity, 
217,219c217
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  sourceLen, 
218,219d217
<                            int           blockSize100k, 
<                            int           verbosity, 
218,219d217
<                            int           blockSize100k, 
<                            int           verbosity, 
218,220c218
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           blockSize100k)
219,221c219
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            ;
219,225c219
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           int BZ_API(BZ2_bzBuffToBuffDecompress) 
219,225c219
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosityBZ_API(BZ2_bzBuffToBuffDecompress) 
220,225c220
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            (BZ2_bzBuffToBuffDecompress) 
220,225c220
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           BZ2_bzBuffToBuffDecompress) 
220,225c220
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           workFactor ) 
221,226c221
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
225,226c225
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
225,226c225
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int *         dest, 
225,226c225
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_APIdest, 
225,226c225
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(, 
225,227c225
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
226,227c226
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
226,227c226
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( * destLen,
226,227c226
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( chardestLen,
226,227c226
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         ,
226,228c226
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destchar*         source, 
227,228c227
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              *         source, 
227,228c227
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned source, 
227,228c227
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int, 
227,229c227
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* unsigned int  sourceLen,
227,229c227
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenint  sourceLen,
228,229c228
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
228,229c228
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char,
228,230c228
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         int           small,
228,230c228
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourcesmall,
229,230c229
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
229,231c229
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned int           mode )
229,231c229
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned int  mode )
229,231c229
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned int  sourceLen)
230,232c230
<                              int           small,
<                              int           mode )
< ;
---
>                              ;
230,236c230
<                              int           small,
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           int BZ_API(BZ2_bzread) (len )
230,236c230
<                              int           small,
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           smallBZ_API(BZ2_bzread) (len )
231,236c231
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              (BZ2_bzread) (len )
231,236c231
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           BZ2_bzread) (len )
231,236c231
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           mode ) (len )
232,236c232
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
> (len )
236c236
< int BZ_API(BZ2_bzread) (len )
---
> len )
236c236
< int BZ_API(BZ2_bzread) (len )
---
> int )
236,237c236
< int BZ_API(BZ2_bzread) (len )
< {
---
> int BZ_API{
236,238c236
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(int bzerr, nread;
236,238c236
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzreadbzerr, nread;
236,238c236
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) , nread;
236,238c236
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (nread;
236,238c236
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (len ;
237,239c237
< {
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
> if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
238,239c238
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
238,239c238
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int BZ_OK || bzerr == BZ_STREAM_END) ; else ;
238,239c238
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr|| bzerr == BZ_STREAM_END) ; else ;
238,239c238
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, bzerr == BZ_STREAM_END) ; else ;
238,239c238
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nread== BZ_STREAM_END) ; else ;
239c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    BZ_STREAM_END) ; else ;
239c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if ) ; else ;
239c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (; else ;
239c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK else ;
239c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || ;
239,240c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (BZ_OK || bzerr }
239,243c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == 
\ No newline at end of file
239,243c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
239,243c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
239,243c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
239,243c239
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
240,243d239
< }
< 
< 
< 
===< pass_clex :: rm-toks-5 >===
9,11c9
< #2
< 
< #define BZ_OK                0
---
> 0
9,12c9
< #2
< 
< #define BZ_OK                0
< #3
---
> ##3
11,12c11
< #define BZ_OK                0
< #3
---
> 3
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OK                BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
12,13c12
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> BZ_CONFIG_ERROR      (-9)
12,13c12
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #(-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> -9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define )
13,15c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_STREAM_END        typedef 
13,16c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      struct {
13,16c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      ({
13,17c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-int ;
13,17c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       int ;
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9;
15,18c15
< typedef 
<    struct {
<       int ;
<       ;
---
> ;
16,19c16
<    struct {
<       int ;
<       ;
<       void *opaque;
---
>    void *opaque;
16,19c16
<    struct {
<       int ;
<       ;
<       void *opaque;
---
>    struct *opaque;
17,19c17
<       int ;
<       ;
<       void *opaque;
---
>       opaque;
18,19d17
<       ;
<       void *opaque;
18,20c18
<       ;
<       void *opaque;
<    } 
---
>       } 
(97.8 %, 4412 bytes)
17,23c17
<       int ;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       int include <stdio.h>
18,23c18
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    <stdio.h>
19,23c19
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
19,23c19
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream.h>
23c23
< #include <stdio.h>
---
> h>
23c23
< #include <stdio.h>
---
> #>
23,25c23
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include #   define BZ_API(func) func
23,25c23
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <define BZ_API(func) func
23,25c23
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdioBZ_API(func) func
23,25c23
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.(func) func
23,25c23
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hfunc) func
25c25
< #   define BZ_API(func) func
---
> ) func
25c25
< #   define BZ_API(func) func
---
> #   func
25,26c25
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define #   define BZ_EXTERN ;
25,26c25
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_APIdefine BZ_EXTERN ;
25,26c25
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_API(BZ_EXTERN ;
25,26c25
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
---
> #   define BZ_API(func;
25,32c25
< #   define BZ_API(func) func
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_API(func) #define BZ_MAX_UNUSED 5000
26,32c26
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
26,32c26
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   BZ_MAX_UNUSED 5000
26,32c26
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define 5000
26,34c26
< #   define BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_EXTERN typedef void BZFILE;
32,34c32
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> void BZFILE;
32,34c32
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #BZFILE;
32,34c32
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #define ;
32,36c32
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
34,36c34
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
34,36c34
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef * BZ_API(BZ2_bzReadOpen) ( 
34,36c34
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZ_API(BZ2_bzReadOpen) ( 
(97.9 %, 4377 bytes)
26,28c26
< #   define BZ_EXTERN typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
26,28c26
< #   define BZ_EXTERN typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef * BZ_API(BZ2_bzReadOpen) ( 
26,28c26
< #   define BZ_EXTERN typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef void BZ_API(BZ2_bzReadOpen) ( 
26,28c26
< #   define BZ_EXTERN typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef void BZFILE(BZ2_bzReadOpen) ( 
28c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
28c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ) ( 
28c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE( 
28,29c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* int*  bzerror,   
28,29c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API*  bzerror,   
28,29c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(bzerror,   
28,29c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen,   
28,30c28
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) FILE* f, 
29,30c29
<       int*  bzerror,   
<       FILE* f, 
---
>       * f, 
29,30c29
<       int*  bzerror,   
<       FILE* f, 
---
>       intf, 
29,30c29
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  , 
29,31c29
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerrorint   verbosity, 
30,31c30
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
30,31c30
<       FILE* f, 
<       int   verbosity, 
---
>       FILE, 
30,32c30
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* int   small,
30,32c30
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* fsmall,
31,32c31
<       int   verbosity, 
<       int   small,
---
>       ,
31,33c31
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   void* unused,    
31,33c31
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosity* unused,    
32,33c32
<       int   small,
<       void* unused,    
---
>       unused,    
32,33c32
<       int   small,
<       void* unused,    
---
>       int   ,    
32,34c32
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   smallint   nUnused 
33,34c33
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
33,35c33
<       void* unused,    
<       int   nUnused 
<    );
---
>       void);
33,35c33
<       void* unused,    
<       int   nUnused 
<    );
---
>       void* ;
33,37c33
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* unusedBZ_EXTERN void ;
34,37c34
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void ;
34,37c34
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   ;
35,39c35
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
35,39c35
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )void BZ_API(BZ2_bzReadGetUnused) ( 
37,39c37
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
37,39c37
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN (BZ2_bzReadGetUnused) ( 
37,39c37
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ2_bzReadGetUnused) ( 
39c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ) ( 
39c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN ( 
39,40c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void int*    bzerror, 
39,40c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API*    bzerror, 
39,40c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
39,40c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused, 
39,41c39
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) BZFILE* b, 
40,41c40
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
40,41c40
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
40,41c40
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
40,42c40
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerrorvoid**  unused,  
41,42c41
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
41,42c41
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  unused,  
41,42c41
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* unused,  
41,42c41
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b,  
42d41
<       void**  unused,  
42,43c42
<       void**  unused,  
<       int*    nUnused 
---
>       void*    nUnused 
42,43c42
<       void**  unused,  
<       int*    nUnused 
---
>       void*nUnused 
42,44c42
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  );
42,44c42
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  unused;
43,46c43
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
43,46c43
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       intint BZ_API(BZ2_bzRead) ( 
43,46c43
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    BZ_API(BZ2_bzRead) ( 
44,46c44
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    (BZ2_bzRead) ( 
44,46c44
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )BZ2_bzRead) ( 
46c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> ) ( 
46c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN ( 
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int int*    bzerror, 
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API*    bzerror, 
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(bzerror, 
46,47c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead, 
46,48c46
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) BZFILE* b, 
47,48c47
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
47,48c47
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
47,48c47
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
47,49c47
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorvoid*   buf, 
48,49c48
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
48,49c48
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILEbuf, 
48,49c48
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
48,50c48
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* bint     len 
49,50c49
<       void*   buf, 
<       int     len 
---
>       len 
49,51c49
<       void*   buf, 
<       int     len 
<    );
---
>       void);
49,51c49
<       void*   buf, 
<       int     len 
<    );
---
>       void*   ;
49,53c49
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
50,53c50
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
50,53c50
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     * BZ_API(BZ2_bzWriteOpen) ( 
51,53c51
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ_API(BZ2_bzWriteOpen) ( 
51,53c51
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )(BZ2_bzWriteOpen) ( 
53c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ2_bzWriteOpen) ( 
53c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ) ( 
53c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE( 
53,54c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int, 
---
> BZ_EXTERN BZFILE* int, 
53,54c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int, 
---
> BZ_EXTERN BZFILE* BZ_API, 
53,55c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_API(int   workFactor 
53,55c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
53,56c53
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int, 
<       int   workFactor 
<    );
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) );
54,56c54
<       int, 
<       int   workFactor 
<    );
---
>       ;
54,58c54
<       int, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       intBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
55,58c55
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
55,58c55
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_API(BZ2_bzWrite) ( 
56,58c56
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    (BZ2_bzWrite) ( 
56,58c56
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )BZ2_bzWrite) ( 
58c58
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> ) ( 
(97.9 %, 4348 bytes)
54,56c54
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    (BZ2_bzWrite) ( 
54,56c54
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )BZ2_bzWrite) ( 
56c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> ) ( 
56c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN ( 
56,57c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void int*    bzerror, 
56,57c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API*    bzerror, 
56,57c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
56,57c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, 
56,58c56
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) BZFILE* b, 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorvoid*   buf, 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILEbuf, 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
58,60c58
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* bint     len 
59,60c59
<       void*   buf, 
<       int     len 
---
>       len 
59,61c59
<       void*   buf, 
<       int     len 
<    );
---
>       void);
59,61c59
<       void*   buf, 
<       int     len 
<    );
---
>       void*   ;
59,63c59
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
60,63c60
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
60,63c60
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     BZ_API(BZ2_bzWriteClose) ( 
61,63c61
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    (BZ2_bzWriteClose) ( 
61,63c61
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ2_bzWriteClose) ( 
63c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ) ( 
63c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN ( 
63,64c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void int*          bzerror, 
63,64c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API*          bzerror, 
63,64c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
63,64c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
63,65c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) BZFILE*       b, 
64,65c64
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       *       b, 
64,65c64
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       intb, 
64,65c64
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
64,66c64
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorint           abandon, 
65,66c65
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
65,66c65
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE, 
65,67c65
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       unsigned int* nbytes_in, 
65,67c65
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       bint* nbytes_in, 
66,67c66
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
66,67c66
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           nbytes_in, 
67d66
<       unsigned int* nbytes_in, 
67d66
<       unsigned int* nbytes_in, 
67d66
<       unsigned int* nbytes_in, 
67d66
<       unsigned int* nbytes_in, 
67d66
<       unsigned int* nbytes_in, 
67,69c67
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* nbytes_in);
68,69c68
<       unsigned int* nbytes_out 
<    );
---
>       ;
68,71c68
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
68,71c68
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intvoid BZ_API(BZ2_bzWriteClose64) ( 
68,71c68
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ_API(BZ2_bzWriteClose64) ( 
69,71c69
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    (BZ2_bzWriteClose64) ( 
69,71c69
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )BZ2_bzWriteClose64) ( 
71c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> ) ( 
71c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN ( 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void int*          bzerror, 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API*          bzerror, 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
71,72c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
71,73c71
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) BZFILE*       b, 
72,73c72
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       *       b, 
72,73c72
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       intb, 
72,73c72
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
72,74c72
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorint           abandon, 
73,74c73
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
73,74c73
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE, 
73,75c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       unsigned int* nbytes_in_lo32, 
73,75c73
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       bint* nbytes_in_lo32, 
74,75c74
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
74,75c74
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           nbytes_in_lo32, 
75d74
<       unsigned int* nbytes_in_lo32, 
75d74
<       unsigned int* nbytes_in_lo32, 
75d74
<       unsigned int* nbytes_in_lo32, 
75d74
<       unsigned int* nbytes_in_lo32, 
75d74
<       unsigned int* nbytes_in_lo32, 
76d75
<       unsigned int* nbytes_in_hi32, 
76d75
<       unsigned int* nbytes_in_hi32, 
76d75
<       unsigned int* nbytes_in_hi32, 
76d75
<       unsigned int* nbytes_in_hi32, 
76d75
<       unsigned int* nbytes_in_hi32, 
77d76
<       unsigned int* nbytes_out_lo32, 
77d76
<       unsigned int* nbytes_out_lo32, 
77d76
<       unsigned int* nbytes_out_lo32, 
77d76
<       unsigned int* nbytes_out_lo32, 
77d76
<       unsigned int* nbytes_out_lo32, 
77,79c77
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_out_lo32);
78,79c78
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
78,84c78
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
78,84c78
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intint BZ_API(BZ2_bzBuffToBuffCompress) ( 
78,84c78
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_API(BZ2_bzBuffToBuffCompress) ( 
79,84c79
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    (BZ2_bzBuffToBuffCompress) ( 
79,84c79
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )BZ2_bzBuffToBuffCompress) ( 
84c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ) ( 
84c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN ( 
84,85c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int char*         dest, 
84,85c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API*         dest, 
84,85c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(dest, 
84,85c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress, 
84,86c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) unsigned int* destLen,
85,86c85
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
85,86c85
<       char*         dest, 
<       unsigned int* destLen,
---
>       char* destLen,
85,86c85
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destLen,
85,86c85
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         dest,
86d85
<       unsigned int* destLen,
86,87c86
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned *         source, 
86,87c86
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned intsource, 
86,87c86
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* , 
86,88c86
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenunsigned int  sourceLen,
87,88c87
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
87,88c87
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charsourceLen,
87,88c87
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         ,
87,89c87
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         sourceint           blockSize100k, 
88,89c88
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       blockSize100k, 
88,89c88
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned , 
88,90c88
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  int           verbosity, 
88,90c88
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  sourceLenverbosity, 
89,90c89
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
89,91c89
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       int           int           workFactor 
89,91c89
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       int           blockSize100kworkFactor 
90,92c90
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
90,92c90
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           ;
90,94c90
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
91,94c91
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
91,94c91
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_API(BZ2_bzBuffToBuffDecompress) ( 
92,94c92
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    (BZ2_bzBuffToBuffDecompress) ( 
92,94c92
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )BZ2_bzBuffToBuffDecompress) ( 
94c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
94c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN ( 
94,95c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int char*         dest, 
94,95c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API*         dest, 
94,95c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(dest, 
94,95c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress, 
94,96c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) unsigned int* destLen,
95,96c95
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
95,96c95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char* destLen,
95,96c95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destLen,
95,96c95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         dest,
96d95
<       unsigned int* destLen,
96,97c96
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned *         source, 
96,97c96
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned intsource, 
96,97c96
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* , 
96,98c96
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenunsigned int  sourceLen,
97,98c97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
97,98c97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charsourceLen,
97,98c97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         ,
97,99c97
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourceint           small, 
98,99c98
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
98,99c98
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned , 
98,100c98
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  int           );
98,100c98
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  sourceLen);
99,100c99
<       int           small, 
<       int           );
---
>       ;
99,102c99
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
---
>       int           BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
99,102c99
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
---
>       int           smallBZFILE * BZ_APIBZ_EXTERN ;
100,102c100
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
---
>       * BZ_APIBZ_EXTERN ;
100,102c100
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
---
>       int           BZ_APIBZ_EXTERN ;
102,103d101
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
< 
102,103d101
< BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN ;
< 
(97.9 %, 4310 bytes)
100,103c100
<       int           );
< 
< typedef Bool;
< typedef unsigned char   UChar;
---
>       int           )unsigned char   UChar;
102,103c102
< typedef Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
102,103c102
< typedef Bool;
< typedef unsigned char   UChar;
---
> typedef UChar;
103d102
< typedef unsigned char   UChar;
103d102
< typedef unsigned char   UChar;
103,104c103
< typedef unsigned char   UChar;
< UInt32;
---
> typedef ;
103,106c103
< typedef unsigned char   UChar;
< UInt32;
< 
< struct {
---
> typedef unsigned struct {
103,106c103
< typedef unsigned char   UChar;
< UInt32;
< 
< struct {
---
> typedef unsigned char   {
104,108d103
< UInt32;
< 
< struct {
<       
<       ;
(97.9 %, 4280 bytes)
102,105c102
< typedef UChar;
< UInt32;
< 
< struct {
---
> typedef {
103,107d102
< UInt32;
< 
< struct {
<       
<       ;
103,108c103
< UInt32;
< 
< struct {
<       
<       ;
<       UChar    selector   ;
---
> UChar    selector   ;
103,108c103
< UInt32;
< 
< struct {
<       
<       ;
<       UChar    selector   ;
---
> UInt32selector   ;
105,108c105
< struct {
<       
<       ;
<       UChar    selector   ;
---
> ;
105,110c105
< struct {
<       
<       ;
<       UChar    selector   ;
< 
<    ;
---
> struct ;
107,112c107
<       ;
<       UChar    selector   ;
< 
<    ;
< 
<    }
---
>       }
108,113c108
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       (BZ2_bzDecompressInitsmall )
108,113c108
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       UChar    BZ2_bzDecompressInitsmall )
108,113c108
<       UChar    selector   ;
< 
<    ;
< 
<    }
<    (BZ2_bzDecompressInitsmall )
---
>       UChar    selector   )
112,115d111
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
112,121c112
<    }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
---
>    typedef 
113,121d112
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
(97.9 %, 4240 bytes)
107,116c107
<       }
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
---
>       typedef 
108,116d107
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
108,117c108
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
<    bzFile( int*  )
---
>    (( int*  )
108,117c108
<    (BZ2_bzDecompressInitsmall )
< ;
< 
< 
< 
< 
< 
< 
< typedef 
<    bzFile( int*  )
---
>    (BZ2_bzDecompressInitsmall int*  )
109,117c109
< ;
< 
< 
< 
< 
< 
< 
< typedef 
<    bzFile( int*  )
---
> *  )
116,117c116
< typedef 
<    bzFile( int*  )
---
> )
117,118c117
<    bzFile( int*  )
< ;
---
>    ;
(98.0 %, 4191 bytes)
108,109c108
<    bzFile( int*  )
< ;
---
>    ;
108,114c108
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFilevoid BZ_API(BZ2_bzWrite)
108,114c108
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile( BZ_API(BZ2_bzWrite)
108,114c108
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile( int(BZ2_bzWrite)
108,114c108
<    bzFile( int*  )
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile( int*  BZ2_bzWrite)
109,114c109
< ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
> )
114,115c114
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
114,115c114
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void int*    bzerror, 
114,115c114
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
(98.0 %, 4175 bytes)
108,113c108
<    ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    )
113,114c113
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
113,114c113
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void int*    bzerror, 
113,114c113
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
113,114c113
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(bzerror, 
113,114c113
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(BZ2_bzWrite, 
114,115c114
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              BZFILE* b, 
114,115c114
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( * b, 
114,115c114
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( intb, 
114,115c114
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
114,116c114
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerrorvoid*   buf, 
115,116c115
<                BZFILE* b, 
<                void*   buf, 
---
>                *   buf, 
115,116c115
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILEbuf, 
115,116c115
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
115,117c115
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* bint     len )
116,117c116
<                void*   buf, 
<                int     len )
---
>                len )
116,117c116
<                void*   buf, 
<                int     len )
---
>                void)
116,118c116
<                void*   buf, 
<                int     len )
< ;
---
>                void*   ;
116,122c116
<                void*   buf, 
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                void*   bufvoid BZ_API(BZ2_bzWriteClose)
117,122c117
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                BZ_API(BZ2_bzWriteClose)
117,122c117
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                int     (BZ2_bzWriteClose)
117,122c117
<                int     len )
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>                int     len BZ2_bzWriteClose)
118,122c118
< ;
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
> )
122,123c122
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
122,123c122
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void int*          bzerror, 
122,123c122
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API*          bzerror, 
122,123c122
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(bzerror, 
122,123c122
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose, 
123,124c123
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   BZFILE*       b, 
123,124c123
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( *       b, 
123,124c123
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( intb, 
123,124c123
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
123,125c123
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorint           abandon,
124,125c124
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     abandon,
124,125c124
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE,
124,126c124
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       unsigned int* nbytes_in,
124,126c124
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       bint* nbytes_in,
125,126c125
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
125,126c125
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           nbytes_in,
126d125
<                     unsigned int* nbytes_in,
126d125
<                     unsigned int* nbytes_in,
126d125
<                     unsigned int* nbytes_in,
126d125
<                     unsigned int* nbytes_in,
126d125
<                     unsigned int* nbytes_in,
126,127c126
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_in)
127,128c127
<                     unsigned int* nbytes_out )
< ;
---
>                     ;
127,131c127
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned void BZ_API(BZ2_bzWriteClose64)
127,131c127
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intBZ_API(BZ2_bzWriteClose64)
127,131c127
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* (BZ2_bzWriteClose64)
127,131c127
<                     unsigned int* nbytes_out )
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_out BZ2_bzWriteClose64)
128,131c128
< ;
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
> )
131,132c131
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
131,132c131
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void int*          bzerror, 
131,132c131
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API*          bzerror, 
131,132c131
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(bzerror, 
131,132c131
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose64, 
132,133c132
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   BZFILE*       b, 
132,133c132
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( *       b, 
132,133c132
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( intb, 
132,133c132
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
132,134c132
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorint           abandon,
133,134c133
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     abandon,
133,134c133
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE,
133,135c133
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       unsigned int* nbytes_in_lo32,
133,135c133
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       bint* nbytes_in_lo32,
134,135c134
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
134,135c134
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           nbytes_in_lo32,
135d134
<                     unsigned int* nbytes_in_lo32,
135d134
<                     unsigned int* nbytes_in_lo32,
135d134
<                     unsigned int* nbytes_in_lo32,
135d134
<                     unsigned int* nbytes_in_lo32,
135d134
<                     unsigned int* nbytes_in_lo32,
136d135
<                     unsigned int* nbytes_in_hi32,
136d135
<                     unsigned int* nbytes_in_hi32,
136d135
<                     unsigned int* nbytes_in_hi32,
136d135
<                     unsigned int* nbytes_in_hi32,
136d135
<                     unsigned int* nbytes_in_hi32,
137d136
<                     unsigned int* nbytes_out_lo32,
137d136
<                     unsigned int* nbytes_out_lo32,
137d136
<                     unsigned int* nbytes_out_lo32,
137d136
<                     unsigned int* nbytes_out_lo32,
137d136
<                     unsigned int* nbytes_out_lo32,
137,138c137
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32)
138,139c138
<                     unsigned int* nbytes_out_hi32 )
< ;
---
>                     ;
138,143c138
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned BZFILE* BZ_API(BZ2_bzReadOpen) 
138,143c138
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ_API(BZ2_bzReadOpen) 
138,143c138
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* BZ_API(BZ2_bzReadOpen) 
138,143c138
<                     unsigned int* nbytes_out_hi32 )
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>                     unsigned int* nbytes_out_hi32 (BZ2_bzReadOpen) 
139,143c139
< ;
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
143c143
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> ) 
143,144c143
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE( int*  bzerror, 
143,144c143
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* int*  bzerror, 
143,144c143
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API*  bzerror, 
143,144c143
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(bzerror, 
143,144c143
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(BZ2_bzReadOpen, 
144,145c144
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    FILE* f, 
144,145c144
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( * f, 
144,145c144
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( intf, 
144,145c144
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
144,146c144
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerrorint   verbosity,
145,146c145
<                      FILE* f, 
<                      int   verbosity,
---
>                      verbosity,
145,146c145
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE,
145,147c145
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* int   small,
145,147c145
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* fsmall,
146,147c146
<                      int   verbosity,
<                      int   small,
---
>                      ,
146,148c146
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   void* unused,
146,148c146
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   verbosity* unused,
147,148c147
<                      int   small,
<                      void* unused,
---
>                      unused,
147,148c147
<                      int   small,
<                      void* unused,
---
>                      int   ,
147,149c147
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   smallint   nUnused )
148,149c148
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
148,149c148
<                      void* unused,
<                      int   nUnused )
---
>                      void)
148,150c148
<                      void* unused,
<                      int   nUnused )
< ;
---
>                      void* ;
148,154c148
<                      void* unused,
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      void* unusedvoid ;
149,154c149
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
---
>                      ;
149,158c149
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   int BZ_API(BZ2_bzRead) 
149,158c149
<                      int   nUnused )
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>                      int   nUnused BZ_API(BZ2_bzRead) 
150,158c150
< ;
< 
< 
< 
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> (BZ2_bzRead) 
154,158c154
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZ2_bzRead) 
154,158c154
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void ) 
158,159c158
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
158,159c158
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int int*    bzerror, 
158,159c158
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API*    bzerror, 
158,159c158
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(bzerror, 
158,159c158
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(BZ2_bzRead, 
159,160c159
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            BZFILE* b, 
159,160c159
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( * b, 
159,160c159
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( intb, 
159,160c159
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
159,161c159
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerrorvoid*   buf, 
160,161c160
<              BZFILE* b, 
<              void*   buf, 
---
>              *   buf, 
160,161c160
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILEbuf, 
160,161c160
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
160,162c160
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* bint     len )
161,162c161
<              void*   buf, 
<              int     len )
---
>              len )
161,162c161
<              void*   buf, 
<              int     len )
---
>              void)
161,163c161
<              void*   buf, 
<              int     len )
< {
---
>              void*   {
161,165c161
<              void*   buf, 
<              int     len )
< {
<    
<    ; 
---
>              void*   buf; 
162,166c162
<              int     len )
< {
<    
<    ; 
< }
---
>              }
162,170c162
<              int     len )
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              int     void BZ_API(BZ2_bzReadGetUnused) 
162,170c162
<              int     len )
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              int     len BZ_API(BZ2_bzReadGetUnused) 
163,170c163
< {
<    
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> (BZ2_bzReadGetUnused) 
165,170c165
<    ; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ2_bzReadGetUnused) 
166,170c166
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> ) 
170,171c170
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
170,171c170
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void int*    bzerror, 
170,171c170
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
170,171c170
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(bzerror, 
170,171c170
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
171,172c171
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      BZFILE* b, 
171,172c171
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( * b, 
171,172c171
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( intb, 
171,172c171
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
171,173c171
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerrorvoid**  unused, 
172,173c172
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        **  unused, 
172,173c172
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  unused, 
172,173c172
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* unused, 
173d172
<                        void**  unused, 
173d172
<                        void**  unused, 
173,174c173
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*    nUnused )
173,174c173
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*nUnused )
173,174c173
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  )
173,175c173
<                        void**  unused, 
<                        int*    nUnused )
< ;
---
>                        void**  unused;
174,183c174
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int BZ_API(BZ2_bzBuffToBuffCompress) 
174,183c174
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        intBZ_API(BZ2_bzBuffToBuffCompress) 
174,183c174
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    (BZ2_bzBuffToBuffCompress) 
174,183c174
<                        int*    nUnused )
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    nUnused BZ2_bzBuffToBuffCompress) 
175,183c175
< ;
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> ) 
183,184c183
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ( char*         dest, 
183,184c183
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int char*         dest, 
183,184c183
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API*         dest, 
183,184c183
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(dest, 
183,184c183
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffCompress, 
184,185c184
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          unsigned int* destLen,
184,185c184
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( int* destLen,
184,185c184
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char* destLen,
184,185c184
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         destLen,
184,185c184
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest,
185d184
<                            unsigned int* destLen,
185,186c185
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned *         source, 
185,186c185
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned intsource, 
185,186c185
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int* , 
185,187c185
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLenunsigned int  sourceLen,
186,187c186
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
186,187c186
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            charsourceLen,
186,187c186
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         ,
186,188c186
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         sourceint           blockSize100k, 
187,188c187
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            blockSize100k, 
187,188c187
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned , 
187,189c187
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  int           verbosity, 
187,189c187
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  sourceLenverbosity, 
188,189c188
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
188,190c188
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           int           workFactor )
188,190c188
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           blockSize100kworkFactor )
189,190c189
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
189,191c189
<                            int           verbosity, 
<                            int           workFactor )
< ;
---
>                            int           ;
189,195c189
<                            int           verbosity, 
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           verbosityint BZ_API(BZ2_bzBuffToBuffDecompress) 
190,195c190
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            BZ_API(BZ2_bzBuffToBuffDecompress) 
190,195c190
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           (BZ2_bzBuffToBuffDecompress) 
190,195c190
<                            int           workFactor )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>                            int           workFactor BZ2_bzBuffToBuffDecompress) 
191,195c191
< ;
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> ) 
195,196c195
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
195,196c195
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int char*         dest, 
195,196c195
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API*         dest, 
195,196c195
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(dest, 
195,196c195
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress, 
196,197c196
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            unsigned int* destLen,
196,197c196
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( int* destLen,
196,197c196
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char* destLen,
196,197c196
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destLen,
196,197c196
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest,
197d196
<                              unsigned int* destLen,
197,198c197
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned *         source, 
197,198c197
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned intsource, 
197,198c197
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* , 
197,199c197
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenunsigned int  sourceLen,
198,199c198
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
198,199c198
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              charsourceLen,
198,199c198
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         ,
198,200c198
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourceint           small,
199,200c199
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
199,200c199
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned ,
199,201c199
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned int  int           mode )
199,201c199
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           mode )
---
>                              unsigned int  sourceLenmode )
200,201c200
<                              int           small,
<                              int           mode )
---
>                              )
200,202c200
<                              int           small,
<                              int           mode )
< ;
---
>                              int           ;
200,206c200
<                              int           small,
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           smallint BZ_API(BZ2_bzread) (len )
201,206c201
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              BZ_API(BZ2_bzread) (len )
201,206c201
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           (BZ2_bzread) (len )
201,206c201
<                              int           mode )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
>                              int           mode BZ2_bzread) (len )
202,206c202
< ;
< 
< 
< 
< int BZ_API(BZ2_bzread) (len )
---
> ) (len )
206c206
< int BZ_API(BZ2_bzread) (len )
---
> (len )
206c206
< int BZ_API(BZ2_bzread) (len )
---
> int len )
206c206
< int BZ_API(BZ2_bzread) (len )
---
> int BZ_API)
206,207c206
< int BZ_API(BZ2_bzread) (len )
< {
---
> int BZ_API({
206,208c206
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzreadint bzerr, nread;
206,208c206
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) bzerr, nread;
206,208c206
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (, nread;
206,208c206
< int BZ_API(BZ2_bzread) (len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (len nread;
207,208c207
< {
<    int bzerr, nread;
---
> ;
208d207
<    int bzerr, nread;
208,209c208
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
208,209c208
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerrBZ_OK || bzerr == BZ_STREAM_END) ; else ;
208,209c208
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, || bzerr == BZ_STREAM_END) ; else ;
208,209c208
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nreadbzerr == BZ_STREAM_END) ; else ;
209c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    == BZ_STREAM_END) ; else ;
209c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if BZ_STREAM_END) ; else ;
209c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if () ; else ;
209c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK ; else ;
209c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || else ;
209c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr ;
209,210c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (BZ_OK || bzerr == }
209,213c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
209,213c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
209,213c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
209,213c209
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else 
\ No newline at end of file
210,213d209
< }
< 
< 
< 
===< pass_clex :: rm-toks-1 >===
9c9
< #2
---
> 2
9,11c9
< #2
< 
< #define BZ_OK                0
---
> ##define BZ_OK                0
11c11
< #define BZ_OK                0
---
> define BZ_OK                0
11c11
< #define BZ_OK                0
---
> #BZ_OK                0
11c11
< #define BZ_OK                0
---
> #define 0
11,12c11
< #define BZ_OK                0
< #3
---
> #define BZ_OK                #3
12c12
< #3
---
> 3
12,13c12
< #3
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      (-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        (-9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      -9)
13c13
< #define BZ_STREAM_END        BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        BZ_CONFIG_ERROR      (9)
(98.0 %, 4154 bytes)
13c13
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        -9)
13c13
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        (9)
13c13
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        (-)
13,15c13
< #define BZ_STREAM_END        (-9)
< 
< typedef 
---
> #define BZ_STREAM_END        (-9typedef 
15,16c15
< typedef 
<    struct {
---
> struct {
(98.0 %, 4153 bytes)
13c13
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        ()
13,15c13
< #define BZ_STREAM_END        (9)
< 
< typedef 
---
> #define BZ_STREAM_END        (9typedef 
15,16c15
< typedef 
<    struct {
---
> struct {
16c16
<    struct {
---
>    {
16,17c16
<    struct {
<       int ;
---
>    struct int ;
17c17
<       int ;
---
>       ;
(98.0 %, 4141 bytes)
15c15
< struct {
---
> {
15,16c15
< struct {
<       int ;
---
> struct int ;
16c16
<       int ;
---
>       ;
16,17c16
<       int ;
<    } 
---
>       int } 
(98.0 %, 4137 bytes)
16,17c16
<       ;
<    } 
---
>       } 
17d16
<    } 
18c18
<    bz_stream;
---
>    ;
(98.0 %, 4132 bytes)
16,17c16
<       } 
<    bz_stream;
---
>       bz_stream;
17c17
<    bz_stream;
---
>    ;
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream#include <stdio.h>
21c21
< #include <stdio.h>
---
> include <stdio.h>
21c21
< #include <stdio.h>
---
> #<stdio.h>
21c21
< #include <stdio.h>
---
> #include stdio.h>
21c21
< #include <stdio.h>
---
> #include <.h>
(98.0 %, 4123 bytes)
17,21c17
<    ;
< 
< 
< 
< #include <stdio.h>
---
>    #include <stdio.h>
21c21
< #include <stdio.h>
---
> include <stdio.h>
21c21
< #include <stdio.h>
---
> #<stdio.h>
21c21
< #include <stdio.h>
---
> #include stdio.h>
21c21
< #include <stdio.h>
---
> #include <.h>
21c21
< #include <stdio.h>
---
> #include <stdioh>
21c21
< #include <stdio.h>
---
> #include <stdio.>
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h#   define BZ_API(func) func
23c23
< #   define BZ_API(func) func
---
> define BZ_API(func) func
23c23
< #   define BZ_API(func) func
---
> #   BZ_API(func) func
23c23
< #   define BZ_API(func) func
---
> #   define (func) func
23c23
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
23c23
< #   define BZ_API(func) func
---
> #   define BZ_API() func
23c23
< #   define BZ_API(func) func
---
> #   define BZ_API(funcfunc
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN typedef void BZFILE;
---
> #   define BZ_API(func) #   define BZ_EXTERN typedef void BZFILE;
24c24
< #   define BZ_EXTERN typedef void BZFILE;
---
> define BZ_EXTERN typedef void BZFILE;
24c24
< #   define BZ_EXTERN typedef void BZFILE;
---
> #   BZ_EXTERN typedef void BZFILE;
24c24
< #   define BZ_EXTERN typedef void BZFILE;
---
> #   define typedef void BZFILE;
24c24
< #   define BZ_EXTERN typedef void BZFILE;
---
> #   define BZ_EXTERN void BZFILE;
24c24
< #   define BZ_EXTERN typedef void BZFILE;
---
> #   define BZ_EXTERN typedef BZFILE;
24c24
< #   define BZ_EXTERN typedef void BZFILE;
---
> #   define BZ_EXTERN typedef void ;
24,26c24
< #   define BZ_EXTERN typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef void BZFILEBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILEBZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* (BZ2_bzReadOpen) ( 
(98.0 %, 4118 bytes)
24c24
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZ_EXTERN typedef ;
24,26c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef BZFILEBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILEBZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* (BZ2_bzReadOpen) ( 
(98.0 %, 4112 bytes)
26c26
< BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * (BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_APIBZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API() ( 
26c26
< BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen( 
26,27c26
< BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) int*  bzerror,   
27c27
<       int*  bzerror,   
---
>       *  bzerror,   
27c27
<       int*  bzerror,   
---
>       intbzerror,   
27c27
<       int*  bzerror,   
---
>       int*  ,   
(98.0 %, 4106 bytes)
26c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ2_bzReadOpen) ( 
26c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * () ( 
26c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * (BZ2_bzReadOpen( 
26,27c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN * (BZ2_bzReadOpen) int*  bzerror,   
27c27
<       int*  bzerror,   
---
>       *  bzerror,   
27c27
<       int*  bzerror,   
---
>       intbzerror,   
27c27
<       int*  bzerror,   
---
>       int*  ,   
27,28c27
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerrorFILE* f, 
28c28
<       FILE* f, 
---
>       * f, 
28c28
<       FILE* f, 
---
>       FILEf, 
28c28
<       FILE* f, 
---
>       FILE* , 
(98.0 %, 4099 bytes)
27,28c27
<       int*  ,   
<       FILE* f, 
---
>       int*  FILE* f, 
28c28
<       FILE* f, 
---
>       * f, 
28c28
<       FILE* f, 
---
>       FILEf, 
28c28
<       FILE* f, 
---
>       FILE* , 
28,29c28
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* fint   verbosity, 
29c29
<       int   verbosity, 
---
>       verbosity, 
29c29
<       int   verbosity, 
---
>       int   , 
(98.0 %, 4098 bytes)
28,29c28
<       FILE* , 
<       int   verbosity, 
---
>       FILE* int   verbosity, 
29c29
<       int   verbosity, 
---
>       verbosity, 
29c29
<       int   verbosity, 
---
>       int   , 
29,30c29
<       int   verbosity, 
<       int   small,
---
>       int   verbosityint   small,
30c30
<       int   small,
---
>       small,
30c30
<       int   small,
---
>       int   ,
(98.0 %, 4089 bytes)
29,30c29
<       int   , 
<       int   small,
---
>       int   int   small,
30c30
<       int   small,
---
>       small,
30c30
<       int   small,
---
>       int   ,
30,31c30
<       int   small,
<       void* unused,    
---
>       int   smallvoid* unused,    
31c31
<       void* unused,    
---
>       * unused,    
31c31
<       void* unused,    
---
>       voidunused,    
31c31
<       void* unused,    
---
>       void* ,    
(98.0 %, 4084 bytes)
30,31c30
<       int   ,
<       void* unused,    
---
>       int   void* unused,    
31c31
<       void* unused,    
---
>       * unused,    
31c31
<       void* unused,    
---
>       voidunused,    
31c31
<       void* unused,    
---
>       void* ,    
31,32c31
<       void* unused,    
<       int   nUnused 
---
>       void* unusedint   nUnused 
32c32
<       int   nUnused 
---
>       nUnused 
32,33c32
<       int   nUnused 
<    );
---
>       int   );
(98.0 %, 4078 bytes)
31,32c31
<       void* ,    
<       int   nUnused 
---
>       void* int   nUnused 
32c32
<       int   nUnused 
---
>       nUnused 
32,33c32
<       int   nUnused 
<    );
---
>       int   );
33c33
<    );
---
>    ;
33,35c33
<    );
< 
< BZ_EXTERN void ;
---
>    )BZ_EXTERN void ;
35c35
< BZ_EXTERN void ;
---
> void ;
(98.0 %, 4066 bytes)
32c32
<       int   );
---
>       int   ;
32,34c32
<       int   );
< 
< BZ_EXTERN void ;
---
>       int   )BZ_EXTERN void ;
34c34
< BZ_EXTERN void ;
---
> void ;
34c34
< BZ_EXTERN void ;
---
> BZ_EXTERN ;
34,36c34
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
(98.0 %, 4056 bytes)
34c34
< void ;
---
> ;
34,36c34
< void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
36c36
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
(98.0 %, 4051 bytes)
34,35d33
< ;
< 
36c36
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
(98.0 %, 4048 bytes)
34c34
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
34c34
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadGetUnused) ( 
34c34
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
(98.0 %, 4038 bytes)
34c34
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
34c34
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void (BZ2_bzReadGetUnused) ( 
34c34
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_APIBZ2_bzReadGetUnused) ( 
34c34
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API() ( 
34c34
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused( 
34,35c34
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused) int*    bzerror, 
35c35
<       int*    bzerror, 
---
>       *    bzerror, 
35c35
<       int*    bzerror, 
---
>       intbzerror, 
35c35
<       int*    bzerror, 
---
>       int*    , 
(98.0 %, 4032 bytes)
34c34
< void (BZ2_bzReadGetUnused) ( 
---
> void BZ2_bzReadGetUnused) ( 
34c34
< void (BZ2_bzReadGetUnused) ( 
---
> void () ( 
34c34
< void (BZ2_bzReadGetUnused) ( 
---
> void (BZ2_bzReadGetUnused( 
34,35c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void (BZ2_bzReadGetUnused) int*    bzerror, 
35c35
<       int*    bzerror, 
---
>       *    bzerror, 
35c35
<       int*    bzerror, 
---
>       intbzerror, 
35c35
<       int*    bzerror, 
---
>       int*    , 
35,36c35
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerrorBZFILE* b, 
36c36
<       BZFILE* b, 
---
>       * b, 
36c36
<       BZFILE* b, 
---
>       BZFILEb, 
36c36
<       BZFILE* b, 
---
>       BZFILE* , 
(98.0 %, 4025 bytes)
35,36c35
<       int*    , 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
36c36
<       BZFILE* b, 
---
>       * b, 
36c36
<       BZFILE* b, 
---
>       BZFILEb, 
36c36
<       BZFILE* b, 
---
>       BZFILE* , 
36,37c36
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* bvoid**  unused,  
37c37
<       void**  unused,  
---
>       **  unused,  
37c37
<       void**  unused,  
---
>       void*  unused,  
37c37
<       void**  unused,  
---
>       void*unused,  
37c37
<       void**  unused,  
---
>       void**  ,  
(98.0 %, 4024 bytes)
36,37c36
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE* void**  unused,  
37c37
<       void**  unused,  
---
>       **  unused,  
37c37
<       void**  unused,  
---
>       void*  unused,  
37c37
<       void**  unused,  
---
>       void*unused,  
37c37
<       void**  unused,  
---
>       void**  ,  
37,38c37
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unusedint*    nUnused 
38c38
<       int*    nUnused 
---
>       *    nUnused 
38c38
<       int*    nUnused 
---
>       intnUnused 
38,39c38
<       int*    nUnused 
<    );
---
>       int*    );
(98.0 %, 4018 bytes)
37,38c37
<       void**  ,  
<       int*    nUnused 
---
>       void**  int*    nUnused 
38c38
<       int*    nUnused 
---
>       *    nUnused 
38c38
<       int*    nUnused 
---
>       intnUnused 
38,39c38
<       int*    nUnused 
<    );
---
>       int*    );
39c39
<    );
---
>    ;
39,41c39
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
41c41
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> int BZ_API(BZ2_bzRead) ( 
(98.0 %, 4006 bytes)
38c38
<       int*    );
---
>       int*    ;
38,40c38
<       int*    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    )BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
40c40
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> int BZ_API(BZ2_bzRead) ( 
40c40
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzRead) ( 
(98.1 %, 3996 bytes)
40c40
< int BZ_API(BZ2_bzRead) ( 
---
> BZ_API(BZ2_bzRead) ( 
40c40
< int BZ_API(BZ2_bzRead) ( 
---
> int (BZ2_bzRead) ( 
(98.1 %, 3992 bytes)
40c40
< BZ_API(BZ2_bzRead) ( 
---
> (BZ2_bzRead) ( 
40c40
< BZ_API(BZ2_bzRead) ( 
---
> BZ_APIBZ2_bzRead) ( 
40c40
< BZ_API(BZ2_bzRead) ( 
---
> BZ_API() ( 
40c40
< BZ_API(BZ2_bzRead) ( 
---
> BZ_API(BZ2_bzRead( 
40,41c40
< BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_API(BZ2_bzRead) int*    bzerror, 
41c41
<       int*    bzerror, 
---
>       *    bzerror, 
41c41
<       int*    bzerror, 
---
>       intbzerror, 
(98.1 %, 3986 bytes)
40c40
< (BZ2_bzRead) ( 
---
> BZ2_bzRead) ( 
40c40
< (BZ2_bzRead) ( 
---
> () ( 
40c40
< (BZ2_bzRead) ( 
---
> (BZ2_bzRead( 
40,41c40
< (BZ2_bzRead) ( 
<       int*    bzerror, 
---
> (BZ2_bzRead) int*    bzerror, 
41c41
<       int*    bzerror, 
---
>       *    bzerror, 
41c41
<       int*    bzerror, 
---
>       intbzerror, 
41c41
<       int*    bzerror, 
---
>       int*    , 
41,42c41
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerrorBZFILE* b, 
42c42
<       BZFILE* b, 
---
>       * b, 
42c42
<       BZFILE* b, 
---
>       BZFILEb, 
42c42
<       BZFILE* b, 
---
>       BZFILE* , 
(98.1 %, 3979 bytes)
41,42c41
<       int*    , 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
42c42
<       BZFILE* b, 
---
>       * b, 
42c42
<       BZFILE* b, 
---
>       BZFILEb, 
42c42
<       BZFILE* b, 
---
>       BZFILE* , 
42,43c42
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* bvoid*   buf, 
43c43
<       void*   buf, 
---
>       *   buf, 
43c43
<       void*   buf, 
---
>       voidbuf, 
43c43
<       void*   buf, 
---
>       void*   , 
(98.1 %, 3978 bytes)
42,43c42
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE* void*   buf, 
43c43
<       void*   buf, 
---
>       *   buf, 
43c43
<       void*   buf, 
---
>       voidbuf, 
43c43
<       void*   buf, 
---
>       void*   , 
43,44c43
<       void*   buf, 
<       int     len 
---
>       void*   bufint     len 
44c44
<       int     len 
---
>       len 
44,45c44
<       int     len 
<    );
---
>       int     );
(98.1 %, 3975 bytes)
43,44c43
<       void*   , 
<       int     len 
---
>       void*   int     len 
44c44
<       int     len 
---
>       len 
44,45c44
<       int     len 
<    );
---
>       int     );
45c45
<    );
---
>    ;
45,47c45
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
>    )BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
47c47
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
(98.1 %, 3967 bytes)
44c44
<       int     );
---
>       int     ;
44,46c44
<       int     );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
>       int     )BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
46c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
46c46
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpenworkFactor 
(98.1 %, 3957 bytes)
46c46
< BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
> * BZ_API(BZ2_bzWriteOpenworkFactor 
46c46
< BZFILE* BZ_API(BZ2_bzWriteOpenworkFactor 
---
> BZFILEBZ_API(BZ2_bzWriteOpenworkFactor 
(98.1 %, 3951 bytes)
46c46
< * BZ_API(BZ2_bzWriteOpenworkFactor 
---
> BZ_API(BZ2_bzWriteOpenworkFactor 
46c46
< * BZ_API(BZ2_bzWriteOpenworkFactor 
---
> * (BZ2_bzWriteOpenworkFactor 
(98.1 %, 3949 bytes)
46c46
< BZ_API(BZ2_bzWriteOpenworkFactor 
---
> (BZ2_bzWriteOpenworkFactor 
46c46
< BZ_API(BZ2_bzWriteOpenworkFactor 
---
> BZ_APIBZ2_bzWriteOpenworkFactor 
46,47c46
< BZ_API(BZ2_bzWriteOpenworkFactor 
<    );
---
> BZ_API();
(98.1 %, 3943 bytes)
46c46
< (BZ2_bzWriteOpenworkFactor 
---
> BZ2_bzWriteOpenworkFactor 
46,47c46
< (BZ2_bzWriteOpenworkFactor 
<    );
---
> ();
47c47
<    );
---
>    ;
47,49c47
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API(BZ2_bzWrite) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWrite) ( 
49c49
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void (BZ2_bzWrite) ( 
(98.1 %, 3933 bytes)
49c49
< void BZ_API(BZ2_bzWrite) ( 
---
> BZ_API(BZ2_bzWrite) ( 
49c49
< void BZ_API(BZ2_bzWrite) ( 
---
> void (BZ2_bzWrite) ( 
49c49
< void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_APIBZ2_bzWrite) ( 
49c49
< void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API() ( 
49c49
< void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API(BZ2_bzWrite( 
49,50c49
< void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzWrite) int*    bzerror, 
50c50
<       int*    bzerror, 
---
>       *    bzerror, 
50c50
<       int*    bzerror, 
---
>       intbzerror, 
50c50
<       int*    bzerror, 
---
>       int*    , 
(98.1 %, 3927 bytes)
49c49
< void (BZ2_bzWrite) ( 
---
> void BZ2_bzWrite) ( 
49c49
< void (BZ2_bzWrite) ( 
---
> void () ( 
49c49
< void (BZ2_bzWrite) ( 
---
> void (BZ2_bzWrite( 
49,50c49
< void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> void (BZ2_bzWrite) int*    bzerror, 
50c50
<       int*    bzerror, 
---
>       *    bzerror, 
50c50
<       int*    bzerror, 
---
>       intbzerror, 
50c50
<       int*    bzerror, 
---
>       int*    , 
50,51c50
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerrorBZFILE* b, 
51c51
<       BZFILE* b, 
---
>       * b, 
51c51
<       BZFILE* b, 
---
>       BZFILEb, 
51c51
<       BZFILE* b, 
---
>       BZFILE* , 
(98.1 %, 3920 bytes)
50,51c50
<       int*    , 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
51c51
<       BZFILE* b, 
---
>       * b, 
51c51
<       BZFILE* b, 
---
>       BZFILEb, 
51c51
<       BZFILE* b, 
---
>       BZFILE* , 
51,52c51
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* bvoid*   buf, 
52c52
<       void*   buf, 
---
>       *   buf, 
52c52
<       void*   buf, 
---
>       voidbuf, 
52c52
<       void*   buf, 
---
>       void*   , 
(98.1 %, 3919 bytes)
51,52c51
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE* void*   buf, 
52c52
<       void*   buf, 
---
>       *   buf, 
52c52
<       void*   buf, 
---
>       voidbuf, 
52c52
<       void*   buf, 
---
>       void*   , 
52,53c52
<       void*   buf, 
<       int     len 
---
>       void*   bufint     len 
53c53
<       int     len 
---
>       len 
53,54c53
<       int     len 
<    );
---
>       int     );
(98.1 %, 3916 bytes)
52,53c52
<       void*   , 
<       int     len 
---
>       void*   int     len 
53c53
<       int     len 
---
>       len 
53,54c53
<       int     len 
<    );
---
>       int     );
54c54
<    );
---
>    ;
54,56c54
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
56c56
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose) ( 
(98.1 %, 3908 bytes)
53c53
<       int     );
---
>       int     ;
53,55c53
<       int     );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     )BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
55c55
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose) ( 
55c55
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteClose) ( 
55c55
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose) ( 
(98.1 %, 3898 bytes)
55c55
< void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_API(BZ2_bzWriteClose) ( 
55c55
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void (BZ2_bzWriteClose) ( 
55c55
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_APIBZ2_bzWriteClose) ( 
55c55
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API() ( 
55c55
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose( 
55,56c55
< void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose) int*          bzerror, 
56c56
<       int*          bzerror, 
---
>       *          bzerror, 
56c56
<       int*          bzerror, 
---
>       intbzerror, 
56c56
<       int*          bzerror, 
---
>       int*          , 
(98.1 %, 3892 bytes)
55c55
< void (BZ2_bzWriteClose) ( 
---
> void BZ2_bzWriteClose) ( 
55c55
< void (BZ2_bzWriteClose) ( 
---
> void () ( 
55c55
< void (BZ2_bzWriteClose) ( 
---
> void (BZ2_bzWriteClose( 
55,56c55
< void (BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> void (BZ2_bzWriteClose) int*          bzerror, 
56c56
<       int*          bzerror, 
---
>       *          bzerror, 
56c56
<       int*          bzerror, 
---
>       intbzerror, 
56c56
<       int*          bzerror, 
---
>       int*          , 
56,57c56
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerrorBZFILE*       b, 
57c57
<       BZFILE*       b, 
---
>       *       b, 
57c57
<       BZFILE*       b, 
---
>       BZFILEb, 
57c57
<       BZFILE*       b, 
---
>       BZFILE*       , 
(98.1 %, 3885 bytes)
56,57c56
<       int*          , 
<       BZFILE*       b, 
---
>       int*          BZFILE*       b, 
57c57
<       BZFILE*       b, 
---
>       *       b, 
57c57
<       BZFILE*       b, 
---
>       BZFILEb, 
57c57
<       BZFILE*       b, 
---
>       BZFILE*       , 
57,58c57
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       bint           abandon, 
58c58
<       int           abandon, 
---
>       abandon, 
58c58
<       int           abandon, 
---
>       int           , 
(98.1 %, 3884 bytes)
57,58c57
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*       int           abandon, 
58c58
<       int           abandon, 
---
>       abandon, 
58c58
<       int           abandon, 
---
>       int           , 
58,59c58
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           abandonunsigned int* nbytes_in, 
59c59
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
59c59
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
(98.1 %, 3877 bytes)
58,59c58
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int           unsigned int* nbytes_in, 
59c59
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
59c59
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
59c59
<       unsigned int* nbytes_in, 
---
>       unsigned intnbytes_in, 
59c59
<       unsigned int* nbytes_in, 
---
>       unsigned int* , 
(98.1 %, 3874 bytes)
59c59
<       unsigned * nbytes_in, 
---
>       unsigned nbytes_in, 
59c59
<       unsigned * nbytes_in, 
---
>       unsigned * , 
59,60c59
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_inunsigned int* nbytes_out 
60c60
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
60c60
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
(98.1 %, 3865 bytes)
59,60c59
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned * unsigned int* nbytes_out 
60c60
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
60c60
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
60c60
<       unsigned int* nbytes_out 
---
>       unsigned intnbytes_out 
60,61c60
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* );
(98.1 %, 3862 bytes)
60c60
<       unsigned * nbytes_out 
---
>       unsigned nbytes_out 
60,61c60
<       unsigned * nbytes_out 
<    );
---
>       unsigned * );
61c61
<    );
---
>    ;
61,63c61
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
63c63
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API(BZ2_bzWriteClose64) ( 
(98.1 %, 3847 bytes)
60c60
<       unsigned * );
---
>       unsigned * ;
60,62c60
<       unsigned * );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned * )BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
62c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API(BZ2_bzWriteClose64) ( 
62c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteClose64) ( 
62c62
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
(98.1 %, 3837 bytes)
62c62
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_API(BZ2_bzWriteClose64) ( 
62c62
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void (BZ2_bzWriteClose64) ( 
62c62
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_APIBZ2_bzWriteClose64) ( 
62c62
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API() ( 
62c62
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API(BZ2_bzWriteClose64( 
62,63c62
< void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose64) int*          bzerror, 
63c63
<       int*          bzerror, 
---
>       *          bzerror, 
63c63
<       int*          bzerror, 
---
>       intbzerror, 
63c63
<       int*          bzerror, 
---
>       int*          , 
(98.1 %, 3831 bytes)
62c62
< void (BZ2_bzWriteClose64) ( 
---
> void BZ2_bzWriteClose64) ( 
62c62
< void (BZ2_bzWriteClose64) ( 
---
> void () ( 
62c62
< void (BZ2_bzWriteClose64) ( 
---
> void (BZ2_bzWriteClose64( 
62,63c62
< void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> void (BZ2_bzWriteClose64) int*          bzerror, 
63c63
<       int*          bzerror, 
---
>       *          bzerror, 
63c63
<       int*          bzerror, 
---
>       intbzerror, 
63c63
<       int*          bzerror, 
---
>       int*          , 
63,64c63
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerrorBZFILE*       b, 
64c64
<       BZFILE*       b, 
---
>       *       b, 
64c64
<       BZFILE*       b, 
---
>       BZFILEb, 
64c64
<       BZFILE*       b, 
---
>       BZFILE*       , 
(98.1 %, 3824 bytes)
63,64c63
<       int*          , 
<       BZFILE*       b, 
---
>       int*          BZFILE*       b, 
64c64
<       BZFILE*       b, 
---
>       *       b, 
64c64
<       BZFILE*       b, 
---
>       BZFILEb, 
64c64
<       BZFILE*       b, 
---
>       BZFILE*       , 
64,65c64
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       bint           abandon, 
65c65
<       int           abandon, 
---
>       abandon, 
65c65
<       int           abandon, 
---
>       int           , 
(98.1 %, 3823 bytes)
64,65c64
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*       int           abandon, 
65c65
<       int           abandon, 
---
>       abandon, 
65c65
<       int           abandon, 
---
>       int           , 
65,66c65
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           abandonunsigned int* nbytes_in_lo32, 
66c66
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
66c66
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
(98.1 %, 3816 bytes)
65,66c65
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int           unsigned int* nbytes_in_lo32, 
66c66
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
66c66
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
66c66
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned intnbytes_in_lo32, 
66c66
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned int* , 
(98.1 %, 3813 bytes)
66c66
<       unsigned * nbytes_in_lo32, 
---
>       unsigned nbytes_in_lo32, 
66c66
<       unsigned * nbytes_in_lo32, 
---
>       unsigned * , 
66,67c66
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_lo32unsigned int* nbytes_in_hi32, 
67c67
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
67c67
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
(98.1 %, 3799 bytes)
66,67c66
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * unsigned int* nbytes_in_hi32, 
67c67
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
67c67
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
67c67
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned intnbytes_in_hi32, 
67c67
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* , 
(98.1 %, 3796 bytes)
67c67
<       unsigned * nbytes_in_hi32, 
---
>       unsigned nbytes_in_hi32, 
67c67
<       unsigned * nbytes_in_hi32, 
---
>       unsigned * , 
67,68c67
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_in_hi32unsigned int* nbytes_out_lo32, 
68c68
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
68c68
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
(98.2 %, 3782 bytes)
67,68c67
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * unsigned int* nbytes_out_lo32, 
68c68
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
68c68
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
68c68
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
68c68
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
(98.2 %, 3779 bytes)
68c68
<       unsigned * nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
68c68
<       unsigned * nbytes_out_lo32, 
---
>       unsigned * , 
68,69c68
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_lo32unsigned int* nbytes_out_hi32
69c69
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
69c69
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
(98.2 %, 3764 bytes)
68,69c68
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * unsigned int* nbytes_out_hi32
69c69
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
69c69
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
69c69
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
69,70c69
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
(98.2 %, 3761 bytes)
69c69
<       unsigned * nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
69,70c69
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * );
70c70
<    );
---
>    ;
70,75c70
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
75c75
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffCompress) ( 
(98.2 %, 3742 bytes)
69c69
<       unsigned * );
---
>       unsigned * ;
69,74c69
<       unsigned * );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned * )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
74c74
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffCompress) ( 
74c74
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzBuffToBuffCompress) ( 
(98.2 %, 3732 bytes)
74c74
< int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffCompress) ( 
74c74
< int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> int (BZ2_bzBuffToBuffCompress) ( 
(98.2 %, 3728 bytes)
74c74
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
74c74
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffCompress) ( 
74c74
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API() ( 
74c74
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffCompress( 
74,75c74
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffCompress) char*         dest, 
75c75
<       char*         dest, 
---
>       *         dest, 
75c75
<       char*         dest, 
---
>       chardest, 
75c75
<       char*         dest, 
---
>       char*         , 
(98.2 %, 3722 bytes)
74c74
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
74c74
< (BZ2_bzBuffToBuffCompress) ( 
---
> () ( 
74c74
< (BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress( 
74,75c74
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> (BZ2_bzBuffToBuffCompress) char*         dest, 
75c75
<       char*         dest, 
---
>       *         dest, 
75c75
<       char*         dest, 
---
>       chardest, 
75c75
<       char*         dest, 
---
>       char*         , 
75,76c75
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destunsigned int* destLen,
76c76
<       unsigned int* destLen,
---
>       int* destLen,
76c76
<       unsigned int* destLen,
---
>       unsigned * destLen,
(98.2 %, 3718 bytes)
75,76c75
<       char*         , 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
76c76
<       unsigned int* destLen,
---
>       int* destLen,
76c76
<       unsigned int* destLen,
---
>       unsigned * destLen,
76c76
<       unsigned int* destLen,
---
>       unsigned intdestLen,
76c76
<       unsigned int* destLen,
---
>       unsigned int* ,
(98.2 %, 3715 bytes)
76c76
<       unsigned * destLen,
---
>       unsigned destLen,
76c76
<       unsigned * destLen,
---
>       unsigned * ,
76,77c76
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLenchar*         source, 
77c77
<       char*         source, 
---
>       *         source, 
77c77
<       char*         source, 
---
>       charsource, 
77c77
<       char*         source, 
---
>       char*         , 
(98.2 %, 3708 bytes)
76,77c76
<       unsigned * ,
<       char*         source, 
---
>       unsigned * char*         source, 
77c77
<       char*         source, 
---
>       *         source, 
77c77
<       char*         source, 
---
>       charsource, 
77c77
<       char*         source, 
---
>       char*         , 
77,78c77
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceunsigned int  sourceLen,
78c78
<       unsigned int  sourceLen,
---
>       int  sourceLen,
78c78
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
(98.2 %, 3702 bytes)
77,78c77
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
78c78
<       unsigned int  sourceLen,
---
>       int  sourceLen,
78c78
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
78c78
<       unsigned int  sourceLen,
---
>       unsigned int  ,
(98.2 %, 3697 bytes)
78c78
<       unsigned sourceLen,
---
>       unsigned ,
78,79c78
<       unsigned sourceLen,
<       int           blockSize100k, 
---
>       unsigned sourceLenint           blockSize100k, 
79c79
<       int           blockSize100k, 
---
>       blockSize100k, 
79c79
<       int           blockSize100k, 
---
>       int           , 
(98.2 %, 3688 bytes)
78,79c78
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned int           blockSize100k, 
79c79
<       int           blockSize100k, 
---
>       blockSize100k, 
79c79
<       int           blockSize100k, 
---
>       int           , 
79,80c79
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           blockSize100kint           verbosity, 
80c80
<       int           verbosity, 
---
>       verbosity, 
80c80
<       int           verbosity, 
---
>       int           , 
(98.2 %, 3675 bytes)
79,80c79
<       int           , 
<       int           verbosity, 
---
>       int           int           verbosity, 
80c80
<       int           verbosity, 
---
>       verbosity, 
80c80
<       int           verbosity, 
---
>       int           , 
80,81c80
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosityint           workFactor 
81c81
<       int           workFactor 
---
>       workFactor 
81,82c81
<       int           workFactor 
<    );
---
>       int           );
(98.2 %, 3666 bytes)
80,81c80
<       int           , 
<       int           workFactor 
---
>       int           int           workFactor 
81c81
<       int           workFactor 
---
>       workFactor 
81,82c81
<       int           workFactor 
<    );
---
>       int           );
82c82
<    );
---
>    ;
82,84c82
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
84c84
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(98.2 %, 3651 bytes)
81c81
<       int           );
---
>       int           ;
81,83c81
<       int           );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
83c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
83c83
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(98.2 %, 3641 bytes)
83c83
< int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) ( 
83c83
< int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> int (BZ2_bzBuffToBuffDecompress) ( 
(98.2 %, 3637 bytes)
83c83
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
83c83
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) ( 
83c83
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API() ( 
83c83
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffDecompress( 
83,84c83
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) char*         dest, 
84c84
<       char*         dest, 
---
>       *         dest, 
84c84
<       char*         dest, 
---
>       chardest, 
84c84
<       char*         dest, 
---
>       char*         , 
(98.2 %, 3631 bytes)
83c83
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
83c83
< (BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
83c83
< (BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress( 
83,84c83
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> (BZ2_bzBuffToBuffDecompress) char*         dest, 
84c84
<       char*         dest, 
---
>       *         dest, 
84c84
<       char*         dest, 
---
>       chardest, 
84c84
<       char*         dest, 
---
>       char*         , 
84,85c84
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destunsigned int* destLen,
85c85
<       unsigned int* destLen,
---
>       int* destLen,
85c85
<       unsigned int* destLen,
---
>       unsigned * destLen,
(98.2 %, 3627 bytes)
84,85c84
<       char*         , 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
85c85
<       unsigned int* destLen,
---
>       int* destLen,
85c85
<       unsigned int* destLen,
---
>       unsigned * destLen,
85c85
<       unsigned int* destLen,
---
>       unsigned intdestLen,
85c85
<       unsigned int* destLen,
---
>       unsigned int* ,
(98.2 %, 3624 bytes)
85c85
<       unsigned * destLen,
---
>       unsigned destLen,
85c85
<       unsigned * destLen,
---
>       unsigned * ,
85,86c85
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLenchar*         source, 
86c86
<       char*         source, 
---
>       *         source, 
86c86
<       char*         source, 
---
>       charsource, 
86c86
<       char*         source, 
---
>       char*         , 
(98.2 %, 3617 bytes)
85,86c85
<       unsigned * ,
<       char*         source, 
---
>       unsigned * char*         source, 
86c86
<       char*         source, 
---
>       *         source, 
86c86
<       char*         source, 
---
>       charsource, 
86c86
<       char*         source, 
---
>       char*         , 
86,87c86
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceunsigned int  sourceLen,
87c87
<       unsigned int  sourceLen,
---
>       int  sourceLen,
87c87
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
(98.2 %, 3611 bytes)
86,87c86
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
87c87
<       unsigned int  sourceLen,
---
>       int  sourceLen,
87c87
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
87c87
<       unsigned int  sourceLen,
---
>       unsigned int  ,
87,88c87
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int  sourceLenint           small, 
(98.2 %, 3606 bytes)
87c87
<       unsigned sourceLen,
---
>       unsigned ,
87,88c87
<       unsigned sourceLen,
<       int           small, 
---
>       unsigned sourceLenint           small, 
88c88
<       int           small, 
---
>       small, 
88c88
<       int           small, 
---
>       int           , 
(98.2 %, 3597 bytes)
87,88c87
<       unsigned ,
<       int           small, 
---
>       unsigned int           small, 
88c88
<       int           small, 
---
>       small, 
88c88
<       int           small, 
---
>       int           , 
88,89c88
<       int           small, 
<       int           );
---
>       int           smallint           );
89c89
<       int           );
---
>       );
89c89
<       int           );
---
>       int           ;
89,91c89
<       int           );
< 
< typedef UChar;
---
>       int           )typedef UChar;
91c91
< typedef UChar;
---
> UChar;
(98.2 %, 3592 bytes)
88,89c88
<       int           , 
<       int           );
---
>       int           int           );
89c89
<       int           );
---
>       );
89c89
<       int           );
---
>       int           ;
89,91c89
<       int           );
< 
< typedef UChar;
---
>       int           )typedef UChar;
91c91
< typedef UChar;
---
> UChar;
91c91
< typedef UChar;
---
> typedef ;
(98.3 %, 3584 bytes)
91c91
< UChar;
---
> ;
91,92c91
< UChar;
< UInt32;
---
> UCharUInt32;
(98.3 %, 3579 bytes)
91d90
< ;
92c92
< UInt32;
---
> ;
(98.3 %, 3577 bytes)
91c91
< UInt32;
---
> ;
91,93c91
< UInt32;
< 
< struct {
---
> UInt32struct {
93c93
< struct {
---
> {
93,95c93
< struct {
<       
<       }
---
> struct }
95,96c95
<       }
<    ;
---
>       ;
96,101c96
<    ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    void BZ_API(BZ2_bzWrite)
101c101
< void BZ_API(BZ2_bzWrite)
---
> BZ_API(BZ2_bzWrite)
101c101
< void BZ_API(BZ2_bzWrite)
---
> void (BZ2_bzWrite)
(98.3 %, 3571 bytes)
91,92d90
< ;
< 
93c93
< struct {
---
> {
93,95c93
< struct {
<       
<       }
---
> struct }
95,96c95
<       }
<    ;
---
>       ;
96,101c96
<    ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    void BZ_API(BZ2_bzWrite)
101c101
< void BZ_API(BZ2_bzWrite)
---
> BZ_API(BZ2_bzWrite)
101c101
< void BZ_API(BZ2_bzWrite)
---
> void (BZ2_bzWrite)
(98.3 %, 3568 bytes)
91c91
< struct {
---
> {
91,93c91
< struct {
<       
<       }
---
> struct }
93,94c93
<       }
<    ;
---
>       ;
94,99c94
<    ;
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    void BZ_API(BZ2_bzWrite)
99c99
< void BZ_API(BZ2_bzWrite)
---
> BZ_API(BZ2_bzWrite)
99c99
< void BZ_API(BZ2_bzWrite)
---
> void (BZ2_bzWrite)
99c99
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite)
99c99
< void BZ_API(BZ2_bzWrite)
---
> void BZ_API()
99,100c99
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(BZ2_bzWrite( int*    bzerror, 
100c100
<              ( int*    bzerror, 
---
>              int*    bzerror, 
100c100
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
100c100
<              ( int*    bzerror, 
---
>              ( intbzerror, 
(98.3 %, 3562 bytes)
99c99
< void (BZ2_bzWrite)
---
> void BZ2_bzWrite)
99c99
< void (BZ2_bzWrite)
---
> void ()
99,100c99
< void (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void (BZ2_bzWrite( int*    bzerror, 
100c100
<              ( int*    bzerror, 
---
>              int*    bzerror, 
100c100
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
100c100
<              ( int*    bzerror, 
---
>              ( intbzerror, 
100c100
<              ( int*    bzerror, 
---
>              ( int*    , 
100,101c100
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerrorBZFILE* b, 
101c101
<                BZFILE* b, 
---
>                * b, 
101c101
<                BZFILE* b, 
---
>                BZFILEb, 
101c101
<                BZFILE* b, 
---
>                BZFILE* , 
(98.3 %, 3555 bytes)
100,101c100
<              ( int*    , 
<                BZFILE* b, 
---
>              ( int*    BZFILE* b, 
101c101
<                BZFILE* b, 
---
>                * b, 
101c101
<                BZFILE* b, 
---
>                BZFILEb, 
101c101
<                BZFILE* b, 
---
>                BZFILE* , 
101,102c101
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* bvoid*   buf, 
102c102
<                void*   buf, 
---
>                *   buf, 
102c102
<                void*   buf, 
---
>                voidbuf, 
102c102
<                void*   buf, 
---
>                void*   , 
(98.3 %, 3554 bytes)
101,102c101
<                BZFILE* , 
<                void*   buf, 
---
>                BZFILE* void*   buf, 
102c102
<                void*   buf, 
---
>                *   buf, 
102c102
<                void*   buf, 
---
>                voidbuf, 
102c102
<                void*   buf, 
---
>                void*   , 
102,103c102
<                void*   buf, 
<                int     len )
---
>                void*   bufint     len )
103c103
<                int     len )
---
>                len )
103c103
<                int     len )
---
>                int     )
(98.3 %, 3551 bytes)
102,103c102
<                void*   , 
<                int     len )
---
>                void*   int     len )
103c103
<                int     len )
---
>                len )
103c103
<                int     len )
---
>                int     )
103,104c103
<                int     len )
< ;
---
>                int     len ;
104,107d103
< ;
< 
< 
< 
108c108
< void BZ_API(BZ2_bzWriteClose)
---
> BZ_API(BZ2_bzWriteClose)
108c108
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
(98.3 %, 3547 bytes)
103,104c103
<                int     )
< ;
---
>                int     ;
104,107d103
< ;
< 
< 
< 
108c108
< void BZ_API(BZ2_bzWriteClose)
---
> BZ_API(BZ2_bzWriteClose)
108c108
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
108c108
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose)
108c108
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_API()
108,109c108
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose( int*          bzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   int*          bzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   ( intbzerror, 
(98.3 %, 3541 bytes)
108c108
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
108c108
< void (BZ2_bzWriteClose)
---
> void ()
108,109c108
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void (BZ2_bzWriteClose( int*          bzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   int*          bzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   ( intbzerror, 
109c109
<                   ( int*          bzerror, 
---
>                   ( int*          , 
109,110c109
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerrorBZFILE*       b, 
110c110
<                     BZFILE*       b, 
---
>                     *       b, 
110c110
<                     BZFILE*       b, 
---
>                     BZFILEb, 
110c110
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
(98.3 %, 3534 bytes)
109,110c109
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*          BZFILE*       b, 
110c110
<                     BZFILE*       b, 
---
>                     *       b, 
110c110
<                     BZFILE*       b, 
---
>                     BZFILEb, 
110c110
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
110,111c110
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       bint           abandon,
111c111
<                     int           abandon,
---
>                     abandon,
111c111
<                     int           abandon,
---
>                     int           ,
(98.3 %, 3533 bytes)
110,111c110
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*       int           abandon,
111c111
<                     int           abandon,
---
>                     abandon,
111c111
<                     int           abandon,
---
>                     int           ,
111,112c111
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandonunsigned int* nbytes_in,
112c112
<                     unsigned int* nbytes_in,
---
>                     int* nbytes_in,
112c112
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
(98.3 %, 3526 bytes)
111,112c111
<                     int           ,
<                     unsigned int* nbytes_in,
---
>                     int           unsigned int* nbytes_in,
112c112
<                     unsigned int* nbytes_in,
---
>                     int* nbytes_in,
112c112
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
112c112
<                     unsigned int* nbytes_in,
---
>                     unsigned intnbytes_in,
112c112
<                     unsigned int* nbytes_in,
---
>                     unsigned int* ,
(98.3 %, 3523 bytes)
112c112
<                     unsigned * nbytes_in,
---
>                     unsigned nbytes_in,
112c112
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
112,113c112
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_inunsigned int* nbytes_out )
113c113
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
113c113
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
(98.3 %, 3514 bytes)
112,113c112
<                     unsigned * ,
<                     unsigned int* nbytes_out )
---
>                     unsigned * unsigned int* nbytes_out )
113c113
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
113c113
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
113c113
<                     unsigned int* nbytes_out )
---
>                     unsigned intnbytes_out )
113c113
<                     unsigned int* nbytes_out )
---
>                     unsigned int* )
(98.3 %, 3511 bytes)
113c113
<                     unsigned * nbytes_out )
---
>                     unsigned nbytes_out )
113c113
<                     unsigned * nbytes_out )
---
>                     unsigned * )
113,114c113
<                     unsigned * nbytes_out )
< ;
---
>                     unsigned * nbytes_out ;
114,116d113
< ;
< 
< 
117c117
< void BZ_API(BZ2_bzWriteClose64)
---
> BZ_API(BZ2_bzWriteClose64)
117c117
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
(98.3 %, 3500 bytes)
113,114c113
<                     unsigned * )
< ;
---
>                     unsigned * ;
114,116d113
< ;
< 
< 
117c117
< void BZ_API(BZ2_bzWriteClose64)
---
> BZ_API(BZ2_bzWriteClose64)
117c117
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
117c117
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64)
117c117
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_API()
117,118c117
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose64( int*          bzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   int*          bzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   ( intbzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   ( int*          , 
(98.3 %, 3494 bytes)
117c117
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
117c117
< void (BZ2_bzWriteClose64)
---
> void ()
117,118c117
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void (BZ2_bzWriteClose64( int*          bzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   int*          bzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   ( intbzerror, 
118c118
<                   ( int*          bzerror, 
---
>                   ( int*          , 
118,119c118
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerrorBZFILE*       b, 
119c119
<                     BZFILE*       b, 
---
>                     *       b, 
119c119
<                     BZFILE*       b, 
---
>                     BZFILEb, 
119c119
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
(98.3 %, 3487 bytes)
118,119c118
<                   ( int*          , 
<                     BZFILE*       b, 
---
>                   ( int*          BZFILE*       b, 
119c119
<                     BZFILE*       b, 
---
>                     *       b, 
119c119
<                     BZFILE*       b, 
---
>                     BZFILEb, 
119c119
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
119,120c119
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       bint           abandon,
120c120
<                     int           abandon,
---
>                     abandon,
120c120
<                     int           abandon,
---
>                     int           ,
(98.3 %, 3486 bytes)
119,120c119
<                     BZFILE*       , 
<                     int           abandon,
---
>                     BZFILE*       int           abandon,
120c120
<                     int           abandon,
---
>                     abandon,
120c120
<                     int           abandon,
---
>                     int           ,
120,121c120
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandonunsigned int* nbytes_in_lo32,
121c121
<                     unsigned int* nbytes_in_lo32,
---
>                     int* nbytes_in_lo32,
121c121
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
(98.3 %, 3479 bytes)
120,121c120
<                     int           ,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           unsigned int* nbytes_in_lo32,
121c121
<                     unsigned int* nbytes_in_lo32,
---
>                     int* nbytes_in_lo32,
121c121
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
121c121
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned intnbytes_in_lo32,
121c121
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned int* ,
(98.3 %, 3476 bytes)
121c121
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned nbytes_in_lo32,
121c121
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * ,
121,122c121
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32unsigned int* nbytes_in_hi32,
122c122
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
122c122
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
(98.3 %, 3462 bytes)
121,122c121
<                     unsigned * ,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * unsigned int* nbytes_in_hi32,
122c122
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
122c122
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
122c122
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned intnbytes_in_hi32,
122c122
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* ,
(98.3 %, 3459 bytes)
122c122
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned nbytes_in_hi32,
122c122
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
122,123c122
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32unsigned int* nbytes_out_lo32,
123c123
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
123c123
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
(98.3 %, 3445 bytes)
122,123c122
<                     unsigned * ,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * unsigned int* nbytes_out_lo32,
123c123
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
123c123
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
123c123
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
123c123
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
(98.3 %, 3442 bytes)
123c123
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
123c123
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
123,124c123
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32unsigned int* nbytes_out_hi32 )
124c124
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
124c124
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
(98.3 %, 3427 bytes)
123,124c123
<                     unsigned * ,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * unsigned int* nbytes_out_hi32 )
124c124
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
124c124
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
124c124
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
124c124
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
(98.3 %, 3424 bytes)
124c124
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
124c124
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * )
124,125c124
<                     unsigned * nbytes_out_hi32 )
< ;
---
>                     unsigned * nbytes_out_hi32 ;
125,128d124
< ;
< 
< 
< 
129c129
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
(98.3 %, 3408 bytes)
124,125c124
<                     unsigned * )
< ;
---
>                     unsigned * ;
125,128d124
< ;
< 
< 
< 
129c129
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
129c129
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILEBZ_API(BZ2_bzReadOpen) 
129c129
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* (BZ2_bzReadOpen) 
(98.3 %, 3402 bytes)
129c129
< * BZ_API(BZ2_bzReadOpen) 
---
> BZ_API(BZ2_bzReadOpen) 
129c129
< * BZ_API(BZ2_bzReadOpen) 
---
> * (BZ2_bzReadOpen) 
129c129
< * BZ_API(BZ2_bzReadOpen) 
---
> * BZ_APIBZ2_bzReadOpen) 
129c129
< * BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API() 
129,130c129
< * BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * BZ_API(BZ2_bzReadOpen( int*  bzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    int*  bzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    ( intbzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    ( int*  , 
(98.3 %, 3396 bytes)
129c129
< * (BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen) 
129c129
< * (BZ2_bzReadOpen) 
---
> * () 
129,130c129
< * (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * (BZ2_bzReadOpen( int*  bzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    int*  bzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    ( intbzerror, 
130c130
<                    ( int*  bzerror, 
---
>                    ( int*  , 
130,131c130
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerrorFILE* f, 
131c131
<                      FILE* f, 
---
>                      * f, 
131c131
<                      FILE* f, 
---
>                      FILEf, 
131c131
<                      FILE* f, 
---
>                      FILE* , 
(98.3 %, 3389 bytes)
130,131c130
<                    ( int*  , 
<                      FILE* f, 
---
>                    ( int*  FILE* f, 
131c131
<                      FILE* f, 
---
>                      * f, 
131c131
<                      FILE* f, 
---
>                      FILEf, 
131c131
<                      FILE* f, 
---
>                      FILE* , 
131,132c131
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* fint   verbosity,
132c132
<                      int   verbosity,
---
>                      verbosity,
132c132
<                      int   verbosity,
---
>                      int   ,
(98.3 %, 3388 bytes)
131,132c131
<                      FILE* , 
<                      int   verbosity,
---
>                      FILE* int   verbosity,
132c132
<                      int   verbosity,
---
>                      verbosity,
132c132
<                      int   verbosity,
---
>                      int   ,
132,133c132
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosityint   small,
133c133
<                      int   small,
---
>                      small,
133c133
<                      int   small,
---
>                      int   ,
(98.4 %, 3379 bytes)
132,133c132
<                      int   ,
<                      int   small,
---
>                      int   int   small,
133c133
<                      int   small,
---
>                      small,
133c133
<                      int   small,
---
>                      int   ,
133,134c133
<                      int   small,
<                      void* unused,
---
>                      int   smallvoid* unused,
134c134
<                      void* unused,
---
>                      * unused,
134c134
<                      void* unused,
---
>                      voidunused,
134c134
<                      void* unused,
---
>                      void* ,
(98.4 %, 3374 bytes)
133,134c133
<                      int   ,
<                      void* unused,
---
>                      int   void* unused,
134c134
<                      void* unused,
---
>                      * unused,
134c134
<                      void* unused,
---
>                      voidunused,
134c134
<                      void* unused,
---
>                      void* ,
134,135c134
<                      void* unused,
<                      int   nUnused )
---
>                      void* unusedint   nUnused )
135c135
<                      int   nUnused )
---
>                      nUnused )
135c135
<                      int   nUnused )
---
>                      int   )
(98.4 %, 3368 bytes)
134,135c134
<                      void* ,
<                      int   nUnused )
---
>                      void* int   nUnused )
135c135
<                      int   nUnused )
---
>                      nUnused )
135c135
<                      int   nUnused )
---
>                      int   )
135,136c135
<                      int   nUnused )
< ;
---
>                      int   nUnused ;
136,139d135
< ;
< 
< 
< 
140c140
< void ;
---
> ;
(98.4 %, 3360 bytes)
135,136c135
<                      int   )
< ;
---
>                      int   ;
136,139d135
< ;
< 
< 
< 
140c140
< void ;
---
> ;
140,144c140
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void int BZ_API(BZ2_bzRead) 
144c144
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
(98.4 %, 3355 bytes)
140,143d139
< ;
< 
< 
< 
144c144
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
144c144
< int BZ_API(BZ2_bzRead) 
---
> int (BZ2_bzRead) 
(98.4 %, 3350 bytes)
140c140
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
140c140
< int BZ_API(BZ2_bzRead) 
---
> int (BZ2_bzRead) 
140c140
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead) 
(98.4 %, 3346 bytes)
140c140
< BZ_API(BZ2_bzRead) 
---
> (BZ2_bzRead) 
140c140
< BZ_API(BZ2_bzRead) 
---
> BZ_APIBZ2_bzRead) 
140c140
< BZ_API(BZ2_bzRead) 
---
> BZ_API() 
140,141c140
< BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> BZ_API(BZ2_bzRead( int*    bzerror, 
141c141
<            ( int*    bzerror, 
---
>            int*    bzerror, 
141c141
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
141c141
<            ( int*    bzerror, 
---
>            ( intbzerror, 
141c141
<            ( int*    bzerror, 
---
>            ( int*    , 
(98.4 %, 3340 bytes)
140c140
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
140c140
< (BZ2_bzRead) 
---
> () 
140,141c140
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
> (BZ2_bzRead( int*    bzerror, 
141c141
<            ( int*    bzerror, 
---
>            int*    bzerror, 
141c141
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
141c141
<            ( int*    bzerror, 
---
>            ( intbzerror, 
141c141
<            ( int*    bzerror, 
---
>            ( int*    , 
141,142c141
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerrorBZFILE* b, 
142c142
<              BZFILE* b, 
---
>              * b, 
142c142
<              BZFILE* b, 
---
>              BZFILEb, 
142c142
<              BZFILE* b, 
---
>              BZFILE* , 
142,143c142
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* bvoid*   buf, 
143c143
<              void*   buf, 
---
>              *   buf, 
143c143
<              void*   buf, 
---
>              voidbuf, 
143c143
<              void*   buf, 
---
>              void*   , 
143,144c143
<              void*   buf, 
<              int     len )
---
>              void*   bufint     len )
144c144
<              int     len )
---
>              len )
144c144
<              int     len )
---
>              int     )
144,145c144
<              int     len )
< {
---
>              int     len {
145,147c145
< {
<    
<    ; 
---
> ; 
147,148c147
<    ; 
< }
---
>    }
148,151d147
< }
< 
< 
< 
152c152
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
152c152
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
(98.4 %, 3337 bytes)
147,151c147
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
151c151
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
151c151
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
151c151
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused) 
151c151
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_API() 
151,152c151
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused( int*    bzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      int*    bzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      ( intbzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      ( int*    , 
(98.4 %, 3331 bytes)
151c151
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
151c151
< void (BZ2_bzReadGetUnused) 
---
> void () 
151,152c151
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void (BZ2_bzReadGetUnused( int*    bzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      int*    bzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      ( intbzerror, 
152c152
<                      ( int*    bzerror, 
---
>                      ( int*    , 
152,153c152
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerrorBZFILE* b, 
153c153
<                        BZFILE* b, 
---
>                        * b, 
153c153
<                        BZFILE* b, 
---
>                        BZFILEb, 
153c153
<                        BZFILE* b, 
---
>                        BZFILE* , 
(98.4 %, 3324 bytes)
152,153c152
<                      ( int*    , 
<                        BZFILE* b, 
---
>                      ( int*    BZFILE* b, 
153c153
<                        BZFILE* b, 
---
>                        * b, 
153c153
<                        BZFILE* b, 
---
>                        BZFILEb, 
153c153
<                        BZFILE* b, 
---
>                        BZFILE* , 
153,154c153
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* bvoid**  unused, 
154c154
<                        void**  unused, 
---
>                        **  unused, 
154c154
<                        void**  unused, 
---
>                        void*  unused, 
154c154
<                        void**  unused, 
---
>                        void*unused, 
154c154
<                        void**  unused, 
---
>                        void**  , 
(98.4 %, 3323 bytes)
153,154c153
<                        BZFILE* , 
<                        void**  unused, 
---
>                        BZFILE* void**  unused, 
154c154
<                        void**  unused, 
---
>                        **  unused, 
154c154
<                        void**  unused, 
---
>                        void*  unused, 
154c154
<                        void**  unused, 
---
>                        void*unused, 
154c154
<                        void**  unused, 
---
>                        void**  , 
154,155c154
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unusedint*    nUnused )
155c155
<                        int*    nUnused )
---
>                        *    nUnused )
155c155
<                        int*    nUnused )
---
>                        intnUnused )
155c155
<                        int*    nUnused )
---
>                        int*    )
(98.4 %, 3317 bytes)
154,155c154
<                        void**  , 
<                        int*    nUnused )
---
>                        void**  int*    nUnused )
155c155
<                        int*    nUnused )
---
>                        *    nUnused )
155c155
<                        int*    nUnused )
---
>                        intnUnused )
155c155
<                        int*    nUnused )
---
>                        int*    )
155,156c155
<                        int*    nUnused )
< ;
---
>                        int*    nUnused ;
156,163d155
< ;
< 
< 
< 
< 
< 
< 
< 
164c164
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_API(BZ2_bzBuffToBuffCompress) 
(98.4 %, 3309 bytes)
155,156c155
<                        int*    )
< ;
---
>                        int*    ;
156,163d155
< ;
< 
< 
< 
< 
< 
< 
< 
164c164
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_API(BZ2_bzBuffToBuffCompress) 
164c164
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int (BZ2_bzBuffToBuffCompress) 
(98.4 %, 3305 bytes)
164c164
< BZ_API(BZ2_bzBuffToBuffCompress) 
---
> (BZ2_bzBuffToBuffCompress) 
164c164
< BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_APIBZ2_bzBuffToBuffCompress) 
164c164
< BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_API() 
164,165c164
< BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffCompress( char*         dest, 
165c165
<                          ( char*         dest, 
---
>                          char*         dest, 
165c165
<                          ( char*         dest, 
---
>                          ( *         dest, 
165c165
<                          ( char*         dest, 
---
>                          ( chardest, 
165c165
<                          ( char*         dest, 
---
>                          ( char*         , 
(98.4 %, 3299 bytes)
164c164
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
164c164
< (BZ2_bzBuffToBuffCompress) 
---
> () 
164,165c164
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> (BZ2_bzBuffToBuffCompress( char*         dest, 
165c165
<                          ( char*         dest, 
---
>                          char*         dest, 
165c165
<                          ( char*         dest, 
---
>                          ( *         dest, 
165c165
<                          ( char*         dest, 
---
>                          ( chardest, 
165c165
<                          ( char*         dest, 
---
>                          ( char*         , 
165,166c165
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         destunsigned int* destLen,
166c166
<                            unsigned int* destLen,
---
>                            int* destLen,
166c166
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
(98.4 %, 3295 bytes)
165,166c165
<                          ( char*         , 
<                            unsigned int* destLen,
---
>                          ( char*         unsigned int* destLen,
166c166
<                            unsigned int* destLen,
---
>                            int* destLen,
166c166
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
166c166
<                            unsigned int* destLen,
---
>                            unsigned intdestLen,
166c166
<                            unsigned int* destLen,
---
>                            unsigned int* ,
(98.4 %, 3292 bytes)
166c166
<                            unsigned * destLen,
---
>                            unsigned destLen,
166c166
<                            unsigned * destLen,
---
>                            unsigned * ,
166,167c166
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLenchar*         source, 
167c167
<                            char*         source, 
---
>                            *         source, 
167c167
<                            char*         source, 
---
>                            charsource, 
167c167
<                            char*         source, 
---
>                            char*         , 
(98.4 %, 3285 bytes)
166,167c166
<                            unsigned * ,
<                            char*         source, 
---
>                            unsigned * char*         source, 
167c167
<                            char*         source, 
---
>                            *         source, 
167c167
<                            char*         source, 
---
>                            charsource, 
167c167
<                            char*         source, 
---
>                            char*         , 
167,168c167
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         sourceunsigned int  sourceLen,
168c168
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
168c168
<                            unsigned int  sourceLen,
---
>                            unsigned sourceLen,
(98.4 %, 3279 bytes)
167,168c167
<                            char*         , 
<                            unsigned int  sourceLen,
---
>                            char*         unsigned int  sourceLen,
168c168
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
168c168
<                            unsigned int  sourceLen,
---
>                            unsigned sourceLen,
168c168
<                            unsigned int  sourceLen,
---
>                            unsigned int  ,
168,169c168
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int  sourceLenint           blockSize100k, 
(98.4 %, 3274 bytes)
168c168
<                            unsigned sourceLen,
---
>                            unsigned ,
168,169c168
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLenint           blockSize100k, 
169c169
<                            int           blockSize100k, 
---
>                            blockSize100k, 
169c169
<                            int           blockSize100k, 
---
>                            int           , 
(98.4 %, 3265 bytes)
168,169c168
<                            unsigned ,
<                            int           blockSize100k, 
---
>                            unsigned int           blockSize100k, 
169c169
<                            int           blockSize100k, 
---
>                            blockSize100k, 
169c169
<                            int           blockSize100k, 
---
>                            int           , 
169,170c169
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100kint           verbosity, 
170c170
<                            int           verbosity, 
---
>                            verbosity, 
170c170
<                            int           verbosity, 
---
>                            int           , 
(98.4 %, 3252 bytes)
169,170c169
<                            int           , 
<                            int           verbosity, 
---
>                            int           int           verbosity, 
170c170
<                            int           verbosity, 
---
>                            verbosity, 
170c170
<                            int           verbosity, 
---
>                            int           , 
170,171c170
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosityint           workFactor )
171c171
<                            int           workFactor )
---
>                            workFactor )
171c171
<                            int           workFactor )
---
>                            int           )
(98.4 %, 3243 bytes)
170,171c170
<                            int           , 
<                            int           workFactor )
---
>                            int           int           workFactor )
171c171
<                            int           workFactor )
---
>                            workFactor )
171c171
<                            int           workFactor )
---
>                            int           )
171,172c171
<                            int           workFactor )
< ;
---
>                            int           workFactor ;
172,175d171
< ;
< 
< 
< 
176c176
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) 
(98.4 %, 3232 bytes)
171,172c171
<                            int           )
< ;
---
>                            int           ;
172,175d171
< ;
< 
< 
< 
176c176
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) 
176c176
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int (BZ2_bzBuffToBuffDecompress) 
(98.4 %, 3228 bytes)
176c176
< BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> (BZ2_bzBuffToBuffDecompress) 
176c176
< BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) 
176c176
< BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API() 
176,177c176
< BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress( char*         dest, 
177c177
<                            ( char*         dest, 
---
>                            char*         dest, 
177c177
<                            ( char*         dest, 
---
>                            ( *         dest, 
177c177
<                            ( char*         dest, 
---
>                            ( chardest, 
177c177
<                            ( char*         dest, 
---
>                            ( char*         , 
(98.4 %, 3222 bytes)
176c176
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
176c176
< (BZ2_bzBuffToBuffDecompress) 
---
> () 
176,177c176
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (BZ2_bzBuffToBuffDecompress( char*         dest, 
177c177
<                            ( char*         dest, 
---
>                            char*         dest, 
177c177
<                            ( char*         dest, 
---
>                            ( *         dest, 
177c177
<                            ( char*         dest, 
---
>                            ( chardest, 
177c177
<                            ( char*         dest, 
---
>                            ( char*         , 
177,178c177
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destunsigned int* destLen,
178c178
<                              unsigned int* destLen,
---
>                              int* destLen,
178c178
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
(98.4 %, 3218 bytes)
177,178c177
<                            ( char*         , 
<                              unsigned int* destLen,
---
>                            ( char*         unsigned int* destLen,
178c178
<                              unsigned int* destLen,
---
>                              int* destLen,
178c178
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
178c178
<                              unsigned int* destLen,
---
>                              unsigned intdestLen,
178c178
<                              unsigned int* destLen,
---
>                              unsigned int* ,
(98.4 %, 3215 bytes)
178c178
<                              unsigned * destLen,
---
>                              unsigned destLen,
178c178
<                              unsigned * destLen,
---
>                              unsigned * ,
178,179c178
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLenchar*         source, 
179c179
<                              char*         source, 
---
>                              *         source, 
179c179
<                              char*         source, 
---
>                              charsource, 
179c179
<                              char*         source, 
---
>                              char*         , 
(98.4 %, 3208 bytes)
178,179c178
<                              unsigned * ,
<                              char*         source, 
---
>                              unsigned * char*         source, 
179c179
<                              char*         source, 
---
>                              *         source, 
179c179
<                              char*         source, 
---
>                              charsource, 
179c179
<                              char*         source, 
---
>                              char*         , 
179,180c179
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         sourceunsigned int  sourceLen,
180c180
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
180c180
<                              unsigned int  sourceLen,
---
>                              unsigned sourceLen,
(98.4 %, 3202 bytes)
179,180c179
<                              char*         , 
<                              unsigned int  sourceLen,
---
>                              char*         unsigned int  sourceLen,
180c180
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
180c180
<                              unsigned int  sourceLen,
---
>                              unsigned sourceLen,
180c180
<                              unsigned int  sourceLen,
---
>                              unsigned int  ,
(98.4 %, 3197 bytes)
180c180
<                              unsigned sourceLen,
---
>                              unsigned ,
180,181c180
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLenint           small,
181c181
<                              int           small,
---
>                              small,
181c181
<                              int           small,
---
>                              int           ,
(98.4 %, 3188 bytes)
180,181c180
<                              unsigned ,
<                              int           small,
---
>                              unsigned int           small,
181c181
<                              int           small,
---
>                              small,
181c181
<                              int           small,
---
>                              int           ,
181,182c181
<                              int           small,
<                              int           mode )
---
>                              int           smallint           mode )
182c182
<                              int           mode )
---
>                              mode )
182c182
<                              int           mode )
---
>                              int           )
(98.4 %, 3183 bytes)
181,182c181
<                              int           ,
<                              int           mode )
---
>                              int           int           mode )
182c182
<                              int           mode )
---
>                              mode )
182c182
<                              int           mode )
---
>                              int           )
182,183c182
<                              int           mode )
< ;
---
>                              int           mode ;
183,186d182
< ;
< 
< 
< 
187c187
< int BZ_API(BZ2_bzread) (len )
---
> BZ_API(BZ2_bzread) (len )
(98.4 %, 3178 bytes)
182,183c182
<                              int           )
< ;
---
>                              int           ;
183,186d182
< ;
< 
< 
< 
187c187
< int BZ_API(BZ2_bzread) (len )
---
> BZ_API(BZ2_bzread) (len )
187c187
< int BZ_API(BZ2_bzread) (len )
---
> int (BZ2_bzread) (len )
(98.5 %, 3174 bytes)
187c187
< BZ_API(BZ2_bzread) (len )
---
> (BZ2_bzread) (len )
187c187
< BZ_API(BZ2_bzread) (len )
---
> BZ_APIBZ2_bzread) (len )
187c187
< BZ_API(BZ2_bzread) (len )
---
> BZ_API() (len )
187c187
< BZ_API(BZ2_bzread) (len )
---
> BZ_API(BZ2_bzread(len )
187c187
< BZ_API(BZ2_bzread) (len )
---
> BZ_API(BZ2_bzread) len )
187c187
< BZ_API(BZ2_bzread) (len )
---
> BZ_API(BZ2_bzread) ()
(98.5 %, 3168 bytes)
187c187
< (BZ2_bzread) (len )
---
> BZ2_bzread) (len )
187c187
< (BZ2_bzread) (len )
---
> () (len )
187c187
< (BZ2_bzread) (len )
---
> (BZ2_bzread(len )
187c187
< (BZ2_bzread) (len )
---
> (BZ2_bzread) len )
187c187
< (BZ2_bzread) (len )
---
> (BZ2_bzread) ()
187,188c187
< (BZ2_bzread) (len )
< {
---
> (BZ2_bzread) (len {
188,189c188
< {
<    int bzerr, nread;
---
> int bzerr, nread;
189c189
<    int bzerr, nread;
---
>    bzerr, nread;
189c189
<    int bzerr, nread;
---
>    int , nread;
189c189
<    int bzerr, nread;
---
>    int bzerrnread;
189c189
<    int bzerr, nread;
---
>    int bzerr, ;
(98.5 %, 3164 bytes)
187,188c187
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread) ({
188,189c188
< {
<    int bzerr, nread;
---
> int bzerr, nread;
189c189
<    int bzerr, nread;
---
>    bzerr, nread;
189c189
<    int bzerr, nread;
---
>    int , nread;
189c189
<    int bzerr, nread;
---
>    int bzerrnread;
189c189
<    int bzerr, nread;
---
>    int bzerr, ;
189,190c189
<    int bzerr, nread;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    int bzerr, nreadif (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if BZ_OK || bzerr == BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (|| bzerr == BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK bzerr == BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || == BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr BZ_STREAM_END) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == ) ; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END; else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) else ;
190c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; ;
190,191c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; else ;
< }
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; else }
191,194d190
< }
< 
< 
< 
(98.5 %, 3159 bytes)
190,191c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; ;
< }
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
191,194d190
< }
< 
< 
< 
(98.5 %, 3157 bytes)
190,193c190
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
Termination check: size was 204936; now 3157
===< pass_ternary :: b >===
===< pass_balanced :: curly3 >===
===< pass_balanced :: parens >===
13c13
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        
193a194
>  
\ No newline at end of file
23c23
< #   define BZ_API(func) func
---
> #   define BZ_API func
193a194
>  
\ No newline at end of file
26c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN *  ( 
193a194
>  
\ No newline at end of file
26,32c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
> BZ_EXTERN * (BZ2_bzReadOpen) ;
193a188
>  
\ No newline at end of file
34c34
< void (BZ2_bzReadGetUnused) ( 
---
> void  ( 
193a194
>  
\ No newline at end of file
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void (BZ2_bzReadGetUnused) ;
193a190
>  
\ No newline at end of file
40c40
< (BZ2_bzRead) ( 
---
>  ( 
193a194
>  
\ No newline at end of file
40,44c40
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
> (BZ2_bzRead) ;
193a190
>  
\ No newline at end of file
46,47c46
< (BZ2_bzWriteOpenworkFactor 
<    );
---
> ;
193a193
>  
\ No newline at end of file
(98.5 %, 3152 bytes)
26c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN *  ( 
26,32c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
> BZ_EXTERN * (BZ2_bzReadOpen) ;
34c34
< void (BZ2_bzReadGetUnused) ( 
---
> void  ( 
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void (BZ2_bzReadGetUnused) ;
40c40
< (BZ2_bzRead) ( 
---
>  ( 
40,44c40
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
> (BZ2_bzRead) ;
46,47c46
< (BZ2_bzWriteOpenworkFactor 
<    );
---
> ;
49c49
< void (BZ2_bzWrite) ( 
---
> void  ( 
49,53c49
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
> void (BZ2_bzWrite) ;
55c55
< void (BZ2_bzWriteClose) ( 
---
> void  ( 
55,60c55
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> void (BZ2_bzWriteClose) ;
62c62
< void (BZ2_bzWriteClose64) ( 
---
> void  ( 
62,69c62
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
> void (BZ2_bzWriteClose64) ;
74c74
< (BZ2_bzBuffToBuffCompress) ( 
---
>  ( 
74,81c74
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
> (BZ2_bzBuffToBuffCompress) ;
(98.5 %, 3120 bytes)
48c48
< void (BZ2_bzWrite) ( 
---
> void  ( 
48,52c48
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
> void (BZ2_bzWrite) ;
54c54
< void (BZ2_bzWriteClose) ( 
---
> void  ( 
54,59c54
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> void (BZ2_bzWriteClose) ;
61c61
< void (BZ2_bzWriteClose64) ( 
---
> void  ( 
61,68c61
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
> void (BZ2_bzWriteClose64) ;
73c73
< (BZ2_bzBuffToBuffCompress) ( 
---
>  ( 
73,80c73
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
> (BZ2_bzBuffToBuffCompress) ;
82c82
< (BZ2_bzBuffToBuffDecompress) ( 
---
>  ( 
82,88c82
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
> (BZ2_bzBuffToBuffDecompress) ;
98c98
< void (BZ2_bzWrite)
---
> void 
99,102c99
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
---
>              
107c107
< void (BZ2_bzWriteClose)
---
> void 
108,112c108
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
---
>                   
116c116
< void (BZ2_bzWriteClose64)
---
> void 
117,123c117
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
---
>                   
128c128
< * (BZ2_bzReadOpen) 
---
> *  
129,134c129
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
---
>                    
139c139
< (BZ2_bzRead) 
---
>  
140,143c140
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            
150c150
< void (BZ2_bzReadGetUnused) 
---
> void  
151,154c151
<                      ( int*    , 
<                        BZFILE* , 
<                        void**  , 
<                        int*    )
---
>                      
163c163
< (BZ2_bzBuffToBuffCompress) 
---
>  
164,170c164
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
---
>                          
175c175
< (BZ2_bzBuffToBuffDecompress) 
---
>  
176,181c176
<                            ( char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
---
>                            
186c186
< (BZ2_bzread) ()
---
>  ()
186c186
< (BZ2_bzread) ()
---
> (BZ2_bzread) 
189c189
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if  ; }
===< pass_clang :: return-void >===
26c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN void  (BZ2_bzReadOpen) ( 
clang_delta: ReturnVoid.cpp:221: bool RVASTVisitor::rewriteFuncDecl(clang::FunctionDecl*): Assertion `Offset >= 0' failed.
Aborted

***************************************************

pass_clang::return-void has encountered a bug:
crashed: "/usr/local/libexec/clang_delta" --transformation=return-void --counter=2 /tmp/creduce-703DRx/bzip2.c

Please consider tarring up /home/ukoc/mangroveL/sut-bzip2/runs/run-1454551705.0179/creduce_bug_000
and mailing it to creduce-bugs@flux.utah.edu and we will try to fix
the bug.

This bug is not fatal, C-Reduce will continue to execute.

***************************************************

===< pass_clang :: remove-unused-var >===
188c188
<    int bzerr, nread;
---
>    int bzerr;
(98.5 %, 3113 bytes)
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_special :: b >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-16 >===
9,16c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
---
> } 
9,17c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
---
> #;
11,20d10
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
11,20d10
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
11,21c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define <stdio.h>
11,21c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                stdio.h>
12,21c12
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> .h>
12,21c12
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #h>
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> >
13,23c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> ##   define BZ_API func
13,23c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #define define BZ_API func
13,23c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #define BZ_STREAM_END        BZ_API func
13,23c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #define BZ_STREAM_END        (func
13,24c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #define BZ_STREAM_END        (9#   define BZ_EXTERN typedef BZFILE;
15,24c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> define BZ_EXTERN typedef BZFILE;
15,24c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> struct BZ_EXTERN typedef BZFILE;
16,24c16
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
>       typedef BZFILE;
17,24c17
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
>    BZFILE;
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> ;
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #BZ_EXTERN * (BZ2_bzReadOpen) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include * (BZ2_bzReadOpen) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <(BZ2_bzReadOpen) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <stdioBZ2_bzReadOpen) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <stdio.) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <stdio.h( 
23,27c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> int*  ,   
23,27c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> #   *  ,   
23,27c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> #   define ,   
23,28c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> #   define BZ_API FILE* , 
24,28c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> * , 
24,28c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> #   , 
24,29c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #   define int   , 
24,29c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #   define BZ_EXTERN , 
24,30c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #   define BZ_EXTERN typedef int   ,
24,30c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #   define BZ_EXTERN typedef BZFILE,
26,31c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> void* ,    
26,31c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> BZ_EXTERN * ,    
26,31c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> BZ_EXTERN * ,    
26,32c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
> BZ_EXTERN * (int   );
26,32c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
> BZ_EXTERN * (BZ2_bzReadOpen);
26,32c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
> BZ_EXTERN * (BZ2_bzReadOpen) ;
27,34c27
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       void (BZ2_bzReadGetUnused) ( 
27,34c27
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int(BZ2_bzReadGetUnused) ( 
27,34c27
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int*  BZ2_bzReadGetUnused) ( 
28,34c28
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       ) ( 
28,34c28
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       FILE( 
28,35c28
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
>       FILE* int*    , 
29,35c29
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
>       *    , 
30,35d29
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
30,35d29
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
30,36c30
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
>       int   * , 
31,36c31
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
>       , 
31,37c31
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       voidvoid**  ,  
31,37c31
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       void* **  ,  
32,37c32
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       *  ,  
32,37c32
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       int   ,  
32,38c32
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
>       int   )int*    );
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> *    );
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void );
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void (;
34,40c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
---
> void (BZ2_bzReadGetUnused(BZ2_bzRead) ( 
34,40c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
---
> void (BZ2_bzReadGetUnused) BZ2_bzRead) ( 
35,40c35
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
---
>       ) ( 
35,40c35
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
---
>       int( 
35,41c35
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
---
>       int*    int*    , 
36,41c36
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
---
>       *    , 
36,41c36
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
---
>       BZFILE, 
36,42c36
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
---
>       BZFILE* BZFILE* , 
37,42c37
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
---
>       * , 
37,42c37
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
---
>       void, 
37,43c37
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       void*void*   , 
37,43c37
<       void**  ,  
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       void**  *   , 
38,43c38
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       , 
38,44c38
<       int*    );
< 
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       intint     );
40,45d39
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
< 
40,45d39
< (BZ2_bzRead) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
< 
(98.5 %, 3028 bytes)
38,42d37
<       int*    );
< 
< ;
< 
< void (BZ2_bzWrite) ( 
44,45d38
<       BZFILE* , 
<       void*   , 
38,46c38
<       int*    );
< 
< ;
< 
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       int*    )int     );
40,46c40
< ;
< 
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
> );
42,46c42
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
> ;
42,48c42
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
< 
< void (BZ2_bzWriteClose) ( 
---
> void void (BZ2_bzWriteClose) ( 
42,48c42
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
< 
< void (BZ2_bzWriteClose) ( 
---
> void ((BZ2_bzWriteClose) ( 
42,48c42
< void (BZ2_bzWrite) ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
< 
< void (BZ2_bzWriteClose) ( 
---
> void (BZ2_bzWriteBZ2_bzWriteClose) ( 
(98.6 %, 2940 bytes)
42,48c42
< ;
< 
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
> , 
44,49c44
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> unsigned * );
44,49c44
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> void * );
44,49c44
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> void ();
44,49c44
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> void (BZ2_bzWriteClose;
44,51c44
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
> void (BZ2_bzWriteClose) void (BZ2_bzWriteClose64) ( 
45,51c45
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       (BZ2_bzWriteClose64) ( 
45,51c45
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       intBZ2_bzWriteClose64) ( 
45,51c45
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       int*          ) ( 
46,51c46
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       ( 
46,52c46
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
---
>       BZFILEint*          , 
46,52c46
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
---
>       BZFILE*       *          , 
47,52c47
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
---
>       , 
47,53c47
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
---
>       int           BZFILE*       , 
48,53c48
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
---
>       *       , 
48,53c48
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
---
>       unsigned , 
48,54c48
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
---
>       unsigned * int           , 
49,54c49
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
---
>       , 
49,55c49
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       unsigned unsigned * , 
49,55c49
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       unsigned * * , 
49,55c49
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       unsigned * ), 
51,56c51
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
> unsigned * , 
51,56c51
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
> void * , 
51,56c51
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
> void (, 
51,57c51
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
> void (BZ2_bzWriteClose64unsigned * , 
51,57c51
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
> void (BZ2_bzWriteClose64) * , 
52,57c52
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
52,58c52
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       intunsigned * );
52,58c52
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       int*          * );
53,58c53
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       );
53,58c53
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       BZFILE;
53,63c53
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
---
>       BZFILE*       (BZ2_bzBuffToBuffCompress) ( 
54,63c54
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
---
>       BZ2_bzBuffToBuffCompress) ( 
54,63c54
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
---
>       int           ) ( 
55,63c55
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
---
>       ( 
55,64c55
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
---
>       unsigned char*         , 
55,64c55
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
---
>       unsigned * *         , 
56,64c56
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
---
>       , 
56,65c56
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned unsigned * ,
56,65c56
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * * ,
57,65c57
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
---
>       ,
57,66c57
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned char*         , 
57,66c57
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned * *         , 
58,66c58
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       , 
58,67c58
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       unsigned unsigned ,
58,64d57
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
66,67d58
<       char*         , 
<       unsigned ,
58,68c58
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       unsigned * )int           , 
63,68c63
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
> , 
63,69c63
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
---
> (int           , 
63,69c63
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
---
> (BZ2_bzBuffToBuffCompress, 
63,70c63
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
> (BZ2_bzBuffToBuffCompress) int           );
64,70c64
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
>       );
64,70c64
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
>       char;
64,72c64
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       char*         (BZ2_bzBuffToBuffDecompress) ( 
65,72c65
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
65,72c65
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned ) ( 
65,72c65
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned * ( 
67,73d66
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
(98.6 %, 2798 bytes)
64,70c64
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       ,
64,71c64
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       )int           , 
66,71c66
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
> , 
66,72c66
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
> (int           );
66,72c66
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
> (BZ2_bzBuffToBuffDecompress);
66,72c66
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
> (BZ2_bzBuffToBuffDecompress) ;
67,74c67
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
---
>       struct {
67,74c67
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
---
>       char{
67,76c67
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
---
>       char*         }
68,77c68
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
---
>       ;
68,82c68
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
---
>       unsigned void (BZ2_bzWrite)
68,82c68
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
---
>       unsigned * (BZ2_bzWrite)
69,82c69
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
---
>       BZ2_bzWrite)
69,82c69
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
---
>       char)
69,83c69
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
---
>       char*         ( int*    , 
70,83c70
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
---
>       int*    , 
70,83c70
<       unsigned ,
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
---
>       unsigned *    , 
71,83c71
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
---
>       , 
71,84c71
<       int           , 
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
---
>       int           BZFILE* , 
72,84c72
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
---
>       * , 
72,84c72
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
---
>       int           , 
72,85c72
<       int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
---
>       int           )void*   , 
74,85c74
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
---
> *   , 
74,85c74
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
---
> struct , 
76,86c76
<       }
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
---
>       int     )
77,86c77
<    ;
< 
< 
< 
< 
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
---
>    )
82,86d81
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
82,91c82
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
---
> void void (BZ2_bzWriteClose)
82,91c82
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
---
> void ((BZ2_bzWriteClose)
82,91c82
< void (BZ2_bzWrite)
<              ( int*    , 
<                BZFILE* , 
<                void*   , 
<                int     )
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
---
> void (BZ2_bzWriteBZ2_bzWriteClose)
(98.7 %, 2676 bytes)
82,90c82
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
> ,
86,91c86
< void (BZ2_bzWriteClose)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
---
> unsigned * )
86,91c86
< void (BZ2_bzWriteClose)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
---
> void * )
86,91c86
< void (BZ2_bzWriteClose)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
---
> void ()
86,92c86
< void (BZ2_bzWriteClose)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
---
> void (BZ2_bzWriteClose;
87,95c87
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                   void (BZ2_bzWriteClose64)
87,95c87
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                   ( (BZ2_bzWriteClose64)
87,95c87
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                   ( intBZ2_bzWriteClose64)
87,95c87
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                   ( int*          )
88,96c88
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     ( int*          , 
88,96c88
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     BZFILEint*          , 
88,96c88
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     BZFILE*       *          , 
89,96c89
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     , 
89,97c89
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
---
>                     int           BZFILE*       , 
90,97c90
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
---
>                     *       , 
90,97c90
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
---
>                     unsigned , 
90,98c90
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
---
>                     unsigned * int           ,
91,98c91
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
---
>                     ,
91,99c91
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
>                     unsigned unsigned * ,
91,99c91
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
>                     unsigned * * ,
92,99c92
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
> ,
95,100c95
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
> unsigned * ,
95,100c95
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
> void * ,
95,100c95
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
> void (,
95,101c95
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
---
> void (BZ2_bzWriteClose64unsigned * ,
96,101c96
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   * ,
96,101c96
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   ( ,
96,102c96
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
---
>                   ( intunsigned * )
96,102c96
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
---
>                   ( int*          * )
97,102c97
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
---
>                     )
97,103c97
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
---
>                     BZFILE;
97,107c97
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     BZFILE*       * (BZ2_bzReadOpen) 
98,107c98
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     (BZ2_bzReadOpen) 
98,107c98
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     int           BZ2_bzReadOpen) 
99,107c99
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     ) 
99,108c99
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
---
>                     unsigned ( int*  , 
99,108c99
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
---
>                     unsigned * int*  , 
100,108c100
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
---
>                     *  , 
100,108c100
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
---
>                     unsigned , 
100,109c100
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
---
>                     unsigned * FILE* , 
101,109c101
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
---
>                     * , 
101,109c101
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
---
>                     unsigned , 
101,110c101
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
---
>                     unsigned * int   ,
102,110c102
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
---
>                     ,
102,111c102
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
---
>                     unsigned int   ,
102,111c102
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
---
>                     unsigned * ,
103,112c103
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
> void* ,
107,112c107
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
> * ,
107,112c107
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
> * ,
107,113c107
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
---
> * (int   )
107,113c107
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
---
> * (BZ2_bzReadOpen)
108,114c108
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
---
>                    ;
108,118c108
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                    ( (BZ2_bzRead) 
108,118c108
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                    ( intBZ2_bzRead) 
108,118c108
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
---
>                    ( int*  ) 
109,119c109
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      ( int*    bzerror, 
109,119c109
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      FILEint*    bzerror, 
109,119c109
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      FILE* *    bzerror, 
110,119c110
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      bzerror, 
110,119c110
<                      int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   , 
111,120c111
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      BZFILE* b, 
111,120c111
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      int   * b, 
112,120c112
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      b, 
112,120c112
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      void, 
112,121c112
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>                      void* void*   buf, 
113,121c113
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>                      *   buf, 
113,121c113
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>                      int   buf, 
114,121c114
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> , 
118,122c118
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int     len )
118,122c118
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> (len )
118,122c118
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> (BZ2_bzRead)
119,123c119
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            {
119,125c119
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
---
>            ( }
119,129c119
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
---
>            ( intvoid (BZ2_bzReadGetUnused) 
119,129c119
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
---
>            ( int*    (BZ2_bzReadGetUnused) 
119,129c119
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
---
>            ( int*    bzerrorBZ2_bzReadGetUnused) 
120,129c120
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
---
>              ) 
120,130c120
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>              BZFILE( int*    , 
120,130c120
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>              BZFILE* int*    , 
120,130c120
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>              BZFILE* b*    , 
121,130c121
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
---
>              , 
121,131c121
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
<                        BZFILE* , 
---
>              voidBZFILE* , 
121,131c121
<              void*   buf, 
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
<                        BZFILE* , 
---
>              void*   * , 
122,131d121
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
<                        BZFILE* , 
122,132c122
<              int     len )
< {
<    
<    }
< 
< 
< 
< void (BZ2_bzReadGetUnused) 
<                      ( int*    , 
<                        BZFILE* , 
<                        void**  , 
---
>              void**  , 
(98.8 %, 2538 bytes)
121,133c121
<              void*   * , 
<                        void**  , 
<                        int*    )
< ;
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         , 
---
>              void*   , 
121,134c121
<              void*   * , 
<                        void**  , 
<                        int*    )
< ;
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         , 
<                            unsigned * ,
---
>              void*   * unsigned * ,
122,134c122
<                        void**  , 
<                        int*    )
< ;
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         , 
<                            unsigned * ,
---
>                        * ,
122,134c122
<                        void**  , 
<                        int*    )
< ;
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         , 
<                            unsigned * ,
---
>                        void,
122,135c122
<                        void**  , 
<                        int*    )
< ;
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
---
>                        void*char*         , 
122,135c122
<                        void**  , 
<                        int*    )
< ;
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         , 
<                            unsigned * ,
<                            char*         , 
---
>                        void**  *         , 
(98.8 %, 2388 bytes)
121,132c121
<              void*   , 
<                            unsigned * ,
<                            char*         , 
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>              void*   (BZ2_bzBuffToBuffDecompress) 
122,132c122
<                            unsigned * ,
<                            char*         , 
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                            BZ2_bzBuffToBuffDecompress) 
122,132c122
<                            unsigned * ,
<                            char*         , 
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
---
>                            unsigned ) 
122,133c122
<                            unsigned * ,
<                            char*         , 
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         , 
---
>                            unsigned * ( char*         , 
124,133d123
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         , 
124,133d123
<                            unsigned ,
<                            int           , 
<                            int           , 
<                            int           )
< ;
< 
< 
< 
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         , 
(99.0 %, 2138 bytes)
123,133c123
<                            char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                            (BZ2_bzread) ()
123,133c123
<                            char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                            charBZ2_bzread) ()
123,133c123
<                            char*         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                            char*         ) ()
124,133c124
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              ()
124,133c124
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              unsigned )
124,134c124
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
>                              unsigned * {
125,135c125
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
>                              int bzerr;
125,135c125
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
>                              charbzerr;
125,135c125
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
>                              char*         ;
126,136c126
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                              if (BZ_OK || bzerr == BZ_STREAM_END) ; }
126,136c126
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                              unsigned (BZ_OK || bzerr == BZ_STREAM_END) ; }
127,136c127
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                              BZ_OK || bzerr == BZ_STREAM_END) ; }
127,136c127
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                              int           || bzerr == BZ_STREAM_END) ; }
128,136c128
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                              bzerr == BZ_STREAM_END) ; }
128,136c128
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                              int           == BZ_STREAM_END) ; }
129,136c129
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> BZ_STREAM_END) ; }
133,136c133
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> ) ; }
133,136c133
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (; }
133,136c133
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread}
133,140c133
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) 
\ No newline at end of file
133,140c133
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) (
\ No newline at end of file
134,140d133
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
135,140c135
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
135,140c135
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
135,140c135
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK 
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || 
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr 
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == 
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
136,140c136
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-13 >===
9,13c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
---
> )
9,15c9
< #2
< 
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
---
> #struct {
11,15c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
---
> {
11,16c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
---
> #} 
11,17c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
---
> #define ;
11,21c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                #include <stdio.h>
12,21c12
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> include <stdio.h>
12,21c12
< #3
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #<stdio.h>
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> stdio.h>
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #.h>
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define h>
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        >
13,23c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #define BZ_STREAM_END        (#   define BZ_API func
13,23c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #define BZ_STREAM_END        (9define BZ_API func
15,23c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> BZ_API func
15,23c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
---
> struct func
16,24c16
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
>       #   define BZ_EXTERN typedef BZFILE;
17,24c17
<    ;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
>    define BZ_EXTERN typedef BZFILE;
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> BZ_EXTERN typedef BZFILE;
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #typedef BZFILE;
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #include BZFILE;
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #include <;
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <stdioBZ_EXTERN * (BZ2_bzReadOpen) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <stdio.* (BZ2_bzReadOpen) ( 
21,26c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #include <stdio.h(BZ2_bzReadOpen) ( 
23,26c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
23,26c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   ) ( 
23,26c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define ( 
23,27c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> #   define BZ_API int*  ,   
24,27c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> *  ,   
24,27c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> #   ,   
24,28c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> #   define FILE* , 
24,28c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> #   define BZ_EXTERN * , 
24,28c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> #   define BZ_EXTERN typedef , 
24,29c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #   define BZ_EXTERN typedef BZFILEint   , 
26,29c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> , 
26,30c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> BZ_EXTERN int   ,
26,30c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> BZ_EXTERN * ,
26,31c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> BZ_EXTERN * (void* ,    
26,31c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> BZ_EXTERN * (BZ2_bzReadOpen* ,    
26,31c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> BZ_EXTERN * (BZ2_bzReadOpen) ,    
27,31d26
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
27,32c27
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
>       int);
27,32c27
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
>       int*  ;
28,34c28
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       void (BZ2_bzReadGetUnused) ( 
28,34c28
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       FILE(BZ2_bzReadGetUnused) ( 
28,34c28
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       FILE* BZ2_bzReadGetUnused) ( 
29,34c29
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       ) ( 
29,34c29
<       int   , 
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int   ( 
30,34d29
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
30,35c30
<       int   ,
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
>       int   *    , 
31,35c31
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
>       , 
31,36c31
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
>       voidBZFILE* , 
31,36c31
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
>       void* * , 
32,36c32
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
>       , 
32,37c32
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       int   void**  ,  
32,37c32
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       int   )**  ,  
34,37c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
> *  ,  
34,37c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
> void ,  
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void (int*    );
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void (BZ2_bzReadGetUnused*    );
34,38c34
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
> void (BZ2_bzReadGetUnused) );
35,38c35
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
>       ;
35,40c35
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< ;
---
>       int;
35,42c35
<       int*    , 
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
---
>       int*    ;
36,44c36
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
---
>       void (BZ2_bzWriteClose) ( 
36,44c36
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
---
>       BZFILE(BZ2_bzWriteClose) ( 
36,44c36
<       BZFILE* , 
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
---
>       BZFILE* BZ2_bzWriteClose) ( 
37,44c37
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
---
>       ) ( 
37,44c37
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
---
>       void( 
37,45c37
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
<       int*          , 
---
>       void*int*          , 
37,45c37
<       void**  ,  
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
<       int*          , 
---
>       void**  *          , 
38,45c38
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
<       int*          , 
---
>       , 
38,46c38
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
---
>       intBZFILE*       , 
38,46c38
<       int*    );
< 
< ;
< 
< ;
< 
< void (BZ2_bzWriteClose) ( 
<       int*          , 
<       BZFILE*       , 
---
>       int*    *       , 
(99.0 %, 2074 bytes)
37,41c37
<       void**  *          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
>       void**  ;
37,43c37
<       void**  *          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       void**  *          void (BZ2_bzWriteClose64) ( 
38,43c38
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       (BZ2_bzWriteClose64) ( 
38,43c38
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       BZFILEBZ2_bzWriteClose64) ( 
38,43c38
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       BZFILE*       ) ( 
39,43c39
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
---
>       ( 
39,44c39
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
---
>       int           int*          , 
40,44c40
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
---
>       *          , 
40,44c40
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
---
>       unsigned , 
40,45c40
<       unsigned * , 
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
---
>       unsigned * BZFILE*       , 
41,45c41
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
---
>       *       , 
41,45c41
<       unsigned * );
< 
< void (BZ2_bzWriteClose64) ( 
<       int*          , 
<       BZFILE*       , 
---
>       unsigned , 
(99.0 %, 1999 bytes)
40,44d39
<       unsigned , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
41,45c41
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
41,46c41
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       BZFILEunsigned * );
41,46c41
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       BZFILE*       * );
(99.1 %, 1895 bytes)
40,49c40
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ2_bzBuffToBuffDecompress) ( 
40,49c40
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned * ) ( 
41,49c41
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
41,50c41
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
---
>       unsigned char*         , 
41,50c41
<       unsigned * );
< 
< 
< 
< 
< (BZ2_bzBuffToBuffCompress) ( 
<       );
< 
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         , 
---
>       unsigned * *         , 
(99.1 %, 1808 bytes)
41,46c41
<       unsigned char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       unsigned int           );
41,46c41
<       unsigned char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       unsigned char);
41,46c41
<       unsigned char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       unsigned char*         ;
(99.2 %, 1703 bytes)
41,56c41
<       unsigned int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
<                   ( int*          , 
---
>       unsigned int*          , 
41,56c41
<       unsigned int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
<                   ( int*          , 
---
>       unsigned int           *          , 
41,56c41
<       unsigned int           );
< 
< struct {
<       
<       }
<    ;
< 
< 
< 
< 
< ;
< 
< 
< 
< void (BZ2_bzWriteClose)
<                   ( int*          , 
---
>       unsigned int           ), 
(99.2 %, 1603 bytes)
41,45c41
<       unsigned int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
---
>       unsigned )
41,46c41
<       unsigned int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
---
>       unsigned int;
41,49c41
<       unsigned int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>       unsigned int*          void (BZ2_bzWriteClose64)
42,49c42
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                     (BZ2_bzWriteClose64)
42,49c42
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                     BZFILEBZ2_bzWriteClose64)
42,49c42
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
---
>                     BZFILE*       )
43,50c43
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     ( int*          , 
43,50c43
<                     int           ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     int           int*          , 
44,50c44
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
---
>                     *          , 
(99.3 %, 1449 bytes)
41,48c41
<       unsigned )
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
---
>       unsigned int           ,
42,48c42
< ;
< 
< 
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
---
> ,
45,49c45
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
> unsigned * ,
45,49c45
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
> void * ,
45,49c45
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
---
> void (,
45,50c45
< void (BZ2_bzWriteClose64)
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
> void (BZ2_bzWriteClose64unsigned * ,
46,50c46
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   * ,
46,50c46
<                   ( int*          , 
<                     BZFILE*       , 
<                     int           ,
<                     unsigned * ,
<                     unsigned * ,
---
>                   ( ,
(99.4 %, 1323 bytes)
41,45c41
<       unsigned int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
---
>       unsigned )
41,46c41
<       unsigned int           ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
---
>       unsigned int           ;
42,50c42
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     * (BZ2_bzReadOpen) 
42,50c42
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     unsigned (BZ2_bzReadOpen) 
42,50c42
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     unsigned * BZ2_bzReadOpen) 
43,50c43
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
---
>                     ) 
43,51c43
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
---
>                     unsigned ( int*  , 
43,51c43
<                     unsigned * ,
<                     unsigned * ,
<                     unsigned * )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
---
>                     unsigned * int*  , 
(99.4 %, 1177 bytes)
41,49c41
<       unsigned )
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
---
>       unsigned int   ,
42,49c42
< ;
< 
< 
< 
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
---
> ,
46,50c46
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
---
> int   ,
46,50c46
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
---
> * ,
46,51c46
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
> * (void* ,
46,51c46
< * (BZ2_bzReadOpen) 
<                    ( int*  , 
<                      FILE* , 
<                      int   ,
<                      int   ,
<                      void* ,
---
> * (BZ2_bzReadOpen* ,
(99.5 %, 1069 bytes)
41,50c41
<       unsigned int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>       unsigned ( int*    bzerror, 
41,50c41
<       unsigned int   ,
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>       unsigned int   int*    bzerror, 
42,50c42
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      *    bzerror, 
42,50c42
<                      int   ,
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      int   bzerror, 
43,50c43
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>                      , 
43,51c43
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      voidBZFILE* b, 
43,51c43
<                      void* ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>                      void* * b, 
(99.5 %, 969 bytes)
42,46c42
<                      int   bzerror, 
<              BZFILE* b, 
<              void*   , 
<                            unsigned * ,
<                            char*         , 
---
>                      int   *         , 
43,46d42
<              BZFILE* b, 
<              void*   , 
<                            unsigned * ,
<                            char*         , 
(99.6 %, 839 bytes)
42,47c42
<                      int   *         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
---
>                      int   )
42,48c42
<                      int   *         , 
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
---
>                      int   *         ;
43,52c43
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              (BZ2_bzread) ()
43,52c43
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              unsigned BZ2_bzread) ()
43,52c43
<                              unsigned * ,
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              unsigned * ) ()
44,52c44
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              ()
44,52c44
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                              char)
44,53c44
<                              char*         , 
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
>                              char*         {
45,54c45
<                              unsigned ,
<                              int           ,
<                              int           )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
>                              int bzerr;
(99.7 %, 610 bytes)
42,50c42
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>                      int   BZ_OK || bzerr == BZ_STREAM_END) ; }
43,50c43
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> || bzerr == BZ_STREAM_END) ; }
47,50c47
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> bzerr == BZ_STREAM_END) ; }
47,50c47
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (== BZ_STREAM_END) ; }
47,50c47
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzreadBZ_STREAM_END) ; }
47,50c47
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) ) ; }
47,50c47
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (; }
48,50c48
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> }
49,54c49
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
49,54c49
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
49,54c49
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK 
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || 
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr 
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == 
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
50,54c50
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
9,11d8
< #2
< 
< #define BZ_OK                0
9,11d8
< #2
< 
< #define BZ_OK                0
11,12d10
< #define BZ_OK                0
< #3
11,12d10
< #define BZ_OK                0
< #3
11,12d10
< #define BZ_OK                0
< #3
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
---
> #define BZ_OK                (9)
12,13c12
< #3
< #define BZ_STREAM_END        (9)
---
> 9)
12,13c12
< #3
< #define BZ_STREAM_END        (9)
---
> #)
13,14d12
< #define BZ_STREAM_END        (9)
< 
13,15c13
< #define BZ_STREAM_END        (9)
< 
< struct {
---
> #{
13,16c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
---
> #define } 
13,17c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
---
> #define BZ_STREAM_END        ;
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (#include <stdio.h>
13,21c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (9include <stdio.h>
15,21c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> <stdio.h>
15,21c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> struct stdio.h>
16,21c16
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
17,21c17
<    ;
< 
< 
< 
< #include <stdio.h>
---
>    h>
21c21
< #include <stdio.h>
---
> >
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API func
---
> ##   define BZ_API func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include define BZ_API func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <BZ_API func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdiofunc
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #include <stdio.#   define BZ_EXTERN typedef BZFILE;
21,24c21
< #include <stdio.h>
< 
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #include <stdio.hdefine BZ_EXTERN typedef BZFILE;
23,24c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> BZ_EXTERN typedef BZFILE;
23,24c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   typedef BZFILE;
23,24c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZFILE;
23,24c23
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZ_API ;
24,25d23
< #   define BZ_EXTERN typedef BZFILE;
< 
24,26c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   * (BZ2_bzReadOpen) ( 
24,26c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define (BZ2_bzReadOpen) ( 
24,26c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZ2_bzReadOpen) ( 
24,26c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef ) ( 
24,26c24
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef BZFILE( 
26,27c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> int*  ,   
26,27c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> BZ_EXTERN *  ,   
26,27c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
---
> BZ_EXTERN * ,   
26,28c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> BZ_EXTERN * (FILE* , 
26,28c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> BZ_EXTERN * (BZ2_bzReadOpen* , 
26,28c26
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int*  ,   
<       FILE* , 
---
> BZ_EXTERN * (BZ2_bzReadOpen) , 
27,28d26
<       int*  ,   
<       FILE* , 
27,29c27
<       int*  ,   
<       FILE* , 
<       int   , 
---
>       int, 
(99.7 %, 578 bytes)
27,29c27
<       int   , 
<       int   ,
<       void* ,    
---
>       ,    
27,30c27
<       int   , 
<       int   ,
<       void* ,    
<       int   );
---
>       int   int   );
28,30c28
<       int   ,
<       void* ,    
<       int   );
---
>       );
28,30c28
<       int   ,
<       void* ,    
<       int   );
---
>       int   ;
29,32c29
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       void (BZ2_bzReadGetUnused) ( 
29,32c29
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       void(BZ2_bzReadGetUnused) ( 
29,32c29
<       void* ,    
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       void* BZ2_bzReadGetUnused) ( 
30,32c30
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       ) ( 
30,32c30
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int   ( 
30,33c30
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
>       int   )int*    , 
32,33c32
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
> *    , 
32,33c32
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
---
> void , 
32,34c32
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
> void (BZFILE* , 
32,34c32
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
> void (BZ2_bzReadGetUnused* , 
32,34c32
< void (BZ2_bzReadGetUnused) ( 
<       int*    , 
<       BZFILE* , 
---
> void (BZ2_bzReadGetUnused) , 
33,34d32
<       int*    , 
<       BZFILE* , 
33,35c33
<       int*    , 
<       BZFILE* , 
<       void**  *          , 
---
>       int**  *          , 
(99.7 %, 544 bytes)
33,34c33
<       void**  *          , 
<       BZFILE*       , 
---
>       *       , 
33,34c33
<       void**  *          , 
<       BZFILE*       , 
---
>       void, 
33,35c33
<       void**  *          , 
<       BZFILE*       , 
<       int           , 
---
>       void*int           , 
33,35c33
<       void**  *          , 
<       BZFILE*       , 
<       int           , 
---
>       void**  , 
33,36c33
<       void**  *          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       void**  *          unsigned * , 
34,36c34
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       * , 
34,36c34
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE, 
(99.8 %, 487 bytes)
33,35c33
<       void**  , 
<       unsigned * , 
<       unsigned int   ,
---
>       void**  ,
34,36c34
<       unsigned * , 
<       unsigned int   ,
<                      int   )
---
>       int   )
(99.8 %, 443 bytes)
33,39c33
<       void**  ,
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>       void**  ) ()
34,39c34
<                      int   )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>                      ()
35,39d34
< ;
< 
< 
< 
< (BZ2_bzread) ()
35,39d34
< ;
< 
< 
< 
< (BZ2_bzread) ()
39,41c39
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> int bzerr;
39,41c39
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (bzerr;
39,41c39
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread;
39,42c39
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) if (BZ_OK || bzerr == BZ_STREAM_END) ; }
39,42c39
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) ((BZ_OK || bzerr == BZ_STREAM_END) ; }
40,42c40
< {
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
> BZ_OK || bzerr == BZ_STREAM_END) ; }
41,42c41
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    || bzerr == BZ_STREAM_END) ; }
41,42c41
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    int bzerr == BZ_STREAM_END) ; }
41,42c41
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    int bzerr== BZ_STREAM_END) ; }
42c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    BZ_STREAM_END) ; }
42c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if ) ; }
42c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (; }
42c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK }
42,46c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || 
\ No newline at end of file
42,46c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr 
\ No newline at end of file
42,46c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == 
\ No newline at end of file
42,46c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
42,46c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
42,46c42
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-3 >===
9,11c9
< #2
< 
< #define BZ_OK                0
---
> define BZ_OK                0
9,11c9
< #2
< 
< #define BZ_OK                0
---
> #BZ_OK                0
11c11
< #define BZ_OK                0
---
> 0
11,12c11
< #define BZ_OK                0
< #3
---
> ##3
11,12c11
< #define BZ_OK                0
< #3
---
> #define 3
11,13c11
< #define BZ_OK                0
< #3
< #define BZ_STREAM_END        (9)
---
> #define BZ_OK                #define BZ_STREAM_END        (9)
12,13c12
< #3
< #define BZ_STREAM_END        (9)
---
> define BZ_STREAM_END        (9)
12,13c12
< #3
< #define BZ_STREAM_END        (9)
---
> #BZ_STREAM_END        (9)
13c13
< #define BZ_STREAM_END        (9)
---
> (9)
13c13
< #define BZ_STREAM_END        (9)
---
> #9)
13c13
< #define BZ_STREAM_END        (9)
---
> #define )
13,15c13
< #define BZ_STREAM_END        (9)
< 
< struct {
---
> #define BZ_STREAM_END        struct {
13,15c13
< #define BZ_STREAM_END        (9)
< 
< struct {
---
> #define BZ_STREAM_END        ({
13,16c13
< #define BZ_STREAM_END        (9)
< 
< struct {
<       } 
---
> #define BZ_STREAM_END        (9} 
15,17c15
< struct {
<       } 
<    ;
---
> ;
15,21c15
< struct {
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
> struct #include <stdio.h>
16,21c16
<       } 
<    ;
< 
< 
< 
< #include <stdio.h>
---
>       include <stdio.h>
17,21c17
<    ;
< 
< 
< 
< #include <stdio.h>
---
>    <stdio.h>
21c21
< #include <stdio.h>
---
> stdio.h>
21c21
< #include <stdio.h>
---
> #.h>
21c21
< #include <stdio.h>
---
> #include h>
21c21
< #include <stdio.h>
---
> #include <>
(99.8 %, 422 bytes)
15,19c15
< ;
< 
< 
< 
< #include <stdio.h>
---
> <stdio.h>
19c19
< #include <stdio.h>
---
> stdio.h>
19c19
< #include <stdio.h>
---
> #.h>
19c19
< #include <stdio.h>
---
> #include h>
19c19
< #include <stdio.h>
---
> #include <>
19,21c19
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio#   define BZ_API func
19,21c19
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio.define BZ_API func
19,21c19
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio.hBZ_API func
21c21
< #   define BZ_API func
---
> func
21,22c21
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   #   define BZ_EXTERN typedef BZFILE;
21,22c21
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define define BZ_EXTERN typedef BZFILE;
21,22c21
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZ_API BZ_EXTERN typedef BZFILE;
22c22
< #   define BZ_EXTERN typedef BZFILE;
---
> typedef BZFILE;
22c22
< #   define BZ_EXTERN typedef BZFILE;
---
> #   BZFILE;
22c22
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define ;
22,24c22
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZ_EXTERN * (BZ2_bzReadOpen) ( 
22,24c22
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef * (BZ2_bzReadOpen) ( 
22,24c22
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef BZFILE(BZ2_bzReadOpen) ( 
24c24
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
24c24
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ) ( 
24c24
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * ( 
24,25c24
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int   , 
---
> BZ_EXTERN * (int   , 
24,25c24
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int   , 
---
> BZ_EXTERN * (BZ2_bzReadOpen, 
24,26c24
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int   , 
<       int   ,
---
> BZ_EXTERN * (BZ2_bzReadOpen) int   ,
25,26c25
<       int   , 
<       int   ,
---
>       ,
25,27c25
<       int   , 
<       int   ,
<       void* ,    
---
>       int   void* ,    
26,27c26
<       int   ,
<       void* ,    
---
>       * ,    
26,27c26
<       int   ,
<       void* ,    
---
>       int   ,    
27d26
<       void* ,    
(99.8 %, 408 bytes)
26,27c26
<       int   ,    
<       int   );
---
>       int   ;
27,29c27
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       void (BZ2_bzReadGetUnused) ( 
27,29c27
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int   (BZ2_bzReadGetUnused) ( 
27,29c27
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int   )BZ2_bzReadGetUnused) ( 
29c29
< void (BZ2_bzReadGetUnused) ( 
---
> ) ( 
29c29
< void (BZ2_bzReadGetUnused) ( 
---
> void ( 
29,30c29
< void (BZ2_bzReadGetUnused) ( 
<       void**  ,
---
> void (void**  ,
29,30c29
< void (BZ2_bzReadGetUnused) ( 
<       void**  ,
---
> void (BZ2_bzReadGetUnused**  ,
29,30c29
< void (BZ2_bzReadGetUnused) ( 
<       void**  ,
---
> void (BZ2_bzReadGetUnused) *  ,
30c30
<       void**  ,
---
>       ,
30,31c30
<       void**  ,
<                      int   )
---
>       voidint   )
30,31c30
<       void**  ,
<                      int   )
---
>       void*)
30,32c30
<       void**  ,
<                      int   )
< ;
---
>       void**  ;
(99.8 %, 376 bytes)
30,35c30
<       void*)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>       void*BZ2_bzread) ()
31,35c31
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ) ()
35c35
< (BZ2_bzread) ()
---
> ()
35c35
< (BZ2_bzread) ()
---
> ()
35,36c35
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread{
35,37c35
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) int bzerr;
35,37c35
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (bzerr;
36,37c36
< {
<    int bzerr;
---
> ;
37d36
<    int bzerr;
37,38c37
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    int (BZ_OK || bzerr == BZ_STREAM_END) ; }
37,38c37
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    int bzerrBZ_OK || bzerr == BZ_STREAM_END) ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    || bzerr == BZ_STREAM_END) ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if bzerr == BZ_STREAM_END) ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (== BZ_STREAM_END) ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK BZ_STREAM_END) ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK || ) ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK || bzerr ; }
38c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK || bzerr == }
38,42c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END
\ No newline at end of file
38,42c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) 
\ No newline at end of file
38,42c38
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (BZ_OK || bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
9,10d8
< #2
< 
9,10d8
< #2
< 
11c11
< #define BZ_OK                0
---
> BZ_OK                0
11c11
< #define BZ_OK                0
---
> #0
(99.8 %, 372 bytes)
9c9
< #define BZ_OK                0
---
> BZ_OK                0
9c9
< #define BZ_OK                0
---
> #0
9,10c9
< #define BZ_OK                0
< #3
---
> #define #3
9,10c9
< #define BZ_OK                0
< #3
---
> #define BZ_OK                3
10d9
< #3
10d9
< #3
(99.8 %, 369 bytes)
10c10
< #define BZ_STREAM_END        (9)
---
> BZ_STREAM_END        (9)
10c10
< #define BZ_STREAM_END        (9)
---
> #(9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define 9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        )
10,12c10
< #define BZ_STREAM_END        (9)
< 
< ;
---
> #define BZ_STREAM_END        (;
10,16c10
< #define BZ_STREAM_END        (9)
< 
< ;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (9#include <stdio.h>
12,16c12
< ;
< 
< 
< 
< #include <stdio.h>
---
> include <stdio.h>
16c16
< #include <stdio.h>
---
> <stdio.h>
16c16
< #include <stdio.h>
---
> #stdio.h>
16c16
< #include <stdio.h>
---
> #include .h>
16c16
< #include <stdio.h>
---
> #include <h>
16c16
< #include <stdio.h>
---
> #include <stdio>
16,18c16
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio.#   define BZ_API func
16,18c16
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio.hdefine BZ_API func
18c18
< #   define BZ_API func
---
> BZ_API func
18c18
< #   define BZ_API func
---
> #   func
18,19c18
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define #   define BZ_EXTERN typedef BZFILE;
18,19c18
< #   define BZ_API func
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZ_API define BZ_EXTERN typedef BZFILE;
19c19
< #   define BZ_EXTERN typedef BZFILE;
---
> BZ_EXTERN typedef BZFILE;
19c19
< #   define BZ_EXTERN typedef BZFILE;
---
> #   typedef BZFILE;
19c19
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZFILE;
19c19
< #   define BZ_EXTERN typedef BZFILE;
---
> #   define BZ_EXTERN ;
19,21c19
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef BZ_EXTERN * (BZ2_bzReadOpen) ( 
19,21c19
< #   define BZ_EXTERN typedef BZFILE;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN typedef BZFILE* (BZ2_bzReadOpen) ( 
21c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
(99.8 %, 355 bytes)
19,21c19
< #   define BZ_EXTERN ;
< 
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN * (BZ2_bzReadOpen) ( 
21c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
21c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZ2_bzReadOpen) ( 
21c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * ) ( 
21c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * (( 
21,22c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int   , 
---
> BZ_EXTERN * (BZ2_bzReadOpenint   , 
21,22c21
< BZ_EXTERN * (BZ2_bzReadOpen) ( 
<       int   , 
---
> BZ_EXTERN * (BZ2_bzReadOpen) , 
22d21
<       int   , 
(99.8 %, 343 bytes)
21c21
< (BZ2_bzReadOpen) ( 
---
> ) ( 
21c21
< (BZ2_bzReadOpen) ( 
---
> (( 
21,22c21
< (BZ2_bzReadOpen) ( 
<       int   , 
---
> (BZ2_bzReadOpenint   , 
21,22c21
< (BZ2_bzReadOpen) ( 
<       int   , 
---
> (BZ2_bzReadOpen) , 
22d21
<       int   , 
22d21
<       int   , 
23d22
<       int   ,    
(99.8 %, 328 bytes)
22d21
<       int   ,    
22d21
<       int   ,    
23c23
<       int   );
---
>       ;
(99.8 %, 310 bytes)
22c22
<       int   );
---
>       ;
22,24c22
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int   void (BZ2_bzReadGetUnused) ( 
22,24c22
<       int   );
< 
< void (BZ2_bzReadGetUnused) ( 
---
>       int   )(BZ2_bzReadGetUnused) ( 
24c24
< void (BZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadGetUnused) ( 
24c24
< void (BZ2_bzReadGetUnused) ( 
---
> void ) ( 
24c24
< void (BZ2_bzReadGetUnused) ( 
---
> void (( 
24,25c24
< void (BZ2_bzReadGetUnused) ( 
<       void*)
---
> void (BZ2_bzReadGetUnusedvoid*)
24,25c24
< void (BZ2_bzReadGetUnused) ( 
<       void*)
---
> void (BZ2_bzReadGetUnused) *)
25c25
<       void*)
---
>       )
25,26c25
<       void*)
< ;
---
>       void;
25,30c25
<       void*)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>       void*(BZ2_bzread) ()
26,30c26
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
30c30
< (BZ2_bzread) ()
---
> ) ()
30c30
< (BZ2_bzread) ()
---
> (()
30c30
< (BZ2_bzread) ()
---
> (BZ2_bzread)
30,31c30
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread) {
(99.9 %, 305 bytes)
25,30c25
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>       (BZ2_bzread) ()
26,30c26
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
30c30
< (BZ2_bzread) ()
---
> ) ()
30c30
< (BZ2_bzread) ()
---
> (()
30c30
< (BZ2_bzread) ()
---
> (BZ2_bzread)
30,31c30
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread) {
30,32c30
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (int bzerr;
31,32c31
< {
<    int bzerr;
---
> bzerr;
32c32
<    int bzerr;
---
>    ;
32,33c32
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    int if (BZ_OK || bzerr == BZ_STREAM_END) ; }
32,33c32
<    int bzerr;
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    int bzerr(BZ_OK || bzerr == BZ_STREAM_END) ; }
33c33
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    BZ_OK || bzerr == BZ_STREAM_END) ; }
33c33
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if || bzerr == BZ_STREAM_END) ; }
33c33
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == BZ_STREAM_END) ; }
33c33
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK == BZ_STREAM_END) ; }
33c33
<    if (BZ_OK || bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_OK || BZ_STREAM_END) ; }
(99.9 %, 296 bytes)
33c33
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_STREAM_END) ; }
33c33
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr ) ; }
33c33
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == ; }
33c33
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == BZ_STREAM_END}
33,37c33
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
33,37c33
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
Termination check: size was 3157; now 296
===< pass_balanced :: angles-only >===
16c16
< #include <stdio.h>
---
> #include stdio.h
===< pass_clang :: remove-namespace >===
===< pass_clang :: param-to-local >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: replace-dependent-name >===
===< pass_peep :: a >===
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
12c12
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
12c12
< ;
---
> 
(99.9 %, 295 bytes)
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
10c10
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
16c16
< #include <stdio.h>
---
> #include 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
19c19
< #   define BZ_EXTERN ;
---
> #   define BZ_EXTERN 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
(99.9 %, 294 bytes)
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21c21
< (BZ2_bzReadOpen) ( 
---
>  ( 
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
21,22c21
< (BZ2_bzReadOpen) ( 
<       int   );
---
> (BZ2_bzReadOpen) ;
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
30c30
< (BZ2_bzread) ()
---
>  ()
31,33c31
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
26c26
< ;
---
> 
(99.9 %, 278 bytes)
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
21c21
< (BZ2_bzReadOpen) ;
---
> (BZ2_bzReadOpen) 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
23c23
< void (BZ2_bzReadGetUnused) ( 
---
> void  ( 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
23,24c23
< void (BZ2_bzReadGetUnused) ( 
<       )
---
> void (BZ2_bzReadGetUnused) 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
25c25
< ;
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
29c29
< (BZ2_bzread) ()
---
>  ()
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
29c29
< (BZ2_bzread) ()
---
> (BZ2_bzread) 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
30,32c30
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
31c31
<    int bzerr;
---
>    int bzerr
32c32
<    if (bzerr == BZ_STREAM_END) ; }
---
>     ; }
32c32
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if  ; }
32c32
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == BZ_STREAM_END)  }
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ints :: c >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-3 >===
9c9
< #define BZ_OK                0
---
> 0
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        (9)
---
> ##define BZ_STREAM_END        (9)
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        (9)
---
> #define define BZ_STREAM_END        (9)
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        (9)
---
> #define BZ_OK                BZ_STREAM_END        (9)
10c10
< #define BZ_STREAM_END        (9)
---
> (9)
10c10
< #define BZ_STREAM_END        (9)
---
> #9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define )
10,16c10
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        #include <stdio.h>
10,16c10
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (include <stdio.h>
10,16c10
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (9<stdio.h>
16c16
< #include <stdio.h>
---
> stdio.h>
16c16
< #include <stdio.h>
---
> #.h>
16c16
< #include <stdio.h>
---
> #include h>
16c16
< #include <stdio.h>
---
> #include <>
16,18c16
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio#   define BZ_API func
16,18c16
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio.define BZ_API func
16,18c16
< #include <stdio.h>
< 
< #   define BZ_API func
---
> #include <stdio.hBZ_API func
18c18
< #   define BZ_API func
---
> func
18,19c18
< #   define BZ_API func
< #   define BZ_EXTERN 
---
> #   #   define BZ_EXTERN 
18,19c18
< #   define BZ_API func
< #   define BZ_EXTERN 
---
> #   define define BZ_EXTERN 
18,19c18
< #   define BZ_API func
< #   define BZ_EXTERN 
---
> #   define BZ_API BZ_EXTERN 
(99.9 %, 262 bytes)
18,20c18
< #   define define BZ_EXTERN 
< 
< (BZ2_bzReadOpen) ;
---
> #   define BZ2_bzReadOpen) ;
18,20c18
< #   define define BZ_EXTERN 
< 
< (BZ2_bzReadOpen) ;
---
> #   define define ) ;
(99.9 %, 242 bytes)
18,20c18
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #   define void (BZ2_bzReadGetUnused) ( 
18,20c18
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #   define BZ2_bzReadOpen(BZ2_bzReadGetUnused) ( 
18,20c18
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #   define BZ2_bzReadOpen) BZ2_bzReadGetUnused) ( 
20c20
< void (BZ2_bzReadGetUnused) ( 
---
> ) ( 
20c20
< void (BZ2_bzReadGetUnused) ( 
---
> void ( 
20,21c20
< void (BZ2_bzReadGetUnused) ( 
<       )
---
> void ()
20,22c20
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
---
> void (BZ2_bzReadGetUnused;
20,26c20
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> void (BZ2_bzReadGetUnused) (BZ2_bzread) ()
21,26c21
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>       BZ2_bzread) ()
22,26c22
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ) ()
26c26
< (BZ2_bzread) ()
---
> ()
26c26
< (BZ2_bzread) ()
---
> ()
26,27c26
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread{
26,28c26
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) int bzerr;
26,28c26
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (bzerr;
27,28c27
< {
<    int bzerr;
---
> ;
28d27
<    int bzerr;
28,29c28
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int (bzerr == BZ_STREAM_END) ; }
28,29c28
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerrbzerr == BZ_STREAM_END) ; }
29c29
<    if (bzerr == BZ_STREAM_END) ; }
---
>    == BZ_STREAM_END) ; }
29c29
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if BZ_STREAM_END) ; }
29c29
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if () ; }
29c29
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr ; }
29c29
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == }
29,33c29
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
29,33c29
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
29,33c29
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
9c9
< #define BZ_OK                0
---
> BZ_OK                0
9c9
< #define BZ_OK                0
---
> #0
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        (9)
---
> #define #define BZ_STREAM_END        (9)
9,10c9
< #define BZ_OK                0
< #define BZ_STREAM_END        (9)
---
> #define BZ_OK                define BZ_STREAM_END        (9)
10c10
< #define BZ_STREAM_END        (9)
---
> BZ_STREAM_END        (9)
10c10
< #define BZ_STREAM_END        (9)
---
> #(9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define 9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        )
10,16c10
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (#include <stdio.h>
(99.9 %, 214 bytes)
9d8
< #0
10c10
< #define BZ_STREAM_END        (9)
---
> BZ_STREAM_END        (9)
10c10
< #define BZ_STREAM_END        (9)
---
> #(9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define 9)
10c10
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        )
10,16c10
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (#include <stdio.h>
10,16c10
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (9include <stdio.h>
16c16
< #include <stdio.h>
---
> <stdio.h>
16c16
< #include <stdio.h>
---
> #stdio.h>
(99.9 %, 211 bytes)
9c9
< #define BZ_STREAM_END        (9)
---
> #(9)
9c9
< #define BZ_STREAM_END        (9)
---
> #define 9)
9c9
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        )
9,15c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (#include <stdio.h>
9,15c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        (9include <stdio.h>
15c15
< #include <stdio.h>
---
> <stdio.h>
15c15
< #include <stdio.h>
---
> #stdio.h>
15c15
< #include <stdio.h>
---
> #include .h>
15c15
< #include <stdio.h>
---
> #include <h>
15c15
< #include <stdio.h>
---
> #include <stdio>
15,17c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #include <stdio.#   define BZ2_bzReadOpen) ;
15,17c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #include <stdio.hdefine BZ2_bzReadOpen) ;
17c17
< #   define BZ2_bzReadOpen) ;
---
> BZ2_bzReadOpen) ;
17c17
< #   define BZ2_bzReadOpen) ;
---
> #   ) ;
17c17
< #   define BZ2_bzReadOpen) ;
---
> #   define ;
17,19c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #   define BZ2_bzReadOpenvoid (BZ2_bzReadGetUnused) ( 
17,19c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #   define BZ2_bzReadOpen) (BZ2_bzReadGetUnused) ( 
19c19
< void (BZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadGetUnused) ( 
19c19
< void (BZ2_bzReadGetUnused) ( 
---
> void ) ( 
19c19
< void (BZ2_bzReadGetUnused) ( 
---
> void (( 
19,20c19
< void (BZ2_bzReadGetUnused) ( 
<       )
---
> void (BZ2_bzReadGetUnused)
19,21c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
---
> void (BZ2_bzReadGetUnused) ;
20,25c20
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
>       (BZ2_bzread) ()
21,25c21
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> BZ2_bzread) ()
25c25
< (BZ2_bzread) ()
---
> ) ()
25c25
< (BZ2_bzread) ()
---
> (()
25c25
< (BZ2_bzread) ()
---
> (BZ2_bzread)
25,26c25
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread) {
25,27c25
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (int bzerr;
26,27c26
< {
<    int bzerr;
---
> bzerr;
27c27
<    int bzerr;
---
>    ;
27,28c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int if (bzerr == BZ_STREAM_END) ; }
27,28c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr(bzerr == BZ_STREAM_END) ; }
28c28
<    if (bzerr == BZ_STREAM_END) ; }
---
>    bzerr == BZ_STREAM_END) ; }
28c28
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if == BZ_STREAM_END) ; }
28c28
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (BZ_STREAM_END) ; }
28c28
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr ) ; }
28c28
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == ; }
28c28
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == BZ_STREAM_END}
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
Termination check: size was 296; now 211
===< pass_balanced :: angles-only >===
15c15
< #include <stdio.h>
---
> #include stdio.h
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: remove-unused-field >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: remove-array >===
===< pass_ints :: c >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-16 >===
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> ) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #;
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define void (BZ2_bzReadGetUnused) ( 
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (BZ2_bzReadGetUnused) ( 
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (BZ2_bzReadGetUnused) ( 
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (9) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> ( 
15,20c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
---
> #)
15,21c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
---
> #include ;
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <(BZ2_bzread) ()
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdioBZ2_bzread) ()
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio.) ()
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio.h()
17,25c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> )
17,26c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
> #   {
17,27c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> #   define int bzerr;
17,27c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> #   define BZ2_bzReadOpenbzerr;
18,27d17
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> if (bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (BZ2_bzReadGetUnused== BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (BZ2_bzReadGetUnused) BZ_STREAM_END) ; }
20,28c20
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>       ) ; }
21,28c21
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> ; }
25,28c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> }
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (
\ No newline at end of file
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread
\ No newline at end of file
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) 
\ No newline at end of file
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) (
\ No newline at end of file
26,32d25
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-15 >===
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> BZ2_bzReadOpen) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define ;
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        void (BZ2_bzReadGetUnused) ( 
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        ((BZ2_bzReadGetUnused) ( 
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (9BZ2_bzReadGetUnused) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> ) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #( 
15,20c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
---
> #include )
15,21c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
---
> #include <;
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio(BZ2_bzread) ()
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio.BZ2_bzread) ()
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio.h) ()
17,25c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ()
17,25c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #   )
17,26c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
> #   define {
17,27c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> #   define BZ2_bzReadOpenint bzerr;
17,27c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> #   define BZ2_bzReadOpen) bzerr;
19,20d18
< void (BZ2_bzReadGetUnused) ( 
<       )
22,27d19
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void if (bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void ((bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (BZ2_bzReadGetUnusedbzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (BZ2_bzReadGetUnused) == BZ_STREAM_END) ; }
20,28c20
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>       BZ_STREAM_END) ; }
21,28c21
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> ) ; }
25,28c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> ; }
25,28c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (}
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread
\ No newline at end of file
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) 
\ No newline at end of file
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) (
\ No newline at end of file
26,32d25
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-14 >===
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> define BZ2_bzReadOpen) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #BZ2_bzReadOpen) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define ) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define BZ_STREAM_END        ;
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (void (BZ2_bzReadGetUnused) ( 
9,19c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (9(BZ2_bzReadGetUnused) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadGetUnused) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #include ( 
15,20c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
---
> #include <)
15,21c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
---
> #include <stdio;
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio.(BZ2_bzread) ()
15,25c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #include <stdio.hBZ2_bzread) ()
17,25c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ) ()
17,25c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #   ()
17,25c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #   define )
17,26c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
> #   define BZ2_bzReadOpen{
17,27c17
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> #   define BZ2_bzReadOpen) int bzerr;
19,27c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> bzerr;
19,27c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> void ;
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (if (bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (BZ2_bzReadGetUnused(bzerr == BZ_STREAM_END) ; }
19,28c19
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> void (BZ2_bzReadGetUnused) bzerr == BZ_STREAM_END) ; }
20,28c20
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>       == BZ_STREAM_END) ; }
21,28c21
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> BZ_STREAM_END) ; }
25,28c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> ) ; }
25,28c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (; }
25,28c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread}
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) 
\ No newline at end of file
25,32c25
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) (
\ No newline at end of file
26,32d25
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
27,32c27
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
28,32c28
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-11 >===
9,15c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> h>
9,15c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #>
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define #   define BZ2_bzReadOpen) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define BZ_STREAM_END        define BZ2_bzReadOpen) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define BZ_STREAM_END        (BZ2_bzReadOpen) ;
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> #define BZ_STREAM_END        (9) ;
15,17c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
---
> ;
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #void (BZ2_bzReadGetUnused) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #include (BZ2_bzReadGetUnused) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #include <BZ2_bzReadGetUnused) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #include <stdio) ( 
15,19c15
< #include <stdio.h>
< 
< #   define BZ2_bzReadOpen) ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #include <stdio.( 
(99.9 %, 164 bytes)
15,23c15
< ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ()
17,23c17
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> )
17,24c17
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
> void {
17,25c17
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> void (int bzerr;
17,25c17
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> void (BZ2_bzReadGetUnusedbzerr;
17,25c17
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> void (BZ2_bzReadGetUnused) ;
18,26c18
<       )
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>       if (bzerr == BZ_STREAM_END) ; }
19,26c19
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (bzerr == BZ_STREAM_END) ; }
23,26c23
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> bzerr == BZ_STREAM_END) ; }
23,26c23
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (== BZ_STREAM_END) ; }
23,26c23
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzreadBZ_STREAM_END) ; }
23,26c23
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) ) ; }
23,26c23
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (; }
24,26c24
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> }
25,30c25
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
25,30c25
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
25,30c25
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
26,30c26
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-7 >===
9,16d8
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< ;
< 
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #(BZ2_bzReadGetUnused) ( 
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ2_bzReadGetUnused) ( 
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        ) ( 
9,17c9
< #define BZ_STREAM_END        (9)
< 
< 
< 
< 
< 
< ;
< 
< void (BZ2_bzReadGetUnused) ( 
---
> #define BZ_STREAM_END        (( 
10,18d9
< 
< 
< 
< 
< 
< ;
< 
< void (BZ2_bzReadGetUnused) ( 
<       )
17,20d16
< void (BZ2_bzReadGetUnused) ( 
<       )
< ;
< 
(99.9 %, 118 bytes)
9,15c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
> #define BZ_STREAM_END        (9{
10,16c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> int bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (;
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzreadif (bzerr == BZ_STREAM_END) ; }
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (bzerr == BZ_STREAM_END) ; }
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (bzerr == BZ_STREAM_END) ; }
15,17c15
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int ) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    }
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-5 >===
9c9
< #define BZ_STREAM_END        (9)
---
> )
9,10c9
< #define BZ_STREAM_END        (9)
< ;
---
> #;
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define (BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        () ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (9()
10,14c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> )
14d13
< (BZ2_bzread) ()
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (int bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzreadbzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) ;
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (if (bzerr == BZ_STREAM_END) ; }
15,17c15
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerrBZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    ) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (}
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-4 >===
9c9
< #define BZ_STREAM_END        (9)
---
> 9)
9c9
< #define BZ_STREAM_END        (9)
---
> #)
9,10c9
< #define BZ_STREAM_END        (9)
< ;
---
> #define ;
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (9) ()
10,14c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ()
14c14
< (BZ2_bzread) ()
---
> )
14,15c14
< (BZ2_bzread) ()
< {
---
> ({
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzreadint bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (;
15,17c15
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> if (bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    (bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr== BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if ) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr }
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
Termination check: size was 211; now 118
===< pass_balanced :: curly3 >===
===< pass_clang :: param-to-global >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-function >===
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> 
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-array >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: replace-array-index-var >===
===< pass_clang :: replace-dependent-name >===
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_ints :: a >===
===< pass_clex :: rm-toks-16 >===
9,17c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> if (bzerr == BZ_STREAM_END) ; }
9,17c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> #(bzerr == BZ_STREAM_END) ; }
9,17c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> #define bzerr == BZ_STREAM_END) ; }
9,17c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> #define BZ_STREAM_END        == BZ_STREAM_END) ; }
9,17c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> #define BZ_STREAM_END        (BZ_STREAM_END) ; }
9,17c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> #define BZ_STREAM_END        (9) ; }
10,17c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> ; }
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> }
14,21c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (
\ No newline at end of file
14,21c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread
\ No newline at end of file
14,21c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) 
\ No newline at end of file
14,21c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
> (BZ2_bzread) (
\ No newline at end of file
15,21d14
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
16,21c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
16,21c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int 
\ No newline at end of file
16,21c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    int bzerr
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-7 >===
9,13d8
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define ) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        ()
9,15c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
---
> #define BZ_STREAM_END        (9{
10,16c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> int bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (;
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzreadif (bzerr == BZ_STREAM_END) ; }
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (bzerr == BZ_STREAM_END) ; }
14,17c14
< (BZ2_bzread) ()
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> (BZ2_bzread) (bzerr == BZ_STREAM_END) ; }
15,17c15
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int ) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    }
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-4 >===
9c9
< #define BZ_STREAM_END        (9)
---
> 9)
9c9
< #define BZ_STREAM_END        (9)
---
> #)
9,10c9
< #define BZ_STREAM_END        (9)
< ;
---
> #define ;
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (9) ()
10,14c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ()
14c14
< (BZ2_bzread) ()
---
> )
14,15c14
< (BZ2_bzread) ()
< {
---
> ({
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzreadint bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (;
15,17c15
< {
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
> if (bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    (bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerr== BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if ) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr }
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
===< pass_clex :: rm-toks-3 >===
9c9
< #define BZ_STREAM_END        (9)
---
> (9)
9c9
< #define BZ_STREAM_END        (9)
---
> #9)
9c9
< #define BZ_STREAM_END        (9)
---
> #define )
9,10c9
< #define BZ_STREAM_END        (9)
< ;
---
> #define BZ_STREAM_END        ;
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        ((BZ2_bzread) ()
9,14c9
< #define BZ_STREAM_END        (9)
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> #define BZ_STREAM_END        (9BZ2_bzread) ()
10,14c10
< ;
< 
< 
< 
< (BZ2_bzread) ()
---
> ) ()
14c14
< (BZ2_bzread) ()
---
> ()
14c14
< (BZ2_bzread) ()
---
> ()
14,15c14
< (BZ2_bzread) ()
< {
---
> (BZ2_bzread{
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) int bzerr;
14,16c14
< (BZ2_bzread) ()
< {
<    int bzerr;
---
> (BZ2_bzread) (bzerr;
15,16c15
< {
<    int bzerr;
---
> ;
16d15
<    int bzerr;
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int (bzerr == BZ_STREAM_END) ; }
16,17c16
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int bzerrbzerr == BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    == BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if BZ_STREAM_END) ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if () ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr ; }
17c17
<    if (bzerr == BZ_STREAM_END) ; }
---
>    if (bzerr == }
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
17,21c17
<    if (bzerr == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>    if (bzerr == BZ_STREAM_END) ; 
\ No newline at end of file
Termination check: size was 118; now 118
===< pass_clang :: rename-fun >===
14c14
< (BZ2_bzread) ()
---
> (fn1) ()
(99.9 %, 111 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
16,17c16,17
<    int bzerr;
<    if (bzerr == BZ_STREAM_END) ; }
---
>    int a;
>    if (a == BZ_STREAM_END) ; }
(99.9 %, 103 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1,7d0
<  
< 
< 
< 
< 
< 
< 
12,14c5
< 
< 
< (fn1) ()
---
> ( fn1 ) (  )
16,21c7,9
<    int a;
<    if (a == BZ_STREAM_END) ; }
< 
< 
< 
<  
\ No newline at end of file
---
>   int a;
>   if ( a == BZ_STREAM_END ) ;
> }
1c1
<  
---
> 
16,17c16,18
<    int a;
<    if (a == BZ_STREAM_END) ; }
---
>     int a;
>     if (a == BZ_STREAM_END) ;
> }
21d21
<  
\ No newline at end of file
(100.0 %, 93 bytes)
7,8c7,8
<   int a;
<   if ( a == BZ_STREAM_END ) ;
---
>     int a;
>     if ( a == BZ_STREAM_END ) ;
2c2
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END (9)
5,6c5
< ( fn1 ) (  )
< {
---
> (fn1)() {
8c7,8
<   if ( a == BZ_STREAM_END ) ;
---
>   if (a == BZ_STREAM_END)
>     ;
(100.0 %, 97 bytes)
2c2
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END (9)
5,8c5,8
< ( fn1 ) (  )
< {
<     int a;
<     if ( a == BZ_STREAM_END ) ;
---
> (fn1)() {
>   int a;
>   if (a == BZ_STREAM_END)
>     ;
(100.0 %, 83 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 0 times
  method pass_balanced :: angles-only worked 14 times and failed 12 times
  method pass_balanced :: curly worked 69 times and failed 50 times
  method pass_balanced :: curly-only worked 0 times and failed 0 times
  method pass_balanced :: curly2 worked 26 times and failed 12 times
  method pass_balanced :: curly3 worked 6 times and failed 0 times
  method pass_balanced :: parens worked 2 times and failed 36 times
  method pass_balanced :: parens-only worked 0 times and failed 0 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 1 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 1 times and failed 1 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 0 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 0 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 19 times and failed 2 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 34 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 1 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-1 worked 159 times and failed 395 times
  method pass_clex :: rm-toks-10 worked 28 times and failed 911 times
  method pass_clex :: rm-toks-11 worked 1 times and failed 31 times
  method pass_clex :: rm-toks-12 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-13 worked 182 times and failed 1297 times
  method pass_clex :: rm-toks-14 worked 0 times and failed 42 times
  method pass_clex :: rm-toks-15 worked 0 times and failed 42 times
  method pass_clex :: rm-toks-16 worked 7 times and failed 341 times
  method pass_clex :: rm-toks-2 worked 10 times and failed 99 times
  method pass_clex :: rm-toks-3 worked 5 times and failed 143 times
  method pass_clex :: rm-toks-4 worked 0 times and failed 48 times
  method pass_clex :: rm-toks-5 worked 8 times and failed 578 times
  method pass_clex :: rm-toks-6 worked 11 times and failed 677 times
  method pass_clex :: rm-toks-7 worked 18 times and failed 686 times
  method pass_clex :: rm-toks-8 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-9 worked 18 times and failed 755 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 0 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 3 times and failed 641 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 13 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454551705.0179/bzip2.c' reduced to:

#define BZ_STREAM_END (9)
;

(fn1)() {
  int a;
  if (a == BZ_STREAM_END)
    ;
}
1053.75user 201.98system 14:46.40elapsed 141%CPU (0avgtext+0avgdata 60132maxresident)k
96inputs+3567536outputs (1major+78728834minor)pagefaults 0swaps
