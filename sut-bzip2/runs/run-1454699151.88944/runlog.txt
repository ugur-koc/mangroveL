===< 32045 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
5053d5052
< #include <stdlib.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
5055d5054
< #include <ctype.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
5069d5068
< #   include <sys/times.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
5105d5104
< #     include <fcntl.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
5118d5117
< #   include <fcntl.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
5105,5106d5104
< #if BZ_LCCWIN32
< 
5126,5127d5123
< 
< #endif /* BZ_LCCWIN32 */
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
111d110
< #ifdef _WIN32
118,121d116
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
111,118d110
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
121d112
< #endif
4987,4993d4977
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4985,4991d4984
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5049d5041
< #   ifdef __CYGWIN__
5057d5048
< #   endif
5049,5057d5048
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5031d5030
< #   ifdef __DJGPP__
5043d5041
< #   endif
6672,6674d6669
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5031,5044d5030
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6672d6657
< #  ifndef __DJGPP__
6674d6658
< #  endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1220,1222c1220
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1216,1218c1216
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
333,335c333
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
745,748c745
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
811,819c811
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1031,1034c1031
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1041,1046d1040
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1048,1130d1041
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1062,1109c1062
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
1152,1179c1152
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
1278,1283c1278
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
---
>       zs->state_in_len == 255)  else {                                       \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
1392,1405c1392
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
---
>          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0)  else {
1395c1395
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
---
>                VPrintf2 ( " ", s->storedBlockCRC, 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
1526c1526
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1639,1640d1638
< {
<    bzFile* bzf = (bzFile*)b;
1642,1652d1639
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, smallMode;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_include_includes :: 0 >===
===< pass_balanced :: angles >===
52c52
< #include <stdio.h>
---
> #include 
233c233
< #include <stdlib.h>
---
> #include 
611,621c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
611,617c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
>    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) <ll16[i]) | (GET_LL4(i) << 16))
(84.5 %, 31824 bytes)
655,679c655
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
< 
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define fmin(a,b) ((a) > 5] |= (1 << ((zz) & 31))
679,680c679
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1  5] &= ~(1 << ((zz) & 31))
(84.6 %, 31501 bytes)
655,656c655
< #define fmin(a,b) ((a) > 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1 << ((zz) & 31))
655,656c655
< #define fmin(a,b) ((a) > 5] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define fmin(a,b) ((a) > 5] |= (1 <> 5] &= ~(1 << ((zz) & 31))
656,657c656
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1  5] & (1 << ((zz) & 31)))
(84.7 %, 31446 bytes)
655,656c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1 << ((zz) & 31)))
655,656c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1 <> 5] & (1 << ((zz) & 31)))
656,657c656
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1  5]
(84.7 %, 31390 bytes)
655,656c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
655,656c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1 << ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1 <> 5]
696,882c696
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
> #define mmin(a,b) ((a) block;
730,881c730
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
> #define BIGFREQ(b) (ftab[((b)+1) ptr;
730,865c730
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
> #define BIGFREQ(b) (ftab[((b)+1) <nInUse++;
730,864c730
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) nInUse;
730,864c730
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) <unseqToSeq[i] = s->nInUse;
731,861c731
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> #define SETMASK (1 nInUse = 0;
(84.7 %, 31334 bytes)
695,881c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
< 
< #define mpush(lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
> #define mmin(a,b) ((a) block;
729,880c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
> #define BIGFREQ(b) (ftab[((b)+1) ptr;
729,864c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
> #define BIGFREQ(b) (ftab[((b)+1) <nInUse++;
729,863c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) nInUse;
729,863c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) <unseqToSeq[i] = s->nInUse;
730,860c730
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> #define SETMASK (1 nInUse = 0;
730,758c730
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
861,862c861
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i inUse[i]) {
887c887
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i mtfFreq[i] = 0;
891c891
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i nInUse; i++) yy[i] = (UChar) i;
893c893
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i nblock; i++) {
895,897c895
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       AssertD ( wr unseqToSeq[block[j]];
896c896
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j nblock;
898c898
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValues(2a)" );
(84.8 %, 31110 bytes)
833,834c833
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i inUse[i]) {
859c859
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i mtfFreq[i] = 0;
863c863
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i nInUse; i++) yy[i] = (UChar) i;
865c865
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i nblock; i++) {
867,869c867
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       AssertD ( wr unseqToSeq[block[j]];
868c868
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j nblock;
870c870
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValues(2a)" );
1016c1016
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  9 ||
1017c1017
<        workFactor < 0 || workFactor > 250)
---
>        workFactor  250)
1143c1143
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  4) return BZ_PARAM_ERROR;
1263c1263
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        (blockSize100k  9) ||
1264c1264
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor  250) ||
1265c1265
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity  4))
(84.8 %, 31105 bytes)
1016c1016
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  9 ||
1017c1017
<        workFactor < 0 || workFactor > 250)
---
>        workFactor  250)
1143c1143
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  4) return BZ_PARAM_ERROR;
1263c1263
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        (blockSize100k  9) ||
1264c1264
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor  250) ||
1265c1265
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity  4))
1308,1310c1308
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    if (!(bzf->writing))
---
>    if (bzf == NULL || buf == NULL || len writing))
1328,1330c1328
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf->strm.avail_out strm.avail_in == 0)
1408c1408
<        (verbosity < 0 || verbosity > 4) ||
---
>        (verbosity  4) ||
1410c1410
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused  BZ_MAX_UNUSED)))
1474,1477c1474
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    if (bzf->writing)
---
>    if (bzf == NULL || buf == NULL || len writing)
1532c1532
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  9 ||
1533c1533
<        verbosity < 0 || verbosity > 4 ||
---
>        verbosity  4 ||
1534c1534
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor  250) 
1583c1583
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity  4) 
1782c1782
< #include <signal.h>
---
> #include 
1783c1783
< #include <errno.h>
---
> #include 
1794c1794
< #   include <fcntl.h>
---
> #   include 
1795c1795
< #   include <utime.h>
---
> #   include 
===< pass_balanced :: angles-only >===
52c52
< #include <stdio.h>
---
> #include stdio.h
233c233
< #include <stdlib.h>
---
> #include stdlib.h
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) ((a)  (b)) ? (a) : (b)
853c853
<    UChar* block  = s->block;
---
>    UChar* block  = s-block;
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
852c852
<    UInt32* ptr   = s->ptr;
---
>    UInt32* ptr   = s-ptr;
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) < 8] - ftab[(b) << 8])
836c836
<          s->nInUse++;
---
>          s-nInUse++;
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
835c835
<          s->unseqToSeq[i] = s->nInUse;
---
>          s->unseqToSeq[i] = s-nInUse;
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) < 8])
835c835
<          s->unseqToSeq[i] = s->nInUse;
---
>          s-unseqToSeq[i] = s->nInUse;
730c730
< #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
---
> #define SETMASK (1  (zz3) ? (zz2) : (zz3))
832c832
<    s->nInUse = 0;
---
>    s-nInUse = 0;
833,834c833,834
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
---
>    for (i = 0; i  256; i++)
>       if (s-inUse[i]) {
859c859
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; i = EOB; i++) s-mtfFreq[i] = 0;
863c863
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i  s-nInUse; i++) yy[i] = (UChar) i;
865c865
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i  s-nblock; i++) {
867c867
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr = i, "generateMTFValues(1)" );
869c869
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s-unseqToSeq[block[j]];
868c868
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr[i]-1; if (j  0) j += s-nblock;
1016c1016
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1017c1017
<        workFactor < 0 || workFactor > 250)
---
>        workFactor  0 || workFactor  250)
1143c1143
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity  0 || verbosity  4) return BZ_PARAM_ERROR;
1263c1263
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        (blockSize100k  1 || blockSize100k  9) ||
1264c1264
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor  0 || workFactor  250) ||
1265c1265
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity  0 || verbosity  4))
1308c1308
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1310c1310
<    if (!(bzf->writing))
---
>    if (!(bzf-writing))
1328c1328
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf->strm.avail_out  BZ_MAX_UNUSED) 
1330c1330
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf-strm.avail_in == 0)
1408c1408
<        (verbosity < 0 || verbosity > 4) ||
---
>        (verbosity  0 || verbosity  4) ||
1410c1410
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused  0 || nUnused  BZ_MAX_UNUSED)))
1474c1474
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if (bzf == NULL || buf == NULL || len  0)
1477c1477
<    if (bzf->writing)
---
>    if (bzf-writing)
1532c1532
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>        blockSize100k  1 || blockSize100k  9 ||
1533c1533
<        verbosity < 0 || verbosity > 4 ||
---
>        verbosity  0 || verbosity  4 ||
1534c1534
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor  0 || workFactor  250) 
1583c1583
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity  0 || verbosity  4) 
1782c1782
< #include <signal.h>
---
> #include signal.h
1783c1783
< #include <errno.h>
---
> #include errno.h
1794c1794
< #   include <fcntl.h>
---
> #   include fcntl.h
1795c1795
< #   include <utime.h>
---
> #   include utime.h
===< pass_clang :: remove-namespace >===
===< pass_clang :: aggregate-to-scalar >===
845a846
>    UChar yy_0;
863c864
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
872c873
<       if (yy[0] == ll_i) { 
---
>       if (yy_0 == ll_i) { 
882c883
<             yy[1] = yy[0];
---
>             yy[1] = yy_0;
886,887c887,888
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy_0 = rtmp;
>             j = ryy_j - &(yy_0);
852a853
>    UInt32 ptr_0;
868c869
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if (j < 0) j += s->nblock;
(84.8 %, 31115 bytes)
853a854
>    UInt32 ptr_0;
869c870
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if (j < 0) j += s->nblock;
854a855
>    UChar block_0;
870c871
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block_0];
(84.8 %, 31131 bytes)
855a856
>    UChar block_0;
871c872
<       ll_i = s->unseqToSeq[block[j]];
---
>       ll_i = s->unseqToSeq[block_0];
845a846
>    UChar yy_1;
883,885c884,886
<             rtmp  = yy[1];
<             yy[1] = yy_0;
<             ryy_j = &(yy[1]);
---
>             rtmp  = yy_1;
>             yy_1 = yy_0;
>             ryy_j = &(yy_1);
(84.8 %, 31148 bytes)
845a846
>    UChar yy_1;
884,886c885,887
<             rtmp  = yy[1];
<             yy[1] = yy_0;
<             ryy_j = &(yy[1]);
---
>             rtmp  = yy_1;
>             yy_1 = yy_0;
>             ryy_j = &(yy_1);
857a858
>    UInt16 mtfv_0;
891c892
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
899c900
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
(84.8 %, 31160 bytes)
858a859
>    UInt16 mtfv_0;
892c893
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
900c901
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
1015a1016
>    bz_stream *s_0;
1030c1031
<    s->strm = strm;
---
>    s_0 = strm;
(84.8 %, 31174 bytes)
1016a1017
>    bz_stream *s_0;
1031c1032
<    s->strm = strm;
---
>    s_0 = strm;
1016a1017
>    UInt32 *s_4;
1038c1039
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
1054c1055
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (UInt16*)s_4;
1056c1057
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (UInt32*)s_4;
(84.8 %, 31189 bytes)
1016a1017
>    UInt32 *s_4;
1039c1040
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeof(UInt32) );
1055c1056
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->mtfv              = (UInt16*)s_4;
1057c1058
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->ptr               = (UInt32*)s_4;
1016a1017
>    UInt32 *s_5;
1040c1041
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1054c1055
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (UChar*)s_5;
(84.8 %, 31193 bytes)
1016a1017
>    UInt32 *s_5;
1041c1042
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
1055c1056
<    s->block             = (UChar*)s->arr2;
---
>    s->block             = (UChar*)s_5;
1016a1017
>    UInt32 *s_6;
1042c1043
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
(84.8 %, 31201 bytes)
1016a1017
>    UInt32 *s_6;
1043c1044
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
1016a1017
>    Int32 s_2;
1048c1049
<    s->state             = BZ_S_INPUT;
---
>    s_2             = BZ_S_INPUT;
(84.8 %, 31213 bytes)
1016a1017
>    Int32 s_2;
1049c1050
<    s->state             = BZ_S_INPUT;
---
>    s_2             = BZ_S_INPUT;
1016a1017
>    Int32 s_1;
1050c1051
<    s->mode              = BZ_M_RUNNING;
---
>    s_1              = BZ_M_RUNNING;
(84.8 %, 31222 bytes)
1016a1017
>    Int32 s_1;
1051c1052
<    s->mode              = BZ_M_RUNNING;
---
>    s_1              = BZ_M_RUNNING;
1016a1017
>    UInt32 s_27;
1052c1053
<    s->combinedCRC       = 0;
---
>    s_27       = 0;
(84.8 %, 31232 bytes)
1016a1017
>    UInt32 s_27;
1053c1054
<    s->combinedCRC       = 0;
---
>    s_27       = 0;
1016a1017
>    Int32 s_30;
1054c1055
<    s->blockSize100k     = blockSize100k;
---
>    s_30     = blockSize100k;
(84.8 %, 31238 bytes)
1016a1017
>    Int32 s_30;
1055c1056
<    s->blockSize100k     = blockSize100k;
---
>    s_30     = blockSize100k;
1016a1017
>    Int32 s_18;
1056c1057
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 19;
(84.8 %, 31241 bytes)
1016a1017
>    Int32 s_18;
1057c1058
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 19;
1016a1017
>    Int32 s_28;
1058c1059
<    s->verbosity         = verbosity;
---
>    s_28         = verbosity;
(84.8 %, 31248 bytes)
1016a1017
>    Int32 s_28;
1059c1060
<    s->verbosity         = verbosity;
---
>    s_28         = verbosity;
1016a1017
>    Int32 s_12;
1060c1061
<    s->workFactor        = workFactor;
---
>    s_12        = workFactor;
(84.7 %, 31255 bytes)
1016a1017
>    Int32 s_12;
1061c1062
<    s->workFactor        = workFactor;
---
>    s_12        = workFactor;
1016a1017
>    UChar *s_9;
1063c1064
<    s->block             = (UChar*)s_5;
---
>    s_9             = (UChar*)s_5;
(84.7 %, 31261 bytes)
1016a1017
>    UChar *s_9;
1064c1065
<    s->block             = (UChar*)s_5;
---
>    s_9             = (UChar*)s_5;
1016a1017
>    UInt16 *s_10;
1065c1066
<    s->mtfv              = (UInt16*)s_4;
---
>    s_10              = (UInt16*)s_4;
(84.7 %, 31271 bytes)
1016a1017
>    UInt16 *s_10;
1066c1067
<    s->mtfv              = (UInt16*)s_4;
---
>    s_10              = (UInt16*)s_4;
1016a1017
>    UInt32 *s_8;
1068c1069
<    s->ptr               = (UInt32*)s_4;
---
>    s_8               = (UInt32*)s_4;
(84.7 %, 31285 bytes)
1016a1017
>    UInt32 *s_8;
1069c1070
<    s->ptr               = (UInt32*)s_4;
---
>    s_8               = (UInt32*)s_4;
1113a1114
>    bz_stream *s_0;
1117c1118
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.7 %, 31298 bytes)
1114a1115
>    bz_stream *s_0;
1118c1119
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1114a1115
>    Int32 s_1;
1121c1122
<    switch (s->mode) 
---
>    switch (s_1) 
1129a1130
>    bz_stream *s_0;
1133c1134
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.7 %, 31313 bytes)
1114a1115
>    Int32 s_1;
1122c1123
<    switch (s->mode) 
---
>    switch (s_1) 
1130a1131
>    bz_stream *s_0;
1134c1135
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.7 %, 31323 bytes)
1131a1132
>    bz_stream *s_0;
1135c1136
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1158a1159
>    bz_stream *s_0;
1171c1172
<    s->strm                  = strm;
---
>    s_0                  = strm;
(84.7 %, 31338 bytes)
1159a1160
>    bz_stream *s_0;
1172c1173
<    s->strm                  = strm;
---
>    s_0                  = strm;
1159a1160
>    Int32 s_1;
1174c1175
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
(84.7 %, 31353 bytes)
1159a1160
>    Int32 s_1;
1175c1176
<    s->state                 = BZ_X_MAGIC_1;
---
>    s_1                 = BZ_X_MAGIC_1;
1159a1160
>    Int32 s_8;
1176c1177
<    s->bsLive                = 0;
---
>    s_8                = 0;
(84.7 %, 31362 bytes)
1159a1160
>    Int32 s_8;
1177c1178
<    s->bsLive                = 0;
---
>    s_8                = 0;
1159a1160
>    UInt32 s_7;
1178c1179
<    s->bsBuff                = 0;
---
>    s_7                = 0;
(84.7 %, 31370 bytes)
1159a1160
>    UInt32 s_7;
1179c1180
<    s->bsBuff                = 0;
---
>    s_7                = 0;
1159a1160
>    UInt32 s_26;
1180c1181
<    s->calculatedCombinedCRC = 0;
---
>    s_26 = 0;
(84.7 %, 31379 bytes)
1159a1160
>    UInt32 s_26;
1181c1182
<    s->calculatedCombinedCRC = 0;
---
>    s_26 = 0;
1159a1160
>    Bool s_10;
1186c1187
<    s->smallDecompress       = (Bool)small;
---
>    s_10       = (Bool)small;
1159a1160
>    Int32 s_11;
1190c1191
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
(84.7 %, 31375 bytes)
1159a1160
>    Bool s_10;
1187c1188
<    s->smallDecompress       = (Bool)small;
---
>    s_10       = (Bool)small;
1159a1160
>    Int32 s_11;
1191c1192
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
(84.7 %, 31375 bytes)
1159a1160
>    Int32 s_11;
1192c1193
<    s->currBlockNo           = 0;
---
>    s_11           = 0;
1159a1160
>    Int32 s_12;
1193c1194
<    s->verbosity             = verbosity;
---
>    s_12             = verbosity;
(84.7 %, 31380 bytes)
1159a1160
>    Int32 s_12;
1194c1195
<    s->verbosity             = verbosity;
---
>    s_12             = verbosity;
1220a1221
>    bz_stream *s_0;
1224c1225
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.7 %, 31387 bytes)
1221a1222
>    bz_stream *s_0;
1225c1226
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1238a1239
>    bz_stream *s_0;
1242c1243
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
(84.7 %, 31402 bytes)
1239a1240
>    bz_stream *s_0;
1243c1244
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s_0 != strm) return BZ_PARAM_ERROR;
1336a1337
>    Bool bzf_3;
1341c1342
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
(84.7 %, 31417 bytes)
1337a1338
>    Bool bzf_3;
1342c1343
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
1337a1338
>    unsigned int bzf_4_1;
1350c1351
<    bzf->strm.avail_in = len;
---
>    bzf_4_1 = len;
1362c1363
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf_4_1 == 0)
(84.7 %, 31425 bytes)
1337a1338
>    unsigned int bzf_4_1;
1351c1352
<    bzf->strm.avail_in = len;
---
>    bzf_4_1 = len;
1363c1364
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf_4_1 == 0)
1337a1338
>    char *bzf_4_0;
1352c1353
<    bzf->strm.next_in  = buf;
---
>    bzf_4_0  = buf;
(84.7 %, 31428 bytes)
1337a1338
>    char *bzf_4_0;
1353c1354
<    bzf->strm.next_in  = buf;
---
>    bzf_4_0  = buf;
1337a1338
>    unsigned int bzf_4_5;
1356c1357
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1362c1363
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
(84.7 %, 31436 bytes)
1337a1338
>    unsigned int bzf_4_5;
1357c1358
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       bzf_4_5 = BZ_MAX_UNUSED;
1363c1364
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (bzf_4_5 < BZ_MAX_UNUSED) 
1337a1338
>    char *bzf_4_4;
1358c1359
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
(84.7 %, 31437 bytes)
1337a1338
>    char *bzf_4_4;
1359c1360
<       bzf->strm.next_out = bzf->buf;
---
>       bzf_4_4 = bzf->buf;
1395a1396
>    Bool bzf_3;
1399c1400
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
(84.7 %, 31444 bytes)
1396a1397
>    Bool bzf_3;
1400c1401
<    if (!(bzf->writing))
---
>    if (!(bzf_3))
1438a1439
>    Bool bzf_6;
1459c1460
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1476c1477
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
(84.7 %, 31452 bytes)
1439a1440
>    Bool bzf_6;
1460c1461
<    bzf->initialisedOk = False;
---
>    bzf_6 = False;
1477c1478
<    bzf->initialisedOk = True;
---
>    bzf_6 = True;
1439a1440
>    Int32 bzf_2;
1462c1463
<    bzf->bufN          = 0;
---
>    bzf_2          = 0;
1474c1475
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->strm.avail_in = bzf_2;
(84.7 %, 31441 bytes)
1439a1440
>    Int32 bzf_2;
1463c1464
<    bzf->bufN          = 0;
---
>    bzf_2          = 0;
1475c1476
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->strm.avail_in = bzf_2;
1439a1440
>    Bool bzf_3;
1464c1465
<    bzf->writing       = False;
---
>    bzf_3       = False;
(84.7 %, 31449 bytes)
1439a1440
>    Bool bzf_3;
1465c1466
<    bzf->writing       = False;
---
>    bzf_3       = False;
1439a1440
>    unsigned int bzf_4_1;
1476c1477
<    bzf->strm.avail_in = bzf_2;
---
>    bzf_4_1 = bzf_2;
(84.7 %, 31457 bytes)
1439a1440
>    unsigned int bzf_4_1;
1477c1478
<    bzf->strm.avail_in = bzf_2;
---
>    bzf_4_1 = bzf_2;
1439a1440
>    char *bzf_4_0;
1478c1479
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
(84.6 %, 31471 bytes)
1439a1440
>    char *bzf_4_0;
1479c1480
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf_4_0  = bzf->buf;
1489a1490
>    Bool bzf_3;
1495c1496
<    if (bzf->writing)
---
>    if (bzf_3)
(84.6 %, 31479 bytes)
1490a1491
>    Bool bzf_3;
1496c1497
<    if (bzf->writing)
---
>    if (bzf_3)
1490a1491
>    Bool bzf_6;
1499c1500
<    if (bzf->initialisedOk)
---
>    if (bzf_6)
(84.6 %, 31487 bytes)
1490a1491
>    Bool bzf_6;
1500c1501
<    if (bzf->initialisedOk)
---
>    if (bzf_6)
1514a1515
>    Bool bzf_3;
1521c1522
<    if (bzf->writing)
---
>    if (bzf_3)
(84.6 %, 31489 bytes)
1515a1516
>    Bool bzf_3;
1522c1523
<    if (bzf->writing)
---
>    if (bzf_3)
1515a1516
>    unsigned int bzf_4_5;
1528c1529
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
(84.6 %, 31497 bytes)
1515a1516
>    unsigned int bzf_4_5;
1529c1530
<    bzf->strm.avail_out = len;
---
>    bzf_4_5 = len;
1515a1516
>    char *bzf_4_4;
1530c1531
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
(84.6 %, 31510 bytes)
1515a1516
>    char *bzf_4_4;
1531c1532
<    bzf->strm.next_out = buf;
---
>    bzf_4_4 = buf;
1546a1547
>    Int32 bzf_5;
1549c1550
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf_5 != BZ_STREAM_END)
(84.6 %, 31517 bytes)
1547a1548
>    Int32 bzf_5;
1550c1551
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if (bzf_5 != BZ_STREAM_END)
1547a1548
>    unsigned int bzf_4_1;
1556c1557
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
(84.6 %, 31526 bytes)
1547a1548
>    unsigned int bzf_4_1;
1557c1558
<    *nUnused = bzf->strm.avail_in;
---
>    *nUnused = bzf_4_1;
1547a1548
>    char *bzf_4_0;
1558c1559
<    *unused = bzf->strm.next_in;
---
>    *unused = bzf_4_0;
1576a1577
>    char *strm_0;
1593c1594
<    strm.next_in = source;
---
>    strm_0 = source;
(84.6 %, 31540 bytes)
1547a1548
>    char *bzf_4_0;
1559c1560
<    *unused = bzf->strm.next_in;
---
>    *unused = bzf_4_0;
1577a1578
>    char *strm_0;
1594c1595
<    strm.next_in = source;
---
>    strm_0 = source;
(84.6 %, 31548 bytes)
1578a1579
>    char *strm_0;
1595c1596
<    strm.next_in = source;
---
>    strm_0 = source;
1578a1579
>    char *strm_4;
1596c1597
<    strm.next_out = dest;
---
>    strm_4 = dest;
(84.6 %, 31559 bytes)
1578a1579
>    char *strm_4;
1597c1598
<    strm.next_out = dest;
---
>    strm_4 = dest;
1578a1579
>    unsigned int strm_1;
1598c1599
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
(84.6 %, 31569 bytes)
1578a1579
>    unsigned int strm_1;
1599c1600
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
1578a1579
>    unsigned int strm_5;
1600c1601
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1607c1608
<    *destLen -= strm.avail_out;   
---
>    *destLen -= strm_5;   
(84.6 %, 31586 bytes)
1578a1579
>    unsigned int strm_5;
1601c1602
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1608c1609
<    *destLen -= strm.avail_out;   
---
>    *destLen -= strm_5;   
1631a1632
>    char *strm_0;
1646c1647
<    strm.next_in = source;
---
>    strm_0 = source;
(84.6 %, 31594 bytes)
1632a1633
>    char *strm_0;
1647c1648
<    strm.next_in = source;
---
>    strm_0 = source;
1632a1633
>    char *strm_4;
1648c1649
<    strm.next_out = dest;
---
>    strm_4 = dest;
(84.6 %, 31605 bytes)
1632a1633
>    char *strm_4;
1649c1650
<    strm.next_out = dest;
---
>    strm_4 = dest;
1632a1633
>    unsigned int strm_1;
1650c1651
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
(84.6 %, 31615 bytes)
1632a1633
>    unsigned int strm_1;
1651c1652
<    strm.avail_in = sourceLen;
---
>    strm_1 = sourceLen;
1632a1633
>    unsigned int strm_5;
1652c1653
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1659c1660
<    *destLen -= strm.avail_out;
---
>    *destLen -= strm_5;
1664c1665
<    if (strm.avail_out > 0) {
---
>    if (strm_5 > 0) {
(84.6 %, 31632 bytes)
1632a1633
>    unsigned int strm_5;
1653c1654
<    strm.avail_out = *destLen;
---
>    strm_5 = *destLen;
1660c1661
<    *destLen -= strm.avail_out;
---
>    *destLen -= strm_5;
1665c1666
<    if (strm.avail_out > 0) {
---
>    if (strm_5 > 0) {
1792a1793
> static char *bzerrorstrings_0 = "OK";
1801c1802
<    return bzerrorstrings[err*-1];
---
>    return bzerrorstrings_0;
(84.6 %, 31632 bytes)
1793a1794
> static char *bzerrorstrings_0 = "OK";
1802c1803
<    return bzerrorstrings[err*-1];
---
>    return bzerrorstrings_0;
(84.5 %, 31664 bytes)
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-size >===
845c845
<    UChar   yy[256];
---
>    UChar   yy[1];
1776c1776
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[1] = {
(84.6 %, 31662 bytes)
1776c1776
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[1] = {
(84.5 %, 31663 bytes)
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: simplify-struct >===
===< pass_special :: c >===
===< pass_ints :: a >===
94c94
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.6 %, 31662 bytes)
94c94
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.6 %, 31661 bytes)
94c94
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
194c194
<       int        fd,
---
>       int        d,
(84.6 %, 31660 bytes)
194c194
<       int        fd,
---
>       int        d,
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
(84.6 %, 31659 bytes)
278c278
< #define BZ_HDR_B 0x42   
---
> #define BZ_HDR_B 0x2   
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
(84.6 %, 31658 bytes)
279c279
< #define BZ_HDR_Z 0x5a   
---
> #define BZ_HDR_Z 0xa   
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
(84.6 %, 31657 bytes)
280c280
< #define BZ_HDR_h 0x68   
---
> #define BZ_HDR_h 0x8   
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
(84.6 %, 31656 bytes)
281c281
< #define BZ_HDR_0 0x30   
---
> #define BZ_HDR_0 0x0   
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.6 %, 31655 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define BZ_MAX_ALPHA_SIZE 58
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.6 %, 31654 bytes)
285c285
< #define BZ_MAX_ALPHA_SIZE 58
---
> #define BZ_MAX_ALPHA_SIZE 8
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
(84.6 %, 31653 bytes)
286c286
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_MAX_CODE_LEN    3
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
(84.6 %, 31652 bytes)
292c292
< #define BZ_G_SIZE   50
---
> #define BZ_G_SIZE   0
295c295
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.6 %, 31651 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.6 %, 31650 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.6 %, 31649 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (000 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.6 %, 31648 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (00 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
(84.6 %, 31647 bytes)
345c345
< #define BZ_N_QSORT 12
---
> #define BZ_N_QSORT 2
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.6 %, 31646 bytes)
346c346
< #define BZ_N_SHELL 18
---
> #define BZ_N_SHELL 8
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(84.6 %, 31645 bytes)
395c395
<       Bool     inUse[256];
---
>       Bool     inUse[56];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(84.6 %, 31644 bytes)
395c395
<       Bool     inUse[56];
---
>       Bool     inUse[6];
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
(84.6 %, 31643 bytes)
396c396
<       UChar    unseqToSeq[256];
---
>       UChar    unseqToSeq[56];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.6 %, 31642 bytes)
396c396
<       UChar    unseqToSeq[56];
---
>       UChar    unseqToSeq[6];
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
(84.6 %, 31641 bytes)
447c447
< #define BZ_X_MAGIC_1     10
---
> #define BZ_X_MAGIC_1     0
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
(84.6 %, 31640 bytes)
448c448
< #define BZ_X_MAGIC_2     11
---
> #define BZ_X_MAGIC_2     1
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(84.6 %, 31639 bytes)
449c449
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_MAGIC_3     2
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
(84.6 %, 31638 bytes)
450c450
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_MAGIC_4     3
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
(84.6 %, 31637 bytes)
451c451
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_BLKHDR_1    4
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
(84.6 %, 31636 bytes)
452c452
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_BLKHDR_2    5
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(84.6 %, 31635 bytes)
453c453
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_BLKHDR_3    6
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
(84.6 %, 31634 bytes)
454c454
< #define BZ_X_BLKHDR_4    17
---
> #define BZ_X_BLKHDR_4    7
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(84.6 %, 31633 bytes)
455c455
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_BLKHDR_5    8
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
(84.6 %, 31632 bytes)
456c456
< #define BZ_X_BLKHDR_6    19
---
> #define BZ_X_BLKHDR_6    9
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
(84.6 %, 31631 bytes)
457c457
< #define BZ_X_BCRC_1      20
---
> #define BZ_X_BCRC_1      0
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(84.6 %, 31630 bytes)
458c458
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_BCRC_2      1
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
(84.6 %, 31629 bytes)
459c459
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_BCRC_3      2
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
(84.6 %, 31628 bytes)
460c460
< #define BZ_X_BCRC_4      23
---
> #define BZ_X_BCRC_4      3
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
(84.6 %, 31627 bytes)
461c461
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_RANDBIT     4
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
(84.6 %, 31626 bytes)
462c462
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_ORIGPTR_1   5
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
(84.6 %, 31625 bytes)
463c463
< #define BZ_X_ORIGPTR_2   26
---
> #define BZ_X_ORIGPTR_2   6
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
(84.6 %, 31624 bytes)
464c464
< #define BZ_X_ORIGPTR_3   27
---
> #define BZ_X_ORIGPTR_3   7
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
(84.6 %, 31623 bytes)
465c465
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAPPING_1   8
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
(84.6 %, 31622 bytes)
466c466
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_MAPPING_2   9
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(84.6 %, 31621 bytes)
467c467
< #define BZ_X_SELECTOR_1  30
---
> #define BZ_X_SELECTOR_1  0
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
(84.6 %, 31620 bytes)
468c468
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_SELECTOR_2  1
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
(84.6 %, 31619 bytes)
469c469
< #define BZ_X_SELECTOR_3  32
---
> #define BZ_X_SELECTOR_3  2
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
(84.6 %, 31618 bytes)
470c470
< #define BZ_X_CODING_1    33
---
> #define BZ_X_CODING_1    3
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(84.6 %, 31617 bytes)
471c471
< #define BZ_X_CODING_2    34
---
> #define BZ_X_CODING_2    4
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
(84.6 %, 31616 bytes)
472c472
< #define BZ_X_CODING_3    35
---
> #define BZ_X_CODING_3    5
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
(84.6 %, 31615 bytes)
473c473
< #define BZ_X_MTF_1       36
---
> #define BZ_X_MTF_1       6
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(84.6 %, 31614 bytes)
474c474
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MTF_2       7
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
(84.6 %, 31613 bytes)
475c475
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MTF_3       8
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(84.6 %, 31612 bytes)
476c476
< #define BZ_X_MTF_4       39
---
> #define BZ_X_MTF_4       9
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
(84.6 %, 31611 bytes)
477c477
< #define BZ_X_MTF_5       40
---
> #define BZ_X_MTF_5       0
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
(84.6 %, 31610 bytes)
478c478
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MTF_6       1
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
(84.6 %, 31609 bytes)
479c479
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_ENDHDR_2    2
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
(84.6 %, 31608 bytes)
480c480
< #define BZ_X_ENDHDR_3    43
---
> #define BZ_X_ENDHDR_3    3
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
(84.6 %, 31607 bytes)
481c481
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_ENDHDR_4    4
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(84.6 %, 31606 bytes)
482c482
< #define BZ_X_ENDHDR_5    45
---
> #define BZ_X_ENDHDR_5    5
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
(84.6 %, 31605 bytes)
483c483
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_6    6
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
(84.6 %, 31604 bytes)
484c484
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_CCRC_1      7
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
(84.6 %, 31603 bytes)
485c485
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_CCRC_2      8
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
(84.6 %, 31602 bytes)
486c486
< #define BZ_X_CCRC_3      49
---
> #define BZ_X_CCRC_3      9
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(84.6 %, 31601 bytes)
487c487
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_CCRC_4      0
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
(84.6 %, 31600 bytes)
493c493
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 096
494c494
< #define MTFL_SIZE 16
---
> #define MTFL_SIZE 6
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
(84.6 %, 31599 bytes)
528c528
<       Int32    unzftab[256];
---
>       Int32    unzftab[56];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.6 %, 31598 bytes)
528c528
<       Int32    unzftab[56];
---
>       Int32    unzftab[6];
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
(84.6 %, 31597 bytes)
530c530
<       Int32    cftab[257];
---
>       Int32    cftab[57];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
(84.6 %, 31596 bytes)
530c530
<       Int32    cftab[57];
---
>       Int32    cftab[7];
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
(84.6 %, 31595 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       Int32    cftabCopy[57];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.6 %, 31594 bytes)
531c531
<       Int32    cftabCopy[57];
---
>       Int32    cftabCopy[7];
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.6 %, 31593 bytes)
548c548
<       Bool     inUse[256];
---
>       Bool     inUse[56];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(84.6 %, 31592 bytes)
548c548
<       Bool     inUse[56];
---
>       Bool     inUse[6];
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
(84.6 %, 31591 bytes)
549c549
<       Bool     inUse16[16];
---
>       Bool     inUse16[6];
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
(84.6 %, 31590 bytes)
550c550
<       UChar    seqToUnseq[256];
---
>       UChar    seqToUnseq[56];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.6 %, 31589 bytes)
550c550
<       UChar    seqToUnseq[56];
---
>       UChar    seqToUnseq[6];
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
(84.6 %, 31588 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       Int32    mtfbase[56 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(84.6 %, 31587 bytes)
554c554
<       Int32    mtfbase[56 / MTFL_SIZE];
---
>       Int32    mtfbase[6 / MTFL_SIZE];
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
(84.6 %, 31586 bytes)
597c597
< #define BZ_GET_FAST(cccc)                     \
---
> #define BZ_GET_FAST(ccc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(84.6 %, 31585 bytes)
597c597
< #define BZ_GET_FAST(ccc)                     \
---
> #define BZ_GET_FAST(cc)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.6 %, 31584 bytes)
597c597
< #define BZ_GET_FAST(cc)                     \
---
> #define BZ_GET_FAST(c)                     \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
(84.6 %, 31583 bytes)
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xff);           \
599c599
<     cccc = (UChar)(s->tPos & 0xff);           \
---
>     cccc = (UChar)(s->tPos & 0xf);           \
(84.6 %, 31582 bytes)
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xff);           \
599c599
<     ccc = (UChar)(s->tPos & 0xff);           \
---
>     ccc = (UChar)(s->tPos & 0xf);           \
(84.6 %, 31581 bytes)
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xff);           \
599c599
<     cc = (UChar)(s->tPos & 0xff);           \
---
>     cc = (UChar)(s->tPos & 0xf);           \
(84.6 %, 31580 bytes)
599c599
<     c = (UChar)(s->tPos & 0xff);           \
---
>     c = (UChar)(s->tPos & 0xf);           \
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
(84.6 %, 31579 bytes)
602c602
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FAST_C(ccc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
(84.6 %, 31578 bytes)
602c602
< #define BZ_GET_FAST_C(ccc)                   \
---
> #define BZ_GET_FAST_C(cc)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.6 %, 31577 bytes)
602c602
< #define BZ_GET_FAST_C(cc)                   \
---
> #define BZ_GET_FAST_C(c)                   \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
(84.6 %, 31576 bytes)
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xff);            \
604c604
<     cccc = (UChar)(c_tPos & 0xff);            \
---
>     cccc = (UChar)(c_tPos & 0xf);            \
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
(84.6 %, 31575 bytes)
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xff);            \
604c604
<     ccc = (UChar)(c_tPos & 0xff);            \
---
>     ccc = (UChar)(c_tPos & 0xf);            \
(84.6 %, 31574 bytes)
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xff);            \
604c604
<     cc = (UChar)(c_tPos & 0xff);            \
---
>     cc = (UChar)(c_tPos & 0xf);            \
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
(84.6 %, 31573 bytes)
604c604
<     c = (UChar)(c_tPos & 0xff);            \
---
>     c = (UChar)(c_tPos & 0xf);            \
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
708c708
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(84.6 %, 31572 bytes)
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
708c708
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(84.6 %, 31571 bytes)
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0x1f)
---
> #define UNALIGNED_BH(zz)  ((zz) & 0xf)
708c708
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
(84.6 %, 31570 bytes)
708c708
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define MAIN_QSORT_SMALL_THRESH 0
710c710
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
833c833
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.6 %, 31569 bytes)
710c710
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define MAIN_QSORT_STACK_SIZE 00
833c833
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
(84.6 %, 31568 bytes)
710c710
< #define MAIN_QSORT_STACK_SIZE 00
---
> #define MAIN_QSORT_STACK_SIZE 0
833c833
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
(84.6 %, 31567 bytes)
833c833
<    for (i = 0; i < 256; i++)
---
>    for (i = 0; i < 56; i++)
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
909c909
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.6 %, 31566 bytes)
833c833
<    for (i = 0; i < 56; i++)
---
>    for (i = 0; i < 6; i++)
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
(84.6 %, 31565 bytes)
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(2a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
909c909
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
(84.6 %, 31564 bytes)
909c909
< #define BZ_GREATER_ICOST 15
---
> #define BZ_GREATER_ICOST 5
1036c1036
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1039c1039
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.6 %, 31563 bytes)
1036c1036
<        workFactor < 0 || workFactor > 250)
---
>        workFactor < 0 || workFactor > 50)
1039c1039
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1051c1051
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
(84.6 %, 31562 bytes)
1036c1036
<        workFactor < 0 || workFactor > 50)
---
>        workFactor < 0 || workFactor > 0)
1039c1039
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.6 %, 31561 bytes)
1039c1039
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1051c1051
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.6 %, 31560 bytes)
1051c1051
<    n       = 100000 * blockSize100k;
---
>    n       = 00000 * blockSize100k;
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.6 %, 31559 bytes)
1051c1051
<    n       = 00000 * blockSize100k;
---
>    n       = 0000 * blockSize100k;
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.6 %, 31558 bytes)
1051c1051
<    n       = 0000 * blockSize100k;
---
>    n       = 000 * blockSize100k;
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.6 %, 31557 bytes)
1051c1051
<    n       = 000 * blockSize100k;
---
>    n       = 00 * blockSize100k;
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.6 %, 31556 bytes)
1051c1051
<    n       = 00 * blockSize100k;
---
>    n       = 0 * blockSize100k;
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
(84.6 %, 31555 bytes)
1054c1054
<    s_6 = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.6 %, 31554 bytes)
1054c1054
<    s_6 = BZALLOC( 5537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 537              * sizeof(UInt32) );
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.6 %, 31553 bytes)
1054c1054
<    s_6 = BZALLOC( 537              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 37              * sizeof(UInt32) );
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.6 %, 31552 bytes)
1054c1054
<    s_6 = BZALLOC( 37              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 7              * sizeof(UInt32) );
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
(84.6 %, 31551 bytes)
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 19;
1063c1063
<    s_18         = 100000 * blockSize100k - 19;
---
>    s_18         = 100000 * blockSize100k - 9;
1230c1230
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
(84.6 %, 31550 bytes)
1063c1063
<    s_18         = 00000 * blockSize100k - 19;
---
>    s_18         = 0000 * blockSize100k - 19;
1063c1063
<    s_18         = 00000 * blockSize100k - 19;
---
>    s_18         = 00000 * blockSize100k - 9;
(84.6 %, 31549 bytes)
1063c1063
<    s_18         = 0000 * blockSize100k - 19;
---
>    s_18         = 000 * blockSize100k - 19;
1063c1063
<    s_18         = 0000 * blockSize100k - 19;
---
>    s_18         = 0000 * blockSize100k - 9;
(84.6 %, 31548 bytes)
1063c1063
<    s_18         = 000 * blockSize100k - 19;
---
>    s_18         = 00 * blockSize100k - 19;
1063c1063
<    s_18         = 000 * blockSize100k - 19;
---
>    s_18         = 000 * blockSize100k - 9;
(84.6 %, 31547 bytes)
1063c1063
<    s_18         = 00 * blockSize100k - 19;
---
>    s_18         = 0 * blockSize100k - 19;
1063c1063
<    s_18         = 00 * blockSize100k - 19;
---
>    s_18         = 00 * blockSize100k - 9;
(84.6 %, 31546 bytes)
1063c1063
<    s_18         = 0 * blockSize100k - 19;
---
>    s_18         = 0 * blockSize100k - 9;
1230c1230
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1261c1261
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.6 %, 31545 bytes)
1230c1230
<    AssertH ( 0, 6001 );
---
>    AssertH ( 0, 001 );
1261c1261
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1296c1296
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.6 %, 31544 bytes)
1230c1230
<    AssertH ( 0, 001 );
---
>    AssertH ( 0, 01 );
1261c1261
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.6 %, 31543 bytes)
1230c1230
<    AssertH ( 0, 01 );
---
>    AssertH ( 0, 1 );
1261c1261
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
(84.6 %, 31542 bytes)
1261c1261
< #define BZ_SETERR(eee)                    \
---
> #define BZ_SETERR(ee)                    \
1296c1296
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1316c1316
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.6 %, 31541 bytes)
1261c1261
< #define BZ_SETERR(ee)                    \
---
> #define BZ_SETERR(e)                    \
1296c1296
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
(84.6 %, 31540 bytes)
1296c1296
<        (workFactor < 0 || workFactor > 250) ||
---
>        (workFactor < 0 || workFactor > 50) ||
1316c1316
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1589c1589
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
(84.6 %, 31539 bytes)
1296c1296
<        (workFactor < 0 || workFactor > 50) ||
---
>        (workFactor < 0 || workFactor > 0) ||
1316c1316
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.6 %, 31538 bytes)
1316c1316
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1589c1589
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
(84.6 %, 31537 bytes)
1589c1589
<        workFactor < 0 || workFactor > 250) 
---
>        workFactor < 0 || workFactor > 50) 
1592c1592
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
(84.6 %, 31536 bytes)
1589c1589
<        workFactor < 0 || workFactor > 50) 
---
>        workFactor < 0 || workFactor > 0) 
1592c1592
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1694c1694
<                  int fd,             
---
>                  int d,             
(84.6 %, 31535 bytes)
1592c1592
<    if (workFactor == 0) workFactor = 30;
---
>    if (workFactor == 0) workFactor = 0;
1694c1694
<                  int fd,             
---
>                  int d,             
(84.6 %, 31534 bytes)
1694c1694
<                  int fd,             
---
>                  int d,             
1712c1712
<                ( int fd,
---
>                ( int d,
1715c1715
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1869c1869
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
(84.6 %, 31533 bytes)
1712c1712
<                ( int fd,
---
>                ( int d,
1715c1715
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopen(NULL,d,mode,1);
1869c1869
< #   define SET_BINARY_MODE(fd) 
---
> #   define SET_BINARY_MODE(d) 
1910c1910
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
(84.6 %, 31532 bytes)
1910c1910
< #define FILE_NAME_LEN 1034
---
> #define FILE_NAME_LEN 034
2121c2121
<    Cell;
---
>    ell;
(84.6 %, 31531 bytes)
1910c1910
< #define FILE_NAME_LEN 034
---
> #define FILE_NAME_LEN 04
2121c2121
<    Cell;
---
>    ell;
(84.6 %, 31530 bytes)
1910c1910
< #define FILE_NAME_LEN 04
---
> #define FILE_NAME_LEN 4
2121c2121
<    Cell;
---
>    ell;
(84.6 %, 31529 bytes)
2121c2121
<    Cell;
---
>    ell;
(84.6 %, 31528 bytes)
Termination check: size was 204936; now 31528
===< pass_ternary :: b >===
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (1)
(84.6 %, 31505 bytes)
===< pass_balanced :: parens-only >===
20c20
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_SEQUENCE_ERROR    -1
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
(84.6 %, 31503 bytes)
21c21
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_PARAM_ERROR       -2
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
(84.6 %, 31501 bytes)
22c22
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_MEM_ERROR         -3
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
(84.6 %, 31499 bytes)
23c23
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_DATA_ERROR        -4
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
(84.6 %, 31497 bytes)
24c24
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_DATA_ERROR_MAGIC  -5
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
(84.6 %, 31495 bytes)
25c25
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_IO_ERROR          -6
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
(84.6 %, 31493 bytes)
26c26
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_UNEXPECTED_EOF    -7
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
(84.6 %, 31491 bytes)
27c27
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_OUTBUFF_FULL      -8
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
(84.6 %, 31489 bytes)
28c28
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      -9
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
(84.6 %, 31487 bytes)
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void **bzalloc(void *,int,int);
44c44
<       void *(*bzalloc)(void *,int,int);
---
>       void *(*bzalloc)void *,int,int;
45c45
<       void (*bzfree)(void *,void *);
---
>       void *bzfree(void *,void *);
45c45
<       void (*bzfree)(void *,void *);
---
>       void (*bzfree)void *,void *;
54c54
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit)  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
(84.6 %, 31485 bytes)
60c60
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit  
65c65
<    );
---
>    ;
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
67c67
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress)  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
(84.6 %, 31483 bytes)
67c67
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress  
70c70
<    );
---
>    ;
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
72c72
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd)  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)  
80c80
<    );
---
>    ;
(84.6 %, 31481 bytes)
72c72
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd  
74c74
<    );
---
>    ;
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
76c76
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit)  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
(84.6 %, 31479 bytes)
76c76
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit  
80c80
<    );
---
>    ;
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
82c82
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompress)  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
(84.6 %, 31477 bytes)
82c82
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress  
84c84
<    );
---
>    ;
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
86c86
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd)  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
(84.6 %, 31475 bytes)
86c86
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd  
88c88
<    );
---
>    ;
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
98c98
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen)  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
(84.6 %, 31473 bytes)
98c98
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen  
105c105
<    );
---
>    ;
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
107c107
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose)  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
(84.6 %, 31471 bytes)
107c107
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose  
110c110
<    );
---
>    ;
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
112c112
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused)  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
(84.6 %, 31469 bytes)
112c112
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused  
117c117
<    );
---
>    ;
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead ( 
119c119
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead)  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
(84.6 %, 31467 bytes)
119c119
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzRead  
124c124
<    );
---
>    ;
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
126c126
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen)  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
(84.6 %, 31465 bytes)
126c126
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
---
> BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen  
132c132
<    );
---
>    ;
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
134c134
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite)  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
(84.6 %, 31463 bytes)
134c134
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite  
139c139
<    );
---
>    ;
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
141c141
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose)  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
(84.6 %, 31461 bytes)
141c141
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose  
147c147
<    );
---
>    ;
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64 ( 
149c149
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)  
157c157
<    );
---
>    ;
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
162c162
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress)  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
(84.6 %, 31459 bytes)
162c162
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress  
170c170
<    );
---
>    ;
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
172c172
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress)  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) 
186c186
<    );
---
>    ;
(84.7 %, 31457 bytes)
172c172
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress  
179c179
<    );
---
>    ;
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
184c184
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) 
191c191
<    );
---
>    ;
(84.7 %, 31455 bytes)
184c184
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion 
186c186
<    );
---
>    ;
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
188c188
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
(84.7 %, 31453 bytes)
188c188
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen 
191c191
<    );
---
>    ;
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
193c193
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) 
202c202
<    );
---
>    ;
(84.7 %, 31451 bytes)
193c193
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
---
> BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen 
196c196
<    );
---
>    ;
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_APIBZ2_bzread (
198c198
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
(84.7 %, 31449 bytes)
198c198
< BZ_EXTERN int BZ_APIBZ2_bzread (
---
> BZ_EXTERN int BZ_APIBZ2_bzread 
202c202
<    );
---
>    ;
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite (
204c204
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
(84.7 %, 31447 bytes)
204c204
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite 
208c208
<    );
---
>    ;
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush (
210c210
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
(84.7 %, 31445 bytes)
210c210
< BZ_EXTERN int BZ_APIBZ2_bzflush (
---
> BZ_EXTERN int BZ_APIBZ2_bzflush 
212c212
<    );
---
>    ;
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose (
214c214
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose) 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
(84.7 %, 31443 bytes)
214c214
< BZ_EXTERN void BZ_APIBZ2_bzclose (
---
> BZ_EXTERN void BZ_APIBZ2_bzclose 
216c216
<    );
---
>    ;
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror (
218c218
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(84.7 %, 31441 bytes)
218c218
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
---
> BZ_EXTERN const char * BZ_APIBZ2_bzerror 
221c221
<    );
---
>    ;
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool)1
248c248
< #define True  ((Bool)1)
---
> #define True  (Bool1)
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
(84.7 %, 31439 bytes)
248c248
< #define True  (Bool)1
---
> #define True  Bool1
249c249
< #define False ((Bool)0)
---
> #define False (Bool)0
249c249
< #define False ((Bool)0)
---
> #define False (Bool0)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
(84.7 %, 31437 bytes)
249c249
< #define False (Bool)0
---
> #define False Bool0
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail  int errcode ;
254c254
< #define AssertH(cond,errcode) \
---
> #define AssertHcond,errcode \
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
(84.7 %, 31435 bytes)
256c256
< #define AssertD(cond,msg) \
---
> #define AssertDcond,msg \
258c258
< #define VPrintf0(zf) \
---
> #define VPrintf0zf \
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
(84.7 %, 31433 bytes)
259c259
<    fprintf(stderr,zf)
---
>    fprintfstderr,zf
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
(84.7 %, 31431 bytes)
260c260
< #define VPrintf1(zf,za1) \
---
> #define VPrintf1zf,za1 \
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
(84.7 %, 31429 bytes)
261c261
<    fprintf(stderr,zf,za1)
---
>    fprintfstderr,zf,za1
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
(84.7 %, 31427 bytes)
262c262
< #define VPrintf2(zf,za1,za2) \
---
> #define VPrintf2zf,za1,za2 \
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
(84.7 %, 31425 bytes)
263c263
<    fprintf(stderr,zf,za1,za2)
---
>    fprintfstderr,zf,za1,za2
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
(84.7 %, 31423 bytes)
264c264
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define VPrintf3zf,za1,za2,za3 \
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
(84.7 %, 31421 bytes)
265c265
<    fprintf(stderr,zf,za1,za2,za3)
---
>    fprintfstderr,zf,za1,za2,za3
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
(84.7 %, 31419 bytes)
266c266
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define VPrintf4zf,za1,za2,za3,za4 \
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
(84.7 %, 31417 bytes)
267c267
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
>    fprintfstderr,zf,za1,za2,za3,za4
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
(84.7 %, 31415 bytes)
268c268
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define VPrintf5zf,za1,za2,za3,za4,za5 \
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
(84.7 %, 31413 bytes)
269c269
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
>    fprintfstderr,zf,za1,za2,za3,za4,za5
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) strm->bzalloc(strm->opaque,(nnn),1)
(84.7 %, 31411 bytes)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
272c272
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOC(nnn) strm->bzalloc(strm->opaque,(nnn),1)
(84.7 %, 31409 bytes)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
272c272
< #define BZALLOCnnn (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn (strm->bzalloc)strm->opaque,(nnn),1
(84.7 %, 31407 bytes)
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
272c272
< #define BZALLOCnnn strm->bzalloc(strm->opaque,(nnn),1)
---
> #define BZALLOCnnn strm->bzalloc(strm->opaque,nnn,1)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
(84.7 %, 31405 bytes)
272c272
< #define BZALLOCnnn strm->bzallocstrm->opaque,(nnn),1
---
> #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
(84.7 %, 31403 bytes)
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  strm->bzfree(strm->opaque,(ppp))
273c273
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREE(ppp)  (strm->bzfree)strm->opaque,(ppp)
(84.7 %, 31401 bytes)
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)strm->opaque,(ppp)
273c273
< #define BZFREEppp  (strm->bzfree)(strm->opaque,(ppp))
---
> #define BZFREEppp  (strm->bzfree)(strm->opaque,ppp)
(84.7 %, 31399 bytes)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
273c273
< #define BZFREEppp  strm->bzfree(strm->opaque,(ppp))
---
> #define BZFREEppp  strm->bzfree(strm->opaque,ppp)
(84.7 %, 31397 bytes)
273c273
< #define BZFREEppp  strm->bzfreestrm->opaque,(ppp)
---
> #define BZFREEppp  strm->bzfreestrm->opaque,ppp
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + 0 / BZ_G_SIZE)
(84.7 %, 31395 bytes)
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE)
295c295
< #define BZ_MAX_SELECTORS (2 + (0 / BZ_G_SIZE))
---
> #define BZ_MAX_SELECTORS (2 + 0 / BZ_G_SIZE)
311c311
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_MASK 1
(84.7 %, 31393 bytes)
295c295
< #define BZ_MAX_SELECTORS 2 + (0 / BZ_G_SIZE)
---
> #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
311c311
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_MASK 1
(84.7 %, 31391 bytes)
311c311
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_MASK 1
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
(84.7 %, 31389 bytes)
314c314
<    if (s->rNToGo == 0)                                            \
---
>    if s->rNToGo == 0                                            \
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
(84.7 %, 31387 bytes)
323c323
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_INITIALISE_CRCcrcVar              \
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(84.7 %, 31385 bytes)
326c326
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_FINALISE_CRCcrcVar                \
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
(84.7 %, 31383 bytes)
329c329
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_UPDATE_CRCcrcVar,cha              \
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
(84.7 %, 31381 bytes)
347c347
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define BZ_GET_FASTc                     \
(84.7 %, 31379 bytes)
597c597
< #define BZ_GET_FAST(c)                     \
---
> #define BZ_GET_FASTc                     \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>     c = UChar(s->tPos & 0xf);           \
(84.7 %, 31377 bytes)
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>     c = UChar(s->tPos & 0xf);           \
599c599
<     c = (UChar)(s->tPos & 0xf);           \
---
>     c = (UChar)s->tPos & 0xf;           \
(84.7 %, 31375 bytes)
599c599
<     c = UChar(s->tPos & 0xf);           \
---
>     c = UChars->tPos & 0xf;           \
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define BZ_GET_FAST_Cc                   \
(84.7 %, 31373 bytes)
602c602
< #define BZ_GET_FAST_C(c)                   \
---
> #define BZ_GET_FAST_Cc                   \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = UChar(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = (UChar)c_tPos & 0xf;            \
(84.7 %, 31371 bytes)
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = UChar(c_tPos & 0xf);            \
604c604
<     c = (UChar)(c_tPos & 0xf);            \
---
>     c = (UChar)c_tPos & 0xf;            \
(84.7 %, 31369 bytes)
604c604
<     c = UChar(c_tPos & 0xf);            \
---
>     c = UCharc_tPos & 0xf;            \
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
(84.7 %, 31367 bytes)
607c607
< #define SET_LL4(i,n)                                          \
---
> #define SET_LL4i,n                                          \
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
(84.7 %, 31365 bytes)
610c610
< #define GET_LL4(i)                             \
---
> #define GET_LL4i                             \
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
(84.7 %, 31363 bytes)
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
611c611
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32(s->ll4[(i) >> 1])) >> (((i) tPos = GET_LL(s->tPos);
(84.7 %, 31361 bytes)
611c611
<    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
611c611
<    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32)s->ll4[(i) >> 1] >> (((i) tPos = GET_LL(s->tPos);
611c611
<    (((UInt32)(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
---
>    (((UInt32)(s->ll4[i >> 1]) >> (((i) tPos = GET_LL(s->tPos);
(84.7 %, 31359 bytes)
611c611
<    ((UInt32(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[(i) >> 1] >> (((i) tPos = GET_LL(s->tPos);
611c611
<    ((UInt32(s->ll4[(i) >> 1]) >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32(s->ll4[i >> 1]) >> (((i) tPos = GET_LL(s->tPos);
(84.7 %, 31357 bytes)
611c611
<    ((UInt32s->ll4[(i) >> 1] >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[i >> 1] >> (((i) tPos = GET_LL(s->tPos);
611c611
<    ((UInt32s->ll4[(i) >> 1] >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[(i) >> 1] >> ((i tPos = GET_LL(s->tPos);
611c611
<    ((UInt32s->ll4[(i) >> 1] >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[(i) >> 1] >> (((i) tPos = GET_LLs->tPos;
(84.7 %, 31355 bytes)
611c611
<    ((UInt32s->ll4[i >> 1] >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LL(s->tPos);
611c611
<    ((UInt32s->ll4[i >> 1] >> (((i) tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[i >> 1] >> (((i) tPos = GET_LLs->tPos;
619c619
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
(84.7 %, 31353 bytes)
611c611
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LL(s->tPos);
---
>    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
619c619
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
648c648
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
(84.7 %, 31351 bytes)
619c619
< BZ2_decompress ( DState* );
---
> BZ2_decompress  DState* ;
648c648
< #define fswap(zz1, zz2) \
---
> #define fswapzz1, zz2 \
651c651
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
655c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fmina,b ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
(84.7 %, 31349 bytes)
651c651
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define fvswapzzp1, zzp2, zzn       \
655c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fmina,b ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
655c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fmin(a,b) (a > 5] |= (1  5] &= ~(1  5] & (1  5]
(84.7 %, 31347 bytes)
655c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fmina,b ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
655c655
< #define fmin(a,b) ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fmin(a,b) (a > 5] |= (1  5] &= ~(1  5] & (1  5]
(84.7 %, 31345 bytes)
655c655
< #define fmina,b ((a) > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  ((zz) & 0xf)
(84.7 %, 31343 bytes)
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  ((zz) & 0xf)
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BH(zz)  (zz) & 0xf
656c656
< #define UNALIGNED_BH(zz)  ((zz) & 0xf)
---
> #define UNALIGNED_BH(zz)  (zz & 0xf)
(84.7 %, 31341 bytes)
656c656
< #define UNALIGNED_BHzz  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  (zz) & 0xf
656c656
< #define UNALIGNED_BHzz  ((zz) & 0xf)
---
> #define UNALIGNED_BHzz  (zz & 0xf)
(84.7 %, 31339 bytes)
656c656
< #define UNALIGNED_BHzz  (zz) & 0xf
---
> #define UNALIGNED_BHzz  zz & 0xf
687c687
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
(84.7 %, 31337 bytes)
687c687
< #define mswap(zz1, zz2) \
---
> #define mswapzz1, zz2 \
690c690
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
(84.7 %, 31335 bytes)
690c690
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define mvswapzzp1, zzp2, zzn       \
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
(84.7 %, 31333 bytes)
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmina,b ((a) < (b)) ? (a) : (b)
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a) < (b) ? (a) : (b)
695c695
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define mmin(a,b) (a < (b)) ? (a) : (b)
(84.7 %, 31331 bytes)
695c695
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? (a) : (b)
695c695
< #define mmina,b ((a) < (b)) ? (a) : (b)
---
> #define mmina,b (a < (b)) ? (a) : (b)
(84.7 %, 31329 bytes)
695c695
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? (a) : (b)
695c695
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < b ? (a) : (b)
695c695
< #define mmina,b (a) < (b) ? (a) : (b)
---
> #define mmina,b (a) < (b) ? a : (b)
(84.7 %, 31327 bytes)
695c695
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < b ? (a) : (b)
695c695
< #define mmina,b a < (b) ? (a) : (b)
---
> #define mmina,b a < (b) ? a : (b)
(84.7 %, 31325 bytes)
695c695
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? a : (b)
695c695
< #define mmina,b a < b ? (a) : (b)
---
> #define mmina,b a < b ? (a) : b
697c697
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
(84.7 %, 31323 bytes)
695c695
< #define mmina,b a < b ? a : (b)
---
> #define mmina,b a < b ? a : b
697c697
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
699c699
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
(84.7 %, 31321 bytes)
697c697
< #define mpush(lz,hz,dz) 
---
> #define mpushlz,hz,dz 
699c699
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
(84.7 %, 31319 bytes)
699c699
< #define mpop(lz,hz,dz) 
---
> #define mpoplz,hz,dz 
702c702
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
(84.7 %, 31317 bytes)
702c702
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz (nextHi[az]-nextLo[az])
702c702
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mnextsize(az) nextHi[az]-nextLo[az]
(84.7 %, 31315 bytes)
702c702
< #define mnextsizeaz (nextHi[az]-nextLo[az])
---
> #define mnextsizeaz nextHi[az]-nextLo[az]
704c704
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
(84.7 %, 31313 bytes)
704c704
< #define mnextswap(az,bz)                                        \
---
> #define mnextswapaz,bz                                        \
709c709
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
(84.7 %, 31311 bytes)
709c709
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
(84.7 %, 31309 bytes)
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) ftab[((b)+1) << 8] - ftab[(b) << 8]
729c729
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQ(b) (ftab[(b)+1 << 8] - ftab[(b) << 8])
(84.7 %, 31307 bytes)
729c729
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
729c729
< #define BIGFREQb (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BIGFREQb (ftab[(b)+1 << 8] - ftab[(b) << 8])
(84.7 %, 31305 bytes)
729c729
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
729c729
< #define BIGFREQb ftab[((b)+1) << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b+1) << 8] - ftab[(b) << 8]
(84.7 %, 31303 bytes)
729c729
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
729c729
< #define BIGFREQb ftab[(b)+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[(b)+1 << 8] - ftab[b << 8]
730c730
< #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
---
> #define SETMASK 1 < (zz3) ? (zz2) : (zz3)
(84.7 %, 31301 bytes)
729c729
< #define BIGFREQb ftab[b+1 << 8] - ftab[(b) << 8]
---
> #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
730c730
< #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
---
> #define SETMASK 1 < (zz3) ? (zz2) : (zz3)
(84.7 %, 31299 bytes)
730c730
< #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
---
> #define SETMASK 1 < (zz3) ? (zz2) : (zz3)
730c730
< #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
---
> #define SETMASK (1 < zz3 ? (zz2) : (zz3))
730c730
< #define SETMASK (1 < (zz3) ? (zz2) : (zz3))
---
> #define SETMASK (1 < (zz3) ? zz2 : (zz3))
(84.7 %, 31297 bytes)
730c730
< #define SETMASK 1 < (zz3) ? (zz2) : (zz3)
---
> #define SETMASK 1 < zz3 ? (zz2) : (zz3)
730c730
< #define SETMASK 1 < (zz3) ? (zz2) : (zz3)
---
> #define SETMASK 1 < (zz3) ? zz2 : (zz3)
730c730
< #define SETMASK 1 < (zz3) ? (zz2) : (zz3)
---
> #define SETMASK 1 < (zz3) ? (zz2) : zz3
(84.7 %, 31295 bytes)
730c730
< #define SETMASK 1 < zz3 ? (zz2) : (zz3)
---
> #define SETMASK 1 < zz3 ? zz2 : (zz3)
730c730
< #define SETMASK 1 < zz3 ? (zz2) : (zz3)
---
> #define SETMASK 1 < zz3 ? (zz2) : zz3
732c732
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
(84.7 %, 31293 bytes)
730c730
< #define SETMASK 1 < zz3 ? zz2 : (zz3)
---
> #define SETMASK 1 < zz3 ? zz2 : zz3
732c732
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
(84.7 %, 31291 bytes)
732c732
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define ADDWEIGHTSzw1,zw2                           \
733c733
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
733c733
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
(84.7 %, 31289 bytes)
733c733
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
733c733
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOFzw1+WEIGHTOF(zw2)) |                    \
733c733
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
>    (WEIGHTOF(zw1)+WEIGHTOFzw2) |                    \
(84.7 %, 31287 bytes)
733c733
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
733c733
<    WEIGHTOF(zw1)+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOF(zw1)+WEIGHTOFzw2 |                    \
(84.7 %, 31285 bytes)
733c733
<    WEIGHTOFzw1+WEIGHTOF(zw2) |                    \
---
>    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
734c734
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
734c734
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
(84.7 %, 31283 bytes)
734c734
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
734c734
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2))
734c734
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
>    (1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2)))
(84.7 %, 31281 bytes)
734c734
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
734c734
<    1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2))
---
>    1 + MYMAX(DEPTHOFzw1,DEPTHOF(zw2))
(84.7 %, 31279 bytes)
734c734
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
734c734
<    1 + MYMAXDEPTHOF(zw1),DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOF(zw1),DEPTHOFzw2
736c736
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
(84.7 %, 31277 bytes)
734c734
<    1 + MYMAXDEPTHOFzw1,DEPTHOF(zw2)
---
>    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
736c736
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
(84.7 %, 31275 bytes)
736c736
< #define UPHEAP(z)                                     \
---
> #define UPHEAPz                                     \
739c739
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
(84.7 %, 31273 bytes)
739c739
< #define DOWNHEAP(z)                                   \
---
> #define DOWNHEAPz                                   \
807c807
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
829c829
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
(84.7 %, 31271 bytes)
807c807
< #define bsNEEDW(nz)                           \
---
> #define bsNEEDWnz                           \
829c829
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
833c833
<    for (i = 0; i < 6; i++)
---
>    for i = 0; i < 6; i++
834c834
<       if (s->inUse[i]) {
---
>       if s->inUse[i] {
843c843
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
864c864
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++ s->mtfFreq[i] = 0;
868c868
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    for i = 0; i < s->nInUse; i++ yy_0 = (UChar) i;
868c868
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy_0 = UChar i;
870c870
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = 0; i < s->nblock; i++ {
872c872
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD  wr <= i, "generateMTFValues(1)" ;
872c872
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr <= i, "generateMTFValues1" );
(84.7 %, 31269 bytes)
829c829
< void makeMaps_e ( EState* s )
---
> void makeMaps_e  EState* s 
833c833
<    for (i = 0; i < 6; i++)
---
>    for i = 0; i < 6; i++
834c834
<       if (s->inUse[i]) {
---
>       if s->inUse[i] {
843c843
< void generateMTFValues ( EState* s )
---
> void generateMTFValues  EState* s 
864c864
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for i = 0; i <= EOB; i++ s->mtfFreq[i] = 0;
868c868
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    for i = 0; i < s->nInUse; i++ yy_0 = (UChar) i;
868c868
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    for (i = 0; i < s->nInUse; i++) yy_0 = UChar i;
870c870
<    for (i = 0; i < s->nblock; i++) {
---
>    for i = 0; i < s->nblock; i++ {
872c872
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD  wr <= i, "generateMTFValues(1)" ;
872c872
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>       AssertD ( wr <= i, "generateMTFValues1" );
873c873
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if j < 0 j += s->nblock;
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
---
>       AssertD  ll_i nInUse, "generateMTFValues(a)" ;
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValuesa" );
(84.7 %, 31267 bytes)
873c873
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; if j < 0 j += s->nblock;
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
---
>       AssertD  ll_i nInUse, "generateMTFValues(a)" ;
875c875
<       AssertD ( ll_i nInUse, "generateMTFValues(a)" );
---
>       AssertD ( ll_i nInUse, "generateMTFValuesa" );
877c877
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ll_i { 
881c881
<          if (zPend > 0) 
---
>          if zPend > 0 
888c888
<             ryy_j = &(yy_1);
---
>             ryy_j = &yy_1;
(84.7 %, 31265 bytes)
877c877
<       if (yy_0 == ll_i) { 
---
>       if yy_0 == ll_i { 
881c881
<          if (zPend > 0) 
---
>          if zPend > 0 
888c888
<             ryy_j = &(yy_1);
---
>             ryy_j = &yy_1;
890c890
<             while ( rll_i != rtmp ) ;
---
>             while  rll_i != rtmp  ;
892c892
<             j = ryy_j - &(yy_0);
---
>             j = ryy_j - &yy_0;
899c899
<    if (zPend > 0) 
---
>    if zPend > 0 
933c933
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
(84.7 %, 31263 bytes)
890c890
<             while ( rll_i != rtmp ) ;
---
>             while  rll_i != rtmp  ;
892c892
<             j = ryy_j - &(yy_0);
---
>             j = ryy_j - &yy_0;
899c899
<    if (zPend > 0) 
---
>    if zPend > 0 
933c933
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
(84.7 %, 31261 bytes)
899c899
<    if (zPend > 0) 
---
>    if zPend > 0 
933c933
< #define RETURN(rrr)                               \
---
> #define RETURNrrr                               \
936c936
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
(84.7 %, 31259 bytes)
936c936
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define GET_BITSlll,vvv,nnn                     \
938c938
<    while (True) 
---
>    while True 
(84.7 %, 31257 bytes)
938c938
<    while (True) 
---
>    while True 
940c940
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
941c941
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
(84.7 %, 31255 bytes)
940c940
< #define GET_UCHAR(lll,uuu)                        \
---
> #define GET_UCHARlll,uuu                        \
941c941
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
(84.7 %, 31253 bytes)
941c941
<    GET_BITS(lll,uuu,8)
---
>    GET_BITSlll,uuu,8
943c943
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
944c944
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
(84.8 %, 31251 bytes)
943c943
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITlll,uuu                          \
944c944
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
(84.8 %, 31249 bytes)
944c944
<    GET_BITS(lll,uuu,1)
---
>    GET_BITSlll,uuu,1
947c947
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
(84.8 %, 31247 bytes)
947c947
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_MTF_VALlabel1,label2,lval           \
952c952
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
971c971
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
977c977
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
983c983
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
987c987
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
993c993
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
999c999
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1004c1004
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL  EState* s 
1009c1009
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
(84.8 %, 31245 bytes)
952c952
< Int32 BZ2_decompress ( DState* s )
---
> Int32 BZ2_decompress  DState* s 
971c971
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail  int errcode 
977c977
< int bz_config_ok ( void )
---
> int bz_config_ok  void 
983c983
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc  void* opaque, Int32 items, Int32 size 
987c987
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree  void* opaque, void* addr 
993c993
< void prepare_new_block ( EState* s )
---
> void prepare_new_block  EState* s 
999c999
< void init_RL ( EState* s )
---
> void init_RL  EState* s 
1004c1004
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL  EState* s 
1009c1009
< int BZ_API(BZ2_bzCompressInit) 
---
> int BZ_APIBZ2_bzCompressInit 
1010c1010
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1013c1013
<                      int        workFactor )
---
>                      int        workFactor 
1032c1032
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1034c1034
<    if (strm == NULL || 
---
>    if strm == NULL || 
1036c1036
<        workFactor < 0 || workFactor > 0)
---
>        workFactor < 0 || workFactor > 0
1039c1039
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1040c1040
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1041c1041
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1043c1043
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC sizeof(EState) ;
1043c1043
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeofEState );
(84.8 %, 31243 bytes)
1010c1010
<                     ( bz_stream* strm, 
---
>                      bz_stream* strm, 
1013c1013
<                      int        workFactor )
---
>                      int        workFactor 
1032c1032
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1034c1034
<    if (strm == NULL || 
---
>    if strm == NULL || 
1036c1036
<        workFactor < 0 || workFactor > 0)
---
>        workFactor < 0 || workFactor > 0
1039c1039
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1040c1040
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1041c1041
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1043c1043
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC sizeof(EState) ;
1043c1043
<    s = BZALLOC( sizeof(EState) );
---
>    s = BZALLOC( sizeofEState );
1044c1044
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1052c1052
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC n                  * sizeof(UInt32) ;
1052c1052
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = BZALLOC( n                  * sizeofUInt32 );
1053c1053
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
1053c1053
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC( n+BZ_N_OVERSHOOT * sizeof(UInt32) );
1053c1053
<    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s_5 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeofUInt32 );
(84.8 %, 31241 bytes)
1053c1053
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s_5 = BZALLOC n+BZ_N_OVERSHOOT * sizeof(UInt32) ;
1053c1053
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeofUInt32 ;
1054c1054
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6 = BZALLOC 7              * sizeof(UInt32) ;
1054c1054
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6 = BZALLOC( 7              * sizeofUInt32 );
1056c1056
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL 
1067c1067
<    s_9             = (UChar*)s_5;
---
>    s_9             = UChar*s_5;
1068c1068
<    s_10              = (UInt16*)s_4;
---
>    s_10              = UInt16*s_4;
1070c1070
<    s_8               = (UInt32*)s_4;
---
>    s_8               = UInt32*s_4;
1092c1092
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
> #define ADD_CHAR_TO_BLOCKzs,zchh0               \
1106c1106
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1111c1111
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
(84.8 %, 31239 bytes)
1106c1106
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress  bz_stream* strm 
1111c1111
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
1111c1111
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(BZ2_bzCompress)  bz_stream *strm, int action 
1117c1117
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1119c1119
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1120c1120
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1123c1123
<    switch (s_1) 
---
>    switch s_1 
1129c1129
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
(84.8 %, 31237 bytes)
1111c1111
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress  bz_stream *strm, int action 
1117c1117
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1119c1119
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1120c1120
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1123c1123
<    switch (s_1) 
---
>    switch s_1 
1129c1129
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
1129c1129
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzCompressEnd)   bz_stream *strm 
1133c1133
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1135c1135
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1136c1136
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1138c1138
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s->arr1 != NULL BZFREE(s->arr1);
1138c1138
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREEs->arr1;
1139c1139
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s->arr2 != NULL BZFREE(s->arr2);
1139c1139
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREEs->arr2;
1140c1140
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s->ftab != NULL BZFREE(s->ftab);
1140c1140
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->ftab != NULL) BZFREEs->ftab;
1141c1141
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1154c1154
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
(84.8 %, 31235 bytes)
1129c1129
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd   bz_stream *strm 
1133c1133
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1135c1135
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1136c1136
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1138c1138
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if s->arr1 != NULL BZFREE(s->arr1);
1138c1138
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->arr1 != NULL) BZFREEs->arr1;
1139c1139
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if s->arr2 != NULL BZFREE(s->arr2);
1139c1139
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr2 != NULL) BZFREEs->arr2;
1140c1140
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if s->ftab != NULL BZFREE(s->ftab);
1140c1140
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->ftab != NULL) BZFREEs->ftab;
1141c1141
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1154c1154
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit 
1155c1155
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1157c1157
<                        int        small )
---
>                        int        small 
1169c1169
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1171c1171
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1172c1172
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small != 0 && small != 1 return BZ_PARAM_ERROR;
1173c1173
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity < 0 || verbosity > 4 return BZ_PARAM_ERROR;
1175c1175
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1176c1176
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1178c1178
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC sizeof(DState) ;
1178c1178
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC( sizeofDState );
1179c1179
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1190c1190
<    s_10       = (Bool)small;
---
>    s_10       = Boolsmall;
1203c1203
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1214c1214
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1219c1219
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
(84.8 %, 31233 bytes)
1155c1155
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
1157c1157
<                        int        small )
---
>                        int        small 
1169c1169
<    if (!0) return BZ_CONFIG_ERROR;
---
>    if !0 return BZ_CONFIG_ERROR;
1171c1171
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1172c1172
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if small != 0 && small != 1 return BZ_PARAM_ERROR;
1173c1173
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if verbosity < 0 || verbosity > 4 return BZ_PARAM_ERROR;
1175c1175
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if strm->bzalloc == NULL strm->bzalloc = default_bzalloc;
1176c1176
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL strm->bzfree = default_bzfree;
1178c1178
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC sizeof(DState) ;
1178c1178
<    s = BZALLOC( sizeof(DState) );
---
>    s = BZALLOC( sizeofDState );
1179c1179
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    if s == NULL return BZ_MEM_ERROR;
1190c1190
<    s_10       = (Bool)small;
---
>    s_10       = Boolsmall;
1203c1203
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST  DState* s 
1214c1214
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL  DState* s 
1219c1219
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
1219c1219
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompress)  bz_stream *strm 
1223c1223
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1225c1225
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1226c1226
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1228c1228
<    while (True) 
---
>    while True 
1230c1230
<    AssertH ( 0, 1 );
---
>    AssertH  0, 1 ;
1237c1237
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
(84.8 %, 31231 bytes)
1219c1219
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress  bz_stream *strm 
1223c1223
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1225c1225
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1226c1226
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1228c1228
<    while (True) 
---
>    while True 
1230c1230
<    AssertH ( 0, 1 );
---
>    AssertH  0, 1 ;
1237c1237
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
1237c1237
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
> int BZ_API(BZ2_bzDecompressEnd)   bz_stream *strm 
1241c1241
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1243c1243
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1244c1244
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1246c1246
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->tt   != NULL BZFREE(s->tt);
1246c1246
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->tt   != NULL) BZFREEs->tt;
1247c1247
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s->ll16 != NULL BZFREE(s->ll16);
1247c1247
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->ll16 != NULL) BZFREEs->ll16;
1248c1248
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s->ll4  != NULL BZFREE(s->ll4);
1248c1248
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->ll4  != NULL) BZFREEs->ll4;
1250c1250
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1261c1261
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe                    \
(84.8 %, 31229 bytes)
1237c1237
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd   bz_stream *strm 
1241c1241
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if strm == NULL return BZ_PARAM_ERROR;
1243c1243
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if s == NULL return BZ_PARAM_ERROR;
1244c1244
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    if s_0 != strm return BZ_PARAM_ERROR;
1246c1246
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if s->tt   != NULL BZFREE(s->tt);
1246c1246
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->tt   != NULL) BZFREEs->tt;
1247c1247
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if s->ll16 != NULL BZFREE(s->ll16);
1247c1247
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->ll16 != NULL) BZFREEs->ll16;
1248c1248
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if s->ll4  != NULL BZFREE(s->ll4);
1248c1248
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->ll4  != NULL) BZFREEs->ll4;
1250c1250
<    BZFREE(strm->state);
---
>    BZFREEstrm->state;
1261c1261
< #define BZ_SETERR(e)                    \
---
> #define BZ_SETERRe                    \
1282c1282
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
1283c1283
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1287c1287
<                       int   workFactor )
---
>                       int   workFactor 
1292c1292
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
(84.8 %, 31227 bytes)
1282c1282
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* BZ_APIBZ2_bzWriteOpen 
1283c1283
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1287c1287
<                       int   workFactor )
---
>                       int   workFactor 
1292c1292
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1294c1294
<    if (f == NULL ||
---
>    if f == NULL ||
1297c1297
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity < 0 || verbosity > 4)
1295c1295
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        blockSize100k < 1 || blockSize100k > 9 ||
(84.8 %, 31225 bytes)
1283c1283
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
1287c1287
<                       int   workFactor )
---
>                       int   workFactor 
1292c1292
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1294c1294
<    if (f == NULL ||
---
>    if f == NULL ||
1297c1297
<        (verbosity < 0 || verbosity > 4))
---
>        (verbosity < 0 || verbosity > 4)
1295c1295
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>        blockSize100k < 1 || blockSize100k > 9 ||
1296c1296
<        (workFactor < 0 || workFactor > 0) ||
---
>        workFactor < 0 || workFactor > 0 ||
(84.8 %, 31223 bytes)
1296c1296
<        (workFactor < 0 || workFactor > 0) ||
---
>        workFactor < 0 || workFactor > 0 ||
1297c1297
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity < 0 || verbosity > 4)
(84.8 %, 31221 bytes)
1297c1297
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity < 0 || verbosity > 4)
1300c1300
<    if (ferror(f))
---
>    if ferror(f)
1300c1300
<    if (ferror(f))
---
>    if (ferrorf)
1303c1303
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1303c1303
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1304c1304
<    if (bzf == NULL)
---
>    if bzf == NULL
1307c1307
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1316c1316
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1317,1318c1317,1318
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit  &(bzf->strm), blockSize100k, 
>                               verbosity, workFactor ;
1317c1317
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
(84.8 %, 31219 bytes)
1300c1300
<    if (ferror(f))
---
>    if ferror(f)
1300c1300
<    if (ferror(f))
---
>    if (ferrorf)
1303c1303
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1303c1303
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1304c1304
<    if (bzf == NULL)
---
>    if bzf == NULL
1307c1307
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1316c1316
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1317,1318c1317,1318
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = BZ2_bzCompressInit  &(bzf->strm), blockSize100k, 
>                               verbosity, workFactor ;
1317c1317
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
1319c1319
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1330c1330
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
(84.8 %, 31217 bytes)
1319c1319
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1330c1330
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite
1331c1331
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1334c1334
<                int     len )
---
>                int     len 
1337c1337
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1344c1344
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1345c1345
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1347c1347
<    if (!(bzf_3))
---
>    if !(bzf_3)
1347c1347
<    if (!(bzf_3))
---
>    if (!bzf_3)
(84.8 %, 31215 bytes)
1331c1331
<              ( int*    bzerror, 
---
>               int*    bzerror, 
1334c1334
<                int     len )
---
>                int     len 
1337c1337
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1344c1344
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1345c1345
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1347c1347
<    if (!(bzf_3))
---
>    if !(bzf_3)
1347c1347
<    if (!(bzf_3))
---
>    if (!bzf_3)
1349c1349
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1349c1349
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1352c1352
<    if (len == 0)
---
>    if len == 0
1358c1358
<    while (True) {
---
>    while True {
1362c1362
<       if (ret != BZ_RUN_OK)
---
>       if ret != BZ_RUN_OK
1365c1365
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if bzf_4_5 < BZ_MAX_UNUSED 
1367c1367
<       if (bzf_4_1 == 0)
---
>       if bzf_4_1 == 0
1374c1374
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
(84.8 %, 31213 bytes)
1349c1349
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1349c1349
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1352c1352
<    if (len == 0)
---
>    if len == 0
1358c1358
<    while (True) {
---
>    while True {
1362c1362
<       if (ret != BZ_RUN_OK)
---
>       if ret != BZ_RUN_OK
1365c1365
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
---
>       if bzf_4_5 < BZ_MAX_UNUSED 
1367c1367
<       if (bzf_4_1 == 0)
---
>       if bzf_4_1 == 0
1374c1374
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose
1375c1375
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1379c1379
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1381,1382c1381,1382
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
1386c1386
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
(84.8 %, 31211 bytes)
1375c1375
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1379c1379
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_out 
1381,1382c1381,1382
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64  bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
1386c1386
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64
1387c1387
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1393c1393
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1396c1396
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1399c1399
<    if (bzf == NULL)
---
>    if bzf == NULL
1401c1401
<    if (!(bzf_3))
---
>    if !(bzf_3)
1401c1401
<    if (!(bzf_3))
---
>    if (!bzf_3)
(84.8 %, 31209 bytes)
1387c1387
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
1393c1393
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_hi32 
1396c1396
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1399c1399
<    if (bzf == NULL)
---
>    if bzf == NULL
1401c1401
<    if (!(bzf_3))
---
>    if !(bzf_3)
1401c1401
<    if (!(bzf_3))
---
>    if (!bzf_3)
1403c1403
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1403c1403
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1406c1406
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL *nbytes_in_lo32 = 0;
1407c1407
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32 != NULL *nbytes_in_hi32 = 0;
1408c1408
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32 != NULL *nbytes_out_lo32 = 0;
1409c1409
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32 != NULL *nbytes_out_hi32 = 0;
1411c1411
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon) && bzf->lastErr == BZ_OK 
1411c1411
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon && bzf->lastErr == BZ_OK) 
(84.8 %, 31207 bytes)
1403c1403
<    if (ferror(bzf->handle))
---
>    if ferror(bzf->handle)
1403c1403
<    if (ferror(bzf->handle))
---
>    if (ferrorbzf->handle)
1406c1406
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if nbytes_in_lo32 != NULL *nbytes_in_lo32 = 0;
1407c1407
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if nbytes_in_hi32 != NULL *nbytes_in_hi32 = 0;
1408c1408
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if nbytes_out_lo32 != NULL *nbytes_out_lo32 = 0;
1409c1409
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if nbytes_out_hi32 != NULL *nbytes_out_hi32 = 0;
1411c1411
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon) && bzf->lastErr == BZ_OK 
1411c1411
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (!abandon && bzf->lastErr == BZ_OK) 
1413c1413
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  !abandon && !ferror ( bzf->handle )  
1413c1413
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  bzf->handle  ) 
1415c1415
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL
1417c1417
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32 != NULL
1419c1419
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32 != NULL
1421c1421
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32 != NULL
1424c1424
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1431c1431
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
(84.8 %, 31205 bytes)
1413c1413
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if  !abandon && !ferror ( bzf->handle )  
1413c1413
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ( !abandon && !ferror  bzf->handle  ) 
1415c1415
<    if (nbytes_in_lo32 != NULL)
---
>    if nbytes_in_lo32 != NULL
1417c1417
<    if (nbytes_in_hi32 != NULL)
---
>    if nbytes_in_hi32 != NULL
1419c1419
<    if (nbytes_out_lo32 != NULL)
---
>    if nbytes_out_lo32 != NULL
1421c1421
<    if (nbytes_out_hi32 != NULL)
---
>    if nbytes_out_hi32 != NULL
1424c1424
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1431c1431
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* BZ_APIBZ2_bzReadOpen 
1432c1432
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1437c1437
<                      int   nUnused )
---
>                      int   nUnused 
1447c1447
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1449c1449
<    if (f == NULL || 
---
>    if f == NULL || 
1453c1453
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1450c1450
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
1451c1451
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity < 0 || verbosity > 4 ||
(84.8 %, 31203 bytes)
1432c1432
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
1437c1437
<                      int   nUnused )
---
>                      int   nUnused 
1447c1447
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1449c1449
<    if (f == NULL || 
---
>    if f == NULL || 
1453c1453
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1450c1450
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
1451c1451
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity < 0 || verbosity > 4 ||
1452c1452
<        (unused == NULL && nUnused != 0) ||
---
>        unused == NULL && nUnused != 0 ||
(84.8 %, 31201 bytes)
1451c1451
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity < 0 || verbosity > 4 ||
1452c1452
<        (unused == NULL && nUnused != 0) ||
---
>        unused == NULL && nUnused != 0 ||
(84.8 %, 31199 bytes)
1452c1452
<        (unused == NULL && nUnused != 0) ||
---
>        unused == NULL && nUnused != 0 ||
1453c1453
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
(84.8 %, 31197 bytes)
1453c1453
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1453c1453
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED))
1456c1456
<    if (ferror(f))
---
>    if ferror(f)
(84.8 %, 31195 bytes)
1453c1453
<        unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))
---
>        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
1456c1456
<    if (ferror(f))
---
>    if ferror(f)
1456c1456
<    if (ferror(f))
---
>    if (ferrorf)
1459c1459
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1459c1459
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1460c1460
<    if (bzf == NULL) 
---
>    if bzf == NULL 
1463c1463
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1473c1473
<    while (nUnused > 0) 
---
>    while nUnused > 0 
1475c1475
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit  &(bzf->strm), verbosity, small ;
1475c1475
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
(84.8 %, 31193 bytes)
1456c1456
<    if (ferror(f))
---
>    if ferror(f)
1456c1456
<    if (ferror(f))
---
>    if (ferrorf)
1459c1459
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc  sizeof(bzFile) ;
1459c1459
<    bzf = malloc ( sizeof(bzFile) );
---
>    bzf = malloc ( sizeofbzFile );
1460c1460
<    if (bzf == NULL) 
---
>    if bzf == NULL 
1463c1463
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1473c1473
<    while (nUnused > 0) 
---
>    while nUnused > 0 
1475c1475
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit  &(bzf->strm), verbosity, small ;
1475c1475
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
1476c1476
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1488c1488
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
(84.8 %, 31191 bytes)
1476c1476
<    if (ret != BZ_OK)
---
>    if ret != BZ_OK
1488c1488
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
1488c1488
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose)  int *bzerror, BZFILE *b 
1490c1490
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1494c1494
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1495c1495
<    if (bzf == NULL)
---
>    if bzf == NULL
1498c1498
<    if (bzf_3)
---
>    if bzf_3
1501c1501
<    if (bzf_6)
---
>    if bzf_6
1502c1502
<       (void)0;
---
>       void0;
1508c1508
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
(84.8 %, 31189 bytes)
1488c1488
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose  int *bzerror, BZFILE *b 
1490c1490
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1494c1494
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1495c1495
<    if (bzf == NULL)
---
>    if bzf == NULL
1498c1498
<    if (bzf_3)
---
>    if bzf_3
1501c1501
<    if (bzf_6)
---
>    if bzf_6
1502c1502
<       (void)0;
---
>       void0;
1508c1508
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead 
1509c1509
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1512c1512
<              int     len )
---
>              int     len 
1515c1515
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1520c1520
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1522c1522
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1525c1525
<    if (bzf_3)
---
>    if bzf_3
1528c1528
<    if (len == 0)
---
>    if len == 0
1534c1534
<    while (True) 
---
>    while True 
1541c1541
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
(84.8 %, 31187 bytes)
1509c1509
<            ( int*    bzerror, 
---
>             int*    bzerror, 
1512c1512
<              int     len )
---
>              int     len 
1515c1515
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1520c1520
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1522c1522
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    if bzf == NULL || buf == NULL || len < 0
1525c1525
<    if (bzf_3)
---
>    if bzf_3
1528c1528
<    if (len == 0)
---
>    if len == 0
1534c1534
<    while (True) 
---
>    while True 
1541c1541
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused 
1542c1542
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1545c1545
<                        int*    nUnused )
---
>                        int*    nUnused 
1547c1547
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1551c1551
<    if (bzf == NULL)
---
>    if bzf == NULL
1553c1553
<    if (bzf_5 != BZ_STREAM_END)
---
>    if bzf_5 != BZ_STREAM_END
1555c1555
<    if (unused == NULL || nUnused == NULL)
---
>    if unused == NULL || nUnused == NULL
1558c1558
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1569c1569
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
(84.8 %, 31185 bytes)
1542c1542
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
1545c1545
<                        int*    nUnused )
---
>                        int*    nUnused 
1547c1547
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf = bzFile*b;
1551c1551
<    if (bzf == NULL)
---
>    if bzf == NULL
1553c1553
<    if (bzf_5 != BZ_STREAM_END)
---
>    if bzf_5 != BZ_STREAM_END
1555c1555
<    if (unused == NULL || nUnused == NULL)
---
>    if unused == NULL || nUnused == NULL
1558c1558
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK;
1569c1569
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ_APIBZ2_bzBuffToBuffCompress 
1570c1570
<                          ( char*         dest, 
---
>                           char*         dest, 
1576c1576
<                            int           workFactor )
---
>                            int           workFactor 
1585c1585
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1589c1589
<        workFactor < 0 || workFactor > 0) 
---
>        workFactor < 0 || workFactor > 0 
1592c1592
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1597c1597
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1605c1605
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret == BZ_FINISH_OK goto output_overflow;
1606c1606
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1624c1624
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
(84.8 %, 31183 bytes)
1570c1570
<                          ( char*         dest, 
---
>                           char*         dest, 
1576c1576
<                            int           workFactor )
---
>                            int           workFactor 
1585c1585
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1589c1589
<        workFactor < 0 || workFactor > 0) 
---
>        workFactor < 0 || workFactor > 0 
1592c1592
<    if (workFactor == 0) workFactor = 0;
---
>    if workFactor == 0 workFactor = 0;
1597c1597
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1605c1605
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    if ret == BZ_FINISH_OK goto output_overflow;
1606c1606
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1624c1624
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress 
1625c1625
<                            ( char*         dest, 
---
>                             char*         dest, 
1630c1630
<                              int           verbosity )
---
>                              int           verbosity 
1639c1639
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1642c1642
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity < 0 || verbosity > 4 
1641c1641
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
(84.8 %, 31181 bytes)
1625c1625
<                            ( char*         dest, 
---
>                             char*         dest, 
1630c1630
<                              int           verbosity )
---
>                              int           verbosity 
1639c1639
<    if (dest == NULL || destLen == NULL || 
---
>    if dest == NULL || destLen == NULL || 
1642c1642
<        verbosity < 0 || verbosity > 4) 
---
>        verbosity < 0 || verbosity > 4 
1641c1641
<        (small != 0 && small != 1) ||
---
>        small != 0 && small != 1 ||
1649c1649
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1657c1657
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret == BZ_OK goto output_overflow_or_eof;
1658c1658
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1666c1666
<    if (strm_5 > 0) {
---
>    if strm_5 > 0 {
1683c1683
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
(84.8 %, 31179 bytes)
1649c1649
<    if (ret != BZ_OK) return ret;
---
>    if ret != BZ_OK return ret;
1657c1657
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    if ret == BZ_OK goto output_overflow_or_eof;
1658c1658
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if ret != BZ_STREAM_END goto errhandler;
1666c1666
<    if (strm_5 > 0) {
---
>    if strm_5 > 0 {
1683c1683
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_APIBZ2_bzlibVersion(void)
1683c1683
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
> const char * BZ_API(BZ2_bzlibVersion)void
1693c1693
<                ( const char *path,   
---
>                 const char *path,   
1696c1696
<                  int open_mode)      
---
>                  int open_mode      
1702c1702
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
(84.8 %, 31177 bytes)
1683c1683
< const char * BZ_APIBZ2_bzlibVersion(void)
---
> const char * BZ_APIBZ2_bzlibVersionvoid
1693c1693
<                ( const char *path,   
---
>                 const char *path,   
1696c1696
<                  int open_mode)      
---
>                  int open_mode      
1702c1702
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE * BZ_APIBZ2_bzopen
1703,1704c1703,1704
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1711c1711
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
(84.8 %, 31175 bytes)
1703,1704c1703,1704
<                ( const char *path,
<                  const char *mode )
---
>                 const char *path,
>                  const char *mode 
1711c1711
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE * BZ_APIBZ2_bzdopen
1712,1713c1712,1713
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1715c1715
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopenNULL,fd,mode,1;
1720c1720
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
(84.8 %, 31173 bytes)
1712,1713c1712,1713
<                ( int fd,
<                  const char *mode )
---
>                 int fd,
>                  const char *mode 
1715c1715
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>    return bzopen_or_bzdopenNULL,fd,mode,1;
1720c1720
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
1720c1720
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) BZFILE* b, void* buf, int len 
1723c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1723c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1723c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1725c1725
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END {
1734c1734
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
(84.8 %, 31171 bytes)
1720c1720
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread BZFILE* b, void* buf, int len 
1723c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b)->lastErr == BZ_STREAM_END return 0;
1723c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*)b->lastErr == BZ_STREAM_END) return 0;
1723c1723
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((bzFile*b)->lastErr == BZ_STREAM_END) return 0;
1725c1725
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_OK || bzerr == BZ_STREAM_END {
1734c1734
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
1734c1734
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) BZFILE* b, void* buf, int len 
1739c1739
<    if(bzerr == BZ_OK){
---
>    ifbzerr == BZ_OK{
1748c1748
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
(84.8 %, 31169 bytes)
1734c1734
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite BZFILE* b, void* buf, int len 
1739c1739
<    if(bzerr == BZ_OK){
---
>    ifbzerr == BZ_OK{
1748c1748
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (BZFILE *b)
1748c1748
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
> int BZ_API(BZ2_bzflush) BZFILE *b
1756c1756
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
(84.8 %, 31167 bytes)
1748c1748
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush BZFILE *b
1756c1756
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (BZFILE* b)
1756c1756
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> void BZ_API(BZ2_bzclose) BZFILE* b
1759c1759
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *)b->handle;
1759c1759
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *b)->handle;
1761c1761
<    if (b==NULL) 
---
>    if b==NULL 
1762c1762
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b)->writing{
1762c1762
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b->writing){
1762c1762
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*b)->writing){
1763c1763
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL;
1764c1764
<       if(bzerr != BZ_OK){
---
>       ifbzerr != BZ_OK{
1765c1765
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL;
1768c1768
<    if(fp!=stdin && fp!=stdout){
---
>    iffp!=stdin && fp!=stdout{
1769c1769
<       fclose(fp);
---
>       fclosefp;
1797c1797
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
(84.8 %, 31165 bytes)
1756c1756
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose BZFILE* b
1759c1759
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *)b->handle;
1759c1759
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *fp = (bzFile *b)->handle;
1761c1761
<    if (b==NULL) 
---
>    if b==NULL 
1762c1762
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b)->writing{
1762c1762
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*)b->writing){
1762c1762
<    if(((bzFile*)b)->writing){
---
>    if((bzFile*b)->writing){
1763c1763
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       BZ2_bzWriteClose&bzerr,b,0,NULL,NULL;
1764c1764
<       if(bzerr != BZ_OK){
---
>       ifbzerr != BZ_OK{
1765c1765
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>          BZ2_bzWriteCloseNULL,b,1,NULL,NULL;
1768c1768
<    if(fp!=stdin && fp!=stdout){
---
>    iffp!=stdin && fp!=stdout{
1769c1769
<       fclose(fp);
---
>       fclosefp;
1797c1797
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
1797c1797
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) BZFILE *b, int *errnum
1799c1799
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *)b->lastErr;
1799c1799
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *b)->lastErr;
1801c1801
<    if(err>0) err = 0;
---
>    iferr>0 err = 0;
1845c1845
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
(84.8 %, 31163 bytes)
1797c1797
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror BZFILE *b, int *errnum
1799c1799
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *)b->lastErr;
1799c1799
<    int err = ((bzFile *)b)->lastErr;
---
>    int err = (bzFile *b)->lastErr;
1801c1801
<    if(err>0) err = 0;
---
>    iferr>0 err = 0;
1845c1845
< #define ERROR_IF_EOF(i)       
---
> #define ERROR_IF_EOFi       
1846c1846
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
1847c1847
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
(84.8 %, 31161 bytes)
1846c1846
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define ERROR_IF_NOT_ZEROi  
1847c1847
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
(84.8 %, 31159 bytes)
1847c1847
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ERROR_IF_MINUS_ONEi 
1863c1863
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
(84.8 %, 31157 bytes)
1863c1863
< #   define APPEND_FILESPEC(root, name) \
---
> #   define APPEND_FILESPECroot, name \
1864c1864
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1864c1864
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(84.8 %, 31155 bytes)
1864c1864
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1864c1864
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(84.8 %, 31153 bytes)
1864c1864
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1864c1864
<       root=snocString(root), (name)
---
>       root=snocString(root), name
(84.8 %, 31151 bytes)
1864c1864
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1866c1866
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
(84.8 %, 31149 bytes)
1866c1866
< #   define APPEND_FLAG(root, name) \
---
> #   define APPEND_FLAGroot, name \
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(84.8 %, 31147 bytes)
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString(root), (name)
1867c1867
<       root=snocString((root), (name))
---
>       root=snocString(root, (name))
(84.8 %, 31145 bytes)
1867c1867
<       root=snocString(root), (name)
---
>       root=snocStringroot, (name)
1867c1867
<       root=snocString(root), (name)
---
>       root=snocString(root), name
1869c1869
< #   define SET_BINARY_MODE(d) 
---
> #   define SET_BINARY_MODEd 
(84.8 %, 31143 bytes)
1867c1867
<       root=snocStringroot, (name)
---
>       root=snocStringroot, name
1869c1869
< #   define SET_BINARY_MODE(d) 
---
> #   define SET_BINARY_MODEd 
1880c1880
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(84.8 %, 31141 bytes)
1869c1869
< #   define SET_BINARY_MODE(d) 
---
> #   define SET_BINARY_MODEd 
1880c1880
< #define True  ((Bool)1)
---
> #define True  (Bool)1
(84.8 %, 31139 bytes)
1880c1880
< #define True  ((Bool)1)
---
> #define True  (Bool)1
1880c1880
< #define True  ((Bool)1)
---
> #define True  (Bool1)
(84.8 %, 31137 bytes)
1880c1880
< #define True  (Bool)1
---
> #define True  Bool1
1881c1881
< #define False ((Bool)0)
---
> #define False (Bool)0
1881c1881
< #define False ((Bool)0)
---
> #define False (Bool0)
(84.8 %, 31135 bytes)
1881c1881
< #define False ((Bool)0)
---
> #define False (Bool)0
1881c1881
< #define False ((Bool)0)
---
> #define False (Bool0)
2141c2141
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
(84.8 %, 31133 bytes)
1881c1881
< #define False (Bool)0
---
> #define False Bool0
2141c2141
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
2141c2141
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) strcmp(aa->name, (s))==0
(84.8 %, 31131 bytes)
2141c2141
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmp(aa->name, (s))==0)
2141c2141
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) strcmp(aa->name, (s))==0
2141c2141
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define ISFLAG(s) (strcmpaa->name, (s)==0)
(84.8 %, 31129 bytes)
2141c2141
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs strcmp(aa->name, (s))==0
2141c2141
< #define ISFLAGs (strcmp(aa->name, (s))==0)
---
> #define ISFLAGs (strcmpaa->name, (s)==0)
(84.8 %, 31127 bytes)
2141c2141
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmpaa->name, (s)==0
2141c2141
< #define ISFLAGs strcmp(aa->name, (s))==0
---
> #define ISFLAGs strcmp(aa->name, s)==0
2143c2143
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
(84.8 %, 31125 bytes)
2141c2141
< #define ISFLAGs strcmpaa->name, (s)==0
---
> #define ISFLAGs strcmpaa->name, s==0
2143c2143
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
(84.8 %, 31123 bytes)
2143c2143
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main  IntNative argc, Char *argv[] 
===< pass_clang :: param-to-local >===
61c61
<       bz_stream* strm, 
---
>        
1010c1010
<                     ( bz_stream* strm, 
---
>                     (  
1014a1015
>    bz_stream * strm = 0;
62c62
<       int        blockSize100k, 
---
>        
1011c1011
<                      int        blockSize100k,
---
>                      
1014a1015
>    int blockSize100k = 0;
(84.8 %, 31116 bytes)
62c62
<       int        blockSize100k, 
---
>        
1011c1011
<                      int        blockSize100k,
---
>                      
1014a1015
>    int blockSize100k = 0;
63c63
<       int        verbosity, 
---
>        
1012c1012
<                      int        verbosity,
---
>                      
1014a1015
>    int verbosity = 0;
(84.8 %, 31092 bytes)
63c63
<       int        verbosity, 
---
>        
1012c1012
<                      int        verbosity,
---
>                      
1014a1015
>    int verbosity = 0;
63,64c63
<       int        verbosity, 
<       int        workFactor 
---
>       int        verbosity 
1012,1013c1011
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        verbosity )
1014a1013
>    int workFactor = 0;
(84.8 %, 31072 bytes)
64c64
<       int        workFactor 
---
>       void 
1013c1013
<                      int        workFactor )
---
>                      void )
1014a1015
>    int workFactor = 0;
68c68
<       bz_stream* strm, 
---
>        
1114c1114
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress (  int action )
1115a1116
>    bz_stream * strm = 0;
(84.8 %, 31061 bytes)
68c68
<       bz_stream* strm, 
---
>        
1115c1115
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress (  int action )
1116a1117
>    bz_stream * strm = 0;
68,69c68
<       bz_stream* strm, 
<       int action 
---
>       bz_stream* strm 
1115c1114
< int BZ_APIBZ2_bzCompress ( bz_stream *strm, int action )
---
> int BZ_APIBZ2_bzCompress ( bz_stream *strm )
1116a1116
>    int action = 0;
(84.8 %, 31054 bytes)
69c69
<       int action 
---
>       void 
1115c1115
< int BZ_APIBZ2_bzCompress (  int action )
---
> int BZ_APIBZ2_bzCompress (  void )
1116a1117
>    int action = 0;
73c73
<       bz_stream* strm 
---
>       void 
1134c1134
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( void )
1135a1136
>    bz_stream * strm = 0;
(84.8 %, 31061 bytes)
73c73
<       bz_stream* strm 
---
>       void 
1135c1135
< int BZ_APIBZ2_bzCompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzCompressEnd  ( void )
1136a1137
>    bz_stream * strm = 0;
77c77
<       bz_stream *strm, 
---
>        
1161c1161
<                      ( bz_stream* strm, 
---
>                      (  
1164a1165
>    bz_stream * strm = 0;
(84.8 %, 31064 bytes)
77c77
<       bz_stream *strm, 
---
>        
1162c1162
<                      ( bz_stream* strm, 
---
>                      (  
1165a1166
>    bz_stream * strm = 0;
78c78
<       int       verbosity, 
---
>        
1163c1163
<                        int        verbosity,
---
>                        
1165a1166
>    int verbosity = 0;
78,79c78
<       int       verbosity, 
<       int       small
---
>       int       verbosity
1163,1164c1162
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity )
1165a1164
>    int small = 0;
(84.8 %, 31057 bytes)
78c78
<       int       verbosity, 
---
>        
1163c1163
<                        int        verbosity,
---
>                        
1165a1166
>    int verbosity = 0;
78,79c78
<       int       verbosity, 
<       int       small
---
>       int       verbosity
1163,1164c1162
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity )
1165a1164
>    int small = 0;
(84.9 %, 31038 bytes)
79c79
<       int       small
---
>       void
1164c1164
<                        int        small )
---
>                        void )
1165a1166
>    int small = 0;
83c83
<       bz_stream* strm 
---
>       void 
1228c1228
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( void )
1229a1230
>    bz_stream * strm = 0;
(84.9 %, 31033 bytes)
83c83
<       bz_stream* strm 
---
>       void 
1229c1229
< int BZ_APIBZ2_bzDecompress ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompress ( void )
1230a1231
>    bz_stream * strm = 0;
87c87
<       bz_stream *strm 
---
>       void 
1247c1247
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( void )
1248a1249
>    bz_stream * strm = 0;
(84.9 %, 31036 bytes)
87c87
<       bz_stream *strm 
---
>       void 
1248c1248
< int BZ_APIBZ2_bzDecompressEnd  ( bz_stream *strm )
---
> int BZ_APIBZ2_bzDecompressEnd  ( void )
1249a1250
>    bz_stream * strm = 0;
99c99
<       int*  bzerror,   
---
>          
100c100
<       FILE* f, 
---
>        
101c101
<       int   verbosity, 
---
>        
102c102
<       int   small,
---
>       
103c103
<       void* unused,    
---
>           
(84.9 %, 31039 bytes)
99c99
<       int*  bzerror,   
---
>          
100c100
<       FILE* f, 
---
>        
101c101
<       int   verbosity, 
---
>        
102c102
<       int   small,
---
>       
103c103
<       void* unused,    
---
>           
103,104c103
<       void* unused,    
<       int   nUnused 
---
>       void* unused 
108c108
<       int*    bzerror, 
---
>        
1500c1500
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  BZFILE *b )
1501a1502
>    int * bzerror = 0;
108,109c108
<       int*    bzerror, 
<       BZFILE* b 
---
>       int*    bzerror 
1500c1499
< void BZ_APIBZ2_bzReadClose ( int *bzerror, BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose ( int *bzerror )
1501a1501
>    BZFILE * b = 0;
(84.9 %, 31032 bytes)
109c109
<       BZFILE* b 
---
>       void 
1500c1500
< void BZ_APIBZ2_bzReadClose (  BZFILE *b )
---
> void BZ_APIBZ2_bzReadClose (  void )
1501a1502
>    BZFILE * b = 0;
113c113
<       int*    bzerror, 
---
>        
1555c1555
<                      ( int*    bzerror, 
---
>                      (  
1559a1560
>    int * bzerror = 0;
(84.9 %, 31041 bytes)
113c113
<       int*    bzerror, 
---
>        
1556c1556
<                      ( int*    bzerror, 
---
>                      (  
1560a1561
>    int * bzerror = 0;
114c114
<       BZFILE* b, 
---
>        
1557c1557
<                        BZFILE* b, 
---
>                         
1560a1561
>    BZFILE * b = 0;
(84.9 %, 31031 bytes)
114c114
<       BZFILE* b, 
---
>        
1557c1557
<                        BZFILE* b, 
---
>                         
1560a1561
>    BZFILE * b = 0;
115c115
<       void**  unused,  
---
>         
1558c1558
<                        void**  unused, 
---
>                         
1560a1561
>    void ** unused = 0;
(84.9 %, 31030 bytes)
115c115
<       void**  unused,  
---
>         
1558c1558
<                        void**  unused, 
---
>                         
1560a1561
>    void ** unused = 0;
115,116c115
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unused 
1558,1559c1557
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused )
1560a1559
>    int * nUnused = 0;
(84.9 %, 31023 bytes)
116c116
<       int*    nUnused 
---
>       void 
1559c1559
<                        int*    nUnused )
---
>                        void )
1560a1561
>    int * nUnused = 0;
120c120
<       int*    bzerror, 
---
>        
1523c1523
<            ( int*    bzerror, 
---
>            (  
1527a1528
>    int * bzerror = 0;
(84.9 %, 31023 bytes)
120c120
<       int*    bzerror, 
---
>        
1523c1523
<            ( int*    bzerror, 
---
>            (  
1527a1528
>    int * bzerror = 0;
121c121
<       BZFILE* b, 
---
>        
1524c1524
<              BZFILE* b, 
---
>               
1527a1528
>    BZFILE * b = 0;
(84.9 %, 31013 bytes)
121c121
<       BZFILE* b, 
---
>        
1524c1524
<              BZFILE* b, 
---
>               
1527a1528
>    BZFILE * b = 0;
122c122
<       void*   buf, 
---
>        
1525c1525
<              void*   buf, 
---
>               
1527a1528
>    void * buf = 0;
(84.9 %, 31012 bytes)
122c122
<       void*   buf, 
---
>        
1525c1525
<              void*   buf, 
---
>               
1527a1528
>    void * buf = 0;
122,123c122
<       void*   buf, 
<       int     len 
---
>       void*   buf 
1525,1526c1524
<              void*   buf, 
<              int     len )
---
>              void*   buf )
1527a1526
>    int len = 0;
127c127
<       int*  bzerror,      
---
>             
(84.9 %, 31007 bytes)
123c123
<       int     len 
---
>       void 
1526c1526
<              int     len )
---
>              void )
1527a1528
>    int len = 0;
127c127
<       int*  bzerror,      
---
>             
128c128
<       FILE* f, 
---
>        
129c129
<       int   blockSize100k, 
---
>        
130c130
<       int   verbosity, 
---
>        
130,131c130
<       int   verbosity, 
<       int   workFactor 
---
>       int   verbosity 
(84.9 %, 31009 bytes)
127c127
<       int*  bzerror,      
---
>             
128c128
<       FILE* f, 
---
>        
129c129
<       int   blockSize100k, 
---
>        
130c130
<       int   verbosity, 
---
>        
130,131c130
<       int   verbosity, 
<       int   workFactor 
---
>       int   verbosity 
135c135
<       int*    bzerror, 
---
>        
1343c1343
<              ( int*    bzerror, 
---
>              (  
1347a1348
>    int * bzerror = 0;
136c136
<       BZFILE* b, 
---
>        
1344c1344
<                BZFILE* b, 
---
>                 
1347a1348
>    BZFILE * b = 0;
(84.9 %, 30999 bytes)
136c136
<       BZFILE* b, 
---
>        
1344c1344
<                BZFILE* b, 
---
>                 
1347a1348
>    BZFILE * b = 0;
137c137
<       void*   buf, 
---
>        
1345c1345
<                void*   buf, 
---
>                 
1347a1348
>    void * buf = 0;
(84.9 %, 30998 bytes)
137c137
<       void*   buf, 
---
>        
1345c1345
<                void*   buf, 
---
>                 
1347a1348
>    void * buf = 0;
137,138c137
<       void*   buf, 
<       int     len 
---
>       void*   buf 
1345,1346c1344
<                void*   buf, 
<                int     len )
---
>                void*   buf )
1347a1346
>    int len = 0;
(84.9 %, 30993 bytes)
138c138
<       int     len 
---
>       void 
1346c1346
<                int     len )
---
>                void )
1347a1348
>    int len = 0;
142c142
<       int*          bzerror, 
---
>        
1390c1390
<                   ( int*          bzerror, 
---
>                   (  
1395a1396
>     int * bzerror = 0;
(84.9 %, 30995 bytes)
142c142
<       int*          bzerror, 
---
>        
1391c1391
<                   ( int*          bzerror, 
---
>                   (  
1396a1397
>     int * bzerror = 0;
143c143
<       BZFILE*       b, 
---
>        
1392c1392
<                     BZFILE*       b, 
---
>                      
1396a1397
>     BZFILE * b = 0;
(84.9 %, 30974 bytes)
143c143
<       BZFILE*       b, 
---
>        
1392c1392
<                     BZFILE*       b, 
---
>                      
1396a1397
>     BZFILE * b = 0;
144c144
<       int           abandon, 
---
>        
1393c1393
<                     int           abandon,
---
>                     
1396a1397
>     int abandon = 0;
145c145
<       unsigned int* nbytes_in, 
---
>        
1394c1394
<                     unsigned int* nbytes_in,
---
>                     
1396a1397
>     unsigned int * nbytes_in = 0;
(84.9 %, 30962 bytes)
144c144
<       int           abandon, 
---
>        
1393c1393
<                     int           abandon,
---
>                     
1396a1397
>     int abandon = 0;
145c145
<       unsigned int* nbytes_in, 
---
>        
1394c1394
<                     unsigned int* nbytes_in,
---
>                     
1396a1397
>     unsigned int * nbytes_in = 0;
(84.9 %, 30939 bytes)
145c145
<       unsigned int* nbytes_in, 
---
>        
1394c1394
<                     unsigned int* nbytes_in,
---
>                     
1396a1397
>     unsigned int * nbytes_in = 0;
145,146c145
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned int* nbytes_in 
1394,1395c1393
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_in )
1396a1395
>     unsigned int * nbytes_out = 0;
(84.9 %, 30925 bytes)
146c146
<       unsigned int* nbytes_out 
---
>       void 
1395c1395
<                     unsigned int* nbytes_out )
---
>                     void )
1396a1397
>     unsigned int * nbytes_out = 0;
163c163
<       char*         dest, 
---
>        
1600c1600
<                          ( char*         dest, 
---
>                          (  
1607a1608
>    char * dest = 0;
(84.9 %, 30920 bytes)
163c163
<       char*         dest, 
---
>        
1601c1601
<                          ( char*         dest, 
---
>                          (  
1608a1609
>    char * dest = 0;
164c164
<       unsigned int* destLen,
---
>       
1602c1602
<                            unsigned int* destLen,
---
>                            
1608a1609
>    unsigned int * destLen = 0;
165c165
<       char*         source, 
---
>        
1603c1603
<                            char*         source, 
---
>                             
1608a1609
>    char * source = 0;
(84.9 %, 30902 bytes)
164c164
<       unsigned int* destLen,
---
>       
1602c1602
<                            unsigned int* destLen,
---
>                            
1608a1609
>    unsigned int * destLen = 0;
165c165
<       char*         source, 
---
>        
1603c1603
<                            char*         source, 
---
>                             
1608a1609
>    char * source = 0;
(84.9 %, 30889 bytes)
165c165
<       char*         source, 
---
>        
1603c1603
<                            char*         source, 
---
>                             
1608a1609
>    char * source = 0;
166c166
<       unsigned int  sourceLen,
---
>       
1604c1604
<                            unsigned int  sourceLen,
---
>                            
1608a1609
>    unsigned int sourceLen = 0;
(84.9 %, 30869 bytes)
166c166
<       unsigned int  sourceLen,
---
>       
1604c1604
<                            unsigned int  sourceLen,
---
>                            
1608a1609
>    unsigned int sourceLen = 0;
167c167
<       int           blockSize100k, 
---
>        
1605c1605
<                            int           blockSize100k, 
---
>                             
1608a1609
>    int blockSize100k = 0;
(84.9 %, 30852 bytes)
167c167
<       int           blockSize100k, 
---
>        
1605c1605
<                            int           blockSize100k, 
---
>                             
1608a1609
>    int blockSize100k = 0;
168c168
<       int           verbosity, 
---
>        
1606c1606
<                            int           verbosity, 
---
>                             
1608a1609
>    int verbosity = 0;
168,169c168
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosity 
1606,1607c1605
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity )
1608a1607
>    int workFactor = 0;
(85.0 %, 30822 bytes)
168c168
<       int           verbosity, 
---
>        
1606c1606
<                            int           verbosity, 
---
>                             
1608a1609
>    int verbosity = 0;
168,169c168
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosity 
1606,1607c1605
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity )
1608a1607
>    int workFactor = 0;
(85.0 %, 30796 bytes)
169c169
<       int           workFactor 
---
>       void 
1607c1607
<                            int           workFactor )
---
>                            void )
1608a1609
>    int workFactor = 0;
173c173
<       char*         dest, 
---
>        
1662c1662
<                            ( char*         dest, 
---
>                            (  
1668a1669
>    char * dest = 0;
174c174
<       unsigned int* destLen,
---
>       
1663c1663
<                              unsigned int* destLen,
---
>                              
1668a1669
>    unsigned int * destLen = 0;
(85.0 %, 30779 bytes)
173c173
<       char*         dest, 
---
>        
1663c1663
<                            ( char*         dest, 
---
>                            (  
1669a1670
>    char * dest = 0;
174c174
<       unsigned int* destLen,
---
>       
1664c1664
<                              unsigned int* destLen,
---
>                              
1669a1670
>    unsigned int * destLen = 0;
(85.0 %, 30761 bytes)
174c174
<       unsigned int* destLen,
---
>       
1664c1664
<                              unsigned int* destLen,
---
>                              
1669a1670
>    unsigned int * destLen = 0;
175c175
<       char*         source, 
---
>        
1665c1665
<                              char*         source, 
---
>                               
1669a1670
>    char * source = 0;
(85.0 %, 30748 bytes)
175c175
<       char*         source, 
---
>        
1665c1665
<                              char*         source, 
---
>                               
1669a1670
>    char * source = 0;
176c176
<       unsigned int  sourceLen,
---
>       
1666c1666
<                              unsigned int  sourceLen,
---
>                              
1669a1670
>    unsigned int sourceLen = 0;
(85.0 %, 30728 bytes)
176c176
<       unsigned int  sourceLen,
---
>       
1666c1666
<                              unsigned int  sourceLen,
---
>                              
1669a1670
>    unsigned int sourceLen = 0;
177c177
<       int           small, 
---
>        
1667c1667
<                              int           small,
---
>                              
1669a1670
>    int small = 0;
(85.0 %, 30711 bytes)
177c177
<       int           small, 
---
>        
1667c1667
<                              int           small,
---
>                              
1669a1670
>    int small = 0;
177,178c177
<       int           small, 
<       int           verbosity 
---
>       int           small 
1667,1668c1666
<                              int           small,
<                              int           verbosity )
---
>                              int           small )
1669a1668
>    int verbosity = 0;
(85.0 %, 30689 bytes)
178c178
<       int           verbosity 
---
>       void 
1668c1668
<                              int           verbosity )
---
>                              void )
1669a1670
>    int verbosity = 0;
189c189
<       const char *path,
---
>       
1746c1746
<                ( const char *path,
---
>                ( 
1748a1749
>    const char * path = 0;
(85.0 %, 30673 bytes)
189c189
<       const char *path,
---
>       
1747c1747
<                ( const char *path,
---
>                ( 
1749a1750
>    const char * path = 0;
189,190c189
<       const char *path,
<       const char *mode
---
>       const char *path
1747,1748c1746
<                ( const char *path,
<                  const char *mode )
---
>                ( const char *path )
1749a1748
>    const char * mode = 0;
(85.0 %, 30665 bytes)
190c190
<       const char *mode
---
>       void
1748c1748
<                  const char *mode )
---
>                  void )
1749a1750
>    const char * mode = 0;
194c194
<       int        d,
---
>       
1757c1757
<                ( int fd,
---
>                ( 
1759a1760
>     int fd = 0;
(85.0 %, 30667 bytes)
194c194
<       int        d,
---
>       
1758c1758
<                ( int fd,
---
>                ( 
1760a1761
>     int fd = 0;
194,195c194
<       int        d,
<       const char *mode
---
>       int        d
1758,1759c1757
<                ( int fd,
<                  const char *mode )
---
>                ( int fd )
1760a1759
>     const char * mode = 0;
(85.0 %, 30663 bytes)
195c195
<       const char *mode
---
>       void
1759c1759
<                  const char *mode )
---
>                  void )
1760a1761
>     const char * mode = 0;
199c199
<       BZFILE* b, 
---
>        
1767c1767
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread ( void* buf, int len )
1768a1769
>    BZFILE * b = 0;
(85.0 %, 30666 bytes)
199c199
<       BZFILE* b, 
---
>        
1768c1768
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread ( void* buf, int len )
1769a1770
>    BZFILE * b = 0;
200c200
<       void* buf, 
---
>        
1768c1768
< int BZ_APIBZ2_bzread (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzread (BZFILE* b,  int len )
1769a1770
>    void * buf = 0;
(85.0 %, 30665 bytes)
200c200
<       void* buf, 
---
>        
1768c1768
< int BZ_APIBZ2_bzread ( void* buf, int len )
---
> int BZ_APIBZ2_bzread (  int len )
1769a1770
>    void * buf = 0;
200,201c200
<       void* buf, 
<       int len 
---
>       void* buf 
1768c1767
< int BZ_APIBZ2_bzread ( void* buf, int len )
---
> int BZ_APIBZ2_bzread ( void* buf )
1769a1769
>    int len = 0;
(85.0 %, 30664 bytes)
201c201
<       int len 
---
>       void 
1768c1768
< int BZ_APIBZ2_bzread (  int len )
---
> int BZ_APIBZ2_bzread (  void )
1769a1770
>    int len = 0;
205c205
<       BZFILE* b, 
---
>        
1784c1784
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite ( void* buf, int len )
1785a1786
>    BZFILE * b = 0;
(85.0 %, 30674 bytes)
205c205
<       BZFILE* b, 
---
>        
1785c1785
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite ( void* buf, int len )
1786a1787
>    BZFILE * b = 0;
206c206
<       void*   buf, 
---
>        
1785c1785
< int BZ_APIBZ2_bzwrite (BZFILE* b, void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (BZFILE* b,  int len )
1786a1787
>    void * buf = 0;
(85.0 %, 30673 bytes)
206c206
<       void*   buf, 
---
>        
1785c1785
< int BZ_APIBZ2_bzwrite ( void* buf, int len )
---
> int BZ_APIBZ2_bzwrite (  int len )
1786a1787
>    void * buf = 0;
206,207c206
<       void*   buf, 
<       int     len 
---
>       void*   buf 
1785c1784
< int BZ_APIBZ2_bzwrite ( void* buf, int len )
---
> int BZ_APIBZ2_bzwrite ( void* buf )
1786a1786
>    int len = 0;
(85.0 %, 30670 bytes)
207c207
<       int     len 
---
>       void 
1785c1785
< int BZ_APIBZ2_bzwrite (  int len )
---
> int BZ_APIBZ2_bzwrite (  void )
1786a1787
>    int len = 0;
211c211
<       BZFILE* b
---
>       void
1801c1801
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (void)
1802a1803
>    BZFILE * b = 0;
(85.0 %, 30676 bytes)
211c211
<       BZFILE* b
---
>       void
1802c1802
< int BZ_APIBZ2_bzflush (BZFILE *b)
---
> int BZ_APIBZ2_bzflush (void)
1803a1804
>    BZFILE * b = 0;
215c215
<       BZFILE* b
---
>       void
1810c1810
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (void)
1811a1812
>    BZFILE * b = 0;
(85.0 %, 30685 bytes)
215c215
<       BZFILE* b
---
>       void
1811c1811
< void BZ_APIBZ2_bzclose (BZFILE* b)
---
> void BZ_APIBZ2_bzclose (void)
1812a1813
>    BZFILE * b = 0;
219c219
<       BZFILE *b, 
---
>        
1852c1852
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( int *errnum)
1853a1854
>    BZFILE * b = 0;
(85.0 %, 30694 bytes)
219c219
<       BZFILE *b, 
---
>        
1853c1853
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( int *errnum)
1854a1855
>    BZFILE * b = 0;
219,220c219
<       BZFILE *b, 
<       int    *errnum
---
>       BZFILE *b
1853c1852
< const char * BZ_APIBZ2_bzerror (BZFILE *b, int *errnum)
---
> const char * BZ_APIBZ2_bzerror (BZFILE *b)
1854a1854
>    int * errnum = 0;
(85.0 %, 30693 bytes)
220c220
<       int    *errnum
---
>       void
1853c1853
< const char * BZ_APIBZ2_bzerror ( int *errnum)
---
> const char * BZ_APIBZ2_bzerror ( void)
1854a1855
>    int * errnum = 0;
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ( void );
971c971
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail ( void )
(85.0 %, 30697 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> extern void BZ2_bz__AssertH__fail ( void );
971c971
< void BZ2_bz__AssertH__fail ( int errcode )
---
> void BZ2_bz__AssertH__fail ( void )
829c829
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
830a831
>    EState * s = 0;
(85.0 %, 30683 bytes)
829c829
< void makeMaps_e ( EState* s )
---
> void makeMaps_e ( void )
830a831
>    EState * s = 0;
843c843
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
844a845
>    EState * s = 0;
(85.0 %, 30697 bytes)
844c844
< void generateMTFValues ( EState* s )
---
> void generateMTFValues ( void )
845a846
>    EState * s = 0;
984c984
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items, Int32 size )
(85.0 %, 30711 bytes)
985c985
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items, Int32 size )
985c985
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* default_bzalloc ( void* opaque,  Int32 size )
(85.0 %, 30698 bytes)
985c985
< void* default_bzalloc (  Int32 items, Int32 size )
---
> void* default_bzalloc (   Int32 size )
985c985
< void* default_bzalloc (  Int32 items, Int32 size )
---
> void* default_bzalloc (  Int32 items )
989c989
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
(85.0 %, 30686 bytes)
985c985
< void* default_bzalloc (   Int32 size )
---
> void* default_bzalloc (   void )
989c989
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
(85.0 %, 30680 bytes)
989c989
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree (  void* addr )
989c989
< void default_bzfree ( void* opaque, void* addr )
---
> void default_bzfree ( void* opaque )
(85.0 %, 30667 bytes)
989c989
< void default_bzfree (  void* addr )
---
> void default_bzfree (  void )
995c995
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
(85.0 %, 30661 bytes)
995c995
< void prepare_new_block ( EState* s )
---
> void prepare_new_block ( void )
1001c1001
< void init_RL ( EState* s )
---
> void init_RL ( void )
(85.0 %, 30656 bytes)
1001c1001
< void init_RL ( EState* s )
---
> void init_RL ( void )
1006c1006
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
(85.0 %, 30651 bytes)
1006c1006
< Bool isempty_RL ( EState* s )
---
> Bool isempty_RL ( void )
1112c1112
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( void )
(85.0 %, 30646 bytes)
1112c1112
< Bool handle_compress ( bz_stream* strm )
---
> Bool handle_compress ( void )
1215c1215
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
(85.1 %, 30635 bytes)
1215c1215
< void unRLE_obuf_to_output_FAST ( DState* s )
---
> void unRLE_obuf_to_output_FAST ( void )
1226c1226
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
(85.1 %, 30630 bytes)
1226c1226
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> void unRLE_obuf_to_output_SMALL ( void )
1410c1410
<                   ( int*          bzerror, 
---
>                   (  
1417a1418
>    int * bzerror = 0;
(85.1 %, 30625 bytes)
1410c1410
<                   ( int*          bzerror, 
---
>                   (  
1417a1418
>    int * bzerror = 0;
1411c1411
<                     BZFILE*       b, 
---
>                      
1417a1418
>    BZFILE * b = 0;
(85.1 %, 30625 bytes)
1411c1411
<                     BZFILE*       b, 
---
>                      
1417a1418
>    BZFILE * b = 0;
1412c1412
<                     int           abandon,
---
>                     
1417a1418
>    int abandon = 0;
(85.1 %, 30628 bytes)
1412c1412
<                     int           abandon,
---
>                     
1417a1418
>    int abandon = 0;
1413c1413
<                     unsigned int* nbytes_in_lo32,
---
>                     
1417a1418
>    unsigned int * nbytes_in_lo32 = 0;
1414c1414
<                     unsigned int* nbytes_in_hi32,
---
>                     
1417a1418
>    unsigned int * nbytes_in_hi32 = 0;
(85.1 %, 30626 bytes)
1413c1413
<                     unsigned int* nbytes_in_lo32,
---
>                     
1417a1418
>    unsigned int * nbytes_in_lo32 = 0;
1414c1414
<                     unsigned int* nbytes_in_hi32,
---
>                     
1417a1418
>    unsigned int * nbytes_in_hi32 = 0;
(85.1 %, 30635 bytes)
1414c1414
<                     unsigned int* nbytes_in_hi32,
---
>                     
1417a1418
>    unsigned int * nbytes_in_hi32 = 0;
1415c1415
<                     unsigned int* nbytes_out_lo32,
---
>                     
1417a1418
>    unsigned int * nbytes_out_lo32 = 0;
(85.0 %, 30644 bytes)
1415c1415
<                     unsigned int* nbytes_out_lo32,
---
>                     
1417a1418
>    unsigned int * nbytes_out_lo32 = 0;
1415,1416c1415
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32 )
1417a1417
>    unsigned int * nbytes_out_hi32 = 0;
(85.0 %, 30653 bytes)
1416c1416
<                     unsigned int* nbytes_out_hi32 )
---
>                     void )
1417a1418
>    unsigned int * nbytes_out_hi32 = 0;
1745c1745
<                ( const char *path,   
---
>                (    
1746c1746
<                  int d,             
---
>                               
1747c1747
<                  const char *mode,
---
>                  
1747,1748c1747
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2209c2209
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main (  Char *argv[] )
(85.0 %, 30667 bytes)
1746c1746
<                ( const char *path,   
---
>                (    
1747c1747
<                  int d,             
---
>                               
1748c1748
<                  const char *mode,
---
>                  
1748,1749c1748
<                  const char *mode,
<                  int open_mode)      
---
>                  const char *mode)      
2210c2210
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main (  Char *argv[] )
2210c2210
< IntNative main ( IntNative argc, Char *argv[] )
---
> IntNative main ( IntNative argc )
(85.0 %, 30653 bytes)
===< pass_clang :: lift-assignment-expr >===
834c834,836
<    for (i = 0; i < 6; i++)
---
>    i = 0;
>    
>    for (i; i < 6; i++)
866c866,868
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    i = 0;
>    
>    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
(85.0 %, 30663 bytes)
868c868,870
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    i = 0;
>    
>    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
872c872,874
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    i = 0;
>    
>    for (i; i < s->nInUse; i++) yy_0 = (UChar) i;
(85.0 %, 30673 bytes)
874c874,876
<    for (i = 0; i < s->nInUse; i++) yy_0 = (UChar) i;
---
>    i = 0;
>    
>    for (i; i < s->nInUse; i++) yy_0 = (UChar) i;
876c876,878
<    for (i = 0; i < s->nblock; i++) {
---
>    i = 0;
>    
>    for (i; i < s->nblock; i++) {
(85.0 %, 30683 bytes)
878c878,880
<    for (i = 0; i < s->nblock; i++) {
---
>    i = 0;
>    
>    for (i; i < s->nblock; i++) {
(85.0 %, 30693 bytes)
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: replace-derived-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-addr-taken >===
1513c1513
<    ret = BZ2_bzDecompressInit ( &bzf->strm, verbosity, small );
---
>    ret = BZ2_bzDecompressInit ( bzf->strm, verbosity, small );
(85.0 %, 30692 bytes)
===< pass_clang :: replace-undefined-function >===
1119,1121c1119
< static
< Bool handle_compress ( void )
< ;
---
> 
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
> 
981,982c981
< void BZ2_bz__AssertH__fail ( void )
< ;
---
> 
(85.0 %, 30654 bytes)
618,619c618
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
962,963c961
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
996,998c996
< static
< void default_bzfree (  void )
< ;
---
> 
996,998c996
< static
< void default_bzfree (  void )
< ;
---
> 
1002,1004c1002
< static
< void prepare_new_block ( void )
< ;
---
> 
(85.1 %, 30577 bytes)
253c253
< extern void BZ2_bz__AssertH__fail ( void );
---
> 
979,980c979
< void BZ2_bz__AssertH__fail ( void )
< ;
---
> 
994,996c994
< static
< void default_bzfree (  void )
< ;
---
> 
1000,1002c1000
< static
< void prepare_new_block ( void )
< ;
---
> 
(85.1 %, 30497 bytes)
999,1001c999
< static
< void prepare_new_block ( void )
< ;
---
> 
1005,1007c1005
< static
< void init_RL ( void )
< ;
---
> 
(85.1 %, 30457 bytes)
1003,1005c1003
< static
< void init_RL ( void )
< ;
---
> 
1215,1217c1215
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
---
> 
(85.2 %, 30427 bytes)
1213,1215c1213
< static
< void unRLE_obuf_to_output_FAST ( void )
< ;
---
> 
1224,1226c1224
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
---
> 
(85.2 %, 30379 bytes)
1222,1224c1222
< static
< void unRLE_obuf_to_output_SMALL ( void )
< ;
---
> 
(85.2 %, 30330 bytes)
===< pass_unifdef :: 0 >===
1915d1914
< #if BZ_UNIX
1935,1936d1933
< #endif 
< 
2117,2131d2113
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
1915,1940d1914
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEd 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
2117,2131d2090
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
(85.2 %, 30277 bytes)
===< pass_special :: b >===
===< pass_special :: c >===
Termination check: size was 31528; now 30277
===< pass_ternary :: b >===
694c694
< #define mmina,b a < b ? a : b
---
> #define mmina,b a < a
(85.2 %, 30269 bytes)
===< pass_clang :: remove-namespace >===
===< pass_clang :: callexpr-to-value >===
1050c1050
<    s = BZALLOC( sizeof(EState) );
---
>    s = 0;
1059c1059
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = 0;
(85.2 %, 30245 bytes)
1059c1059
<    s_4 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s_4 = 0;
1060c1060
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s_5 = 0 * sizeof(UInt32) ;
(85.3 %, 30200 bytes)
1060c1060
<    s_5 = BZALLOC (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
---
>    s_5 = 0 * sizeof(UInt32) ;
1061c1061
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6 = 0;
(85.3 %, 30175 bytes)
1061c1061
<    s_6 = BZALLOC( 7              * sizeof(UInt32) );
---
>    s_6 = 0;
1149c1149
<    BZFREE(strm->state);
---
>    0;
(85.3 %, 30134 bytes)
1149c1149
<    BZFREE(strm->state);
---
>    0;
1189c1189
<    s = BZALLOC( sizeof(DState) );
---
>    s = 0;
(85.3 %, 30116 bytes)
1189c1189
<    s = BZALLOC( sizeof(DState) );
---
>    s = 0;
1238c1238
<    AssertH ( 0, 1 );
---
>    0;
(85.3 %, 30092 bytes)
1238c1238
<    AssertH ( 0, 1 );
---
>    0;
1259c1259
<    BZFREE(strm->state);
---
>    0;
(85.3 %, 30077 bytes)
1259c1259
<    BZFREE(strm->state);
---
>    0;
1357c1357
<    BZ_SETERR(BZ_OK);
---
>    0;
1449c1449
<    BZ_SETERR(BZ_OK);
---
>    0;
(85.3 %, 30059 bytes)
1357c1357
<    BZ_SETERR(BZ_OK);
---
>    0;
1449c1449
<    BZ_SETERR(BZ_OK);
---
>    0;
(85.3 %, 30044 bytes)
1449c1449
<    BZ_SETERR(BZ_OK);
---
>    0;
1521c1521
<    BZ_SETERR(BZ_OK);
---
>    0;
(85.3 %, 30029 bytes)
1521c1521
<    BZ_SETERR(BZ_OK);
---
>    0;
1551c1551
<    BZ_SETERR(BZ_OK);
---
>    0;
(85.4 %, 30014 bytes)
1551c1551
<    BZ_SETERR(BZ_OK);
---
>    0;
1593c1593
<    BZ_SETERR(BZ_OK);
---
>    0;
(85.4 %, 29999 bytes)
1593c1593
<    BZ_SETERR(BZ_OK);
---
>    0;
(85.4 %, 29984 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: simplify-if >===
836c836,839
<       if (s->inUse[i]) {
---
>       {
>       s->inUse[i];
>       
>        {
838a842
>       }
882c882,884
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; j < 0;
>       
>        j += s->nblock;
(85.4 %, 30010 bytes)
886c886,888
<       j = ptr_0-1; if (j < 0) j += s->nblock;
---
>       j = ptr_0-1; j < 0;
>       
>        j += s->nblock;
890c890,892
<       if (yy_0 == ll_i) { 
---
>       yy_0 == ll_i;
>       
>        { 
892c894
<       } else {
---
>       }  {
(85.4 %, 30020 bytes)
892c892,894
<       if (yy_0 == ll_i) { 
---
>       yy_0 == ll_i;
>       
>        { 
894c896
<       } else {
---
>       }  {
896,897c896,898
<          if (zPend > 0) 
<          {
---
>          zPend > 0;
>          
>           {
(85.3 %, 30026 bytes)
898,899c898,900
<          if (zPend > 0) 
<          {
---
>          zPend > 0;
>          
>           {
916,918c916,918
<    if (zPend > 0) 
< 
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    zPend > 0;
>    
>     mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
(85.3 %, 30032 bytes)
917,919c917,919
<    if (zPend > 0) 
< 
<    mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>    zPend > 0;
>    
>     mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
1048c1048,1050
<    if (!0) return BZ_CONFIG_ERROR;
---
>    !0;
>    
>     return BZ_CONFIG_ERROR;
(85.3 %, 30031 bytes)
1048c1048,1050
<    if (!0) return BZ_CONFIG_ERROR;
---
>    !0;
>    
>     return BZ_CONFIG_ERROR;
1055c1055,1057
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
(85.3 %, 30035 bytes)
1057c1057,1059
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
1138c1138,1140
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
(85.3 %, 30039 bytes)
1140c1140,1142
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
1157c1157,1159
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
(85.3 %, 30043 bytes)
1159c1159,1161
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
1195c1195,1197
<    if (!0) return BZ_CONFIG_ERROR;
---
>    !0;
>    
>     return BZ_CONFIG_ERROR;
(85.3 %, 30047 bytes)
1197c1197,1199
<    if (!0) return BZ_CONFIG_ERROR;
---
>    !0;
>    
>     return BZ_CONFIG_ERROR;
1200c1200,1202
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    small != 0 && small != 1;
>    
>     return BZ_PARAM_ERROR;
(85.3 %, 30051 bytes)
1202c1202,1204
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    small != 0 && small != 1;
>    
>     return BZ_PARAM_ERROR;
1203c1203,1205
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    verbosity < 0 || verbosity > 4;
>    
>     return BZ_PARAM_ERROR;
(85.3 %, 30055 bytes)
1205c1205,1207
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    verbosity < 0 || verbosity > 4;
>    
>     return BZ_PARAM_ERROR;
1255c1255,1257
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
(85.3 %, 30059 bytes)
1257c1257,1259
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
1276c1276,1278
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
(85.3 %, 30063 bytes)
1278c1278,1280
<    if (s_0 != strm) return BZ_PARAM_ERROR;
---
>    s_0 != strm;
>    
>     return BZ_PARAM_ERROR;
1350c1350,1352
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
(85.3 %, 30067 bytes)
1352c1352,1354
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
1355,1356c1355,1357
<    if (ret != BZ_OK)
<       ;
---
>    ;
>    
>     ;
(85.3 %, 30071 bytes)
1357,1358c1357,1359
<    if (ret != BZ_OK)
<       ;
---
>    ;
>    
>     ;
1389,1390c1389,1391
<    if (!bzf_3)
<       ;
---
>    !bzf_3;
>    
>     ;
(85.3 %, 30057 bytes)
1390,1391c1390,1392
<    if (!bzf_3)
<       ;
---
>    !bzf_3;
>    
>     ;
1395,1396c1395,1397
<    if (len == 0)
<       ;
---
>    len == 0;
>    
>     ;
(85.3 %, 30055 bytes)
1396,1397c1396,1398
<    if (len == 0)
<       ;
---
>    len == 0;
>    
>     ;
1406,1407c1406,1408
<       if (ret != BZ_RUN_OK)
<          ;
---
>       ;
>       
>        ;
(85.3 %, 30053 bytes)
1407,1408c1407,1409
<       if (ret != BZ_RUN_OK)
<          ;
---
>       ;
>       
>        ;
1410,1412c1410,1412
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
< 
<       if (bzf_4_1 == 0)
---
>       ;
>       
>        if (bzf_4_1 == 0)
(85.3 %, 30038 bytes)
1411,1413c1411,1413
<       if (bzf_4_5 < BZ_MAX_UNUSED) 
< 
<       if (bzf_4_1 == 0)
---
>       ;
>       
>        if (bzf_4_1 == 0)
1413,1414c1413,1417
<       if (bzf_4_1 == 0)
<          ;
---
>       {
>       bzf_4_1 == 0;
>       
>        ;
>       }
(85.4 %, 30017 bytes)
1413,1414c1413,1415
<        if (bzf_4_1 == 0)
<          ;
---
>        bzf_4_1 == 0;
>        
>         ;
1459,1460c1459,1461
<    if (!bzf_3)
<       ;
---
>    !bzf_3;
>    
>     ;
(85.4 %, 30020 bytes)
1460,1461c1460,1462
<    if (!bzf_3)
<       ;
---
>    !bzf_3;
>    
>     ;
1535,1536c1535,1537
<    if (ret != BZ_OK)
<       ;
---
>    ;
>    
>     ;
(85.4 %, 30018 bytes)
1536,1537c1536,1538
<    if (ret != BZ_OK)
<       ;
---
>    ;
>    
>     ;
1560,1561c1560,1562
<    if (bzf_3)
<       ;
---
>    bzf_3;
>    
>     ;
(85.4 %, 30004 bytes)
1561,1562c1561,1563
<    if (bzf_3)
<       ;
---
>    bzf_3;
>    
>     ;
1564,1565c1564,1566
<    if (bzf_6)
<       (void)0;
---
>    bzf_6;
>    
>     (void)0;
(85.4 %, 30002 bytes)
1565,1566c1565,1567
<    if (bzf_6)
<       (void)0;
---
>    bzf_6;
>    
>     (void)0;
1593,1594c1593,1595
<    if (bzf_3)
<       ;
---
>    bzf_3;
>    
>     ;
(85.4 %, 30000 bytes)
1594,1595c1594,1596
<    if (bzf_3)
<       ;
---
>    bzf_3;
>    
>     ;
1597,1598c1597,1599
<    if (len == 0)
<       ;
---
>    len == 0;
>    
>     ;
1626,1627c1626,1628
<    if (bzf_5 != BZ_STREAM_END)
<       ;
---
>    ;
>    
>     ;
(85.4 %, 29998 bytes)
1598,1599c1598,1600
<    if (len == 0)
<       ;
---
>    len == 0;
>    
>     ;
1627,1628c1627,1629
<    if (bzf_5 != BZ_STREAM_END)
<       ;
---
>    ;
>    
>     ;
1673c1673,1675
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
(85.4 %, 29996 bytes)
1628,1629c1628,1630
<    if (bzf_5 != BZ_STREAM_END)
<       ;
---
>    ;
>    
>     ;
1674c1674,1676
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
(85.4 %, 29972 bytes)
1675c1675,1677
<    if (workFactor == 0) workFactor = 0;
---
>    workFactor == 0;
>    
>     workFactor = 0;
1680c1680,1682
<    if (ret != BZ_OK) return ret;
---
>    ;
>    
>     return ret;
(85.4 %, 29976 bytes)
1682c1682,1684
<    if (ret != BZ_OK) return ret;
---
>    ;
>    
>     return ret;
1690c1690,1692
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    ;
>    
>     goto output_overflow;
(85.4 %, 29968 bytes)
1692c1692,1694
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    ;
>    
>     goto output_overflow;
1693c1693,1695
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ;
>    
>     goto errhandler;
(85.4 %, 29953 bytes)
1695c1695,1697
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ;
>    
>     goto errhandler;
1744c1744,1746
<    if (ret != BZ_OK) return ret;
---
>    ;
>    
>     return ret;
(85.4 %, 29937 bytes)
1746c1746,1748
<    if (ret != BZ_OK) return ret;
---
>    ;
>    
>     return ret;
1754c1754,1756
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    ;
>    
>     goto output_overflow_or_eof;
(85.4 %, 29929 bytes)
1756c1756,1758
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    ;
>    
>     goto output_overflow_or_eof;
1757c1757,1759
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ;
>    
>     goto errhandler;
(85.4 %, 29921 bytes)
1759c1759,1761
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ;
>    
>     goto errhandler;
1767c1767,1769
<    if (strm_5 > 0) {
---
>    strm_5 > 0;
>    
>     {
1770c1772
<    } else ;      
---
>    }  ;      
(85.4 %, 29905 bytes)
1769c1769,1771
<    if (strm_5 > 0) {
---
>    strm_5 > 0;
>    
>     {
1772c1774
<    } else ;      
---
>    }  ;      
1833c1833,1835
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    ;
>    
>     return 0;
(85.4 %, 29905 bytes)
1835c1835,1837
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    ;
>    
>     return 0;
1837c1837,1839
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    ;
>    
>     {
1839c1841
<    } else {
---
>    }  {
(85.4 %, 29871 bytes)
1839c1839,1841
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    ;
>    
>     {
1841c1843
<    } else {
---
>    }  {
1856c1856,1858
<    if(bzerr == BZ_OK){
---
>    ;
>    
>    {
1858c1860
<    }else{
---
>    }{
(85.4 %, 29831 bytes)
1858c1858,1860
<    if(bzerr == BZ_OK){
---
>    ;
>    
>    {
1860c1862
<    }else{
---
>    }{
1924c1924,1926
<    if(err>0) err = 0;
---
>    err>0;
>    
>     err = 0;
(85.4 %, 29836 bytes)
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
===< pass_special :: c >===
===< pass_ints :: d >===
278c278
< #define BZ_HDR_B 0x2   
---
> #define BZ_HDR_B 2   
279c279
< #define BZ_HDR_Z 0xa   
---
> #define BZ_HDR_Z 10   
(85.4 %, 29834 bytes)
279c279
< #define BZ_HDR_Z 0xa   
---
> #define BZ_HDR_Z 10   
280c280
< #define BZ_HDR_h 0x8   
---
> #define BZ_HDR_h 8   
281c281
< #define BZ_HDR_0 0x0   
---
> #define BZ_HDR_0 0   
(85.4 %, 29833 bytes)
280c280
< #define BZ_HDR_h 0x8   
---
> #define BZ_HDR_h 8   
281c281
< #define BZ_HDR_0 0x0   
---
> #define BZ_HDR_0 0   
599c599
<     c = UChars->tPos & 0xf;           \
---
>     c = UChars->tPos & 15;           \
(85.4 %, 29831 bytes)
281c281
< #define BZ_HDR_0 0x0   
---
> #define BZ_HDR_0 0   
599c599
<     c = UChars->tPos & 0xf;           \
---
>     c = UChars->tPos & 15;           \
(85.4 %, 29829 bytes)
599c599
<     c = UChars->tPos & 0xf;           \
---
>     c = UChars->tPos & 15;           \
604c604
<     c = UCharc_tPos & 0xf;            \
---
>     c = UCharc_tPos & 15;            \
(85.4 %, 29828 bytes)
604c604
<     c = UCharc_tPos & 0xf;            \
---
>     c = UCharc_tPos & 15;            \
655c655
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define UNALIGNED_BHzz  zz & 15
(85.4 %, 29827 bytes)
655c655
< #define UNALIGNED_BHzz  zz & 0xf
---
> #define UNALIGNED_BHzz  zz & 15
(85.4 %, 29826 bytes)
===< pass_indent :: regular >===
1,6d0
<  
< 
< 
< 
< 
< 
11,50c5,40
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    -1
< #define BZ_PARAM_ERROR       -2
< #define BZ_MEM_ERROR         -3
< #define BZ_DATA_ERROR        -4
< #define BZ_DATA_ERROR_MAGIC  -5
< #define BZ_IO_ERROR          -6
< #define BZ_UNEXPECTED_EOF    -7
< #define BZ_OUTBUFF_FULL      -8
< #define BZ_CONFIG_ERROR      -9
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
---
> #define BZ_RUN 0
> #define BZ_FLUSH 1
> #define BZ_FINISH 2
> 
> #define BZ_OK 0
> #define BZ_RUN_OK 1
> #define BZ_FLUSH_OK 2
> #define BZ_FINISH_OK 3
> #define BZ_STREAM_END 4
> #define BZ_SEQUENCE_ERROR -1
> #define BZ_PARAM_ERROR -2
> #define BZ_MEM_ERROR -3
> #define BZ_DATA_ERROR -4
> #define BZ_DATA_ERROR_MAGIC -5
> #define BZ_IO_ERROR -6
> #define BZ_UNEXPECTED_EOF -7
> #define BZ_OUTBUFF_FULL -8
> #define BZ_CONFIG_ERROR -9
> 
> typedef struct {
>   char *next_in;
>   unsigned int avail_in;
>   unsigned int total_in_lo32;
>   unsigned int total_in_hi32;
> 
>   char *next_out;
>   unsigned int avail_out;
>   unsigned int total_out_lo32;
>   unsigned int total_out_hi32;
> 
>   void *state;
> 
>   void *(*bzalloc)(void *, int, int);
>   void (*bzfree)(void *, void *);
>   void *opaque;
> } bz_stream;
54,56c44,45
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
---
> #define BZ_API(func) func
> #define BZ_EXTERN extern
57a47
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
58a49
>     void);
60,65c51
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit ( 
<        
<        
<        
<       void 
<    );
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress(
67,70c53
< BZ_EXTERN int BZ_APIBZ2_bzCompress ( 
<        
<       void 
<    );
---
>     void);
72,88c55
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd ( 
<       void 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit ( 
<        
<        
<       void
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompress ( 
<       void 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd ( 
<       void 
<    );
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(void);
89a57
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
90a59
>     void);
91a61
> BZ_EXTERN int BZ_APIBZ2_bzDecompress(void);
92a63
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(void);
98,226c69,70
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzReadOpen ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadClose ( 
<        
<       void 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused ( 
<        
<        
<         
<       void 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzRead ( 
<        
<        
<        
<       void 
<    );
< 
< BZ_EXTERN BZFILE* BZ_APIBZ2_bzWriteOpen ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWrite ( 
<        
<        
<        
<       void 
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose ( 
<        
<        
<        
<        
<       void 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress ( 
<        
<       
<        
<       
<        
<        
<       void 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress ( 
<        
<       
<        
<       
<        
<       void 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzlibVersion (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzopen (
<       
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_APIBZ2_bzdopen (
<       
<       void
<    );
<          
< BZ_EXTERN int BZ_APIBZ2_bzread (
<        
<        
<       void 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzwrite (
<        
<        
<       void 
<    );
< 
< BZ_EXTERN int BZ_APIBZ2_bzflush (
<       void
<    );
< 
< BZ_EXTERN void BZ_APIBZ2_bzclose (
<       void
<    );
< 
< BZ_EXTERN const char * BZ_APIBZ2_bzerror (
<        
<       void
<    );
< 
< 
< 
< 
< 
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
>                                        int small, void *unused, int nUnused);
227a72
> BZ_EXTERN void BZ_APIBZ2_bzReadClose(
228a74
>     void);
229a76
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
231c78
< #define _BZLIB_PRIVATE_H
---
>     void);
233c80
< #include <stdlib.h>
---
> BZ_EXTERN int BZ_APIBZ2_bzRead(
234a82
>     void);
235a84,86
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
>                                         int blockSize100k, int verbosity,
>                                         int workFactor);
236a88
> BZ_EXTERN void BZ_APIBZ2_bzWrite(
238c90
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>     void);
240,246c92
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
248,249c94
< #define True  (Bool)1
< #define False (Bool)0
---
>     void);
251c96,100
< #define __inline__  
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
>                                           unsigned int *nbytes_in_lo32,
>                                           unsigned int *nbytes_in_hi32,
>                                           unsigned int *nbytes_out_lo32,
>                                           unsigned int *nbytes_out_hi32);
252a102
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
254,273c104
< #define AssertHcond,errcode \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0zf \
<    fprintfstderr,zf
< #define VPrintf1zf,za1 \
<    fprintfstderr,zf,za1
< #define VPrintf2zf,za1,za2 \
<    fprintfstderr,zf,za1,za2
< #define VPrintf3zf,za1,za2,za3 \
<    fprintfstderr,zf,za1,za2,za3
< #define VPrintf4zf,za1,za2,za3,za4 \
<    fprintfstderr,zf,za1,za2,za3,za4
< #define VPrintf5zf,za1,za2,za3,za4,za5 \
<    fprintfstderr,zf,za1,za2,za3,za4,za5
< 
< 
< #define BZALLOCnnn strm->bzallocstrm->opaque,nnn,1
< #define BZFREEppp  strm->bzfreestrm->opaque,ppp
---
>     void);
274a106
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(
275a108
>     void);
276a110
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
278,282c112
< #define BZ_HDR_B 2   
< #define BZ_HDR_Z 10   
< #define BZ_HDR_h 8   
< #define BZ_HDR_0 0   
<   
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
283a114
>     void);
285,286c116
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN    3
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
288,289c118
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
>     void);
291,293c120
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> BZ_EXTERN int BZ_APIBZ2_bzread(
295c122
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
>     void);
296a124
> BZ_EXTERN int BZ_APIBZ2_bzwrite(
297a126
>     void);
298a128
> BZ_EXTERN int BZ_APIBZ2_bzflush(void);
299a130
> BZ_EXTERN void BZ_APIBZ2_bzclose(void);
300a132
> BZ_EXTERN const char *BZ_APIBZ2_bzerror(
301a134
>     void);
303,309c136
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #define _BZLIB_PRIVATE_H
311c138
< #define BZ_RAND_MASK 1
---
> #include <stdlib.h>
313,315c140
< #define BZ_RAND_UPD_MASK                       \
<    if s->rNToGo == 0                                            \
<    s->rNToGo--;
---
> #define BZ_VERSION "1.0.2, 30-Dec-2001"
316a142,148
> typedef char Char;
> typedef unsigned char Bool;
> typedef unsigned char UChar;
> typedef int Int32;
> typedef unsigned int UInt32;
> typedef short Int16;
> typedef unsigned short UInt16;
317a150,151
> #define True (Bool)1
> #define False (Bool)0
318a153
> #define __inline__
319a155
> #define AssertHcond , errcode
320a157
> #define AssertD(cond, msg)
321a159,173
> #define VPrintf0zf fprintfstderr, zf
> #define VPrintf1zf , za1 fprintfstderr, zf, za1
> #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
> #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
> #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
> #define VPrintf5zf                                                             \
>   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
> 
> #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
> #define BZFREEppp strm->bzfreestrm->opaque, ppp
> 
> #define BZ_HDR_B 2
> #define BZ_HDR_Z 10
> #define BZ_HDR_h 8
> #define BZ_HDR_0 0
323c175,176
< #define BZ_INITIALISE_CRCcrcVar              \
---
> #define BZ_MAX_ALPHA_SIZE 8
> #define BZ_MAX_CODE_LEN 3
324a178,179
> #define BZ_RUNA 0
> #define BZ_RUNB 1
326c181,183
< #define BZ_FINALISE_CRCcrcVar                \
---
> #define BZ_N_GROUPS 6
> #define BZ_G_SIZE 50
> #define BZ_N_ITERS 4
327a185
> #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
329c187,193
< #define BZ_UPDATE_CRCcrcVar,cha              \
---
> #define BZ_RAND_DECLS                                                          \
>   Int32 rNToGo;                                                                \
>   Int32 rTPos
> 
> #define BZ_RAND_INIT_MASK                                                      \
>   s->rNToGo = 0;                                                               \
>   s->rTPos = 0
330a195
> #define BZ_RAND_MASK 1
331a197,199
> #define BZ_RAND_UPD_MASK                                                       \
>   if                                                                           \
>     s->rNToGo == 0 s->rNToGo--;
332a201
> #define BZ_INITIALISE_CRCcrcVar
333a203
> #define BZ_FINALISE_CRCcrcVar
334a205
> #define BZ_UPDATE_CRCcrcVar , cha
336,338c207,209
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_M_IDLE 1
> #define BZ_M_RUNNING 2
> #define BZ_M_FLUSHING 3
341,342c212,213
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_S_OUTPUT 1
> #define BZ_S_INPUT 2
348a220
> typedef struct {
349a222
>   bz_stream *strm;
350a224,225
>   Int32 mode;
>   Int32 state;
351a227
>   UInt32 avail_in_expect;
352a229,232
>   UInt32 *arr1;
>   UInt32 *arr2;
>   UInt32 *ftab;
>   Int32 origPtr;
354,429c234,237
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       UChar    unseqToSeq[6];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
---
>   UInt32 *ptr;
>   UChar *block;
>   UInt16 *mtfv;
>   UChar *zbits;
430a239
>   Int32 workFactor;
432,435c241,243
< ;
< 
< ;
< 
---
>   UInt32 state_in_ch;
>   Int32 state_in_len;
>   BZ_RAND_DECLS;
436a245,248
>   Int32 nblock;
>   Int32 nblockMAX;
>   Int32 numZ;
>   Int32 state_out_pos;
437a250,252
>   Int32 nInUse;
>   Bool inUse[6];
>   UChar unseqToSeq[6];
438a254,255
>   UInt32 bsBuff;
>   Int32 bsLive;
439a257,258
>   UInt32 blockCRC;
>   UInt32 combinedCRC;
440a260,262
>   Int32 verbosity;
>   Int32 blockNo;
>   Int32 blockSize100k;
441a264,267
>   Int32 nMTF;
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
442a269,271
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
444,445c273
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
447,487c275
< #define BZ_X_MAGIC_1     0
< #define BZ_X_MAGIC_2     1
< #define BZ_X_MAGIC_3     2
< #define BZ_X_MAGIC_4     3
< #define BZ_X_BLKHDR_1    4
< #define BZ_X_BLKHDR_2    5
< #define BZ_X_BLKHDR_3    6
< #define BZ_X_BLKHDR_4    7
< #define BZ_X_BLKHDR_5    8
< #define BZ_X_BLKHDR_6    9
< #define BZ_X_BCRC_1      0
< #define BZ_X_BCRC_2      1
< #define BZ_X_BCRC_3      2
< #define BZ_X_BCRC_4      3
< #define BZ_X_RANDBIT     4
< #define BZ_X_ORIGPTR_1   5
< #define BZ_X_ORIGPTR_2   6
< #define BZ_X_ORIGPTR_3   7
< #define BZ_X_MAPPING_1   8
< #define BZ_X_MAPPING_2   9
< #define BZ_X_SELECTOR_1  0
< #define BZ_X_SELECTOR_2  1
< #define BZ_X_SELECTOR_3  2
< #define BZ_X_CODING_1    3
< #define BZ_X_CODING_2    4
< #define BZ_X_CODING_3    5
< #define BZ_X_MTF_1       6
< #define BZ_X_MTF_2       7
< #define BZ_X_MTF_3       8
< #define BZ_X_MTF_4       9
< #define BZ_X_MTF_5       0
< #define BZ_X_MTF_6       1
< #define BZ_X_ENDHDR_2    2
< #define BZ_X_ENDHDR_3    3
< #define BZ_X_ENDHDR_4    4
< #define BZ_X_ENDHDR_5    5
< #define BZ_X_ENDHDR_6    6
< #define BZ_X_CCRC_1      7
< #define BZ_X_CCRC_2      8
< #define BZ_X_CCRC_3      9
< #define BZ_X_CCRC_4      0
---
> } EState;
488a277
> ;
489a279
> ;
490a281,282
> #define BZ_X_IDLE 1
> #define BZ_X_OUTPUT 2
491a284,324
> #define BZ_X_MAGIC_1 0
> #define BZ_X_MAGIC_2 1
> #define BZ_X_MAGIC_3 2
> #define BZ_X_MAGIC_4 3
> #define BZ_X_BLKHDR_1 4
> #define BZ_X_BLKHDR_2 5
> #define BZ_X_BLKHDR_3 6
> #define BZ_X_BLKHDR_4 7
> #define BZ_X_BLKHDR_5 8
> #define BZ_X_BLKHDR_6 9
> #define BZ_X_BCRC_1 0
> #define BZ_X_BCRC_2 1
> #define BZ_X_BCRC_3 2
> #define BZ_X_BCRC_4 3
> #define BZ_X_RANDBIT 4
> #define BZ_X_ORIGPTR_1 5
> #define BZ_X_ORIGPTR_2 6
> #define BZ_X_ORIGPTR_3 7
> #define BZ_X_MAPPING_1 8
> #define BZ_X_MAPPING_2 9
> #define BZ_X_SELECTOR_1 0
> #define BZ_X_SELECTOR_2 1
> #define BZ_X_SELECTOR_3 2
> #define BZ_X_CODING_1 3
> #define BZ_X_CODING_2 4
> #define BZ_X_CODING_3 5
> #define BZ_X_MTF_1 6
> #define BZ_X_MTF_2 7
> #define BZ_X_MTF_3 8
> #define BZ_X_MTF_4 9
> #define BZ_X_MTF_5 0
> #define BZ_X_MTF_6 1
> #define BZ_X_ENDHDR_2 2
> #define BZ_X_ENDHDR_3 3
> #define BZ_X_ENDHDR_4 4
> #define BZ_X_ENDHDR_5 5
> #define BZ_X_ENDHDR_6 6
> #define BZ_X_CCRC_1 7
> #define BZ_X_CCRC_2 8
> #define BZ_X_CCRC_3 9
> #define BZ_X_CCRC_4 0
495a329
> typedef struct {
496a331
>   bz_stream *strm;
497a333
>   Int32 state;
498a335,417
>   UChar state_out_ch;
>   Int32 state_out_len;
>   Bool blockRandomised;
>   BZ_RAND_DECLS;
> 
>   UInt32 bsBuff;
>   Int32 bsLive;
> 
>   Int32 blockSize100k;
>   Bool smallDecompress;
>   Int32 currBlockNo;
>   Int32 verbosity;
> 
>   Int32 origPtr;
>   UInt32 tPos;
>   Int32 k0;
>   Int32 unzftab[6];
>   Int32 nblock_used;
>   Int32 cftab[7];
>   Int32 cftabCopy[7];
> 
>   UInt32 *tt;
> 
>   UInt16 *ll16;
>   UChar *ll4;
> 
>   UInt32 storedBlockCRC;
>   UInt32 storedCombinedCRC;
>   UInt32 calculatedBlockCRC;
>   UInt32 calculatedCombinedCRC;
> 
>   Int32 nInUse;
>   Bool inUse[6];
>   Bool inUse16[6];
>   UChar seqToUnseq[6];
> 
>   UChar mtfa[MTFA_SIZE];
>   Int32 mtfbase[6 / MTFL_SIZE];
>   UChar selector[BZ_MAX_SELECTORS];
>   UChar selectorMtf[BZ_MAX_SELECTORS];
>   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
> 
>   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
>   Int32 minLens[BZ_N_GROUPS];
> 
>   Int32 save_i;
>   Int32 save_j;
>   Int32 save_t;
>   Int32 save_alphaSize;
>   Int32 save_nGroups;
>   Int32 save_nSelectors;
>   Int32 save_EOB;
>   Int32 save_groupNo;
>   Int32 save_groupPos;
>   Int32 save_nextSym;
>   Int32 save_nblockMAX;
>   Int32 save_nblock;
>   Int32 save_es;
>   Int32 save_N;
>   Int32 save_curr;
>   Int32 save_zt;
>   Int32 save_zn;
>   Int32 save_zvec;
>   Int32 save_zj;
>   Int32 save_gSel;
>   Int32 save_gMinlen;
>   Int32 *save_gLimit;
>   Int32 *save_gBase;
>   Int32 *save_gPerm;
> 
> } DState;
> 
> #define BZ_GET_FASTc                                                           \
>   s->tPos = s->tt[s->tPos];                                                    \
>   c = UChars->tPos & 15;                                                       \
>   s->tPos >>= 8;
> 
> #define BZ_GET_FAST_Cc                                                         \
>   c_tPos = c_tt[c_tPos];                                                       \
>   c = UCharc_tPos & 15;                                                        \
>   c_tPos >>= 8;
500,593c419
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[6];
<       Int32    nblock_used;
<       Int32    cftab[7];
<       Int32    cftabCopy[7];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[6];
<       Bool     inUse16[6];
<       UChar    seqToUnseq[6];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[6 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
---
> #define SET_LL4i , n
595,610c421
< 
< 
< #define BZ_GET_FASTc                     \
<     s->tPos = s->tt[s->tPos];                 \
<     c = UChars->tPos & 15;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_Cc                   \
<     c_tPos = c_tt[c_tPos];                    \
<     c = UCharc_tPos & 15;            \
<     c_tPos >>= 8;
< 
< #define SET_LL4i,n                                          \
<    
< 
< #define GET_LL4i                             \
---
> #define GET_LL4i                                                               \
612a424
> #define fswapzz1 , zz2
614,652c426
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswapzz1, zz2 \
<    
< 
< #define fvswapzzp1, zzp2, zzn       \
< 
< 
---
> #define fvswapzzp1 , zzp2, zzn
655c429
< #define UNALIGNED_BHzz  zz & 15
---
> #define UNALIGNED_BHzz zz & 15
657,662c431,434
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #undef SET_BH
> #undef CLEAR_BH
> #undef ISSET_BH
> #undef WORD_BH
664a437
> #define mswapzz1 , zz2
665a439
> #define mvswapzzp1 , zzp2, zzn
666a441
> #define mmina , b a < a
667a443
> #define mpushlz , hz, dz
668a445
> #define mpoplz , hz, dz
669a447
> #define mnextsizeaz nextHi[az] - nextLo[az]
671,705c449
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswapzz1, zz2 \
<    
< 
< #define mvswapzzp1, zzp2, zzn       \
< 
< 
< 
< 
< #define mmina,b a < a
< 
< #define mpushlz,hz,dz 
< 
< #define mpoplz,hz,dz 
< 
< 
< #define mnextsizeaz nextHi[az]-nextLo[az]
< 
< #define mnextswapaz,bz                                        \
<    
< 
---
> #define mnextswapaz , bz
711,712d454
< 
< 
724,728c466
< 
< 
< 
< 
< #define BIGFREQb ftab[b+1 << 8] - ftab[b << 8]
---
> #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
731,776c469,470
< #define ADDWEIGHTSzw1,zw2                           \
<    WEIGHTOFzw1+WEIGHTOFzw2 |                    \
<    1 + MYMAXDEPTHOFzw1,DEPTHOFzw2
< 
< #define UPHEAPz                                     \
< 
< 
< #define DOWNHEAPz                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> #define ADDWEIGHTSzw1                                                          \
>   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
777a472
> #define UPHEAPz
778a474
> #define DOWNHEAPz
779a476
> #define bsNEEDWnz
780a478,482
> static void makeMaps_e(void) {
>   EState *s = 0;
>   Int32 i;
>   s->nInUse = 0;
>   i = 0;
781a484,485
>   for (i; i < 6; i++) {
>     s->inUse[i];
782a487,536
>     {
>       s->unseqToSeq[i] = s->nInUse;
>       s->nInUse++;
>     }
>   }
> }
> 
> static void generateMTFValues(void) {
>   EState *s = 0;
>   UChar yy[1];
>   UChar yy_1;
>   UChar yy_0;
>   Int32 i, j;
>   Int32 zPend;
>   Int32 wr;
>   Int32 EOB;
> 
>   UInt32 *ptr = s->ptr;
>   UInt32 ptr_0;
>   UChar *block = s->block;
>   UChar block_0;
>   UInt16 *mtfv = s->mtfv;
>   UInt16 mtfv_0;
> 
>   ;
>   EOB = s->nInUse + 1;
> 
>   i = 0;
> 
>   for (i; i <= EOB; i++)
>     s->mtfFreq[i] = 0;
> 
>   wr = 0;
>   zPend = 0;
>   i = 0;
> 
>   for (i; i < s->nInUse; i++)
>     yy_0 = (UChar)i;
> 
>   i = 0;
> 
>   for (i; i < s->nblock; i++) {
>     UChar ll_i;
>     AssertD(wr <= i, "generateMTFValues1");
>     j = ptr_0 - 1;
>     j < 0;
> 
>     j += s->nblock;
>     ll_i = s->unseqToSeq[block_0];
>     AssertD(ll_i nInUse, "generateMTFValuesa");
783a538
>     yy_0 == ll_i;
784a540,541
>     { zPend++; }
>     {
785a543
>       zPend > 0;
786a545,562
>       {
>         register UChar rtmp;
>         register UChar *ryy_j;
>         register UChar rll_i;
>         rtmp = yy_1;
>         yy_1 = yy_0;
>         ryy_j = &yy_1;
>         rll_i = ll_i;
>         while (rll_i != rtmp)
>           ;
>         yy_0 = rtmp;
>         j = ryy_j - &yy_0;
>         mtfv_0 = j + 1;
>         wr++;
>         s->mtfFreq[j + 1]++;
>       }
>     }
>   }
787a564
>   zPend > 0;
788a566,568
>   mtfv_0 = EOB;
>   wr++;
>   s->mtfFreq[EOB]++;
789a570,571
>   s->nMTF = wr;
> }
790a573,574
> #define BZ_LESSER_ICOST 0
> #define BZ_GREATER_ICOST 5
791a576
> #define RETURNrrr ;
792a578,581
> #define GET_BITSlll                                                            \
>   , vvv, nnn case lll : s->state = lll;                                        \
>   while                                                                        \
>   True
793a583
> #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
794a585
> #define GET_BITlll , uuu GET_BITSlll, uuu, 1
795a587
> #define GET_MTF_VALlabel1 , label2, lval
796a589
> static int bz_config_ok(void);
797a591
> static void *default_bzalloc(void);
798a593
> static void default_bzfree(void);
799a595
> static Bool isempty_RL(void);
800a597
> int BZ_APIBZ2_bzCompressInit(
801a599,619
>     void) {
>   int workFactor = 0;
>   int verbosity = 0;
>   int blockSize100k = 0;
>   bz_stream *strm = 0;
>   Int32 n;
>   EState *s;
>   UInt32 *s_8;
>   UInt16 *s_10;
>   UChar *s_9;
>   Int32 s_12;
>   Int32 s_28;
>   Int32 s_18;
>   Int32 s_30;
>   UInt32 s_27;
>   Int32 s_1;
>   Int32 s_2;
>   UInt32 *s_6;
>   UInt32 *s_5;
>   UInt32 *s_4;
>   bz_stream *s_0;
802a621
>   !0;
803a623
>   return BZ_CONFIG_ERROR;
804a625,627
>   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
>       workFactor < 0 || workFactor > 0)
>     return BZ_PARAM_ERROR;
806c629
< #define bsNEEDWnz                           \
---
>   workFactor == 0;
807a631,691
>   workFactor = 0;
>   if (strm->bzalloc == NULL)
>     strm->bzalloc = default_bzalloc;
>   if (strm->bzfree == NULL)
>     strm->bzfree = default_bzfree;
> 
>   s = 0;
>   if (s == NULL)
>     return BZ_MEM_ERROR;
>   s_0 = strm;
> 
>   s->arr1 = NULL;
>   s->arr2 = NULL;
>   s->ftab = NULL;
> 
>   n = 0 * blockSize100k;
>   s_4 = 0;
>   s_5 = 0 * sizeof(UInt32);
>   s_6 = 0;
> 
>   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
> 
>     s->blockNo = 0;
>   s_2 = BZ_S_INPUT;
>   s_1 = BZ_M_RUNNING;
>   s_27 = 0;
>   s_30 = blockSize100k;
>   s_18 = 0 * blockSize100k - 9;
>   s_28 = verbosity;
>   s_12 = workFactor;
> 
>   s_9 = (UChar *)s_5;
>   s_10 = (UInt16 *)s_4;
>   s->zbits = NULL;
>   s_8 = (UInt32 *)s_4;
> 
>   strm->state = s;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   ;
>   ;
>   return BZ_OK;
> }
> 
> #define ADD_CHAR_TO_BLOCKzs , zchh0
> 
> int BZ_APIBZ2_bzCompress(void) {
>   int action = 0;
>   bz_stream *strm = 0;
> 
>   EState *s;
>   Int32 s_1;
>   bz_stream *s_0;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   s_0 != strm;
808a693
>   return BZ_PARAM_ERROR;
809a695,698
> preswitch:
>   switch (s_1)
>     return BZ_OK;
> }
810a700,709
> int BZ_APIBZ2_bzCompressEnd(void) {
>   bz_stream *strm = 0;
>   EState *s;
>   bz_stream *s_0;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   s_0 != strm;
811a711
>   return BZ_PARAM_ERROR;
812a713,719
>   if (s->arr1 != NULL)
>     BZFREE(s->arr1);
>   if (s->arr2 != NULL)
>     BZFREE(s->arr2);
>   if (s->ftab != NULL)
>     BZFREE(s->ftab);
>   0;
813a721
>   strm->state = NULL;
814a723,724
>   return BZ_OK;
> }
815a726
> int BZ_APIBZ2_bzDecompressInit(
816a728,740
>     void) {
>   int small = 0;
>   int verbosity = 0;
>   bz_stream *strm = 0;
>   DState *s;
>   Int32 s_12;
>   Int32 s_11;
>   Bool s_10;
>   UInt32 s_26;
>   UInt32 s_7;
>   Int32 s_8;
>   Int32 s_1;
>   bz_stream *s_0;
817a742
>   !0;
818a744
>   return BZ_CONFIG_ERROR;
819a746,748
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   small != 0 && small != 1;
820a750,751
>   return BZ_PARAM_ERROR;
>   verbosity<0 || verbosity> 4;
821a753
>   return BZ_PARAM_ERROR;
822a755,792
>   if (strm->bzalloc == NULL)
>     strm->bzalloc = default_bzalloc;
>   if (strm->bzfree == NULL)
>     strm->bzfree = default_bzfree;
> 
>   s = 0;
>   if (s == NULL)
>     return BZ_MEM_ERROR;
>   s_0 = strm;
>   strm->state = s;
>   s_1 = BZ_X_MAGIC_1;
>   s_8 = 0;
>   s_7 = 0;
>   s_26 = 0;
>   strm->total_in_lo32 = 0;
>   strm->total_in_hi32 = 0;
>   strm->total_out_lo32 = 0;
>   strm->total_out_hi32 = 0;
>   s_10 = (Bool)small;
>   s->ll4 = NULL;
>   s->ll16 = NULL;
>   s->tt = NULL;
>   s_11 = 0;
>   s_12 = verbosity;
> 
>   return BZ_OK;
> }
> 
> int BZ_APIBZ2_bzDecompress(void) {
>   bz_stream *strm = 0;
>   DState *s;
>   bz_stream *s_0;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   s_0 != strm;
823a794
>   return BZ_PARAM_ERROR;
824a796
>   while (True)
825a798
>     0;
827,843c800
< static
< void makeMaps_e ( void )
< {
<    EState * s = 0;
<    Int32 i;
<    s->nInUse = 0;
<    i = 0;
<    
<    for (i; i < 6; i++)
<       {
<       s->inUse[i];
<       
<        {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
<       }
---
>   return 0;
845a803,812
> int BZ_APIBZ2_bzDecompressEnd(void) {
>   bz_stream *strm = 0;
>   DState *s;
>   bz_stream *s_0;
>   if (strm == NULL)
>     return BZ_PARAM_ERROR;
>   s = strm->state;
>   if (s == NULL)
>     return BZ_PARAM_ERROR;
>   s_0 != strm;
846a814
>   return BZ_PARAM_ERROR;
848,915c816,821
< static
< void generateMTFValues ( void )
< {
<    EState * s = 0;
<    UChar   yy[1];
<    UChar yy_1;
<    UChar yy_0;
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UInt32 ptr_0;
<    UChar* block  = s->block;
<    UChar block_0;
<    UInt16* mtfv  = s->mtfv;
<    UInt16 mtfv_0;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    i = 0;
<    
<    for (i; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    i = 0;
<    
<    for (i; i < s->nInUse; i++) yy_0 = (UChar) i;
< 
<    i = 0;
<    
<    for (i; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues1" );
<       j = ptr_0-1; j < 0;
<       
<        j += s->nblock;
<       ll_i = s->unseqToSeq[block_0];
<       AssertD ( ll_i nInUse, "generateMTFValuesa" );
< 
<       yy_0 == ll_i;
<       
<        { 
<          zPend++;
<       }  {
< 
<          zPend > 0;
<          
<           {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy_1;
<             yy_1 = yy_0;
<             ryy_j = &yy_1;
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy_0 = rtmp;
<             j = ryy_j - &yy_0;
<             mtfv_0 = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>   if (s->tt != NULL)
>     BZFREE(s->tt);
>   if (s->ll16 != NULL)
>     BZFREE(s->ll16);
>   if (s->ll4 != NULL)
>     BZFREE(s->ll4);
917,919c823,824
<    zPend > 0;
<    
<     mtfv_0 = EOB; wr++; s->mtfFreq[EOB]++;
---
>   0;
>   strm->state = NULL;
921c826
<    s->nMTF = wr;
---
>   return BZ_OK;
923a829
> #define BZ_SETERRe
924a831,839
> typedef struct {
>   FILE *handle;
>   Char buf[BZ_MAX_UNUSED];
>   Int32 bufN;
>   Bool writing;
>   bz_stream strm;
>   Int32 lastErr;
>   Bool initialisedOk;
> } bzFile;
926,941c841,844
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 5
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
>                               int verbosity, int workFactor) {
>   Int32 ret;
>   bzFile *bzf = NULL;
942a846
>   BZ_SETERR(BZ_OK);
943a848,850
>   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
>       workFactor > 0 || verbosity < 0 || verbosity > 4)
>     ;
944a852,853
>   if (ferror(f))
>     ;
945a855,857
>   bzf = malloc(sizeof(bzFile));
>   if (bzf == NULL)
>     ;
946a859,894
>   BZ_SETERR(BZ_OK);
>   bzf->initialisedOk = False;
>   bzf->bufN = 0;
>   bzf->handle = f;
>   bzf->writing = True;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
> 
>   workFactor == 0;
> 
>   workFactor = 0;
>   ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
>   ;
> 
>   ;
> 
>   bzf->strm.avail_in = 0;
>   bzf->initialisedOk = True;
>   return bzf;
> }
> 
> void BZ_APIBZ2_bzWrite(
> 
>     void) {
>   int len = 0;
>   void *buf = 0;
>   BZFILE *b = 0;
>   int *bzerror = 0;
>   Int32 ret;
>   bzFile *bzf = (bzFile *)b;
>   char *bzf_4_4;
>   unsigned int bzf_4_5;
>   char *bzf_4_0;
>   unsigned int bzf_4_1;
>   Bool bzf_3;
947a896,899
>   0;
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
>   !bzf_3;
948a901,903
>   ;
>   if (ferror(bzf->handle))
>     ;
949a905
>   len == 0;
951,952c907
< #define RETURNrrr                               \
<    ;
---
>   ;
954,956c909,910
< #define GET_BITSlll,vvv,nnn                     \
<    case lll: s->state = lll;                      \
<    while True 
---
>   bzf_4_1 = len;
>   bzf_4_0 = buf;
958,959c912,916
< #define GET_UCHARlll,uuu                        \
<    GET_BITSlll,uuu,8
---
>   while (True) {
>     bzf_4_5 = BZ_MAX_UNUSED;
>     bzf_4_4 = bzf->buf;
>     ret = 0;
>     ;
961,962c918
< #define GET_BITlll,uuu                          \
<    GET_BITSlll,uuu,1
---
>     ;
963a920
>     ;
965c922
< #define GET_MTF_VALlabel1,label2,lval           \
---
>     bzf_4_1 == 0;
966a924,926
>     ;
>   }
> }
967a928
> void BZ_APIBZ2_bzWriteClose(
968a930,937
>     void) {
>   unsigned int *nbytes_out = 0;
>   unsigned int *nbytes_in = 0;
>   int abandon = 0;
>   BZFILE *b = 0;
>   int *bzerror = 0;
>   BZ2_bzWriteClose64(bzerror, b, abandon, nbytes_in, NULL, nbytes_out, NULL);
> }
969a939
> void BZ_APIBZ2_bzWriteClose64(
970a941,948
>     void) {
>   unsigned int *nbytes_out_hi32 = 0;
>   unsigned int *nbytes_out_lo32 = 0;
>   unsigned int *nbytes_in_hi32 = 0;
>   unsigned int *nbytes_in_lo32 = 0;
>   int abandon = 0;
>   BZFILE *b = 0;
>   int *bzerror = 0;
971a950,951
>   bzFile *bzf = (bzFile *)b;
>   Bool bzf_3;
972a953,955
>   if (bzf == NULL)
>     ;
>   !bzf_3;
973a957,959
>   ;
>   if (ferror(bzf->handle))
>     ;
974a961,1003
>   if (nbytes_in_lo32 != NULL)
>     *nbytes_in_lo32 = 0;
>   if (nbytes_in_hi32 != NULL)
>     *nbytes_in_hi32 = 0;
>   if (nbytes_out_lo32 != NULL)
>     *nbytes_out_lo32 = 0;
>   if (nbytes_out_hi32 != NULL)
>     *nbytes_out_hi32 = 0;
> 
>   if (!abandon && bzf->lastErr == BZ_OK)
> 
>     if (!abandon && !ferror(bzf->handle))
> 
>       if (nbytes_in_lo32 != NULL)
>         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
>   if (nbytes_in_hi32 != NULL)
>     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
>   if (nbytes_out_lo32 != NULL)
>     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
>   if (nbytes_out_hi32 != NULL)
>     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
> 
>   0;
>   0;
>   0;
> }
> 
> BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
>                              void *unused, int nUnused) {
>   bzFile *bzf = NULL;
>   char *bzf_4_0;
>   unsigned int bzf_4_1;
>   Bool bzf_3;
>   Int32 bzf_2;
>   Bool bzf_6;
>   int ret;
> 
>   BZ_SETERR(BZ_OK);
> 
>   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
>       unused == NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
>       nUnused > BZ_MAX_UNUSED)
>     ;
975a1005,1006
>   if (ferror(f))
>     ;
976a1008,1010
>   bzf = malloc(sizeof(bzFile));
>   if (bzf == NULL)
>     ;
977a1012
>   BZ_SETERR(BZ_OK);
978a1014,1020
>   bzf_6 = False;
>   bzf->handle = f;
>   bzf_2 = 0;
>   bzf_3 = False;
>   bzf->strm.bzalloc = NULL;
>   bzf->strm.bzfree = NULL;
>   bzf->strm.opaque = NULL;
979a1022
>   while (nUnused > 0)
980a1024,1025
>     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
>   ;
981a1027
>   ;
982a1029,1030
>   bzf_4_1 = bzf_2;
>   bzf_4_0 = bzf->buf;
983a1032,1034
>   bzf_6 = True;
>   return bzf;
> }
984a1036,1041
> void BZ_APIBZ2_bzReadClose(void) {
>   BZFILE *b = 0;
>   int *bzerror = 0;
>   bzFile *bzf = (bzFile *)b;
>   Bool bzf_6;
>   Bool bzf_3;
985a1043,1045
>   0;
>   if (bzf == NULL)
>     ;
986a1047
>   bzf_3;
987a1049
>   ;
988a1051
>   bzf_6;
989a1053,1055
>   (void)0;
>   0;
> }
990a1057
> int BZ_APIBZ2_bzRead(
992,994c1059,1063
< static
< int bz_config_ok ( void )
< ;
---
>     void) {
>   int len = 0;
>   void *buf = 0;
>   BZFILE *b = 0;
>   int *bzerror = 0;
995a1065,1068
>   bzFile *bzf = (bzFile *)b;
>   char *bzf_4_4;
>   unsigned int bzf_4_5;
>   Bool bzf_3;
996a1070
>   0;
998,1000c1072,1073
< static
< void* default_bzalloc (   void )
< ;
---
>   if (bzf == NULL || buf == NULL || len < 0)
>     ;
1002,1004c1075
< static
< void default_bzfree (  void )
< ;
---
>   bzf_3;
1005a1077
>   ;
1006a1079
>   len == 0;
1007a1081
>   ;
1008a1083,1084
>   bzf_4_5 = len;
>   bzf_4_4 = buf;
1009a1086
>   while (True)
1010a1088,1089
>     return 0;
> }
1011a1091
> void BZ_APIBZ2_bzReadGetUnused(
1012a1093,1104
>     void) {
>   int *nUnused = 0;
>   void **unused = 0;
>   BZFILE *b = 0;
>   int *bzerror = 0;
>   bzFile *bzf = (bzFile *)b;
>   char *bzf_4_0;
>   unsigned int bzf_4_1;
>   Int32 bzf_5;
>   if (bzf == NULL)
>     ;
>   ;
1013a1106,1108
>   ;
>   if (unused == NULL || nUnused == NULL)
>     ;
1015,1017c1110,1135
< static
< Bool isempty_RL ( void )
< ;
---
>   0;
>   *nUnused = bzf_4_1;
>   *unused = bzf_4_0;
> }
> 
> int BZ_APIBZ2_bzBuffToBuffCompress(
> 
>     void) {
>   int workFactor = 0;
>   int verbosity = 0;
>   int blockSize100k = 0;
>   unsigned int sourceLen = 0;
>   char *source = 0;
>   unsigned int *destLen = 0;
>   char *dest = 0;
>   bz_stream strm;
>   unsigned int strm_5;
>   unsigned int strm_1;
>   char *strm_4;
>   char *strm_0;
>   int ret;
> 
>   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
>       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
>       workFactor > 0)
>     return BZ_PARAM_ERROR;
1018a1137
>   workFactor == 0;
1019a1139,1188
>   workFactor = 0;
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   ret = 0;
>   ;
> 
>   return ret;
> 
>   strm_0 = source;
>   strm_4 = dest;
>   strm_1 = sourceLen;
>   strm_5 = *destLen;
> 
>   ret = 0;
>   ;
> 
>   goto output_overflow;
>   ;
> 
>   goto errhandler;
> 
>   *destLen -= strm_5;
>   0;
>   return BZ_OK;
> 
> output_overflow:
>   0;
>   return BZ_OUTBUFF_FULL;
> 
> errhandler:
>   0;
>   return ret;
> }
> 
> int BZ_APIBZ2_bzBuffToBuffDecompress(
> 
>     void) {
>   int verbosity = 0;
>   int small = 0;
>   unsigned int sourceLen = 0;
>   char *source = 0;
>   unsigned int *destLen = 0;
>   char *dest = 0;
>   bz_stream strm;
>   unsigned int strm_5;
>   unsigned int strm_1;
>   char *strm_4;
>   char *strm_0;
>   int ret;
1021,1046c1190,1192
< int BZ_APIBZ2_bzCompressInit 
<                     (  
<                      
<                      
<                      void )
< {
<    int workFactor = 0;
<    int verbosity = 0;
<    int blockSize100k = 0;
<    bz_stream * strm = 0;
<    Int32   n;
<    EState* s;
<    UInt32 *s_8;
<    UInt16 *s_10;
<    UChar *s_9;
<    Int32 s_12;
<    Int32 s_28;
<    Int32 s_18;
<    Int32 s_30;
<    UInt32 s_27;
<    Int32 s_1;
<    Int32 s_2;
<    UInt32 *s_6;
<    UInt32 *s_5;
<    UInt32 *s_4;
<    bz_stream *s_0;
---
>   if (dest == NULL || destLen == NULL || source == NULL ||
>       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
>     return BZ_PARAM_ERROR;
1048,1050c1194,1198
<    !0;
<    
<     return BZ_CONFIG_ERROR;
---
>   strm.bzalloc = NULL;
>   strm.bzfree = NULL;
>   strm.opaque = NULL;
>   ret = 0;
>   ;
1052,1055c1200
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0)
<      return BZ_PARAM_ERROR;
---
>   return ret;
1057,1061c1202,1205
<    workFactor == 0;
<    
<     workFactor = 0;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>   strm_0 = source;
>   strm_4 = dest;
>   strm_1 = sourceLen;
>   strm_5 = *destLen;
1063,1065c1207,1208
<    s = 0;
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0 = strm;
---
>   ret = 0;
>   ;
1067,1069c1210,1211
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>   goto output_overflow_or_eof;
>   ;
1071,1074c1213
<    n       = 0 * blockSize100k;
<    s_4 = 0;
<    s_5 = 0 * sizeof(UInt32) ;
<    s_6 = 0;
---
>   goto errhandler;
1076c1215,1217
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>   *destLen -= strm_5;
>   0;
>   return BZ_OK;
1078,1085c1219,1220
<    s->blockNo           = 0;
<    s_2             = BZ_S_INPUT;
<    s_1              = BZ_M_RUNNING;
<    s_27       = 0;
<    s_30     = blockSize100k;
<    s_18         = 0 * blockSize100k - 9;
<    s_28         = verbosity;
<    s_12        = workFactor;
---
> output_overflow_or_eof:
>   strm_5 > 0;
1087,1090c1222,1225
<    s_9             = (UChar*)s_5;
<    s_10              = (UInt16*)s_4;
<    s->zbits             = NULL;
<    s_8               = (UInt32*)s_4;
---
>   {
>     0;
>     return BZ_UNEXPECTED_EOF;
>   };
1092,1099c1227,1229
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
---
> errhandler:
>   0;
>   return ret;
1101a1232
> const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1102a1234,1235
> static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
>                                  int open_mode);
1103a1237,1241
> BZFILE *BZ_APIBZ2_bzopen(void) {
>   const char *mode = 0;
>   const char *path = 0;
>   return 0;
> }
1104a1243,1247
> BZFILE *BZ_APIBZ2_bzdopen(void) {
>   const char *mode = 0;
>   int fd = 0;
>   return bzopen_or_bzdopen(NULL, fd, mode, 1);
> }
1105a1249,1254
> int BZ_APIBZ2_bzread(void) {
>   int len = 0;
>   void *buf = 0;
>   BZFILE *b = 0;
>   int bzerr, nread;
>   ;
1106a1256,1258
>   return 0;
>   nread = 0;
>   ;
1107a1260,1262
>   { return nread; }
>   { return -1; }
> }
1108a1264,1268
> int BZ_APIBZ2_bzwrite(void) {
>   int len = 0;
>   void *buf = 0;
>   BZFILE *b = 0;
>   int bzerr;
1109a1270,1276
>   ;
>   if (bzerr == BZ_OK) {
>     return len;
>   } else {
>     return -1;
>   }
> }
1110a1278,1279
> int BZ_APIBZ2_bzflush(void) {
>   BZFILE *b = 0;
1112,2166c1281,1282
< #define ADD_CHAR_TO_BLOCKzs,zchh0               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzCompress (  void )
< {
<    int action = 0;
<    bz_stream * strm = 0;
<    
<    EState* s;
<    Int32 s_1;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    s_0 != strm;
<    
<     return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s_1) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_APIBZ2_bzCompressEnd  ( void )
< {
<    bz_stream * strm = 0;
<    EState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    s_0 != strm;
<    
<     return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    0;
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompressInit 
<                      (  
<                        
<                        void )
< {
<    int small = 0;
<    int verbosity = 0;
<    bz_stream * strm = 0;
<    DState* s;
<    Int32 s_12;
<    Int32 s_11;
<    Bool s_10;
<    UInt32 s_26;
<    UInt32 s_7;
<    Int32 s_8;
<    Int32 s_1;
<    bz_stream *s_0;
< 
<    !0;
<    
<     return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    small != 0 && small != 1;
<    
<     return BZ_PARAM_ERROR;
<    verbosity < 0 || verbosity > 4;
<    
<     return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = 0;
<    if (s == NULL) return BZ_MEM_ERROR;
<    s_0                  = strm;
<    strm->state              = s;
<    s_1                 = BZ_X_MAGIC_1;
<    s_8                = 0;
<    s_7                = 0;
<    s_26 = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s_10       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s_11           = 0;
<    s_12             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzDecompress ( void )
< {
<    bz_stream * strm = 0;
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    s_0 != strm;
<    
<     return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    0;
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_APIBZ2_bzDecompressEnd  ( void )
< {
<    bz_stream * strm = 0;
<    DState* s;
<    bz_stream *s_0;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    s_0 != strm;
<    
<     return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    0;
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERRe                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 0 ||
<        verbosity < 0 || verbosity > 4)
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    workFactor == 0;
<    
<     workFactor = 0;
<    ret = BZ2_bzCompressInit ( &bzf->strm, blockSize100k, 
<                               verbosity, workFactor );
<    ;
<    
<     ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_APIBZ2_bzWrite
<              (  
<                 
<                 
<                void )
< {
<    int len = 0;
<    void * buf = 0;
<    BZFILE * b = 0;
<    int * bzerror = 0;
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
< 
<    0;
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
<    !bzf_3;
<    
<     ;
<    if (ferror(bzf->handle))
<       ;
< 
<    len == 0;
<    
<     ;
< 
<    bzf_4_1 = len;
<    bzf_4_0  = buf;
< 
<    while (True) {
<       bzf_4_5 = BZ_MAX_UNUSED;
<       bzf_4_4 = bzf->buf;
<       ret = 0;
<       ;
<       
<        ;
< 
<       ;
<       
<        bzf_4_1 == 0;
<        
<         ;
<    }
< }
< 
< 
< 
< void BZ_APIBZ2_bzWriteClose
<                   (  
<                      
<                     
<                     
<                     void )
< {
<     unsigned int * nbytes_out = 0;
<     unsigned int * nbytes_in = 0;
<     int abandon = 0;
<     BZFILE * b = 0;
<     int * bzerror = 0;
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_APIBZ2_bzWriteClose64
<                   (  
<                      
<                     
<                     
<                     
<                     
<                     void )
< {
<    unsigned int * nbytes_out_hi32 = 0;
<    unsigned int * nbytes_out_lo32 = 0;
<    unsigned int * nbytes_in_hi32 = 0;
<    unsigned int * nbytes_in_lo32 = 0;
<    int abandon = 0;
<    BZFILE * b = 0;
<    int * bzerror = 0;
<    
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_3;
< 
<    if (bzf == NULL)
<       ;
<    !bzf_3;
<    
<     ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if (!abandon && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    0;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_APIBZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Bool bzf_3;
<    Int32 bzf_2;
<    Bool bzf_6;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        small != 0 && small != 1 ||
<        verbosity < 0 || verbosity > 4 ||
<        unused == NULL && nUnused != 0 ||
<        unused != NULL && nUnused < 0 || nUnused > BZ_MAX_UNUSED)
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf_6 = False;
<    bzf->handle        = f;
<    bzf_2          = 0;
<    bzf_3       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( bzf->strm, verbosity, small );
<    ;
<    
<     ;
< 
<    bzf_4_1 = bzf_2;
<    bzf_4_0  = bzf->buf;
< 
<    bzf_6 = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadClose (  void )
< {
<    BZFILE * b = 0;
<    int * bzerror = 0;
<    bzFile* bzf = (bzFile*)b;
<    Bool bzf_6;
<    Bool bzf_3;
< 
<    0;
<    if (bzf == NULL)
<       ;
< 
<    bzf_3;
<    
<     ;
< 
<    bzf_6;
<    
<     (void)0;
<    0;
< }
< 
< 
< 
< int BZ_APIBZ2_bzRead 
<            (  
<               
<               
<              void )
< {
<    int len = 0;
<    void * buf = 0;
<    BZFILE * b = 0;
<    int * bzerror = 0;
<    
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_4;
<    unsigned int bzf_4_5;
<    Bool bzf_3;
< 
<    0;
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
<    bzf_3;
<    
<     ;
< 
<    len == 0;
<    
<     ;
< 
<    bzf_4_5 = len;
<    bzf_4_4 = buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_APIBZ2_bzReadGetUnused 
<                      (  
<                         
<                         
<                        void )
< {
<    int * nUnused = 0;
<    void ** unused = 0;
<    BZFILE * b = 0;
<    int * bzerror = 0;
<    bzFile* bzf = (bzFile*)b;
<    char *bzf_4_0;
<    unsigned int bzf_4_1;
<    Int32 bzf_5;
<    if (bzf == NULL)
<       ;
<    ;
<    
<     ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    0;
<    *nUnused = bzf_4_1;
<    *unused = bzf_4_0;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffCompress 
<                          (  
<                            
<                             
<                            
<                             
<                             
<                            void )
< {
<    int workFactor = 0;
<    int verbosity = 0;
<    int blockSize100k = 0;
<    unsigned int sourceLen = 0;
<    char * source = 0;
<    unsigned int * destLen = 0;
<    char * dest = 0;
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char *strm_4;
<    char *strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 0) 
<       return BZ_PARAM_ERROR;
< 
<    workFactor == 0;
<    
<     workFactor = 0;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    ;
<    
<     return ret;
< 
<    strm_0 = source;
<    strm_4 = dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    ;
<    
<     goto output_overflow;
<    ;
<    
<     goto errhandler;
< 
<    
<    *destLen -= strm_5;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_APIBZ2_bzBuffToBuffDecompress 
<                            (  
<                              
<                               
<                              
<                              
<                              void )
< {
<    int verbosity = 0;
<    int small = 0;
<    unsigned int sourceLen = 0;
<    char * source = 0;
<    unsigned int * destLen = 0;
<    char * dest = 0;
<    bz_stream strm;
<    unsigned int strm_5;
<    unsigned int strm_1;
<    char *strm_4;
<    char *strm_0;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        small != 0 && small != 1 ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    ;
<    
<     return ret;
< 
<    strm_0 = source;
<    strm_4 = dest;
<    strm_1 = sourceLen;
<    strm_5 = *destLen;
< 
<    ret = 0;
<    ;
<    
<     goto output_overflow_or_eof;
<    ;
<    
<     goto errhandler;
< 
<    
<    *destLen -= strm_5;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    strm_5 > 0;
<    
<     {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    }  ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_APIBZ2_bzlibVersion(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int d,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzopen
<                ( 
<                  void )
< {
<    const char * mode = 0;
<    const char * path = 0;
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_APIBZ2_bzdopen
<                ( 
<                  void )
< {
<     const char * mode = 0;
<     int fd = 0;
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_APIBZ2_bzread (  void )
< {
<    int len = 0;
<    void * buf = 0;
<    BZFILE * b = 0;
<    int bzerr, nread;
<    ;
<    
<     return 0;
<    nread = 0;
<    ;
<    
<     {
<       return nread;
<    }  {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_APIBZ2_bzwrite (  void )
< {
<    int len = 0;
<    void * buf = 0;
<    BZFILE * b = 0;
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_APIBZ2_bzflush (void)
< {
<    BZFILE * b = 0;
<    
<    return 0;
< }
< 
< 
< 
< void BZ_APIBZ2_bzclose (void)
< {
<    BZFILE * b = 0;
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[1] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< static char *bzerrorstrings_0 = "OK";
< 
< 
< const char * BZ_APIBZ2_bzerror ( void)
< {
<    int * errnum = 0;
<    BZFILE * b = 0;
<    int err = ((bzFile *)b)->lastErr;
< 
<    err>0;
<    
<     err = 0;
<    *errnum = err;
<    return bzerrorstrings_0;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOFi       
< #define ERROR_IF_NOT_ZEROi  
< #define ERROR_IF_MINUS_ONEi 
< 
< 
< 
< 
< 
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPECroot, name \
<       root=snocStringroot, name
< 
< #   define APPEND_FLAGroot, name \
<       root=snocStringroot, name
< 
< #   define SET_BINARY_MODEd 
< 
< #      define NORETURN 
< 
< 
< 
< 
< 
<                                        
< #define True  Bool1
< #define False Bool0
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>   return 0;
> }
2167a1284,1287
> void BZ_APIBZ2_bzclose(void) {
>   BZFILE *b = 0;
>   int bzerr;
>   FILE *fp = ((bzFile *)b)->handle;
2168a1289,1298
>   if (b == NULL)
>     if (((bzFile *)b)->writing) {
>       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
>       if (bzerr != BZ_OK) {
>         BZ2_bzWriteClose(NULL, b, 1, NULL, NULL);
>       }
>     } else if (fp != stdin && fp != stdout) {
>       fclose(fp);
>     }
> }
2169a1300,1308
> static char *bzerrorstrings[1] = {"OK",           "SEQUENCE_ERROR",
>                                   "PARAM_ERROR",  "MEM_ERROR",
>                                   "DATA_ERROR",   "DATA_ERROR_MAGIC",
>                                   "IO_ERROR",     "UNEXPECTED_EOF",
>                                   "OUTBUFF_FULL", "CONFIG_ERROR",
>                                   "???",          "???",
>                                   "???",          "???",
>                                   "???",          "???"};
> static char *bzerrorstrings_0 = "OK";
2170a1310,1313
> const char *BZ_APIBZ2_bzerror(void) {
>   int *errnum = 0;
>   BZFILE *b = 0;
>   int err = ((bzFile *)b)->lastErr;
2171a1315
>   err > 0;
2172a1317,1320
>   err = 0;
>   *errnum = err;
>   return bzerrorstrings_0;
> }
2173a1322
> #define BZ_UNIX 1
2174a1324
> #define BZ_LCCWIN32 0
2175a1326,1327
> #include <signal.h>
> #include <errno.h>
2176a1329,1331
> #define ERROR_IF_EOFi
> #define ERROR_IF_NOT_ZEROi
> #define ERROR_IF_MINUS_ONEi
2177a1333,1334
> #include <fcntl.h>
> #include <utime.h>
2178a1336,1340
> #define PATH_SEP '/'
> #define MY_LSTAT lstat
> #define MY_STAT stat
> #define MY_S_ISREG S_ISREG
> #define MY_S_ISDIR S_ISDIR
2179a1342
> #define APPEND_FILESPECroot , name root = snocStringroot, name
2180a1344
> #define APPEND_FLAGroot , name root = snocStringroot, name
2181a1346
> #define SET_BINARY_MODEd
2182a1348
> #define NORETURN
2183a1350,1351
> #define True Bool1
> #define False Bool0
2184a1353
> typedef int IntNative;
2185a1355,1361
> #define SM_I2O 1
> #define SM_F2O 2
> #define SM_F2F 3
> 
> #define OM_Z 1
> #define OM_UNZ 2
> #define OM_TEST 3
2186a1363
> #define FILE_NAME_LEN 4
2187a1365
> typedef struct UInt64;
2190a1369
> typedef struct zzzz ell;
2191a1371
> #define ISFLAGs strcmpaa->name, s == 0
2193,2256c1373
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    ell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAGs strcmpaa->name, s==0
< 
< IntNative main ( IntNative argc )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> IntNative main(IntNative argc);
(87.9 %, 24784 bytes)
Termination check: size was 30277; now 24784
===< pass_balanced :: parens >===
1c1
< 
---
>  
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *(void *, int, int);
1373a1374
>  
\ No newline at end of file
1c1
< 
---
>  
37c37
<   void *(*bzalloc)(void *, int, int);
---
>   void *(*bzalloc);
1373a1374
>  
\ No newline at end of file
1c1
< 
---
>  
38c38
<   void (*bzfree)(void *, void *);
---
>   void (void *, void *);
1373a1374
>  
\ No newline at end of file
1c1
< 
---
>  
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree);
1373a1374
>  
\ No newline at end of file
(87.9 %, 24768 bytes)
38c38
<   void (*bzfree)(void *, void *);
---
>   void (void *, void *);
38c38
<   void (*bzfree)(void *, void *);
---
>   void (*bzfree);
44c44
< #define BZ_API(func) func
---
> #define BZ_API func
47,49c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit;
51,53c51
< BZ_EXTERN int BZ_APIBZ2_bzCompress(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress;
55c55
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd;
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit;
61c61
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress;
63c63
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd;
69,70c69
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen;
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose;
76,78c76
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused;
80,82c80
< BZ_EXTERN int BZ_APIBZ2_bzRead(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead;
84,86c84
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen;
88,90c88
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite;
(87.9 %, 24752 bytes)
44c44
< #define BZ_API(func) func
---
> #define BZ_API func
47,49c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit;
51,53c51
< BZ_EXTERN int BZ_APIBZ2_bzCompress(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress;
55c55
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEnd;
57,59c57
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit;
61c61
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompress;
63c63
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd;
69,70c69
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen;
72,74c72
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose;
76,78c76
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused;
80,82c80
< BZ_EXTERN int BZ_APIBZ2_bzRead(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzRead;
84,86c84
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
<                                         int blockSize100k, int verbosity,
<                                         int workFactor);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen;
88,90c88
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite;
92,94c92
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
< 
<     void);
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose;
96c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(int *bzerror, BZFILE *b, int abandon,
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
<                                           unsigned int *nbytes_in_lo32,
<                                           unsigned int *nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64);
102,104c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress;
106,108c106
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress;
110c110
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion;
112,114c112
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
< 
<     void);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen;
116,118c116
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
< 
<     void);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen;
120,122c120
< BZ_EXTERN int BZ_APIBZ2_bzread(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzread;
124,126c124
< BZ_EXTERN int BZ_APIBZ2_bzwrite(
< 
<     void);
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite;
128c128
< BZ_EXTERN int BZ_APIBZ2_bzflush(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzflush;
130c130
< BZ_EXTERN void BZ_APIBZ2_bzclose(void);
---
> BZ_EXTERN void BZ_APIBZ2_bzclose;
132,134c132
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
< 
<     void);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror;
150c150
< #define True (Bool)1
---
> #define True 1
151c151
< #define False (Bool)0
---
> #define False 0
157c157
< #define AssertD(cond, msg)
---
> #define AssertD
478c478
< static void makeMaps_e(void) {
---
> static void makeMaps_e {
(87.9 %, 24746 bytes)
151c151
< #define False (Bool)0
---
> #define False 0
157c157
< #define AssertD(cond, msg)
---
> #define AssertD
478c478
< static void makeMaps_e(void) {
---
> static void makeMaps_e {
(87.9 %, 24740 bytes)
157c157
< #define AssertD(cond, msg)
---
> #define AssertD
478c478
< static void makeMaps_e(void) {
---
> static void makeMaps_e {
484c484
<   for (i; i < 6; i++) {
---
>   for  {
494c494
< static void generateMTFValues(void) {
---
> static void generateMTFValues {
516c516
<   for (i; i <= EOB; i++)
---
>   for 
523c523
<   for (i; i < s->nInUse; i++)
---
>   for 
524c524
<     yy_0 = (UChar)i;
---
>     yy_0 = i;
528c528
<   for (i; i < s->nblock; i++) {
---
>   for  {
530c530
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD;
536c536
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     AssertD;
553c553
<         while (rll_i != rtmp)
---
>         while 
589c589
< static int bz_config_ok(void);
---
> static int bz_config_ok;
(87.9 %, 24733 bytes)
528c528
<   for (i; i < s->nblock; i++) {
---
>   for  {
530c530
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD;
536c536
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     AssertD;
553c553
<         while (rll_i != rtmp)
---
>         while 
589c589
< static int bz_config_ok(void);
---
> static int bz_config_ok;
591c591
< static void *default_bzalloc(void);
---
> static void *default_bzalloc;
593c593
< static void default_bzfree(void);
---
> static void default_bzfree;
(87.9 %, 24727 bytes)
591c591
< static void *default_bzalloc(void);
---
> static void *default_bzalloc;
593c593
< static void default_bzfree(void);
---
> static void default_bzfree;
595c595
< static Bool isempty_RL(void);
---
> static Bool isempty_RL;
(87.9 %, 24721 bytes)
593c593
< static void default_bzfree(void);
---
> static void default_bzfree;
595c595
< static Bool isempty_RL(void);
---
> static Bool isempty_RL;
597,599c597
< int BZ_APIBZ2_bzCompressInit(
< 
<     void) {
---
> int BZ_APIBZ2_bzCompressInit {
625,626c625
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if 
632c632
<   if (strm->bzalloc == NULL)
---
>   if 
634c634
<   if (strm->bzfree == NULL)
---
>   if 
638c638
<   if (s == NULL)
---
>   if 
648c648
<   s_5 = 0 * sizeof(UInt32);
---
>   s_5 = 0 * sizeof;
651c651
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if 
662c662
<   s_9 = (UChar *)s_5;
---
>   s_9 = s_5;
(87.9 %, 24715 bytes)
597,599c597
< int BZ_APIBZ2_bzCompressInit(
< 
<     void) {
---
> int BZ_APIBZ2_bzCompressInit {
625,626c625
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if 
632c632
<   if (strm->bzalloc == NULL)
---
>   if 
634c634
<   if (strm->bzfree == NULL)
---
>   if 
638c638
<   if (s == NULL)
---
>   if 
648c648
<   s_5 = 0 * sizeof(UInt32);
---
>   s_5 = 0 * sizeof;
651c651
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if 
662c662
<   s_9 = (UChar *)s_5;
---
>   s_9 = s_5;
663c663
<   s_10 = (UInt16 *)s_4;
---
>   s_10 = s_4;
(87.9 %, 24706 bytes)
663c663
<   s_10 = (UInt16 *)s_4;
---
>   s_10 = s_4;
665c665
<   s_8 = (UInt32 *)s_4;
---
>   s_8 = s_4;
679c679
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress {
(87.9 %, 24696 bytes)
665c665
<   s_8 = (UInt32 *)s_4;
---
>   s_8 = s_4;
679c679
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress {
686c686
<   if (strm == NULL)
---
>   if 
689c689
<   if (s == NULL)
---
>   if 
696c696
<   switch (s_1)
---
>   switch 
700c700
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> int BZ_APIBZ2_bzCompressEnd {
704c704
<   if (strm == NULL)
---
>   if 
707c707
<   if (s == NULL)
---
>   if 
713c713
<   if (s->arr1 != NULL)
---
>   if 
714c714
<     BZFREE(s->arr1);
---
>     BZFREE;
715c715
<   if (s->arr2 != NULL)
---
>   if 
716c716
<     BZFREE(s->arr2);
---
>     BZFREE;
(88.0 %, 24686 bytes)
679c679
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress {
686c686
<   if (strm == NULL)
---
>   if 
689c689
<   if (s == NULL)
---
>   if 
696c696
<   switch (s_1)
---
>   switch 
700c700
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> int BZ_APIBZ2_bzCompressEnd {
704c704
<   if (strm == NULL)
---
>   if 
707c707
<   if (s == NULL)
---
>   if 
713c713
<   if (s->arr1 != NULL)
---
>   if 
714c714
<     BZFREE(s->arr1);
---
>     BZFREE;
715c715
<   if (s->arr2 != NULL)
---
>   if 
716c716
<     BZFREE(s->arr2);
---
>     BZFREE;
717c717
<   if (s->ftab != NULL)
---
>   if 
718c718
<     BZFREE(s->ftab);
---
>     BZFREE;
(88.0 %, 24677 bytes)
717c717
<   if (s->ftab != NULL)
---
>   if 
718c718
<     BZFREE(s->ftab);
---
>     BZFREE;
726,728c726
< int BZ_APIBZ2_bzDecompressInit(
< 
<     void) {
---
> int BZ_APIBZ2_bzDecompressInit {
746c746
<   if (strm == NULL)
---
>   if 
755c755
<   if (strm->bzalloc == NULL)
---
>   if 
757c757
<   if (strm->bzfree == NULL)
---
>   if 
761c761
<   if (s == NULL)
---
>   if 
773c773
<   s_10 = (Bool)small;
---
>   s_10 = small;
(88.0 %, 24668 bytes)
726,728c726
< int BZ_APIBZ2_bzDecompressInit(
< 
<     void) {
---
> int BZ_APIBZ2_bzDecompressInit {
746c746
<   if (strm == NULL)
---
>   if 
755c755
<   if (strm->bzalloc == NULL)
---
>   if 
757c757
<   if (strm->bzfree == NULL)
---
>   if 
761c761
<   if (s == NULL)
---
>   if 
773c773
<   s_10 = (Bool)small;
---
>   s_10 = small;
783c783
< int BZ_APIBZ2_bzDecompress(void) {
---
> int BZ_APIBZ2_bzDecompress {
787c787
<   if (strm == NULL)
---
>   if 
790c790
<   if (s == NULL)
---
>   if 
796c796
<   while (True)
---
>   while 
803c803
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> int BZ_APIBZ2_bzDecompressEnd {
807c807
<   if (strm == NULL)
---
>   if 
810c810
<   if (s == NULL)
---
>   if 
816c816
<   if (s->tt != NULL)
---
>   if 
817c817
<     BZFREE(s->tt);
---
>     BZFREE;
818c818
<   if (s->ll16 != NULL)
---
>   if 
819c819
<     BZFREE(s->ll16);
---
>     BZFREE;
(88.0 %, 24662 bytes)
783c783
< int BZ_APIBZ2_bzDecompress(void) {
---
> int BZ_APIBZ2_bzDecompress {
787c787
<   if (strm == NULL)
---
>   if 
790c790
<   if (s == NULL)
---
>   if 
796c796
<   while (True)
---
>   while 
803c803
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> int BZ_APIBZ2_bzDecompressEnd {
807c807
<   if (strm == NULL)
---
>   if 
810c810
<   if (s == NULL)
---
>   if 
816c816
<   if (s->tt != NULL)
---
>   if 
817c817
<     BZFREE(s->tt);
---
>     BZFREE;
818c818
<   if (s->ll16 != NULL)
---
>   if 
819c819
<     BZFREE(s->ll16);
---
>     BZFREE;
820c820
<   if (s->ll4 != NULL)
---
>   if 
821c821
<     BZFREE(s->ll4);
---
>     BZFREE;
(88.0 %, 24653 bytes)
820c820
<   if (s->ll4 != NULL)
---
>   if 
821c821
<     BZFREE(s->ll4);
---
>     BZFREE;
841,842c841
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
> BZFILE *BZ_APIBZ2_bzWriteOpen {
846c846
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
848,849c848
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
<       workFactor > 0 || verbosity < 0 || verbosity > 4)
---
>   if 
852c852
<   if (ferror(f))
---
>   if 
852c852
<   if (ferror(f))
---
>   if (ferror)
(88.0 %, 24645 bytes)
841,842c841
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
> BZFILE *BZ_APIBZ2_bzWriteOpen {
846c846
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
848,849c848
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
<       workFactor > 0 || verbosity < 0 || verbosity > 4)
---
>   if 
852c852
<   if (ferror(f))
---
>   if 
852c852
<   if (ferror(f))
---
>   if (ferror)
855c855
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc;
855c855
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc(sizeof);
856c856
<   if (bzf == NULL)
---
>   if 
859c859
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
(88.0 %, 24642 bytes)
855c855
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc;
855c855
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc(sizeof);
856c856
<   if (bzf == NULL)
---
>   if 
859c859
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
(88.0 %, 24626 bytes)
856c856
<   if (bzf == NULL)
---
>   if 
859c859
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
871c871
<   ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>   ret = BZ2_bzCompressInit;
881,883c881
< void BZ_APIBZ2_bzWrite(
< 
<     void) {
---
> void BZ_APIBZ2_bzWrite {
889c889
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
897c897
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if 
(88.0 %, 24619 bytes)
871c871
<   ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>   ret = BZ2_bzCompressInit;
881,883c881
< void BZ_APIBZ2_bzWrite(
< 
<     void) {
---
> void BZ_APIBZ2_bzWrite {
889c889
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
897c897
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if 
902c902
<   if (ferror(bzf->handle))
---
>   if 
902c902
<   if (ferror(bzf->handle))
---
>   if (ferror)
(88.0 %, 24609 bytes)
897c897
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if 
902c902
<   if (ferror(bzf->handle))
---
>   if 
902c902
<   if (ferror(bzf->handle))
---
>   if (ferror)
912c912
<   while (True) {
---
>   while  {
928,930c928
< void BZ_APIBZ2_bzWriteClose(
< 
<     void) {
---
> void BZ_APIBZ2_bzWriteClose {
936c936
<   BZ2_bzWriteClose64(bzerror, b, abandon, nbytes_in, NULL, nbytes_out, NULL);
---
>   BZ2_bzWriteClose64;
(88.0 %, 24596 bytes)
912c912
<   while (True) {
---
>   while  {
928,930c928
< void BZ_APIBZ2_bzWriteClose(
< 
<     void) {
---
> void BZ_APIBZ2_bzWriteClose {
936c936
<   BZ2_bzWriteClose64(bzerror, b, abandon, nbytes_in, NULL, nbytes_out, NULL);
---
>   BZ2_bzWriteClose64;
939,941c939
< void BZ_APIBZ2_bzWriteClose64(
< 
<     void) {
---
> void BZ_APIBZ2_bzWriteClose64 {
950c950
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
(88.0 %, 24540 bytes)
939,941c939
< void BZ_APIBZ2_bzWriteClose64(
< 
<     void) {
---
> void BZ_APIBZ2_bzWriteClose64 {
950c950
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
953c953
<   if (bzf == NULL)
---
>   if 
958c958
<   if (ferror(bzf->handle))
---
>   if 
958c958
<   if (ferror(bzf->handle))
---
>   if (ferror)
(88.0 %, 24530 bytes)
953c953
<   if (bzf == NULL)
---
>   if 
958c958
<   if (ferror(bzf->handle))
---
>   if 
958c958
<   if (ferror(bzf->handle))
---
>   if (ferror)
961c961
<   if (nbytes_in_lo32 != NULL)
---
>   if 
963c963
<   if (nbytes_in_hi32 != NULL)
---
>   if 
965c965
<   if (nbytes_out_lo32 != NULL)
---
>   if 
967c967
<   if (nbytes_out_hi32 != NULL)
---
>   if 
970c970
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if 
972c972
<     if (!abandon && !ferror(bzf->handle))
---
>     if 
972c972
<     if (!abandon && !ferror(bzf->handle))
---
>     if (!abandon && !ferror)
(88.0 %, 24517 bytes)
961c961
<   if (nbytes_in_lo32 != NULL)
---
>   if 
963c963
<   if (nbytes_in_hi32 != NULL)
---
>   if 
965c965
<   if (nbytes_out_lo32 != NULL)
---
>   if 
967c967
<   if (nbytes_out_hi32 != NULL)
---
>   if 
970c970
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if 
972c972
<     if (!abandon && !ferror(bzf->handle))
---
>     if 
972c972
<     if (!abandon && !ferror(bzf->handle))
---
>     if (!abandon && !ferror)
974c974
<       if (nbytes_in_lo32 != NULL)
---
>       if 
976c976
<   if (nbytes_in_hi32 != NULL)
---
>   if 
978c978
<   if (nbytes_out_lo32 != NULL)
---
>   if 
980c980
<   if (nbytes_out_hi32 != NULL)
---
>   if 
988,989c988
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
> BZFILE *BZ_APIBZ2_bzReadOpen {
998c998
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
1000,1002c1000
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
<       unused == NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
<       nUnused > BZ_MAX_UNUSED)
---
>   if 
1005c1005
<   if (ferror(f))
---
>   if 
1005c1005
<   if (ferror(f))
---
>   if (ferror)
(88.0 %, 24504 bytes)
974c974
<       if (nbytes_in_lo32 != NULL)
---
>       if 
976c976
<   if (nbytes_in_hi32 != NULL)
---
>   if 
978c978
<   if (nbytes_out_lo32 != NULL)
---
>   if 
980c980
<   if (nbytes_out_hi32 != NULL)
---
>   if 
988,989c988
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
> BZFILE *BZ_APIBZ2_bzReadOpen {
998c998
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
1000,1002c1000
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
<       unused == NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
<       nUnused > BZ_MAX_UNUSED)
---
>   if 
1005c1005
<   if (ferror(f))
---
>   if 
1005c1005
<   if (ferror(f))
---
>   if (ferror)
1008c1008
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc;
1008c1008
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc(sizeof);
1009c1009
<   if (bzf == NULL)
---
>   if 
1012c1012
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
(88.0 %, 24501 bytes)
1008c1008
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc;
1008c1008
<   bzf = malloc(sizeof(bzFile));
---
>   bzf = malloc(sizeof);
1009c1009
<   if (bzf == NULL)
---
>   if 
1012c1012
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
(88.1 %, 24485 bytes)
1009c1009
<   if (bzf == NULL)
---
>   if 
1012c1012
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
1022c1022
<   while (nUnused > 0)
---
>   while 
1024c1024
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret = BZ2_bzDecompressInit;
1036c1036
< void BZ_APIBZ2_bzReadClose(void) {
---
> void BZ_APIBZ2_bzReadClose {
1039c1039
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
(88.1 %, 24478 bytes)
1022c1022
<   while (nUnused > 0)
---
>   while 
1024c1024
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret = BZ2_bzDecompressInit;
1036c1036
< void BZ_APIBZ2_bzReadClose(void) {
---
> void BZ_APIBZ2_bzReadClose {
1039c1039
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
1044c1044
<   if (bzf == NULL)
---
>   if 
1053c1053
<   (void)0;
---
>   0;
(88.1 %, 24468 bytes)
1044c1044
<   if (bzf == NULL)
---
>   if 
1053c1053
<   (void)0;
---
>   0;
1057,1059c1057
< int BZ_APIBZ2_bzRead(
< 
<     void) {
---
> int BZ_APIBZ2_bzRead {
1065c1065
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
(88.1 %, 24462 bytes)
1057,1059c1057
< int BZ_APIBZ2_bzRead(
< 
<     void) {
---
> int BZ_APIBZ2_bzRead {
1065c1065
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
1072c1072
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if 
1086c1086
<   while (True)
---
>   while 
1091,1093c1091
< void BZ_APIBZ2_bzReadGetUnused(
< 
<     void) {
---
> void BZ_APIBZ2_bzReadGetUnused {
1098c1098
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
(88.1 %, 24452 bytes)
1072c1072
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if 
1086c1086
<   while (True)
---
>   while 
1091,1093c1091
< void BZ_APIBZ2_bzReadGetUnused(
< 
<     void) {
---
> void BZ_APIBZ2_bzReadGetUnused {
1098c1098
<   bzFile *bzf = (bzFile *)b;
---
>   bzFile *bzf = b;
1102c1102
<   if (bzf == NULL)
---
>   if 
1107c1107
<   if (unused == NULL || nUnused == NULL)
---
>   if 
1115,1117c1115
< int BZ_APIBZ2_bzBuffToBuffCompress(
< 
<     void) {
---
> int BZ_APIBZ2_bzBuffToBuffCompress {
1132,1134c1132
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
<       workFactor > 0)
---
>   if 
1174,1176c1174
< int BZ_APIBZ2_bzBuffToBuffDecompress(
< 
<     void) {
---
> int BZ_APIBZ2_bzBuffToBuffDecompress {
1190,1191c1190
<   if (dest == NULL || destLen == NULL || source == NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if 
1232c1232
< const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> const char *BZ_APIBZ2_bzlibVersion { return BZ_VERSION; }
1234,1235c1234
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
<                                  int open_mode);
---
> static BZFILE *bzopen_or_bzdopen;
1237c1237
< BZFILE *BZ_APIBZ2_bzopen(void) {
---
> BZFILE *BZ_APIBZ2_bzopen {
1243c1243
< BZFILE *BZ_APIBZ2_bzdopen(void) {
---
> BZFILE *BZ_APIBZ2_bzdopen {
(88.1 %, 24442 bytes)
1102c1102
<   if (bzf == NULL)
---
>   if 
1107c1107
<   if (unused == NULL || nUnused == NULL)
---
>   if 
1115,1117c1115
< int BZ_APIBZ2_bzBuffToBuffCompress(
< 
<     void) {
---
> int BZ_APIBZ2_bzBuffToBuffCompress {
1132,1134c1132
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
<       workFactor > 0)
---
>   if 
1174,1176c1174
< int BZ_APIBZ2_bzBuffToBuffDecompress(
< 
<     void) {
---
> int BZ_APIBZ2_bzBuffToBuffDecompress {
1190,1191c1190
<   if (dest == NULL || destLen == NULL || source == NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if 
1232c1232
< const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> const char *BZ_APIBZ2_bzlibVersion { return BZ_VERSION; }
1234,1235c1234
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
<                                  int open_mode);
---
> static BZFILE *bzopen_or_bzdopen;
1237c1237
< BZFILE *BZ_APIBZ2_bzopen(void) {
---
> BZFILE *BZ_APIBZ2_bzopen {
1243c1243
< BZFILE *BZ_APIBZ2_bzdopen(void) {
---
> BZFILE *BZ_APIBZ2_bzdopen {
1246c1246
<   return bzopen_or_bzdopen(NULL, fd, mode, 1);
---
>   return bzopen_or_bzdopen;
1249c1249
< int BZ_APIBZ2_bzread(void) {
---
> int BZ_APIBZ2_bzread {
1264c1264
< int BZ_APIBZ2_bzwrite(void) {
---
> int BZ_APIBZ2_bzwrite {
1271c1271
<   if (bzerr == BZ_OK) {
---
>   if  {
1278c1278
< int BZ_APIBZ2_bzflush(void) {
---
> int BZ_APIBZ2_bzflush {
1284c1284
< void BZ_APIBZ2_bzclose(void) {
---
> void BZ_APIBZ2_bzclose {
1287c1287
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ->handle;
1287c1287
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (b)->handle;
1289c1289
<   if (b == NULL)
---
>   if 
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if  {
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if (->writing) {
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if ((b)->writing) {
1291c1291
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose;
1292c1292
<       if (bzerr != BZ_OK) {
---
>       if  {
1293c1293
<         BZ2_bzWriteClose(NULL, b, 1, NULL, NULL);
---
>         BZ2_bzWriteClose;
(88.1 %, 24423 bytes)
1249c1249
< int BZ_APIBZ2_bzread(void) {
---
> int BZ_APIBZ2_bzread {
1264c1264
< int BZ_APIBZ2_bzwrite(void) {
---
> int BZ_APIBZ2_bzwrite {
1271c1271
<   if (bzerr == BZ_OK) {
---
>   if  {
1278c1278
< int BZ_APIBZ2_bzflush(void) {
---
> int BZ_APIBZ2_bzflush {
1284c1284
< void BZ_APIBZ2_bzclose(void) {
---
> void BZ_APIBZ2_bzclose {
1287c1287
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ->handle;
1287c1287
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (b)->handle;
1289c1289
<   if (b == NULL)
---
>   if 
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if  {
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if (->writing) {
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if ((b)->writing) {
1291c1291
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose;
1292c1292
<       if (bzerr != BZ_OK) {
---
>       if  {
1293c1293
<         BZ2_bzWriteClose(NULL, b, 1, NULL, NULL);
---
>         BZ2_bzWriteClose;
1295c1295
<     } else if (fp != stdin && fp != stdout) {
---
>     } else if  {
1296c1296
<       fclose(fp);
---
>       fclose;
(88.1 %, 24399 bytes)
1295c1295
<     } else if (fp != stdin && fp != stdout) {
---
>     } else if  {
1296c1296
<       fclose(fp);
---
>       fclose;
1310c1310
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror {
1313c1313
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ->lastErr;
1313c1313
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (b)->lastErr;
1373c1373
< IntNative main(IntNative argc);
---
> IntNative main;
(88.1 %, 24395 bytes)
1310c1310
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror {
1313c1313
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ->lastErr;
1313c1313
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (b)->lastErr;
1373c1373
< IntNative main(IntNative argc);
---
> IntNative main;
(88.1 %, 24379 bytes)
===< pass_balanced :: parens-only >===
37c37
<   void *(*bzalloc);
---
>   void **bzalloc;
38c38
<   void (*bzfree);
---
>   void *bzfree;
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc func
(88.1 %, 24377 bytes)
38c38
<   void (*bzfree);
---
>   void *bzfree;
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc func
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit
49c49
<     void);
---
>     void;
51c51
< BZ_EXTERN int BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress
53c53
<     void);
---
>     void;
55c55
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEndvoid;
(88.1 %, 24375 bytes)
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc func
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressInit
49c49
<     void);
---
>     void;
51c51
< BZ_EXTERN int BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN int BZ_APIBZ2_bzCompress
53c53
<     void);
---
>     void;
55c55
< BZ_EXTERN int BZ_APIBZ2_bzCompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzCompressEndvoid;
57c57
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit
59c59
<     void);
---
>     void;
61c61
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressvoid;
(88.1 %, 24373 bytes)
57c57
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressInit
59c59
<     void);
---
>     void;
61c61
< BZ_EXTERN int BZ_APIBZ2_bzDecompress(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressvoid;
63c63
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEndvoid;
(88.1 %, 24371 bytes)
63c63
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEnd(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzDecompressEndvoid;
69,70c69,70
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
>                                        int small, void *unused, int nUnused;
72c72
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose
74c74
<     void);
---
>     void;
76c76
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused
78c78
<     void);
---
>     void;
80c80
< BZ_EXTERN int BZ_APIBZ2_bzRead(
---
> BZ_EXTERN int BZ_APIBZ2_bzRead
82c82
<     void);
---
>     void;
84c84
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
86c86
<                                         int workFactor);
---
>                                         int workFactor;
88c88
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite
90c90
<     void);
---
>     void;
92c92
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose
94c94
<     void);
---
>     void;
96c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
96c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
100c100
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *nbytes_out_hi32;
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress
104c104
<     void);
---
>     void;
106c106
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress
108c108
<     void);
---
>     void;
110c110
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersionvoid;
(88.1 %, 24369 bytes)
69,70c69,70
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
<                                        int small, void *unused, int nUnused);
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
>                                        int small, void *unused, int nUnused;
72c72
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN void BZ_APIBZ2_bzReadClose
74c74
<     void);
---
>     void;
76c76
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
> BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused
78c78
<     void);
---
>     void;
80c80
< BZ_EXTERN int BZ_APIBZ2_bzRead(
---
> BZ_EXTERN int BZ_APIBZ2_bzRead
82c82
<     void);
---
>     void;
84c84
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
86c86
<                                         int workFactor);
---
>                                         int workFactor;
88c88
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN void BZ_APIBZ2_bzWrite
90c90
<     void);
---
>     void;
92c92
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose
94c94
<     void);
---
>     void;
96c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_APIBZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
96c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
100c100
<                                           unsigned int *nbytes_out_hi32);
---
>                                           unsigned int *nbytes_out_hi32;
102c102
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress
104c104
<     void);
---
>     void;
106c106
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress
108c108
<     void);
---
>     void;
110c110
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersion(void);
---
> BZ_EXTERN const char *BZ_APIBZ2_bzlibVersionvoid;
112c112
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen
114c114
<     void);
---
>     void;
116c116
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen
118c118
<     void);
---
>     void;
120c120
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN int BZ_APIBZ2_bzread
122c122
<     void);
---
>     void;
124c124
< BZ_EXTERN int BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite
126c126
<     void);
---
>     void;
128c128
< BZ_EXTERN int BZ_APIBZ2_bzflush(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzflushvoid;
(88.1 %, 24367 bytes)
112c112
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen
114c114
<     void);
---
>     void;
116c116
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen
118c118
<     void);
---
>     void;
120c120
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN int BZ_APIBZ2_bzread
122c122
<     void);
---
>     void;
124c124
< BZ_EXTERN int BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN int BZ_APIBZ2_bzwrite
126c126
<     void);
---
>     void;
128c128
< BZ_EXTERN int BZ_APIBZ2_bzflush(void);
---
> BZ_EXTERN int BZ_APIBZ2_bzflushvoid;
130c130
< BZ_EXTERN void BZ_APIBZ2_bzclose(void);
---
> BZ_EXTERN void BZ_APIBZ2_bzclosevoid;
(88.1 %, 24365 bytes)
130c130
< BZ_EXTERN void BZ_APIBZ2_bzclose(void);
---
> BZ_EXTERN void BZ_APIBZ2_bzclosevoid;
132c132
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror
134c134
<     void);
---
>     void;
157c157
< #define AssertD(cond, msg)
---
> #define AssertDcond, msg
478c478
< static void makeMaps_e(void) {
---
> static void makeMaps_evoid {
(88.1 %, 24363 bytes)
132c132
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN const char *BZ_APIBZ2_bzerror
134c134
<     void);
---
>     void;
157c157
< #define AssertD(cond, msg)
---
> #define AssertDcond, msg
478c478
< static void makeMaps_e(void) {
---
> static void makeMaps_evoid {
484c484
<   for (i; i < 6; i++) {
---
>   for i; i < 6; i++ {
494c494
< static void generateMTFValues(void) {
---
> static void generateMTFValuesvoid {
516c516
<   for (i; i <= EOB; i++)
---
>   for i; i <= EOB; i++
523c523
<   for (i; i < s->nInUse; i++)
---
>   for i; i < s->nInUse; i++
528c528
<   for (i; i < s->nblock; i++) {
---
>   for i; i < s->nblock; i++ {
530c530
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertDwr <= i, "generateMTFValues1";
536c536
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     AssertDll_i nInUse, "generateMTFValuesa";
553c553
<         while (rll_i != rtmp)
---
>         while rll_i != rtmp
593c593
< static void default_bzfree(void);
---
> static void default_bzfreevoid;
597c597
< int BZ_APIBZ2_bzCompressInit(
---
> int BZ_APIBZ2_bzCompressInit
599c599
<     void) {
---
>     void {
625,626c625,626
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
>       workFactor < 0 || workFactor > 0
632c632
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL
634c634
<   if (strm->bzfree == NULL)
---
>   if strm->bzfree == NULL
638c638
<   if (s == NULL)
---
>   if s == NULL
648c648
<   s_5 = 0 * sizeof(UInt32);
---
>   s_5 = 0 * sizeofUInt32;
651c651
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL
679c679
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompressvoid {
686c686
<   if (strm == NULL)
---
>   if strm == NULL
689c689
<   if (s == NULL)
---
>   if s == NULL
696c696
<   switch (s_1)
---
>   switch s_1
700c700
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> int BZ_APIBZ2_bzCompressEndvoid {
704c704
<   if (strm == NULL)
---
>   if strm == NULL
707c707
<   if (s == NULL)
---
>   if s == NULL
713c713
<   if (s->arr1 != NULL)
---
>   if s->arr1 != NULL
714c714
<     BZFREE(s->arr1);
---
>     BZFREEs->arr1;
715c715
<   if (s->arr2 != NULL)
---
>   if s->arr2 != NULL
717c717
<   if (s->ftab != NULL)
---
>   if s->ftab != NULL
726c726
< int BZ_APIBZ2_bzDecompressInit(
---
> int BZ_APIBZ2_bzDecompressInit
728c728
<     void) {
---
>     void {
746c746
<   if (strm == NULL)
---
>   if strm == NULL
755c755
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL
757c757
<   if (strm->bzfree == NULL)
---
>   if strm->bzfree == NULL
761c761
<   if (s == NULL)
---
>   if s == NULL
783c783
< int BZ_APIBZ2_bzDecompress(void) {
---
> int BZ_APIBZ2_bzDecompressvoid {
787c787
<   if (strm == NULL)
---
>   if strm == NULL
790c790
<   if (s == NULL)
---
>   if s == NULL
796c796
<   while (True)
---
>   while True
803c803
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> int BZ_APIBZ2_bzDecompressEndvoid {
807c807
<   if (strm == NULL)
---
>   if strm == NULL
810c810
<   if (s == NULL)
---
>   if s == NULL
816c816
<   if (s->tt != NULL)
---
>   if s->tt != NULL
817c817
<     BZFREE(s->tt);
---
>     BZFREEs->tt;
818c818
<   if (s->ll16 != NULL)
---
>   if s->ll16 != NULL
820c820
<   if (s->ll4 != NULL)
---
>   if s->ll4 != NULL
841,842c841,842
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
> BZFILE *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
>                               int verbosity, int workFactor {
846c846
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK;
848,849c848,849
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
<       workFactor > 0 || verbosity < 0 || verbosity > 4)
---
>   if f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
>       workFactor > 0 || verbosity < 0 || verbosity > 4
852c852
<   if (ferror)
---
>   if ferror
856c856
<   if (bzf == NULL)
---
>   if bzf == NULL
871c871
<   ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>   ret = BZ2_bzCompressInit&bzf->strm, blockSize100k, verbosity, workFactor;
881c881
< void BZ_APIBZ2_bzWrite(
---
> void BZ_APIBZ2_bzWrite
883c883
<     void) {
---
>     void {
897c897
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if bzf == NULL || buf == NULL || len < 0
902c902
<   if (ferror)
---
>   if ferror
912c912
<   while (True) {
---
>   while True {
928c928
< void BZ_APIBZ2_bzWriteClose(
---
> void BZ_APIBZ2_bzWriteClose
930c930
<     void) {
---
>     void {
939c939
< void BZ_APIBZ2_bzWriteClose64(
---
> void BZ_APIBZ2_bzWriteClose64
941c941
<     void) {
---
>     void {
953c953
<   if (bzf == NULL)
---
>   if bzf == NULL
958c958
<   if (ferror)
---
>   if ferror
961c961
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != NULL
963c963
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != NULL
965c965
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != NULL
967c967
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != NULL
970c970
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !abandon && bzf->lastErr == BZ_OK
972c972
<     if (!abandon && !ferror)
---
>     if !abandon && !ferror
974c974
<       if (nbytes_in_lo32 != NULL)
---
>       if nbytes_in_lo32 != NULL
976c976
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != NULL
978c978
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != NULL
980c980
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != NULL
988,989c988,989
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
> BZFILE *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
>                              void *unused, int nUnused {
998c998
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK;
1000c1000
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>   if f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
1002c1002
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused > BZ_MAX_UNUSED
1005c1005
<   if (ferror)
---
>   if ferror
1009c1009
<   if (bzf == NULL)
---
>   if bzf == NULL
1022c1022
<   while (nUnused > 0)
---
>   while nUnused > 0
1024c1024
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret = BZ2_bzDecompressInitbzf->strm, verbosity, small;
1036c1036
< void BZ_APIBZ2_bzReadClose(void) {
---
> void BZ_APIBZ2_bzReadClosevoid {
1044c1044
<   if (bzf == NULL)
---
>   if bzf == NULL
1057c1057
< int BZ_APIBZ2_bzRead(
---
> int BZ_APIBZ2_bzRead
1059c1059
<     void) {
---
>     void {
1072c1072
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if bzf == NULL || buf == NULL || len < 0
1086c1086
<   while (True)
---
>   while True
1091c1091
< void BZ_APIBZ2_bzReadGetUnused(
---
> void BZ_APIBZ2_bzReadGetUnused
1093c1093
<     void) {
---
>     void {
1102c1102
<   if (bzf == NULL)
---
>   if bzf == NULL
1107c1107
<   if (unused == NULL || nUnused == NULL)
---
>   if unused == NULL || nUnused == NULL
1115c1115
< int BZ_APIBZ2_bzBuffToBuffCompress(
---
> int BZ_APIBZ2_bzBuffToBuffCompress
1117c1117
<     void) {
---
>     void {
1132c1132
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1134c1134
<       workFactor > 0)
---
>       workFactor > 0
1174c1174
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> int BZ_APIBZ2_bzBuffToBuffDecompress
1176c1176
<     void) {
---
>     void {
1190,1191c1190,1191
<   if (dest == NULL || destLen == NULL || source == NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if dest == NULL || destLen == NULL || source == NULL ||
>       small != 0 && small != 1 || verbosity < 0 || verbosity > 4
1232c1232
< const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> const char *BZ_APIBZ2_bzlibVersionvoid { return BZ_VERSION; }
1234,1235c1234,1235
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
<                                  int open_mode);
---
> static BZFILE *bzopen_or_bzdopenconst char *path, int d, const char *mode,
>                                  int open_mode;
1237c1237
< BZFILE *BZ_APIBZ2_bzopen(void) {
---
> BZFILE *BZ_APIBZ2_bzopenvoid {
1243c1243
< BZFILE *BZ_APIBZ2_bzdopen(void) {
---
> BZFILE *BZ_APIBZ2_bzdopenvoid {
1249c1249
< int BZ_APIBZ2_bzread(void) {
---
> int BZ_APIBZ2_bzreadvoid {
1264c1264
< int BZ_APIBZ2_bzwrite(void) {
---
> int BZ_APIBZ2_bzwritevoid {
1271c1271
<   if (bzerr == BZ_OK) {
---
>   if bzerr == BZ_OK {
1278c1278
< int BZ_APIBZ2_bzflush(void) {
---
> int BZ_APIBZ2_bzflushvoid {
1284c1284
< void BZ_APIBZ2_bzclose(void) {
---
> void BZ_APIBZ2_bzclosevoid {
1287c1287
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *)b->handle;
1287c1287
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *b)->handle;
1289c1289
<   if (b == NULL)
---
>   if b == NULL
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if ((bzFile *)b)->writing {
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if ((bzFile *)b->writing) {
1290c1290
<     if (((bzFile *)b)->writing) {
---
>     if ((bzFile *b)->writing) {
1291c1291
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose&bzerr, b, 0, NULL, NULL;
1292c1292
<       if (bzerr != BZ_OK) {
---
>       if bzerr != BZ_OK {
1295c1295
<     } else if (fp != stdin && fp != stdout) {
---
>     } else if fp != stdin && fp != stdout {
1310c1310
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerrorvoid {
1313c1313
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *)b->lastErr;
1313c1313
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *b)->lastErr;
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-var >===
55c55
< BZ_EXTERN int BZ_APIBZ2_bzCompressEndvoid;
---
> 
61c61
< BZ_EXTERN int BZ_APIBZ2_bzDecompressvoid;
---
> 
(88.1 %, 24321 bytes)
61c61
< BZ_EXTERN int BZ_APIBZ2_bzDecompressvoid;
---
> 
63c63
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEndvoid;
---
> 
(88.2 %, 24280 bytes)
63c63
< BZ_EXTERN int BZ_APIBZ2_bzDecompressEndvoid;
---
> 
110c110
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersionvoid;
---
> 
(88.2 %, 24236 bytes)
110c110
< BZ_EXTERN const char *BZ_APIBZ2_bzlibVersionvoid;
---
> 
128c128
< BZ_EXTERN int BZ_APIBZ2_bzflushvoid;
---
> 
(88.2 %, 24187 bytes)
128c128
< BZ_EXTERN int BZ_APIBZ2_bzflushvoid;
---
> 
130c130
< BZ_EXTERN void BZ_APIBZ2_bzclosevoid;
---
> 
(88.2 %, 24151 bytes)
130c130
< BZ_EXTERN void BZ_APIBZ2_bzclosevoid;
---
> 
496c496
<   UChar yy[1];
---
>   
(88.2 %, 24114 bytes)
496c496
<   UChar yy[1];
---
>   
504c504
<   UInt32 *ptr = s->ptr;
---
>   
(88.2 %, 24102 bytes)
504c504
<   UInt32 *ptr = s->ptr;
---
>   
506c506
<   UChar *block = s->block;
---
>   
(88.2 %, 24081 bytes)
506c506
<   UChar *block = s->block;
---
>   
508c508
<   UInt16 *mtfv = s->mtfv;
---
>   
(88.3 %, 24057 bytes)
508c508
<   UInt16 *mtfv = s->mtfv;
---
>   
589c589
< static int bz_config_ok;
---
> 
(88.3 %, 24034 bytes)
589c589
< static int bz_config_ok;
---
> 
595c595
< static Bool isempty_RL;
---
> 
(88.3 %, 24010 bytes)
595c595
< static Bool isempty_RL;
---
> 
680c680
<   int action = 0;
---
>   
(88.3 %, 23987 bytes)
680c680
<   int action = 0;
---
>   
931c931
<   unsigned int *nbytes_out = 0;
---
>   
(88.3 %, 23972 bytes)
931c931
<   unsigned int *nbytes_out = 0;
---
>   
932c932
<   unsigned int *nbytes_in = 0;
---
>   
(88.3 %, 23943 bytes)
932c932
<   unsigned int *nbytes_in = 0;
---
>   
933c933
<   int abandon = 0;
---
>   
(88.3 %, 23915 bytes)
933c933
<   int abandon = 0;
---
>   
934c934
<   BZFILE *b = 0;
---
>   
(88.3 %, 23899 bytes)
934c934
<   BZFILE *b = 0;
---
>   
935c935
<   int *bzerror = 0;
---
>   
(88.3 %, 23885 bytes)
935c935
<   int *bzerror = 0;
---
>   
1038c1038
<   int *bzerror = 0;
---
>   
(88.4 %, 23868 bytes)
1038c1038
<   int *bzerror = 0;
---
>   
1063c1063
<   int *bzerror = 0;
---
>   
(88.4 %, 23851 bytes)
1063c1063
<   int *bzerror = 0;
---
>   
1097c1097
<   int *bzerror = 0;
---
>   
1101c1101
<   Int32 bzf_5;
---
>   
(88.4 %, 23834 bytes)
1097c1097
<   int *bzerror = 0;
---
>   
1101c1101
<   Int32 bzf_5;
---
>   
(88.4 %, 23817 bytes)
1101c1101
<   Int32 bzf_5;
---
>   
1238c1238
<   const char *mode = 0;
---
>   
(88.4 %, 23805 bytes)
1238c1238
<   const char *mode = 0;
---
>   
1239c1239
<   const char *path = 0;
---
>   
(88.4 %, 23784 bytes)
1239c1239
<   const char *path = 0;
---
>   
1244c1244
<   const char *mode = 0;
---
>   
(88.4 %, 23763 bytes)
1244c1244
<   const char *mode = 0;
---
>   
1245c1245
<   int fd = 0;
---
>   
(88.4 %, 23742 bytes)
1245c1245
<   int fd = 0;
---
>   
1250c1250
<   int len = 0;
---
>   
(88.4 %, 23731 bytes)
1250c1250
<   int len = 0;
---
>   
1251c1251
<   void *buf = 0;
---
>   
(88.4 %, 23719 bytes)
1251c1251
<   void *buf = 0;
---
>   
1252c1252
<   BZFILE *b = 0;
---
>   
(88.4 %, 23705 bytes)
1252c1252
<   BZFILE *b = 0;
---
>   
1253c1253
<   int bzerr, nread;
---
>   int nread;
(88.4 %, 23691 bytes)
1253c1253
<   int bzerr, nread;
---
>   int nread;
1266c1266
<   void *buf = 0;
---
>   
(88.4 %, 23684 bytes)
1266c1266
<   void *buf = 0;
---
>   
1267c1267
<   BZFILE *b = 0;
---
>   
(88.5 %, 23670 bytes)
1267c1267
<   BZFILE *b = 0;
---
>   
1279c1279
<   BZFILE *b = 0;
---
>   
(88.5 %, 23656 bytes)
1279c1279
<   BZFILE *b = 0;
---
>   
1300,1307c1300
< static char *bzerrorstrings[1] = {"OK",           "SEQUENCE_ERROR",
<                                   "PARAM_ERROR",  "MEM_ERROR",
<                                   "DATA_ERROR",   "DATA_ERROR_MAGIC",
<                                   "IO_ERROR",     "UNEXPECTED_EOF",
<                                   "OUTBUFF_FULL", "CONFIG_ERROR",
<                                   "???",          "???",
<                                   "???",          "???",
<                                   "???",          "???"};
---
> 
(88.5 %, 23642 bytes)
1300,1307c1300
< static char *bzerrorstrings[1] = {"OK",           "SEQUENCE_ERROR",
<                                   "PARAM_ERROR",  "MEM_ERROR",
<                                   "DATA_ERROR",   "DATA_ERROR_MAGIC",
<                                   "IO_ERROR",     "UNEXPECTED_EOF",
<                                   "OUTBUFF_FULL", "CONFIG_ERROR",
<                                   "???",          "???",
<                                   "???",          "???",
<                                   "???",          "???"};
---
> 
1373c1373
< IntNative main;
---
> 
(88.7 %, 23136 bytes)
1366c1366
< IntNative main;
---
> 
(88.7 %, 23121 bytes)
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: replace-undefined-function >===
===< pass_comments :: 0 >===
===< pass_special :: c >===
===< pass_ints :: c >===
===< pass_ints :: e >===
1362c1362
< typedef struct zzzz ell;
---
> typedef struct zzzz e;
(88.7 %, 23119 bytes)
===< pass_indent :: regular >===
1c1
<  
---
> 
55,56d54
< 
< 
61,64d58
< 
< 
< 
< 
110,111d103
< 
< 
128,131d119
< 
< 
< 
< 
496c484
<   
---
> 
504d491
<   
506c493
<   
---
> 
508c495
<   
---
> 
589,590d575
< 
< 
595,596d579
< 
< 
680c663
<   
---
> 
931,935c914
<   
<   
<   
<   
<   
---
> 
1038c1017
<   
---
> 
1063d1041
<   
1097c1075
<   
---
> 
1101c1079
<   
---
> 
1237,1241c1215
< BZFILE *BZ_APIBZ2_bzopen(void) {
<   
<   
<   return 0;
< }
---
> BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
1243,1247c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) {
<   
<   
<   return bzopen_or_bzdopen;
< }
---
> BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1250,1252c1220
<   
<   
<   
---
> 
1266,1267c1234
<   
<   
---
> 
1278,1282c1245
< int BZ_APIBZ2_bzflush(void) {
<   
< 
<   return 0;
< }
---
> int BZ_APIBZ2_bzflush(void) { return 0; }
1300d1262
< 
1365,1367d1326
< 
< 
<  
\ No newline at end of file
(88.8 %, 23029 bytes)
===< pass_clex :: rm-tok-pattern-4 >===
3c3
< #define _BZLIB_H
---
> define _BZLIB_H
3c3
< #define _BZLIB_H
---
>  _BZLIB_H
3c3
< #define _BZLIB_H
---
> define 
3c3
< #define _BZLIB_H
---
>  
3c3
< #define _BZLIB_H
---
> define _BZLIB_H
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
>  _BZLIB_H
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
> define 
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
>  
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 0
3c3
< #define _BZLIB_H
---
> # _BZLIB_H
3c3
< #define _BZLIB_H
---
> # 
(88.8 %, 23014 bytes)
5c5
< #define BZ_RUN 0
---
>   0
5c5
< #define BZ_RUN 0
---
> define BZ_RUN 
5c5
< #define BZ_RUN 0
---
>  BZ_RUN 
5c5
< #define BZ_RUN 0
---
> define  
5c5
< #define BZ_RUN 0
---
>   
5c5
< #define BZ_RUN 0
---
> # BZ_RUN 0
5c5
< #define BZ_RUN 0
---
> #  0
5c5
< #define BZ_RUN 0
---
> # BZ_RUN 
(88.8 %, 23000 bytes)
6c6
< #define BZ_FLUSH 1
---
>   
6c6
< #define BZ_FLUSH 1
---
> # BZ_FLUSH 1
6c6
< #define BZ_FLUSH 1
---
> #  1
(88.8 %, 22984 bytes)
7c7
< #define BZ_FINISH 2
---
>   
7c7
< #define BZ_FINISH 2
---
> # BZ_FINISH 2
7c7
< #define BZ_FINISH 2
---
> #  2
(88.8 %, 22967 bytes)
9c9
< #define BZ_OK 0
---
>   
9c9
< #define BZ_OK 0
---
> # BZ_OK 0
9c9
< #define BZ_OK 0
---
> #  0
9c9
< #define BZ_OK 0
---
> # BZ_OK 
9c9
< #define BZ_OK 0
---
> #  
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> # BZ_OK 0
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #  0
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> # BZ_OK 
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #  
> define BZ_RUN_OK 1
9c9
< #define BZ_OK 0
---
> #define  0
9c9
< #define BZ_OK 0
---
> #define  
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  0
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  0
> # BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  
> # BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  0
>  BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define  
>  BZ_RUN_OK 1
9c9
< #define BZ_OK 0
---
> #define BZ_OK 
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> define BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> # BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
>  BZ_RUN_OK 1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> #define  1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> define  1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
> #  1
9,10c9,10
< #define BZ_OK 0
< #define BZ_RUN_OK 1
---
> #define BZ_OK 
>   1
10c10
< #define BZ_RUN_OK 1
---
> define BZ_RUN_OK 1
10c10
< #define BZ_RUN_OK 1
---
>  BZ_RUN_OK 1
10c10
< #define BZ_RUN_OK 1
---
> define  1
10c10
< #define BZ_RUN_OK 1
---
>   1
10c10
< #define BZ_RUN_OK 1
---
> define BZ_RUN_OK 
10c10
< #define BZ_RUN_OK 1
---
>  BZ_RUN_OK 
10c10
< #define BZ_RUN_OK 1
---
> define  
10c10
< #define BZ_RUN_OK 1
---
>   
10c10
< #define BZ_RUN_OK 1
---
> # BZ_RUN_OK 1
10c10
< #define BZ_RUN_OK 1
---
> #  1
(88.8 %, 22950 bytes)
11c11
< #define BZ_FLUSH_OK 2
---
>   
11c11
< #define BZ_FLUSH_OK 2
---
> # BZ_FLUSH_OK 2
11c11
< #define BZ_FLUSH_OK 2
---
> #  2
(88.8 %, 22931 bytes)
12c12
< #define BZ_FINISH_OK 3
---
>   
12c12
< #define BZ_FINISH_OK 3
---
> # BZ_FINISH_OK 3
12c12
< #define BZ_FINISH_OK 3
---
> #  3
12c12
< #define BZ_FINISH_OK 3
---
> # BZ_FINISH_OK 
12c12
< #define BZ_FINISH_OK 3
---
> #  
(88.8 %, 22911 bytes)
13c13
< #define BZ_STREAM_END 4
---
>   
13c13
< #define BZ_STREAM_END 4
---
> # BZ_STREAM_END 4
13c13
< #define BZ_STREAM_END 4
---
> #  4
(88.8 %, 22890 bytes)
14c14
< #define BZ_SEQUENCE_ERROR -1
---
>   1
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> # BZ_SEQUENCE_ERROR -1
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> #  -1
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> # BZ_SEQUENCE_ERROR 1
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> #  1
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> # BZ_SEQUENCE_ERROR -
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> #  -
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> # BZ_SEQUENCE_ERROR 
14c14
< #define BZ_SEQUENCE_ERROR -1
---
> #  
(88.8 %, 22866 bytes)
14,15c14,15
< #  1
< #define BZ_PARAM_ERROR -2
---
> #  
>  BZ_PARAM_ERROR -2
14,15c14,15
< #  1
< #define BZ_PARAM_ERROR -2
---
> #  
> #define  -2
14,15c14,15
< #  1
< #define BZ_PARAM_ERROR -2
---
> #  
> define  -2
14,15c14,15
< #  1
< #define BZ_PARAM_ERROR -2
---
> #  
> #  -2
14,15c14,15
< #  1
< #define BZ_PARAM_ERROR -2
---
> #  
>   -2
15c15
< #define BZ_PARAM_ERROR -2
---
> define BZ_PARAM_ERROR -2
15c15
< #define BZ_PARAM_ERROR -2
---
>  BZ_PARAM_ERROR -2
15c15
< #define BZ_PARAM_ERROR -2
---
> define  -2
15c15
< #define BZ_PARAM_ERROR -2
---
>   -2
15c15
< #define BZ_PARAM_ERROR -2
---
> define BZ_PARAM_ERROR 2
15c15
< #define BZ_PARAM_ERROR -2
---
>  BZ_PARAM_ERROR 2
15c15
< #define BZ_PARAM_ERROR -2
---
> define  2
15c15
< #define BZ_PARAM_ERROR -2
---
>   2
15c15
< #define BZ_PARAM_ERROR -2
---
> # BZ_PARAM_ERROR -2
15c15
< #define BZ_PARAM_ERROR -2
---
> #  -2
15c15
< #define BZ_PARAM_ERROR -2
---
> # BZ_PARAM_ERROR 2
15c15
< #define BZ_PARAM_ERROR -2
---
> #  2
15c15
< #define BZ_PARAM_ERROR -2
---
> # BZ_PARAM_ERROR -
15c15
< #define BZ_PARAM_ERROR -2
---
> #  -
15c15
< #define BZ_PARAM_ERROR -2
---
> # BZ_PARAM_ERROR 
15c15
< #define BZ_PARAM_ERROR -2
---
> #  
15c15
< #define BZ_PARAM_ERROR -2
---
> #define  -2
15c15
< #define BZ_PARAM_ERROR -2
---
> #define  2
15c15
< #define BZ_PARAM_ERROR -2
---
> #define  -
15c15
< #define BZ_PARAM_ERROR -2
---
> #define  
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define  -2
> define BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define  2
> define BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define  -
> define BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define  
> define BZ_MEM_ERROR -3
15c15
< #define BZ_PARAM_ERROR -2
---
> #define BZ_PARAM_ERROR 2
15c15
< #define BZ_PARAM_ERROR -2
---
> #define BZ_PARAM_ERROR 
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 2
> define BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> define BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 2
> # BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> # BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 2
>  BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR -2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
>  BZ_MEM_ERROR -3
(88.8 %, 22865 bytes)
15c15
< #define BZ_PARAM_ERROR 2
---
> #define BZ_PARAM_ERROR 
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> define BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> # BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
>  BZ_MEM_ERROR -3
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> #define  -3
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> define  -3
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
> #  -3
15,16c15,16
< #define BZ_PARAM_ERROR 2
< #define BZ_MEM_ERROR -3
---
> #define BZ_PARAM_ERROR 
>   -3
16c16
< #define BZ_MEM_ERROR -3
---
> define BZ_MEM_ERROR -3
16c16
< #define BZ_MEM_ERROR -3
---
>  BZ_MEM_ERROR -3
16c16
< #define BZ_MEM_ERROR -3
---
> define  -3
16c16
< #define BZ_MEM_ERROR -3
---
>   -3
16c16
< #define BZ_MEM_ERROR -3
---
> define BZ_MEM_ERROR 3
16c16
< #define BZ_MEM_ERROR -3
---
>  BZ_MEM_ERROR 3
16c16
< #define BZ_MEM_ERROR -3
---
> define  3
16c16
< #define BZ_MEM_ERROR -3
---
>   3
16c16
< #define BZ_MEM_ERROR -3
---
> # BZ_MEM_ERROR -3
16c16
< #define BZ_MEM_ERROR -3
---
> #  -3
16c16
< #define BZ_MEM_ERROR -3
---
> # BZ_MEM_ERROR 3
16c16
< #define BZ_MEM_ERROR -3
---
> #  3
16c16
< #define BZ_MEM_ERROR -3
---
> # BZ_MEM_ERROR -
16c16
< #define BZ_MEM_ERROR -3
---
> #  -
16c16
< #define BZ_MEM_ERROR -3
---
> # BZ_MEM_ERROR 
16c16
< #define BZ_MEM_ERROR -3
---
> #  
16c16
< #define BZ_MEM_ERROR -3
---
> #define  -3
16c16
< #define BZ_MEM_ERROR -3
---
> #define  3
16c16
< #define BZ_MEM_ERROR -3
---
> #define  -
16c16
< #define BZ_MEM_ERROR -3
---
> #define  
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define  -3
> define BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define  3
> define BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define  -
> define BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define  
> define BZ_DATA_ERROR -4
16c16
< #define BZ_MEM_ERROR -3
---
> #define BZ_MEM_ERROR 3
16c16
< #define BZ_MEM_ERROR -3
---
> #define BZ_MEM_ERROR 
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 3
> define BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> define BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 3
> # BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> # BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 3
>  BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR -3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
>  BZ_DATA_ERROR -4
16c16
< #define BZ_MEM_ERROR -3
---
> #define BZ_MEM_ERROR -
(88.8 %, 22864 bytes)
16c16
< #define BZ_MEM_ERROR 3
---
> #define BZ_MEM_ERROR 
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> define BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> # BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
>  BZ_DATA_ERROR -4
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> #define  -4
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> define  -4
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
> #  -4
16,17c16,17
< #define BZ_MEM_ERROR 3
< #define BZ_DATA_ERROR -4
---
> #define BZ_MEM_ERROR 
>   -4
17c17
< #define BZ_DATA_ERROR -4
---
> define BZ_DATA_ERROR -4
17c17
< #define BZ_DATA_ERROR -4
---
>  BZ_DATA_ERROR -4
17c17
< #define BZ_DATA_ERROR -4
---
> define  -4
17c17
< #define BZ_DATA_ERROR -4
---
>   -4
17c17
< #define BZ_DATA_ERROR -4
---
> define BZ_DATA_ERROR 4
17c17
< #define BZ_DATA_ERROR -4
---
>  BZ_DATA_ERROR 4
17c17
< #define BZ_DATA_ERROR -4
---
> define  4
17c17
< #define BZ_DATA_ERROR -4
---
>   4
17c17
< #define BZ_DATA_ERROR -4
---
> # BZ_DATA_ERROR -4
17c17
< #define BZ_DATA_ERROR -4
---
> #  -4
17c17
< #define BZ_DATA_ERROR -4
---
> # BZ_DATA_ERROR 4
17c17
< #define BZ_DATA_ERROR -4
---
> #  4
17c17
< #define BZ_DATA_ERROR -4
---
> # BZ_DATA_ERROR -
17c17
< #define BZ_DATA_ERROR -4
---
> #  -
17c17
< #define BZ_DATA_ERROR -4
---
> # BZ_DATA_ERROR 
17c17
< #define BZ_DATA_ERROR -4
---
> #  
(88.9 %, 22844 bytes)
17,18c17,18
< #  4
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  
>  BZ_DATA_ERROR_MAGIC -5
17,18c17,18
< #  4
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  
> #define  -5
17,18c17,18
< #  4
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  
> define  -5
17,18c17,18
< #  4
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  
> #  -5
17,18c17,18
< #  4
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  
>   -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> define BZ_DATA_ERROR_MAGIC -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
>  BZ_DATA_ERROR_MAGIC -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> define  -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
>   -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> define BZ_DATA_ERROR_MAGIC 5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
>  BZ_DATA_ERROR_MAGIC 5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> define  5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
>   5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> # BZ_DATA_ERROR_MAGIC -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  -5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> # BZ_DATA_ERROR_MAGIC 5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  5
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> # BZ_DATA_ERROR_MAGIC -
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  -
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> # BZ_DATA_ERROR_MAGIC 
18c18
< #define BZ_DATA_ERROR_MAGIC -5
---
> #  
(88.9 %, 22818 bytes)
18,19c18,19
< #  5
< #define BZ_IO_ERROR -6
---
> #  
>  BZ_IO_ERROR -6
18,19c18,19
< #  5
< #define BZ_IO_ERROR -6
---
> #  
> #define  -6
18,19c18,19
< #  5
< #define BZ_IO_ERROR -6
---
> #  
> define  -6
18,19c18,19
< #  5
< #define BZ_IO_ERROR -6
---
> #  
> #  -6
18,19c18,19
< #  5
< #define BZ_IO_ERROR -6
---
> #  
>   -6
19c19
< #define BZ_IO_ERROR -6
---
> define BZ_IO_ERROR -6
19c19
< #define BZ_IO_ERROR -6
---
>  BZ_IO_ERROR -6
19c19
< #define BZ_IO_ERROR -6
---
> define  -6
19c19
< #define BZ_IO_ERROR -6
---
>   -6
19c19
< #define BZ_IO_ERROR -6
---
> define BZ_IO_ERROR 6
19c19
< #define BZ_IO_ERROR -6
---
>  BZ_IO_ERROR 6
19c19
< #define BZ_IO_ERROR -6
---
> define  6
19c19
< #define BZ_IO_ERROR -6
---
>   6
19c19
< #define BZ_IO_ERROR -6
---
> # BZ_IO_ERROR -6
19c19
< #define BZ_IO_ERROR -6
---
> #  -6
19c19
< #define BZ_IO_ERROR -6
---
> # BZ_IO_ERROR 6
19c19
< #define BZ_IO_ERROR -6
---
> #  6
19c19
< #define BZ_IO_ERROR -6
---
> # BZ_IO_ERROR -
19c19
< #define BZ_IO_ERROR -6
---
> #  -
19c19
< #define BZ_IO_ERROR -6
---
> # BZ_IO_ERROR 
19c19
< #define BZ_IO_ERROR -6
---
> #  
(88.9 %, 22800 bytes)
19,20c19,20
< #  6
< #define BZ_UNEXPECTED_EOF -7
---
> #  
>  BZ_UNEXPECTED_EOF -7
19,20c19,20
< #  6
< #define BZ_UNEXPECTED_EOF -7
---
> #  
> #define  -7
19,20c19,20
< #  6
< #define BZ_UNEXPECTED_EOF -7
---
> #  
> define  -7
19,20c19,20
< #  6
< #define BZ_UNEXPECTED_EOF -7
---
> #  
> #  -7
19,20c19,20
< #  6
< #define BZ_UNEXPECTED_EOF -7
---
> #  
>   -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> define BZ_UNEXPECTED_EOF -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
>  BZ_UNEXPECTED_EOF -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> define  -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
>   -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> define BZ_UNEXPECTED_EOF 7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
>  BZ_UNEXPECTED_EOF 7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> define  7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
>   7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> # BZ_UNEXPECTED_EOF -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #  -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> # BZ_UNEXPECTED_EOF 7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #  7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> # BZ_UNEXPECTED_EOF -
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #  -
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> # BZ_UNEXPECTED_EOF 
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #  
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define  -7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define  7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define  -
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define  
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define  -7
> define BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define  7
> define BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define  -
> define BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define  
> define BZ_OUTBUFF_FULL -8
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define BZ_UNEXPECTED_EOF 7
20c20
< #define BZ_UNEXPECTED_EOF -7
---
> #define BZ_UNEXPECTED_EOF 
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 7
> define BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> define BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 7
> # BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> # BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF -7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 7
>  BZ_OUTBUFF_FULL -8
(88.9 %, 22799 bytes)
20c20
< #define BZ_UNEXPECTED_EOF 7
---
> #define BZ_UNEXPECTED_EOF 
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> define BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> # BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
>  BZ_OUTBUFF_FULL -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> #define  -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> define  -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
> #  -8
20,21c20,21
< #define BZ_UNEXPECTED_EOF 7
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_UNEXPECTED_EOF 
>   -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> define BZ_OUTBUFF_FULL -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
>  BZ_OUTBUFF_FULL -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> define  -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
>   -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> define BZ_OUTBUFF_FULL 8
21c21
< #define BZ_OUTBUFF_FULL -8
---
>  BZ_OUTBUFF_FULL 8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> define  8
21c21
< #define BZ_OUTBUFF_FULL -8
---
>   8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> # BZ_OUTBUFF_FULL -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #  -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> # BZ_OUTBUFF_FULL 8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #  8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> # BZ_OUTBUFF_FULL -
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #  -
21c21
< #define BZ_OUTBUFF_FULL -8
---
> # BZ_OUTBUFF_FULL 
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #  
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define  -8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define  8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define  -
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define  
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define  -8
> define BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define  8
> define BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define  -
> define BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define  
> define BZ_CONFIG_ERROR -9
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_OUTBUFF_FULL 8
21c21
< #define BZ_OUTBUFF_FULL -8
---
> #define BZ_OUTBUFF_FULL 
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 8
> define BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> define BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 8
> # BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL -8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> # BZ_CONFIG_ERROR -9
(88.9 %, 22798 bytes)
21c21
< #define BZ_OUTBUFF_FULL 8
---
> #define BZ_OUTBUFF_FULL 
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> define BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> # BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
>  BZ_CONFIG_ERROR -9
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> #define  -9
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> define  -9
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
> #  -9
21,22c21,22
< #define BZ_OUTBUFF_FULL 8
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_OUTBUFF_FULL 
>   -9
22c22
< #define BZ_CONFIG_ERROR -9
---
> define BZ_CONFIG_ERROR -9
22c22
< #define BZ_CONFIG_ERROR -9
---
>  BZ_CONFIG_ERROR -9
22c22
< #define BZ_CONFIG_ERROR -9
---
> define  -9
22c22
< #define BZ_CONFIG_ERROR -9
---
>   -9
22c22
< #define BZ_CONFIG_ERROR -9
---
> define BZ_CONFIG_ERROR 9
22c22
< #define BZ_CONFIG_ERROR -9
---
>  BZ_CONFIG_ERROR 9
22c22
< #define BZ_CONFIG_ERROR -9
---
> define  9
22c22
< #define BZ_CONFIG_ERROR -9
---
>   9
22c22
< #define BZ_CONFIG_ERROR -9
---
> # BZ_CONFIG_ERROR -9
22c22
< #define BZ_CONFIG_ERROR -9
---
> #  -9
22c22
< #define BZ_CONFIG_ERROR -9
---
> # BZ_CONFIG_ERROR 9
22c22
< #define BZ_CONFIG_ERROR -9
---
> #  9
22c22
< #define BZ_CONFIG_ERROR -9
---
> # BZ_CONFIG_ERROR -
22c22
< #define BZ_CONFIG_ERROR -9
---
> #  -
22c22
< #define BZ_CONFIG_ERROR -9
---
> # BZ_CONFIG_ERROR 
22c22
< #define BZ_CONFIG_ERROR -9
---
> #  
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  -9
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  9
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  -
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  -9
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  9
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  -
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define  
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 9
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 9
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 9
24c24
< typedef struct {
---
> typedef  {
22c22
< #define BZ_CONFIG_ERROR -9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
> typedef  {
(88.9 %, 22797 bytes)
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
>  struct {
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
> typedef  {
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
>   {
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
> typedef struct 
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
>  struct 
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
> typedef  
22c22
< #define BZ_CONFIG_ERROR 9
---
> #define BZ_CONFIG_ERROR 
24c24
< typedef struct {
---
>   
24c24
< typedef struct {
---
>  struct {
24c24
< typedef struct {
---
>   {
24c24
< typedef struct {
---
>  struct 
24c24
< typedef struct {
---
>   
24,25c24,25
< typedef struct {
<   char *next_in;
---
>  struct {
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
>   {
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
>  struct 
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
>   
>    *next_in;
24c24
< typedef struct {
---
> typedef  {
24c24
< typedef struct {
---
> typedef  
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  {
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  {
>   char next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  
>   char next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  {
>    next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef  
>    next_in;
24c24
< typedef struct {
---
> typedef struct 
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    *next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>   char next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    next_in;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>   char *;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    *;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>   char ;
24,25c24,25
< typedef struct {
<   char *next_in;
---
> typedef struct 
>    ;
25c25
<   char *next_in;
---
>    *next_in;
25c25
<   char *next_in;
---
>    next_in;
25c25
<   char *next_in;
---
>    *;
25c25
<   char *next_in;
---
>    ;
25c25
<   char *next_in;
---
>    *next_in
25c25
<   char *next_in;
---
>    next_in
25c25
<   char *next_in;
---
>    *
25c25
<   char *next_in;
---
>    
(88.9 %, 22785 bytes)
25,26c25,26
<    ;
<   unsigned int avail_in;
---
>    
>     avail_in;
25,26c25,26
<    ;
<   unsigned int avail_in;
---
>    
>   unsigned int ;
25,26c25,26
<    ;
<   unsigned int avail_in;
---
>    
>    int ;
25,26c25,26
<    ;
<   unsigned int avail_in;
---
>    
>   unsigned  ;
25,26c25,26
<    ;
<   unsigned int avail_in;
---
>    
>     ;
26c26
<   unsigned int avail_in;
---
>    int avail_in;
26c26
<   unsigned int avail_in;
---
>     avail_in;
26c26
<   unsigned int avail_in;
---
>    int ;
26c26
<   unsigned int avail_in;
---
>     ;
26c26
<   unsigned int avail_in;
---
>    int avail_in
26c26
<   unsigned int avail_in;
---
>     avail_in
26c26
<   unsigned int avail_in;
---
>    int 
26c26
<   unsigned int avail_in;
---
>     
26c26
<   unsigned int avail_in;
---
>   unsigned  avail_in;
(88.9 %, 22777 bytes)
26c26
<    int avail_in;
---
>     avail_in;
26c26
<    int avail_in;
---
>     ;
26c26
<    int avail_in;
---
>     avail_in
26c26
<    int avail_in;
---
>     
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     avail_in;
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     ;
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     avail_in
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>     
>    int total_in_lo32;
26c26
<    int avail_in;
---
>    int ;
26c26
<    int avail_in;
---
>    int 
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int ;
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int 
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int ;
>   unsigned  total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int 
>   unsigned  total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int ;
>     total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int 
>     total_in_lo32;
26c26
<    int avail_in;
---
>    int avail_in
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>    int total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>   unsigned  total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>     total_in_lo32;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>   unsigned int ;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>    int ;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>   unsigned  ;
26,27c26,27
<    int avail_in;
<   unsigned int total_in_lo32;
---
>    int avail_in
>     ;
27c27
<   unsigned int total_in_lo32;
---
>    int total_in_lo32;
27c27
<   unsigned int total_in_lo32;
---
>     total_in_lo32;
27c27
<   unsigned int total_in_lo32;
---
>    int ;
27c27
<   unsigned int total_in_lo32;
---
>     ;
27c27
<   unsigned int total_in_lo32;
---
>    int total_in_lo32
27c27
<   unsigned int total_in_lo32;
---
>     total_in_lo32
27c27
<   unsigned int total_in_lo32;
---
>    int 
27c27
<   unsigned int total_in_lo32;
---
>     
27c27
<   unsigned int total_in_lo32;
---
>   unsigned  total_in_lo32;
(88.9 %, 22769 bytes)
27c27
<    int total_in_lo32;
---
>     total_in_lo32;
27c27
<    int total_in_lo32;
---
>     ;
27c27
<    int total_in_lo32;
---
>     total_in_lo32
27c27
<    int total_in_lo32;
---
>     
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     total_in_lo32;
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     ;
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     total_in_lo32
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>     
>    int total_in_hi32;
27c27
<    int total_in_lo32;
---
>    int ;
27c27
<    int total_in_lo32;
---
>    int 
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int ;
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int 
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int ;
>   unsigned  total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int 
>   unsigned  total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int ;
>     total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int 
>     total_in_hi32;
27c27
<    int total_in_lo32;
---
>    int total_in_lo32
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>    int total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>   unsigned  total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>     total_in_hi32;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>   unsigned int ;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>    int ;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>   unsigned  ;
27,28c27,28
<    int total_in_lo32;
<   unsigned int total_in_hi32;
---
>    int total_in_lo32
>     ;
28c28
<   unsigned int total_in_hi32;
---
>    int total_in_hi32;
28c28
<   unsigned int total_in_hi32;
---
>     total_in_hi32;
28c28
<   unsigned int total_in_hi32;
---
>    int ;
28c28
<   unsigned int total_in_hi32;
---
>     ;
28c28
<   unsigned int total_in_hi32;
---
>    int total_in_hi32
28c28
<   unsigned int total_in_hi32;
---
>     total_in_hi32
28c28
<   unsigned int total_in_hi32;
---
>    int 
28c28
<   unsigned int total_in_hi32;
---
>     
28c28
<   unsigned int total_in_hi32;
---
>   unsigned  total_in_hi32;
(88.9 %, 22761 bytes)
28c28
<    int total_in_hi32;
---
>     total_in_hi32;
28c28
<    int total_in_hi32;
---
>     ;
28c28
<    int total_in_hi32;
---
>     total_in_hi32
28c28
<    int total_in_hi32;
---
>     
28c28
<    int total_in_hi32;
---
>     total_in_hi32;
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>     ;
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>     total_in_hi32
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>     
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int ;
28c28
<    int total_in_hi32;
---
>    int 
28c28
<    int total_in_hi32;
---
>    int ;
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int 
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int ;
30c30
<   char *next_out;
---
>   char next_out;
28c28
<    int total_in_hi32;
---
>    int 
30c30
<   char *next_out;
---
>   char next_out;
28c28
<    int total_in_hi32;
---
>    int ;
30c30
<   char *next_out;
---
>    next_out;
28c28
<    int total_in_hi32;
---
>    int 
30c30
<   char *next_out;
---
>    next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    *next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>   char next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    next_out;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>   char *;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    *;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>   char ;
28c28
<    int total_in_hi32;
---
>    int total_in_hi32
30c30
<   char *next_out;
---
>    ;
30c30
<   char *next_out;
---
>    *next_out;
30c30
<   char *next_out;
---
>    next_out;
30c30
<   char *next_out;
---
>    *;
30c30
<   char *next_out;
---
>    ;
(88.9 %, 22747 bytes)
30,31c30,31
<    ;
<   unsigned int avail_out;
---
>    
>     ;
31c31
<   unsigned int avail_out;
---
>    int avail_out;
(88.9 %, 22726 bytes)
30a31
>     
32d32
<   unsigned int total_out_lo32;
32c32
<   unsigned int total_out_lo32;
---
>    int total_out_lo32;
32c32
<   unsigned int total_out_lo32;
---
>     total_out_lo32;
32c32
<   unsigned int total_out_lo32;
---
>    int ;
32c32
<   unsigned int total_out_lo32;
---
>     ;
32c32
<   unsigned int total_out_lo32;
---
>    int total_out_lo32
32c32
<   unsigned int total_out_lo32;
---
>     total_out_lo32
32c32
<   unsigned int total_out_lo32;
---
>    int 
32c32
<   unsigned int total_out_lo32;
---
>     
32c32
<   unsigned int total_out_lo32;
---
>   unsigned  total_out_lo32;
(88.9 %, 22718 bytes)
32c32
<    int total_out_lo32;
---
>     total_out_lo32;
32c32
<    int total_out_lo32;
---
>     ;
32c32
<    int total_out_lo32;
---
>     total_out_lo32
32c32
<    int total_out_lo32;
---
>     
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     total_out_lo32;
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     ;
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     total_out_lo32
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>     
>    int total_out_hi32;
32c32
<    int total_out_lo32;
---
>    int ;
32c32
<    int total_out_lo32;
---
>    int 
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int ;
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int 
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int ;
>   unsigned  total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int 
>   unsigned  total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int ;
>     total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int 
>     total_out_hi32;
32c32
<    int total_out_lo32;
---
>    int total_out_lo32
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>    int total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>   unsigned  total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>     total_out_hi32;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>   unsigned int ;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>    int ;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>   unsigned  ;
32,33c32,33
<    int total_out_lo32;
<   unsigned int total_out_hi32;
---
>    int total_out_lo32
>     ;
33c33
<   unsigned int total_out_hi32;
---
>    int total_out_hi32;
33c33
<   unsigned int total_out_hi32;
---
>     total_out_hi32;
33c33
<   unsigned int total_out_hi32;
---
>    int ;
33c33
<   unsigned int total_out_hi32;
---
>     ;
33c33
<   unsigned int total_out_hi32;
---
>    int total_out_hi32
33c33
<   unsigned int total_out_hi32;
---
>     total_out_hi32
33c33
<   unsigned int total_out_hi32;
---
>    int 
33c33
<   unsigned int total_out_hi32;
---
>     
33c33
<   unsigned int total_out_hi32;
---
>   unsigned  total_out_hi32;
(88.9 %, 22710 bytes)
33c33
<    int total_out_hi32;
---
>     total_out_hi32;
33c33
<    int total_out_hi32;
---
>     ;
33c33
<    int total_out_hi32;
---
>     total_out_hi32
33c33
<    int total_out_hi32;
---
>     
33c33
<    int total_out_hi32;
---
>     total_out_hi32;
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>     ;
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>     total_out_hi32
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>     
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int ;
33c33
<    int total_out_hi32;
---
>    int 
33c33
<    int total_out_hi32;
---
>    int ;
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int 
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int ;
35c35
<   void *state;
---
>   void state;
33c33
<    int total_out_hi32;
---
>    int 
35c35
<   void *state;
---
>   void state;
33c33
<    int total_out_hi32;
---
>    int ;
35c35
<   void *state;
---
>    state;
33c33
<    int total_out_hi32;
---
>    int 
35c35
<   void *state;
---
>    state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    *state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>   void state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    state;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>   void *;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    *;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>   void ;
33c33
<    int total_out_hi32;
---
>    int total_out_hi32
35c35
<   void *state;
---
>    ;
35c35
<   void *state;
---
>    *state;
35c35
<   void *state;
---
>    state;
35c35
<   void *state;
---
>    *;
35c35
<   void *state;
---
>    ;
35c35
<   void *state;
---
>    *state
35c35
<   void *state;
---
>    state
35c35
<   void *state;
---
>    *
35c35
<   void *state;
---
>    
35c35
<   void *state;
---
>   void state;
35c35
<   void *state;
---
>   void ;
35c35
<   void *state;
---
>   void state
35c35
<   void *state;
---
>   void 
35c35
<   void *state;
---
>   void state;
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void ;
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void state
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void 
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void *;
35c35
<   void *state;
---
>   void *
35c35
<   void *state;
---
>   void *;
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void *
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void *;
37c37
<   void **bzalloc;
---
>   void *bzalloc;
35c35
<   void *state;
---
>   void *
37c37
<   void **bzalloc;
---
>   void *bzalloc;
35c35
<   void *state;
---
>   void *;
37c37
<   void **bzalloc;
---
>    *bzalloc;
35c35
<   void *state;
---
>   void *
37c37
<   void **bzalloc;
---
>    *bzalloc;
35c35
<   void *state;
---
>   void *state
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>    **bzalloc;
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>   void *bzalloc;
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>    *bzalloc;
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>   void *bzalloc;
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>    *bzalloc;
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>   void bzalloc;
35c35
<   void *state;
---
>   void *state
37c37
<   void **bzalloc;
---
>    bzalloc;
37c37
<   void **bzalloc;
---
>    **bzalloc;
37c37
<   void **bzalloc;
---
>    *bzalloc;
37c37
<   void **bzalloc;
---
>    *bzalloc;
37c37
<   void **bzalloc;
---
>    bzalloc;
37c37
<   void **bzalloc;
---
>    **;
37c37
<   void **bzalloc;
---
>    *;
37c37
<   void **bzalloc;
---
>    *;
37c37
<   void **bzalloc;
---
>    ;
37c37
<   void **bzalloc;
---
>   void *bzalloc;
37c37
<   void **bzalloc;
---
>   void bzalloc;
37c37
<   void **bzalloc;
---
>   void *;
37c37
<   void **bzalloc;
---
>   void ;
37c37
<   void **bzalloc;
---
>   void *bzalloc
37c37
<   void **bzalloc;
---
>   void bzalloc
37c37
<   void **bzalloc;
---
>   void *
37c37
<   void **bzalloc;
---
>   void 
37c37
<   void **bzalloc;
---
>   void *bzalloc;
(88.9 %, 22709 bytes)
37c37
<   void *bzalloc;
---
>   void bzalloc;
37c37
<   void *bzalloc;
---
>   void ;
37c37
<   void *bzalloc;
---
>   void bzalloc
37c37
<   void *bzalloc;
---
>   void 
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void bzalloc;
>    *bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void ;
>    *bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void bzalloc
>    *bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void 
>    *bzfree;
37c37
<   void *bzalloc;
---
>   void *;
37c37
<   void *bzalloc;
---
>   void *
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *;
>    *bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *
>    *bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *;
>   void bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *
>   void bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *;
>    bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *
>    bzfree;
37c37
<   void *bzalloc;
---
>   void *bzalloc
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>    *bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>   void bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>    bzfree;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>   void *;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>    *;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>   void ;
37,38c37,38
<   void *bzalloc;
<   void *bzfree;
---
>   void *bzalloc
>    ;
38c38
<   void *bzfree;
---
>    *bzfree;
38c38
<   void *bzfree;
---
>    bzfree;
38c38
<   void *bzfree;
---
>    *;
38c38
<   void *bzfree;
---
>    ;
38c38
<   void *bzfree;
---
>    *bzfree
38c38
<   void *bzfree;
---
>    bzfree
38c38
<   void *bzfree;
---
>    *
38c38
<   void *bzfree;
---
>    
38c38
<   void *bzfree;
---
>   void bzfree;
38c38
<   void *bzfree;
---
>   void ;
38c38
<   void *bzfree;
---
>   void bzfree
38c38
<   void *bzfree;
---
>   void 
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void bzfree;
>    *opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void ;
>    *opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void bzfree
>    *opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void 
>    *opaque;
38c38
<   void *bzfree;
---
>   void *;
38c38
<   void *bzfree;
---
>   void *
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *;
>    *opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *
>    *opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *;
>   void opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *
>   void opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *;
>    opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *
>    opaque;
38c38
<   void *bzfree;
---
>   void *bzfree
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>    *opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>   void opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>    opaque;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>   void *;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>    *;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>   void ;
38,39c38,39
<   void *bzfree;
<   void *opaque;
---
>   void *bzfree
>    ;
39c39
<   void *opaque;
---
>    *opaque;
39c39
<   void *opaque;
---
>    opaque;
39c39
<   void *opaque;
---
>    *;
39c39
<   void *opaque;
---
>    ;
39c39
<   void *opaque;
---
>    *opaque
39c39
<   void *opaque;
---
>    opaque
39c39
<   void *opaque;
---
>    *
39c39
<   void *opaque;
---
>    
39c39
<   void *opaque;
---
>   void opaque;
39c39
<   void *opaque;
---
>   void ;
39c39
<   void *opaque;
---
>   void opaque
39c39
<   void *opaque;
---
>   void 
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void opaque;
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void ;
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void opaque
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void 
>  bz_stream;
39c39
<   void *opaque;
---
>   void *;
39c39
<   void *opaque;
---
>   void *
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *;
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *;
> } ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *
> } ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *;
>  ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *
>  ;
39c39
<   void *opaque;
---
>   void *opaque
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  bz_stream;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
> } ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  ;
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
> } bz_stream
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  bz_stream
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
> } 
39,40c39,40
<   void *opaque;
< } bz_stream;
---
>   void *opaque
>  
40c40
< } bz_stream;
---
>  bz_stream;
40c40
< } bz_stream;
---
>  ;
40c40
< } bz_stream;
---
>  bz_stream
40c40
< } bz_stream;
---
>  
40c40
< } bz_stream;
---
>  bz_stream;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  ;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  bz_stream
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  
42c42
< #include <stdio.h>
---
> include <stdio.h>
(88.9 %, 22708 bytes)
40c40
< } bz_stream;
---
>  bz_stream;
40c40
< } bz_stream;
---
>  ;
40c40
< } bz_stream;
---
>  bz_stream
40c40
< } bz_stream;
---
>  
40c40
< } bz_stream;
---
>  bz_stream;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  ;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  bz_stream
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
>  
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } ;
40c40
< } bz_stream;
---
> } 
40c40
< } bz_stream;
---
> } ;
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } 
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } ;
42c42
< #include <stdio.h>
---
> # <stdio.h>
40c40
< } bz_stream;
---
> } 
42c42
< #include <stdio.h>
---
> # <stdio.h>
40c40
< } bz_stream;
---
> } ;
42c42
< #include <stdio.h>
---
>  <stdio.h>
40c40
< } bz_stream;
---
> } 
42c42
< #include <stdio.h>
---
>  <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> include <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> # <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
>  <stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> #include stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> include stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
> # stdio.h>
40c40
< } bz_stream;
---
> } bz_stream
42c42
< #include <stdio.h>
---
>  stdio.h>
42c42
< #include <stdio.h>
---
> include <stdio.h>
42c42
< #include <stdio.h>
---
>  <stdio.h>
42c42
< #include <stdio.h>
---
> include stdio.h>
42c42
< #include <stdio.h>
---
>  stdio.h>
42c42
< #include <stdio.h>
---
> include <.h>
42c42
< #include <stdio.h>
---
>  <.h>
42c42
< #include <stdio.h>
---
> include .h>
42c42
< #include <stdio.h>
---
>  .h>
42c42
< #include <stdio.h>
---
> # <stdio.h>
42c42
< #include <stdio.h>
---
> # stdio.h>
42c42
< #include <stdio.h>
---
> # <.h>
42c42
< #include <stdio.h>
---
> # .h>
42c42
< #include <stdio.h>
---
> # <stdioh>
42c42
< #include <stdio.h>
---
> # stdioh>
42c42
< #include <stdio.h>
---
> # <h>
42c42
< #include <stdio.h>
---
> # h>
42c42
< #include <stdio.h>
---
> #include stdio.h>
42c42
< #include <stdio.h>
---
> #include .h>
42c42
< #include <stdio.h>
---
> #include stdioh>
42c42
< #include <stdio.h>
---
> #include h>
42c42
< #include <stdio.h>
---
> #include stdio.>
42c42
< #include <stdio.h>
---
> #include .>
42c42
< #include <stdio.h>
---
> #include stdio>
42c42
< #include <stdio.h>
---
> #include >
42c42
< #include <stdio.h>
---
> #include <.h>
42c42
< #include <stdio.h>
---
> #include <h>
42c42
< #include <stdio.h>
---
> #include <.>
42c42
< #include <stdio.h>
---
> #include <>
42c42
< #include <stdio.h>
---
> #include <.h
42c42
< #include <stdio.h>
---
> #include <h
42c42
< #include <stdio.h>
---
> #include <.
42c42
< #include <stdio.h>
---
> #include <
42c42
< #include <stdio.h>
---
> #include <stdioh>
42c42
< #include <stdio.h>
---
> #include <stdio>
42c42
< #include <stdio.h>
---
> #include <stdioh
42c42
< #include <stdio.h>
---
> #include <stdio
42c42
< #include <stdio.h>
---
> #include <stdioh>
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio>
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdioh
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.>
42c42
< #include <stdio.h>
---
> #include <stdio.
42c42
< #include <stdio.h>
---
> #include <stdio.>
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.>
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.>
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> #define (func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> define (func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
> # (func) func
42c42
< #include <stdio.h>
---
> #include <stdio.h
44c44
< #define BZ_API(func) func
---
>  (func) func
44c44
< #define BZ_API(func) func
---
> define BZ_API(func) func
44c44
< #define BZ_API(func) func
---
>  BZ_API(func) func
44c44
< #define BZ_API(func) func
---
> define (func) func
44c44
< #define BZ_API(func) func
---
>  (func) func
44c44
< #define BZ_API(func) func
---
> define BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
>  BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
> define func) func
44c44
< #define BZ_API(func) func
---
>  func) func
44c44
< #define BZ_API(func) func
---
> # BZ_API(func) func
44c44
< #define BZ_API(func) func
---
> # (func) func
44c44
< #define BZ_API(func) func
---
> # BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
> # func) func
44c44
< #define BZ_API(func) func
---
> # BZ_API() func
44c44
< #define BZ_API(func) func
---
> # () func
44c44
< #define BZ_API(func) func
---
> # BZ_API) func
44c44
< #define BZ_API(func) func
---
> # ) func
44c44
< #define BZ_API(func) func
---
> #define (func) func
44c44
< #define BZ_API(func) func
---
> #define func) func
44c44
< #define BZ_API(func) func
---
> #define () func
44c44
< #define BZ_API(func) func
---
> #define ) func
44c44
< #define BZ_API(func) func
---
> #define (func func
44c44
< #define BZ_API(func) func
---
> #define func func
44c44
< #define BZ_API(func) func
---
> #define ( func
44c44
< #define BZ_API(func) func
---
> #define  func
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc) func
44c44
< #define BZ_API(func) func
---
> #define BZ_API) func
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc func
44c44
< #define BZ_API(func) func
---
> #define BZ_API func
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc) 
44c44
< #define BZ_API(func) func
---
> #define BZ_API) 
44c44
< #define BZ_API(func) func
---
> #define BZ_APIfunc 
44c44
< #define BZ_API(func) func
---
> #define BZ_API 
44c44
< #define BZ_API(func) func
---
> #define BZ_API() func
44c44
< #define BZ_API(func) func
---
> #define BZ_API( func
44c44
< #define BZ_API(func) func
---
> #define BZ_API() 
44c44
< #define BZ_API(func) func
---
> #define BZ_API( 
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API() func
> define BZ_EXTERN extern
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API( func
> define BZ_EXTERN extern
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API() 
> define BZ_EXTERN extern
44,45c44,45
< #define BZ_API(func) func
< #define BZ_EXTERN extern
---
> #define BZ_API( 
> define BZ_EXTERN extern
44c44
< #define BZ_API(func) func
---
> #define BZ_API(func func
44c44
< #define BZ_API(func) func
---
> #define BZ_API(func 
(88.9 %, 22698 bytes)
45c45
< #define BZ_EXTERN extern
---
>   
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN extern
45c45
< #define BZ_EXTERN extern
---
> #  extern
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN 
45c45
< #define BZ_EXTERN extern
---
> #  
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN extern
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #  extern
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> # BZ_EXTERN 
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #  
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define  extern
45c45
< #define BZ_EXTERN extern
---
> #define  
45c45
< #define BZ_EXTERN extern
---
> #define  extern
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define  
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define  extern
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define  
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
> BZ_EXTERN  BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define  extern
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>   BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define  
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>   BZ_APIBZ2_bzCompressInit(
45c45
< #define BZ_EXTERN extern
---
> #define BZ_EXTERN 
45c45
< #define BZ_EXTERN extern
---
> #define BZ_EXTERN 
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
(88.9 %, 22692 bytes)
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int BZ_APIBZ2_bzCompressInit(
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>   BZ_APIBZ2_bzCompressInit(
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>  int (
47c47
< BZ_EXTERN int BZ_APIBZ2_bzCompressInit(
---
>   (
(88.9 %, 22683 bytes)
47c47
<  int BZ_APIBZ2_bzCompressInit(
---
>   BZ_APIBZ2_bzCompressInit(
47c47
<  int BZ_APIBZ2_bzCompressInit(
---
>   (
47c47
<  int BZ_APIBZ2_bzCompressInit(
---
>   BZ_APIBZ2_bzCompressInit
47c47
<  int BZ_APIBZ2_bzCompressInit(
---
>   
47c47
<  int BZ_APIBZ2_bzCompressInit(
---
>   BZ_APIBZ2_bzCompressInit(
49c49
<     void);
---
>     );
(88.9 %, 22680 bytes)
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   (
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   (
49c49
<     void);
---
>     );
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   
49c49
<     void);
---
>     );
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   (
49c49
<     void);
---
>     void;
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   
49c49
<     void);
---
>     void;
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   (
49c49
<     void);
---
>     ;
47c47
<   BZ_APIBZ2_bzCompressInit(
---
>   
49c49
<     void);
---
>     ;
(88.9 %, 22654 bytes)
49c49
<     void;
---
>     
51c51
< BZ_EXTERN int BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress(
49c49
<     void;
---
>     ;
51c51
< BZ_EXTERN int BZ_APIBZ2_bzCompress(
---
>   BZ_APIBZ2_bzCompress(
(88.9 %, 22646 bytes)
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
>   (
53c53
<     void);
---
>     );
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
>   BZ_APIBZ2_bzCompress
53c53
<     void);
---
>     );
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
>   
53c53
<     void);
---
>     );
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  (
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  (
53c53
<     void);
---
>     );
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  
53c53
<     void);
---
>     );
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  (
53c53
<     void);
---
>     void;
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  
53c53
<     void);
---
>     void;
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  (
53c53
<     void);
---
>     ;
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  
53c53
<     void);
---
>     ;
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress
53c53
<     void);
---
>     );
51c51
< BZ_EXTERN  BZ_APIBZ2_bzCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzCompress
53c53
<     void);
---
>     void;
(89.0 %, 22624 bytes)
53c53
<     void;
---
>     
55c55
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
53c53
<     void;
---
>     ;
55c55
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
---
>   BZ_APIBZ2_bzDecompressInit(
53c53
<     void;
---
>     
55c55
< BZ_EXTERN int BZ_APIBZ2_bzDecompressInit(
---
>   BZ_APIBZ2_bzDecompressInit(
(89.0 %, 22616 bytes)
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
>   (
57c57
<     void);
---
>     );
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
>   BZ_APIBZ2_bzDecompressInit
57c57
<     void);
---
>     );
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
>   
57c57
<     void);
---
>     );
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  (
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  (
57c57
<     void);
---
>     );
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  
57c57
<     void);
---
>     );
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  (
57c57
<     void);
---
>     void;
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  
57c57
<     void);
---
>     void;
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  (
57c57
<     void);
---
>     ;
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  
57c57
<     void);
---
>     ;
55c55
< BZ_EXTERN  BZ_APIBZ2_bzDecompressInit(
---
> BZ_EXTERN  BZ_APIBZ2_bzDecompressInit
(89.0 %, 22588 bytes)
57c57
<     void;
---
>     
59c59
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
57c57
<     void;
---
>     ;
59c59
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
57c57
<     void;
---
>     
59c59
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
57c57
<     void;
---
>     void
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  0
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
> define  0
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
> #  0
57c57
<     void;
---
>     void
59c59
< #define BZ_MAX_UNUSED 0
---
>   0
59c59
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
59c59
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
59c59
< #define BZ_MAX_UNUSED 0
---
> define  0
59c59
< #define BZ_MAX_UNUSED 0
---
>   0
59c59
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 
59c59
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 
59c59
< #define BZ_MAX_UNUSED 0
---
> define  
59c59
< #define BZ_MAX_UNUSED 0
---
>   
59c59
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
59c59
< #define BZ_MAX_UNUSED 0
---
> #  0
59c59
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
59c59
< #define BZ_MAX_UNUSED 0
---
> #  
59c59
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #  0
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #  
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  0
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  0
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  0
61c61
< typedef void BZFILE;
---
> typedef  BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  
61c61
< typedef void BZFILE;
---
> typedef  BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  0
61c61
< typedef void BZFILE;
---
>   BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define  
61c61
< typedef void BZFILE;
---
>   BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
>  void BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
> typedef  BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
>   BZFILE;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
> typedef void ;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
>  void ;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
> typedef  ;
59c59
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
61c61
< typedef void BZFILE;
---
>   ;
61c61
< typedef void BZFILE;
---
>  void BZFILE;
61c61
< typedef void BZFILE;
---
>   BZFILE;
61c61
< typedef void BZFILE;
---
>  void ;
61c61
< typedef void BZFILE;
---
>   ;
61c61
< typedef void BZFILE;
---
>  void BZFILE
61c61
< typedef void BZFILE;
---
>   BZFILE
61c61
< typedef void BZFILE;
---
>  void 
61c61
< typedef void BZFILE;
---
>   
61c61
< typedef void BZFILE;
---
> typedef  BZFILE;
61c61
< typedef void BZFILE;
---
> typedef  ;
61c61
< typedef void BZFILE;
---
> typedef  BZFILE
61c61
< typedef void BZFILE;
---
> typedef  
61c61
< typedef void BZFILE;
---
> typedef  BZFILE;
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
(89.0 %, 22584 bytes)
61c61
< typedef  BZFILE;
---
> typedef  ;
61c61
< typedef  BZFILE;
---
> typedef  
61c61
< typedef  BZFILE;
---
> typedef  ;
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  ;
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  ;
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
> BZ_EXTERN  BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
61c61
< typedef  BZFILE;
---
> typedef  BZFILE
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE *(int *bzerror, FILE *f, int verbosity,
63c63
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *(int *bzerror, FILE *f, int verbosity,
(89.0 %, 22575 bytes)
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *(int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   (int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE (int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE int *bzerror, FILE *f, int verbosity,
63c63
<  BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>  BZFILE BZ_APIBZ2_bzReadOpen( *bzerror, FILE *f, int verbosity,
(89.0 %, 22569 bytes)
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   (int *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   int *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen( *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   ( *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   BZ_APIBZ2_bzReadOpen *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>    *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *(int *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *int *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *( *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   * *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *(int bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *int bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *( bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   * bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpenint bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpenint *, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen *, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpenint , FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen , FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( *bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( *, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( , FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( *bzerror FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( bzerror FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen( * FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(  FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int bzerror, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int , FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int bzerror FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int  FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int bzerror,  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int ,  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int bzerror  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int   *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int * FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int * FILE f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *  f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror FILE f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *bzerror  f, int verbosity,
(89.0 %, 22562 bytes)
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int * FILE *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int * FILE f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *  f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int * FILE *, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *  *, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int * FILE , int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *  , int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  *f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  *, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  , int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  *f int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  f int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,  * int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *,   int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE f, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE , int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE f int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE  int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE f,  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE ,  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE f  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE   verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE * int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
(89.0 %, 22561 bytes)
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE * int verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE * int ,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *  ,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE * int verbosity
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *  verbosity
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE * int 
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *  
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  verbosity,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  ,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  verbosity
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  verbosity,
>                                         small, void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  ,
>                                         small, void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  verbosity
>                                         small, void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *,  
>                                         small, void *unused, int nUnused);
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
>                                         small, void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                         small, void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int verbosity,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
>                                        int , void *unused, int nUnused);
(89.0 %, 22552 bytes)
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                         small, void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                        int , void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                         , void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                        int small void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                         small void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                        int  void *unused, int nUnused);
63,64c63,64
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int small, void *unused, int nUnused);
---
>   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int 
>                                          void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                         small, void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                         , void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                         small void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                          void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                         small,  *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                         ,  *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                         small  *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                           *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int , void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int  void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int ,  *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int   *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int , void unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int  void unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int ,  unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int   unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int small void *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int small  *unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int small void unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int small  unused, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int small void *, int nUnused);
64c64
<                                        int small, void *unused, int nUnused);
---
>                                        int small  *, int nUnused);
(89.0 %, 22547 bytes)
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int  void *unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int   *unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int  void unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int   unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int  void *, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int   *, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int  void , int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int   , int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  *unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  *, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  , int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  *unused int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  unused int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,  * int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int ,   int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void unused, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void , int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void unused int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void  int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void unused,  nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void ,  nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void unused  nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void   nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void *, int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void * int nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void *,  nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void *  nUnused);
64c64
<                                        int , void *unused, int nUnused);
---
>                                        int , void *, int );
(89.0 %, 22541 bytes)
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void * int nUnused);
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *  nUnused);
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void * int );
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *  );
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void * int nUnused;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *  nUnused;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void * int ;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *  ;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  nUnused);
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  );
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  nUnused;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  ;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  nUnused)
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  )
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  nUnused
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *,  
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *, int );
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *, int ;
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *, int )
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *, int 
64c64
<                                        int , void *, int nUnused);
---
>                                        int , void *, int );
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose(
(89.0 %, 22534 bytes)
64c64
<                                        int , void *, int );
---
>                                        int , void *, int ;
64c64
<                                        int , void *, int );
---
>                                        int , void *, int 
64c64
<                                        int , void *, int );
---
>                                        int , void *, int ;
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int 
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int ;
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int 
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int ;
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int 
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose(
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN void (
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void (
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  (
64c64
<                                        int , void *, int );
---
>                                        int , void *, int )
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   (
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose(
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose(
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void (
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   (
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>  void 
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
>   
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose(
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  (
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  
66c66
< BZ_EXTERN void BZ_APIBZ2_bzReadClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadClose(
68c68
<     void);
---
>     );
(89.0 %, 22525 bytes)
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose(
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   (
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose(
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   (
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>   
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void (
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void 
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void (
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void 
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void (
68c68
<     void);
---
>     void;
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void 
68c68
<     void);
---
>     void;
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void (
68c68
<     void);
---
>     ;
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void 
68c68
<     void);
---
>     ;
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     );
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     void;
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     ;
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     void)
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     )
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     void
66c66
<  void BZ_APIBZ2_bzReadClose(
---
>  void BZ_APIBZ2_bzReadClose
68c68
<     void);
---
>     
68c68
<     void);
---
>     );
(89.0 %, 22498 bytes)
68c68
<     ;
---
>     
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>   (
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused(
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>   BZ_APIBZ2_bzReadGetUnused(
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>  void (
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>   (
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>   BZ_APIBZ2_bzReadGetUnused
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>  void 
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
>   
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused(
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
> BZ_EXTERN  (
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
> BZ_EXTERN  BZ_APIBZ2_bzReadGetUnused
70c70
< BZ_EXTERN void BZ_APIBZ2_bzReadGetUnused(
---
> BZ_EXTERN  
(89.0 %, 22489 bytes)
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   BZ_APIBZ2_bzReadGetUnused(
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   (
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   BZ_APIBZ2_bzReadGetUnused
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   BZ_APIBZ2_bzReadGetUnused(
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   (
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>   
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void (
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void 
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void (
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void 
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void (
72c72
<     void);
---
>     void;
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void 
72c72
<     void);
---
>     void;
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void (
72c72
<     void);
---
>     ;
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void 
72c72
<     void);
---
>     ;
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     );
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     void;
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     ;
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     void)
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     )
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     void
70c70
<  void BZ_APIBZ2_bzReadGetUnused(
---
>  void BZ_APIBZ2_bzReadGetUnused
72c72
<     void);
---
>     
72c72
<     void);
---
>     );
(89.0 %, 22458 bytes)
72c72
<     ;
---
>     
74c74
< BZ_EXTERN int BZ_APIBZ2_bzRead(
---
>   (
74c74
< BZ_EXTERN int BZ_APIBZ2_bzRead(
---
>  int BZ_APIBZ2_bzRead(
74c74
< BZ_EXTERN int BZ_APIBZ2_bzRead(
---
>   BZ_APIBZ2_bzRead(
(89.0 %, 22449 bytes)
74c74
<  int BZ_APIBZ2_bzRead(
---
>   BZ_APIBZ2_bzRead(
74c74
<  int BZ_APIBZ2_bzRead(
---
>   (
74c74
<  int BZ_APIBZ2_bzRead(
---
>   BZ_APIBZ2_bzRead
74c74
<  int BZ_APIBZ2_bzRead(
---
>   
74c74
<  int BZ_APIBZ2_bzRead(
---
>   BZ_APIBZ2_bzRead(
76c76
<     void);
---
>     );
(89.0 %, 22446 bytes)
74c74
<   BZ_APIBZ2_bzRead(
---
>   (
74c74
<   BZ_APIBZ2_bzRead(
---
>   
74c74
<   BZ_APIBZ2_bzRead(
---
>   (
76c76
<     void);
---
>     );
74c74
<   BZ_APIBZ2_bzRead(
---
>   
76c76
<     void);
---
>     );
74c74
<   BZ_APIBZ2_bzRead(
---
>   (
76c76
<     void);
---
>     void;
74c74
<   BZ_APIBZ2_bzRead(
---
>   
76c76
<     void);
---
>     void;
74c74
<   BZ_APIBZ2_bzRead(
---
>   (
76c76
<     void);
---
>     ;
74c74
<   BZ_APIBZ2_bzRead(
---
>   
76c76
<     void);
---
>     ;
(89.1 %, 22428 bytes)
76c76
<     void;
---
>     
78c78
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
76c76
<     void;
---
>     ;
78c78
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
76c76
<     void;
---
>     
78c78
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
(89.1 %, 22417 bytes)
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   *int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
>   int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  (int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen( *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  ( *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteOpen *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN   *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *(int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *int *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *( *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  * *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *(int bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *int bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *( bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  * bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpenint bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpenint *, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen *, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpenint , FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen , FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( *bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( *, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( , FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( *bzerror FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( bzerror FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen( * FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(  FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int bzerror, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int , FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int bzerror FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int  FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int bzerror,  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int ,  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int bzerror  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int   *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int * FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int * FILE f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *  f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror  f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE *,
(89.1 %, 22410 bytes)
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int * FILE *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int * FILE f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *  f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int * FILE *,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *  *,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int * FILE ,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *  ,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  *f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  *,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  ,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  *f
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  f
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  *
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *,  
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE f,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE ,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE f
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE 
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE f,
>                                          blockSize100k, int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE ,
>                                          blockSize100k, int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE f
>                                          blockSize100k, int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE 
>                                          blockSize100k, int verbosity,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
>                                          blockSize100k, int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          blockSize100k, int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
>                                         int , int verbosity,
(89.1 %, 22409 bytes)
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          blockSize100k, int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                         int , int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          , int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                         int blockSize100k int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                          blockSize100k int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                         int  int verbosity,
78,79c78,79
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int blockSize100k, int verbosity,
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *
>                                           int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k, int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                          , int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                           int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k,  verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                          ,  verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                          blockSize100k  verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                            verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                         int , int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                         int  int verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                         int ,  verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                         int   verbosity,
79c79
<                                         int blockSize100k, int verbosity,
---
>                                         int , int ,
(89.1 %, 22396 bytes)
79c79
<                                         int , int verbosity,
---
>                                         int  int verbosity,
79c79
<                                         int , int verbosity,
---
>                                         int   verbosity,
79c79
<                                         int , int verbosity,
---
>                                         int  int ,
79c79
<                                         int , int verbosity,
---
>                                         int   ,
79c79
<                                         int , int verbosity,
---
>                                         int  int verbosity
79c79
<                                         int , int verbosity,
---
>                                         int   verbosity
79c79
<                                         int , int verbosity,
---
>                                         int  int 
79c79
<                                         int , int verbosity,
---
>                                         int   
79c79
<                                         int , int verbosity,
---
>                                         int ,  verbosity,
79c79
<                                         int , int verbosity,
---
>                                         int ,  ,
79c79
<                                         int , int verbosity,
---
>                                         int ,  verbosity
79c79
<                                         int , int verbosity,
---
>                                         int ,  
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  verbosity,
>                                          workFactor);
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  ,
>                                          workFactor);
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  verbosity
>                                          workFactor);
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int ,  
>                                          workFactor);
79c79
<                                         int , int verbosity,
---
>                                         int , int ,
79c79
<                                         int , int verbosity,
---
>                                         int , int 
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int , int ,
>                                          workFactor);
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int , int 
>                                          workFactor);
79,80c79,80
<                                         int , int verbosity,
<                                         int workFactor);
---
>                                         int , int ,
>                                         int );
(89.1 %, 22387 bytes)
79c79
<                                         int , int ,
---
>                                         int , int 
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          workFactor);
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                         int );
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          );
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                         int workFactor;
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          workFactor;
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                         int ;
79,80c79,80
<                                         int , int ,
<                                         int workFactor);
---
>                                         int , int 
>                                          ;
80c80
<                                         int workFactor);
---
>                                          workFactor);
80c80
<                                         int workFactor);
---
>                                          );
80c80
<                                         int workFactor);
---
>                                          workFactor;
80c80
<                                         int workFactor);
---
>                                          ;
80c80
<                                         int workFactor);
---
>                                          workFactor)
80c80
<                                         int workFactor);
---
>                                          )
80c80
<                                         int workFactor);
---
>                                          workFactor
80c80
<                                         int workFactor);
---
>                                          
80c80
<                                         int workFactor);
---
>                                         int );
80c80
<                                         int workFactor);
---
>                                         int ;
80c80
<                                         int workFactor);
---
>                                         int )
80c80
<                                         int workFactor);
---
>                                         int 
80c80
<                                         int workFactor);
---
>                                         int );
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite(
(89.1 %, 22377 bytes)
80c80
<                                         int );
---
>                                         int ;
80c80
<                                         int );
---
>                                         int 
80c80
<                                         int );
---
>                                         int ;
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int 
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int ;
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int 
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int ;
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int 
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int )
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite(
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN void (
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void (
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  (
80c80
<                                         int );
---
>                                         int )
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   (
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite(
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite(
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void (
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   (
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>  void 
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
>   
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  (
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzWrite(
84c84
<     void);
---
>     );
82c82
< BZ_EXTERN void BZ_APIBZ2_bzWrite(
---
> BZ_EXTERN  (
84c84
<     void);
---
>     );
(89.1 %, 22368 bytes)
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite(
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   (
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite(
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   (
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>   
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void (
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void 
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void (
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void 
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void (
84c84
<     void);
---
>     void;
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void 
84c84
<     void);
---
>     void;
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void (
84c84
<     void);
---
>     ;
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void 
84c84
<     void);
---
>     ;
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     );
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     void;
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     ;
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     void)
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     )
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     void
82c82
<  void BZ_APIBZ2_bzWrite(
---
>  void BZ_APIBZ2_bzWrite
84c84
<     void);
---
>     
84c84
<     void);
---
>     );
(89.1 %, 22345 bytes)
84c84
<     ;
---
>     
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>   (
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose(
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>   BZ_APIBZ2_bzWriteClose(
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>  void (
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>   (
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>   BZ_APIBZ2_bzWriteClose
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>  void 
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
>   
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose(
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN  (
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN  
86c86
< BZ_EXTERN void BZ_APIBZ2_bzWriteClose(
---
> BZ_EXTERN  BZ_APIBZ2_bzWriteClose(
88c88
<     void);
---
>     );
(89.1 %, 22336 bytes)
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   BZ_APIBZ2_bzWriteClose(
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   (
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   BZ_APIBZ2_bzWriteClose
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   BZ_APIBZ2_bzWriteClose(
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   (
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>   
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void (
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void 
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void (
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void 
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void (
88c88
<     void);
---
>     void;
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void 
88c88
<     void);
---
>     void;
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void (
88c88
<     void);
---
>     ;
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void 
88c88
<     void);
---
>     ;
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     );
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     void;
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     ;
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     void)
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     )
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     void
86c86
<  void BZ_APIBZ2_bzWriteClose(
---
>  void BZ_APIBZ2_bzWriteClose
88c88
<     void);
---
>     
88c88
<     void);
---
>     );
(89.1 %, 22308 bytes)
88c88
<     ;
---
>     
90c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
90c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>  void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
90c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   BZ_API(BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
(89.1 %, 22288 bytes)
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   ()(int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   ((int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   ()int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   ()( *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (( *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   () *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   ( *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64( *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64 *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64(int bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64int bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64( bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64 bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)int *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64) *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)int bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64) bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)int *, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64) *, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)int , BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64) , BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( *bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( *, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( , BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( *bzerror BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( bzerror BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)( * BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(  BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(int bzerror, BZFILE *b, int abandon,
90c90
<   (BZ2_bzWriteClose64)(int *bzerror, BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(int , BZFILE *b, int abandon,
(89.1 %, 22276 bytes)
90c90
<   (BZ2_bzWriteClose64)(  BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(    int abandon,
90c90
<   (BZ2_bzWriteClose64)(  BZFILE *b, int abandon,
---
>   (BZ2_bzWriteClose64)(  BZFILE b, int abandon,
(89.1 %, 22267 bytes)
90,91c90,91
<   (BZ2_bzWriteClose64)(    int abandon,
<                                           unsigned int *nbytes_in_lo32,
---
>   (BZ2_bzWriteClose64)(     
>                                            int *nbytes_in_lo32,
90c90
<   (BZ2_bzWriteClose64)(    int abandon,
---
>   (BZ2_bzWriteClose64)(    int ,
(89.1 %, 22248 bytes)
91c91
<                                            int *nbytes_in_lo32,
---
>                                             
91c91
<                                            int *nbytes_in_lo32,
---
>                                            int nbytes_in_lo32,
91c91
<                                            int *nbytes_in_lo32,
---
>                                            int ,
(89.2 %, 22229 bytes)
92c92
<                                           unsigned int *nbytes_in_hi32,
---
>                                             ,
92c92
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  *nbytes_in_hi32,
92c92
<                                           unsigned int *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_hi32,
(89.2 %, 22226 bytes)
92c92
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  nbytes_in_hi32,
92c92
<                                           unsigned  *nbytes_in_hi32,
---
>                                           unsigned  ,
(89.2 %, 22225 bytes)
92c92
<                                           unsigned  nbytes_in_hi32,
---
>                                           unsigned  ,
92c92
<                                           unsigned  nbytes_in_hi32,
---
>                                           unsigned  
92,93c92,93
<                                           unsigned  nbytes_in_hi32,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  ,
>                                            int *nbytes_out_lo32,
(89.2 %, 22211 bytes)
92c92
<                                           unsigned  ,
---
>                                           unsigned  
92,93c92,93
<                                           unsigned  ,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  
>                                            int *nbytes_out_lo32,
92,93c92,93
<                                           unsigned  ,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  
>                                           unsigned  *nbytes_out_lo32,
92,93c92,93
<                                           unsigned  ,
<                                           unsigned int *nbytes_out_lo32,
---
>                                           unsigned  
>                                             *nbytes_out_lo32,
(89.2 %, 22202 bytes)
93c93
<                                            int *nbytes_out_lo32,
---
>                                             nbytes_out_lo32,
93c93
<                                            int *nbytes_out_lo32,
---
>                                             *,
93c93
<                                            int *nbytes_out_lo32,
---
>                                             ,
(89.2 %, 22198 bytes)
93c93
<                                             nbytes_out_lo32,
---
>                                             
93,94c93,94
<                                             nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                             ,
>                                            int *nbytes_out_hi32);
93,94c93,94
<                                             nbytes_out_lo32,
<                                           unsigned int *nbytes_out_hi32);
---
>                                             
>                                            int *nbytes_out_hi32);
(89.2 %, 22175 bytes)
93,94c93,94
<                                             ,
<                                            int *nbytes_out_hi32);
---
>                                             
>                                            int nbytes_out_hi32);
93,94c93,94
<                                             ,
<                                            int *nbytes_out_hi32);
---
>                                             
>                                             nbytes_out_hi32);
(89.2 %, 22173 bytes)
94c94
<                                            int nbytes_out_hi32);
---
>                                             nbytes_out_hi32;
94c94
<                                            int nbytes_out_hi32);
---
>                                             ;
94c94
<                                            int nbytes_out_hi32);
---
>                                             nbytes_out_hi32)
94c94
<                                            int nbytes_out_hi32);
---
>                                             )
94c94
<                                            int nbytes_out_hi32);
---
>                                             nbytes_out_hi32
94c94
<                                            int nbytes_out_hi32);
---
>                                             
94c94
<                                            int nbytes_out_hi32);
---
>                                            int );
94c94
<                                            int nbytes_out_hi32);
---
>                                            int ;
94c94
<                                            int nbytes_out_hi32);
---
>                                            int )
94c94
<                                            int nbytes_out_hi32);
---
>                                            int 
94c94
<                                            int nbytes_out_hi32);
---
>                                            int );
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress(
(89.2 %, 22158 bytes)
94c94
<                                            int );
---
>                                            int ;
94c94
<                                            int );
---
>                                            int 
94c94
<                                            int );
---
>                                            int ;
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int 
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int ;
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int 
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int ;
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int 
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int )
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress(
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN int (
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int (
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
> BZ_EXTERN  (
94c94
<                                            int );
---
>                                            int )
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   (
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress(
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress(
96c96
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int (
(89.2 %, 22149 bytes)
96c96
<  int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress(
96c96
<  int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   (
96c96
<  int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress
96c96
<  int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   
96c96
<  int BZ_APIBZ2_bzBuffToBuffCompress(
---
>   BZ_APIBZ2_bzBuffToBuffCompress(
98c98
<     void);
---
>     );
(89.2 %, 22146 bytes)
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   (
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   (
98c98
<     void);
---
>     );
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   
98c98
<     void);
---
>     );
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   (
98c98
<     void);
---
>     void;
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   
98c98
<     void);
---
>     void;
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   (
98c98
<     void);
---
>     ;
96c96
<   BZ_APIBZ2_bzBuffToBuffCompress(
---
>   
98c98
<     void);
---
>     ;
(89.2 %, 22114 bytes)
98c98
<     void;
---
>     
100c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
98c98
<     void;
---
>     ;
100c100
< BZ_EXTERN int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>   BZ_APIBZ2_bzBuffToBuffDecompress(
(89.2 %, 22106 bytes)
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>   (
102c102
<     void);
---
>     );
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>   BZ_APIBZ2_bzBuffToBuffDecompress
102c102
<     void);
---
>     );
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>   
102c102
<     void);
---
>     );
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  (
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  (
102c102
<     void);
---
>     );
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  
102c102
<     void);
---
>     );
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  (
102c102
<     void);
---
>     void;
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  
102c102
<     void);
---
>     void;
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  (
102c102
<     void);
---
>     ;
100c100
< BZ_EXTERN  BZ_APIBZ2_bzBuffToBuffDecompress(
---
> BZ_EXTERN  
102c102
<     void);
---
>     ;
(89.2 %, 22072 bytes)
102c102
<     void;
---
>     
104c104
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen(
102c102
<     void;
---
>     ;
104c104
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
---
>   *BZ_APIBZ2_bzopen(
102c102
<     void;
---
>     
104c104
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzopen(
---
>   *BZ_APIBZ2_bzopen(
(89.2 %, 22061 bytes)
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
>   BZ_APIBZ2_bzopen
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
>   *
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
>   
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  BZ_APIBZ2_bzopen(
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  (
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  BZ_APIBZ2_bzopen
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  BZ_APIBZ2_bzopen(
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  (
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  BZ_APIBZ2_bzopen
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *(
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *(
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *(
106c106
<     void);
---
>     void;
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *
106c106
<     void);
---
>     void;
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *(
106c106
<     void);
---
>     ;
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *
106c106
<     void);
---
>     ;
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     );
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     void;
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     ;
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     void)
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     )
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     void
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen
106c106
<     void);
---
>     
106c106
<     void);
---
>     );
106c106
<     void);
---
>     ;
106c106
<     void);
---
>     )
106c106
<     void);
---
>     
106c106
<     void);
---
>     );
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE *BZ_APIBZ2_bzdopen(
(89.2 %, 22057 bytes)
106c106
<     );
---
>     ;
106c106
<     );
---
>     
106c106
<     );
---
>     ;
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     ;
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     ;
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN  *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN BZFILE BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
> BZ_EXTERN  BZ_APIBZ2_bzdopen(
106c106
<     );
---
>     )
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen(
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE *BZ_APIBZ2_bzdopen(
108c108
< BZ_EXTERN BZFILE *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen(
(89.2 %, 22048 bytes)
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen(
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen(
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   *(
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   (
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   *
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>   
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE BZ_APIBZ2_bzdopen(
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE (
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE BZ_APIBZ2_bzdopen
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE 
108c108
<  BZFILE *BZ_APIBZ2_bzdopen(
---
>  BZFILE BZ_APIBZ2_bzdopen(
110c110
<     void);
---
>     );
(89.2 %, 22042 bytes)
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen(
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   (
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen(
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   (
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *(
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *(
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *(
110c110
<     void);
---
>     void;
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *
110c110
<     void);
---
>     void;
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *(
110c110
<     void);
---
>     ;
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *
110c110
<     void);
---
>     ;
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     );
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     void;
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     ;
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     void)
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     )
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     void
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   *BZ_APIBZ2_bzdopen
110c110
<     void);
---
>     
110c110
<     void);
---
>     );
110c110
<     void);
---
>     ;
110c110
<     void);
---
>     )
110c110
<     void);
---
>     
110c110
<     void);
---
>     );
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>  int BZ_APIBZ2_bzread(
(89.2 %, 22038 bytes)
110c110
<     );
---
>     ;
110c110
<     );
---
>     
110c110
<     );
---
>     ;
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>  int BZ_APIBZ2_bzread(
110c110
<     );
---
>     
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>  int BZ_APIBZ2_bzread(
110c110
<     );
---
>     ;
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN  BZ_APIBZ2_bzread(
110c110
<     );
---
>     
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN  BZ_APIBZ2_bzread(
110c110
<     );
---
>     ;
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread(
110c110
<     );
---
>     
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread(
110c110
<     );
---
>     )
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>  int BZ_APIBZ2_bzread(
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN  BZ_APIBZ2_bzread(
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread(
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN int (
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>  int (
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
> BZ_EXTERN  (
110c110
<     );
---
>     )
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>   (
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>  int BZ_APIBZ2_bzread(
112c112
< BZ_EXTERN int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread(
(89.3 %, 22029 bytes)
112c112
<  int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread(
112c112
<  int BZ_APIBZ2_bzread(
---
>   (
112c112
<  int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread
112c112
<  int BZ_APIBZ2_bzread(
---
>   
112c112
<  int BZ_APIBZ2_bzread(
---
>   BZ_APIBZ2_bzread(
114c114
<     void);
---
>     );
(89.3 %, 22026 bytes)
112c112
<   BZ_APIBZ2_bzread(
---
>   (
112c112
<   BZ_APIBZ2_bzread(
---
>   
112c112
<   BZ_APIBZ2_bzread(
---
>   (
114c114
<     void);
---
>     );
112c112
<   BZ_APIBZ2_bzread(
---
>   
114c114
<     void);
---
>     );
112c112
<   BZ_APIBZ2_bzread(
---
>   (
114c114
<     void);
---
>     void;
112c112
<   BZ_APIBZ2_bzread(
---
>   
114c114
<     void);
---
>     void;
112c112
<   BZ_APIBZ2_bzread(
---
>   (
114c114
<     void);
---
>     ;
112c112
<   BZ_APIBZ2_bzread(
---
>   
114c114
<     void);
---
>     ;
(89.3 %, 22008 bytes)
114c114
<     void;
---
>     
116c116
< BZ_EXTERN int BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  BZ_APIBZ2_bzwrite(
114c114
<     void;
---
>     ;
116c116
< BZ_EXTERN int BZ_APIBZ2_bzwrite(
---
>   BZ_APIBZ2_bzwrite(
114c114
<     void;
---
>     
116c116
< BZ_EXTERN int BZ_APIBZ2_bzwrite(
---
>   BZ_APIBZ2_bzwrite(
(89.3 %, 22000 bytes)
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
>   (
118c118
<     void);
---
>     );
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
>   BZ_APIBZ2_bzwrite
118c118
<     void);
---
>     );
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
>   
118c118
<     void);
---
>     );
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  (
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  (
118c118
<     void);
---
>     );
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  
118c118
<     void);
---
>     );
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  (
118c118
<     void);
---
>     void;
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  
118c118
<     void);
---
>     void;
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  (
118c118
<     void);
---
>     ;
116c116
< BZ_EXTERN  BZ_APIBZ2_bzwrite(
---
> BZ_EXTERN  
118c118
<     void);
---
>     ;
(89.3 %, 21981 bytes)
118c118
<     void;
---
>     
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN  char *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     ;
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>   char *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>   char *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN  char *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>   char *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN const  *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>  const  *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN   *BZ_APIBZ2_bzerror(
118c118
<     void;
---
>     void
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>    *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>   char *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>  const  *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>    *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>  const char BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>   char BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>  const  BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
>    BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN  char *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN   *BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN  char BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN   BZ_APIBZ2_bzerror(
120c120
< BZ_EXTERN const char *BZ_APIBZ2_bzerror(
---
> BZ_EXTERN  char *(
(89.3 %, 21972 bytes)
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>   char *BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>    *BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>   char BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>    BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>   char *(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>    *(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>   char (
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>    (
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  *BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  *(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  (
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  *BZ_APIBZ2_bzerror
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  BZ_APIBZ2_bzerror
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  *
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const  
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char BZ_APIBZ2_bzerror(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char (
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char BZ_APIBZ2_bzerror
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char 
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char BZ_APIBZ2_bzerror(
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char (
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char BZ_APIBZ2_bzerror
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char 
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *(
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *(
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *(
122c122
<     void);
---
>     void;
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *
122c122
<     void);
---
>     void;
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *(
122c122
<     void);
---
>     ;
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *
122c122
<     void);
---
>     ;
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     );
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     void;
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     ;
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     void)
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     )
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     void
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  const char *BZ_APIBZ2_bzerror
122c122
<     void);
---
>     
122c122
<     void);
---
>     );
122c122
<     void);
---
>     ;
122c122
<     void);
---
>     )
122c122
<     void);
---
>     
122c122
<     void);
---
>     );
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     void);
---
>     ;
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     void);
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     void);
---
>     
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     void);
---
>     void;
122c122
<     void);
---
>     void
122c122
<     void);
---
>     void;
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     void);
---
>     void
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     void);
---
>     void;
124c124
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
(89.3 %, 21968 bytes)
122c122
<     );
---
>     ;
122c122
<     );
---
>     
122c122
<     );
---
>     ;
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     );
---
>     
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     );
---
>     ;
124c124
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
122c122
<     );
---
>     
124c124
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
122c122
<     );
---
>     ;
124c124
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
122c122
<     );
---
>     
124c124
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
122c122
<     );
---
>     )
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
> #define 
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
> define 
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
> # 
122c122
<     );
---
>     )
124c124
< #define _BZLIB_PRIVATE_H
---
>  
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
124c124
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
124c124
< #define _BZLIB_PRIVATE_H
---
> define 
124c124
< #define _BZLIB_PRIVATE_H
---
>  
124c124
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
126c126
< #include <stdlib.h>
---
> include <stdlib.h>
124c124
< #define _BZLIB_PRIVATE_H
---
>  _BZLIB_PRIVATE_H
126c126
< #include <stdlib.h>
---
> include <stdlib.h>
124c124
< #define _BZLIB_PRIVATE_H
---
> define 
126c126
< #include <stdlib.h>
---
> include <stdlib.h>
124c124
< #define _BZLIB_PRIVATE_H
---
>  
126c126
< #include <stdlib.h>
---
> include <stdlib.h>
124c124
< #define _BZLIB_PRIVATE_H
---
> # _BZLIB_PRIVATE_H
124c124
< #define _BZLIB_PRIVATE_H
---
> # 
(89.3 %, 21945 bytes)
126c126
< #include <stdlib.h>
---
>  stdlib.h>
126c126
< #include <stdlib.h>
---
> include <.h>
126c126
< #include <stdlib.h>
---
>  <.h>
126c126
< #include <stdlib.h>
---
> include .h>
126c126
< #include <stdlib.h>
---
>  .h>
126c126
< #include <stdlib.h>
---
> # <stdlib.h>
126c126
< #include <stdlib.h>
---
> # stdlib.h>
126c126
< #include <stdlib.h>
---
> # <.h>
126c126
< #include <stdlib.h>
---
> # .h>
126c126
< #include <stdlib.h>
---
> # <stdlibh>
126c126
< #include <stdlib.h>
---
> # stdlibh>
126c126
< #include <stdlib.h>
---
> # <h>
126c126
< #include <stdlib.h>
---
> # h>
126c126
< #include <stdlib.h>
---
> #include stdlib.h>
126c126
< #include <stdlib.h>
---
> #include .h>
126c126
< #include <stdlib.h>
---
> #include stdlibh>
126c126
< #include <stdlib.h>
---
> #include h>
126c126
< #include <stdlib.h>
---
> #include stdlib.>
126c126
< #include <stdlib.h>
---
> #include .>
126c126
< #include <stdlib.h>
---
> #include stdlib>
126c126
< #include <stdlib.h>
---
> #include >
126c126
< #include <stdlib.h>
---
> #include <.h>
126c126
< #include <stdlib.h>
---
> #include <h>
126c126
< #include <stdlib.h>
---
> #include <.>
126c126
< #include <stdlib.h>
---
> #include <>
126c126
< #include <stdlib.h>
---
> #include <.h
126c126
< #include <stdlib.h>
---
> #include <h
126c126
< #include <stdlib.h>
---
> #include <.
126c126
< #include <stdlib.h>
---
> #include <
126c126
< #include <stdlib.h>
---
> #include <stdlibh>
126c126
< #include <stdlib.h>
---
> #include <stdlib>
126c126
< #include <stdlib.h>
---
> #include <stdlibh
126c126
< #include <stdlib.h>
---
> #include <stdlib
126c126
< #include <stdlib.h>
---
> #include <stdlibh>
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib>
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlibh
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.>
126c126
< #include <stdlib.h>
---
> #include <stdlib.
126c126
< #include <stdlib.h>
---
> #include <stdlib.>
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.>
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.>
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  "1.0.2, 30-Dec-2001"
126c126
< #include <stdlib.h>
---
> #include <stdlib.h
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION 
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION 
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> define  
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
>   
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION 
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION "1.0.2, 30-Dec-2001"
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  "1.0.2, 30-Dec-2001"
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION 
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #  
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
130c130
< typedef char Char;
---
> typedef  Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
130c130
< typedef char Char;
---
> typedef  Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  "1.0.2, 30-Dec-2001"
130c130
< typedef char Char;
---
>   Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define  
130c130
< typedef char Char;
---
>   Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
>  char Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
> typedef  Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
>   Char;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
> typedef char ;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
>  char ;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
> typedef  ;
128c128
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION 
130c130
< typedef char Char;
---
>   ;
130c130
< typedef char Char;
---
>  char Char;
130c130
< typedef char Char;
---
>   Char;
130c130
< typedef char Char;
---
>  char ;
130c130
< typedef char Char;
---
>   ;
130c130
< typedef char Char;
---
>  char Char
130c130
< typedef char Char;
---
>   Char
130c130
< typedef char Char;
---
>  char 
130c130
< typedef char Char;
---
>   
130c130
< typedef char Char;
---
> typedef  Char;
130c130
< typedef char Char;
---
> typedef  ;
130c130
< typedef char Char;
---
> typedef  Char
130c130
< typedef char Char;
---
> typedef  
130,131c130,131
< typedef char Char;
< typedef unsigned char Bool;
---
> typedef  Char;
>  unsigned char Bool;
130,131c130,131
< typedef char Char;
< typedef unsigned char Bool;
---
> typedef  ;
>  unsigned char Bool;
130,131c130,131
< typedef char Char;
< typedef unsigned char Bool;
---
> typedef  Char
>  unsigned char Bool;
130,131c130,131
< typedef char Char;
< typedef unsigned char Bool;
---
> typedef  
>  unsigned char Bool;
130c130
< typedef char Char;
---
> typedef char ;
130c130
< typedef char Char;
---
> typedef char 
130,131c130,131
< typedef char Char;
< typedef unsigned char Bool;
---
> typedef char ;
>  unsigned char Bool;
130,131c130,131
< typedef char Char;
< typedef unsigned char Bool;
---
> typedef char 
>  unsigned char Bool;
(89.3 %, 21941 bytes)
130c130
< typedef  Char;
---
> typedef  ;
130c130
< typedef  Char;
---
> typedef  
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  ;
>  unsigned char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  
>  unsigned char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  ;
> typedef  char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  
> typedef  char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  ;
>   char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  
>   char Bool;
130c130
< typedef  Char;
---
> typedef  Char
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
>  unsigned char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
> typedef  char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
>   char Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
> typedef unsigned  Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
>  unsigned  Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
> typedef   Bool;
130,131c130,131
< typedef  Char;
< typedef unsigned char Bool;
---
> typedef  Char
>    Bool;
131c131
< typedef unsigned char Bool;
---
>  unsigned char Bool;
131c131
< typedef unsigned char Bool;
---
>   char Bool;
131c131
< typedef unsigned char Bool;
---
>  unsigned  Bool;
131c131
< typedef unsigned char Bool;
---
>    Bool;
131c131
< typedef unsigned char Bool;
---
>  unsigned char ;
131c131
< typedef unsigned char Bool;
---
>   char ;
131c131
< typedef unsigned char Bool;
---
>  unsigned  ;
131c131
< typedef unsigned char Bool;
---
>    ;
131c131
< typedef unsigned char Bool;
---
> typedef  char Bool;
131c131
< typedef unsigned char Bool;
---
> typedef   Bool;
(89.3 %, 21933 bytes)
131c131
< typedef  char Bool;
---
> typedef   Bool;
131c131
< typedef  char Bool;
---
> typedef   ;
131c131
< typedef  char Bool;
---
> typedef   Bool
131c131
< typedef  char Bool;
---
> typedef   
131,132c131,132
< typedef  char Bool;
< typedef unsigned char UChar;
---
> typedef   Bool;
>  unsigned char UChar;
131,132c131,132
< typedef  char Bool;
< typedef unsigned char UChar;
---
> typedef   ;
>  unsigned char UChar;
131,132c131,132
< typedef  char Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
>  unsigned char UChar;
131,132c131,132
< typedef  char Bool;
< typedef unsigned char UChar;
---
> typedef   
>  unsigned char UChar;
131c131
< typedef  char Bool;
---
> typedef  char ;
131c131
< typedef  char Bool;
---
> typedef  char 
(89.3 %, 21929 bytes)
131c131
< typedef   Bool;
---
> typedef   ;
131c131
< typedef   Bool;
---
> typedef   
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   ;
>  unsigned char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   
>  unsigned char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   ;
> typedef  char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   
> typedef  char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   ;
>   char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   
>   char UChar;
131c131
< typedef   Bool;
---
> typedef   Bool
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
>  unsigned char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
> typedef  char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
>   char UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
> typedef unsigned  UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
>  unsigned  UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
> typedef   UChar;
131,132c131,132
< typedef   Bool;
< typedef unsigned char UChar;
---
> typedef   Bool
>    UChar;
132c132
< typedef unsigned char UChar;
---
>  unsigned char UChar;
132c132
< typedef unsigned char UChar;
---
>   char UChar;
132c132
< typedef unsigned char UChar;
---
>  unsigned  UChar;
132c132
< typedef unsigned char UChar;
---
>    UChar;
132c132
< typedef unsigned char UChar;
---
>  unsigned char ;
132c132
< typedef unsigned char UChar;
---
>   char ;
132c132
< typedef unsigned char UChar;
---
>  unsigned  ;
132c132
< typedef unsigned char UChar;
---
>    ;
132c132
< typedef unsigned char UChar;
---
> typedef  char UChar;
132c132
< typedef unsigned char UChar;
---
> typedef   UChar;
(89.3 %, 21921 bytes)
132c132
< typedef  char UChar;
---
> typedef   UChar;
132c132
< typedef  char UChar;
---
> typedef   ;
132c132
< typedef  char UChar;
---
> typedef   UChar
132c132
< typedef  char UChar;
---
> typedef   
132,133c132,133
< typedef  char UChar;
< typedef int Int32;
---
> typedef   UChar;
>  int Int32;
132,133c132,133
< typedef  char UChar;
< typedef int Int32;
---
> typedef   ;
>  int Int32;
132,133c132,133
< typedef  char UChar;
< typedef int Int32;
---
> typedef   UChar
>  int Int32;
132,133c132,133
< typedef  char UChar;
< typedef int Int32;
---
> typedef   
>  int Int32;
132c132
< typedef  char UChar;
---
> typedef  char ;
132c132
< typedef  char UChar;
---
> typedef  char 
132,133c132,133
< typedef  char UChar;
< typedef int Int32;
---
> typedef  char ;
>  int Int32;
132,133c132,133
< typedef  char UChar;
< typedef int Int32;
---
> typedef  char 
>  int Int32;
(89.3 %, 21917 bytes)
132c132
< typedef   UChar;
---
> typedef   ;
132c132
< typedef   UChar;
---
> typedef   
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   ;
>  int Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   
>  int Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   ;
> typedef  Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   
> typedef  Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   ;
>   Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   
>   Int32;
132c132
< typedef   UChar;
---
> typedef   UChar
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
>  int Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
> typedef  Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
>   Int32;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
> typedef int ;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
>  int ;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
> typedef  ;
132,133c132,133
< typedef   UChar;
< typedef int Int32;
---
> typedef   UChar
>   ;
133c133
< typedef int Int32;
---
>  int Int32;
133c133
< typedef int Int32;
---
>   Int32;
133c133
< typedef int Int32;
---
>  int ;
133c133
< typedef int Int32;
---
>   ;
133c133
< typedef int Int32;
---
>  int Int32
133c133
< typedef int Int32;
---
>   Int32
133c133
< typedef int Int32;
---
>  int 
133c133
< typedef int Int32;
---
>   
133c133
< typedef int Int32;
---
> typedef  Int32;
133c133
< typedef int Int32;
---
> typedef  ;
133c133
< typedef int Int32;
---
> typedef  Int32
133c133
< typedef int Int32;
---
> typedef  
133,134c133,134
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32;
>  unsigned int UInt32;
133,134c133,134
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
>  unsigned int UInt32;
133,134c133,134
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>  unsigned int UInt32;
133,134c133,134
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef  
>  unsigned int UInt32;
133c133
< typedef int Int32;
---
> typedef int ;
133c133
< typedef int Int32;
---
> typedef int 
133,134c133,134
< typedef int Int32;
< typedef unsigned int UInt32;
---
> typedef int ;
>  unsigned int UInt32;
(89.3 %, 21914 bytes)
133c133
< typedef  Int32;
---
> typedef  ;
133c133
< typedef  Int32;
---
> typedef  
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
>  unsigned int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  
>  unsigned int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
> typedef  int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  
> typedef  int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  ;
>   int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  
>   int UInt32;
133c133
< typedef  Int32;
---
> typedef  Int32
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>  unsigned int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
> typedef  int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>   int UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
> typedef unsigned  UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>  unsigned  UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
> typedef   UInt32;
133,134c133,134
< typedef  Int32;
< typedef unsigned int UInt32;
---
> typedef  Int32
>    UInt32;
134c134
< typedef unsigned int UInt32;
---
>  unsigned int UInt32;
134c134
< typedef unsigned int UInt32;
---
>   int UInt32;
134c134
< typedef unsigned int UInt32;
---
>  unsigned  UInt32;
134c134
< typedef unsigned int UInt32;
---
>    UInt32;
134c134
< typedef unsigned int UInt32;
---
>  unsigned int ;
134c134
< typedef unsigned int UInt32;
---
>   int ;
134c134
< typedef unsigned int UInt32;
---
>  unsigned  ;
134c134
< typedef unsigned int UInt32;
---
>    ;
134c134
< typedef unsigned int UInt32;
---
> typedef  int UInt32;
134c134
< typedef unsigned int UInt32;
---
> typedef   UInt32;
(89.3 %, 21906 bytes)
134c134
< typedef  int UInt32;
---
> typedef   UInt32;
134c134
< typedef  int UInt32;
---
> typedef   ;
134c134
< typedef  int UInt32;
---
> typedef   UInt32
134c134
< typedef  int UInt32;
---
> typedef   
134,135c134,135
< typedef  int UInt32;
< typedef short Int16;
---
> typedef   UInt32;
>  short Int16;
(89.3 %, 21903 bytes)
134c134
< typedef   UInt32;
---
> typedef   ;
134c134
< typedef   UInt32;
---
> typedef   
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   ;
>  short Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   
>  short Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   ;
> typedef  Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   
> typedef  Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   ;
>   Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   
>   Int16;
134c134
< typedef   UInt32;
---
> typedef   UInt32
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
>  short Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
> typedef  Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
>   Int16;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
> typedef short ;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
>  short ;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
> typedef  ;
134,135c134,135
< typedef   UInt32;
< typedef short Int16;
---
> typedef   UInt32
>   ;
135c135
< typedef short Int16;
---
>  short Int16;
(89.3 %, 21885 bytes)
135,136c135,136
<   ;
< typedef unsigned short UInt16;
---
>   
>    UInt16;
136c136
< typedef unsigned short UInt16;
---
>  unsigned short UInt16;
136c136
< typedef unsigned short UInt16;
---
>   short UInt16;
136c136
< typedef unsigned short UInt16;
---
>  unsigned  UInt16;
136c136
< typedef unsigned short UInt16;
---
>    UInt16;
136c136
< typedef unsigned short UInt16;
---
>  unsigned short ;
136c136
< typedef unsigned short UInt16;
---
>   short ;
136c136
< typedef unsigned short UInt16;
---
>  unsigned  ;
136c136
< typedef unsigned short UInt16;
---
>    ;
136c136
< typedef unsigned short UInt16;
---
> typedef  short UInt16;
136c136
< typedef unsigned short UInt16;
---
> typedef   UInt16;
136c136
< typedef unsigned short UInt16;
---
> typedef  short ;
(89.3 %, 21877 bytes)
136c136
< typedef  short UInt16;
---
> typedef   UInt16;
136c136
< typedef  short UInt16;
---
> typedef   ;
136c136
< typedef  short UInt16;
---
> typedef   UInt16
136c136
< typedef  short UInt16;
---
> typedef   
136c136
< typedef  short UInt16;
---
> typedef   UInt16;
138c138
< #define True 1
---
> define True 1
136c136
< typedef  short UInt16;
---
> typedef   ;
138c138
< #define True 1
---
> define True 1
136c136
< typedef  short UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
> define True 1
136c136
< typedef  short UInt16;
---
> typedef   
138c138
< #define True 1
---
> define True 1
136c136
< typedef  short UInt16;
---
> typedef  short ;
136c136
< typedef  short UInt16;
---
> typedef  short 
(89.3 %, 21872 bytes)
136c136
< typedef   UInt16;
---
> typedef   ;
136c136
< typedef   UInt16;
---
> typedef   
136c136
< typedef   UInt16;
---
> typedef   ;
138c138
< #define True 1
---
> define True 1
136c136
< typedef   UInt16;
---
> typedef   
138c138
< #define True 1
---
> define True 1
136c136
< typedef   UInt16;
---
> typedef   ;
138c138
< #define True 1
---
> # True 1
136c136
< typedef   UInt16;
---
> typedef   
138c138
< #define True 1
---
> # True 1
136c136
< typedef   UInt16;
---
> typedef   ;
138c138
< #define True 1
---
>  True 1
136c136
< typedef   UInt16;
---
> typedef   
138c138
< #define True 1
---
>  True 1
136c136
< typedef   UInt16;
---
> typedef   UInt16
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
> define True 1
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
> # True 1
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
>  True 1
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
> #define  1
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
> define  1
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
> #  1
136c136
< typedef   UInt16;
---
> typedef   UInt16
138c138
< #define True 1
---
>   1
138c138
< #define True 1
---
> define True 1
138c138
< #define True 1
---
>  True 1
138c138
< #define True 1
---
> define  1
138c138
< #define True 1
---
>   1
138c138
< #define True 1
---
> define True 
138c138
< #define True 1
---
>  True 
138c138
< #define True 1
---
> define  
138c138
< #define True 1
---
>   
138c138
< #define True 1
---
> # True 1
138c138
< #define True 1
---
> #  1
138c138
< #define True 1
---
> # True 
138c138
< #define True 1
---
> #  
138,139c138,139
< #define True 1
< #define False 0
---
> # True 1
> define False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #  1
> define False 0
138,139c138,139
< #define True 1
< #define False 0
---
> # True 
> define False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #  
> define False 0
138c138
< #define True 1
---
> #define  1
138c138
< #define True 1
---
> #define  
138,139c138,139
< #define True 1
< #define False 0
---
> #define  1
> define False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define  
> define False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define  1
> # False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define  
> # False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define  1
>  False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define  
>  False 0
138c138
< #define True 1
---
> #define True 
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
> define False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
> # False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
>  False 0
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
> #define  0
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
> define  0
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
> #  0
138,139c138,139
< #define True 1
< #define False 0
---
> #define True 
>   0
139c139
< #define False 0
---
> define False 0
139c139
< #define False 0
---
>  False 0
139c139
< #define False 0
---
> define  0
139c139
< #define False 0
---
>   0
139c139
< #define False 0
---
> define False 
139c139
< #define False 0
---
>  False 
139c139
< #define False 0
---
> define  
139c139
< #define False 0
---
>   
139c139
< #define False 0
---
> # False 0
139c139
< #define False 0
---
> #  0
139c139
< #define False 0
---
> # False 
139c139
< #define False 0
---
> #  
139c139
< #define False 0
---
> # False 0
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> #  0
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> # False 
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> #  
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> #define  0
139c139
< #define False 0
---
> #define  
139c139
< #define False 0
---
> #define  0
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> #define  
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> #define  0
141c141
< #define __inline__
---
> # __inline__
139c139
< #define False 0
---
> #define  
141c141
< #define __inline__
---
> # __inline__
139c139
< #define False 0
---
> #define  0
141c141
< #define __inline__
---
>  __inline__
139c139
< #define False 0
---
> #define  
141c141
< #define __inline__
---
>  __inline__
139c139
< #define False 0
---
> #define False 
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
> define __inline__
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
> # __inline__
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
>  __inline__
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
> #define 
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
> define 
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
> # 
139c139
< #define False 0
---
> #define False 
141c141
< #define __inline__
---
>  
141c141
< #define __inline__
---
> define __inline__
141c141
< #define __inline__
---
>  __inline__
141c141
< #define __inline__
---
> define 
141c141
< #define __inline__
---
>  
141c141
< #define __inline__
---
> define __inline__
143c143
< #define AssertHcond , errcode
---
> define AssertHcond , errcode
141c141
< #define __inline__
---
>  __inline__
143c143
< #define AssertHcond , errcode
---
> define AssertHcond , errcode
141c141
< #define __inline__
---
> define 
143c143
< #define AssertHcond , errcode
---
> define AssertHcond , errcode
141c141
< #define __inline__
---
>  
143c143
< #define AssertHcond , errcode
---
> define AssertHcond , errcode
141c141
< #define __inline__
---
> # __inline__
141c141
< #define __inline__
---
> # 
(89.3 %, 21855 bytes)
143c143
< #define AssertHcond , errcode
---
>   , errcode
143c143
< #define AssertHcond , errcode
---
> define AssertHcond  errcode
143c143
< #define AssertHcond , errcode
---
>  AssertHcond  errcode
143c143
< #define AssertHcond , errcode
---
> define   errcode
143c143
< #define AssertHcond , errcode
---
>    errcode
143c143
< #define AssertHcond , errcode
---
> # AssertHcond , errcode
143c143
< #define AssertHcond , errcode
---
> #  , errcode
143c143
< #define AssertHcond , errcode
---
> # AssertHcond  errcode
143c143
< #define AssertHcond , errcode
---
> #   errcode
143c143
< #define AssertHcond , errcode
---
> # AssertHcond , 
143c143
< #define AssertHcond , errcode
---
> #  , 
143c143
< #define AssertHcond , errcode
---
> # AssertHcond  
143c143
< #define AssertHcond , errcode
---
> #   
143c143
< #define AssertHcond , errcode
---
> #define  , errcode
143c143
< #define AssertHcond , errcode
---
> #define   errcode
(89.3 %, 21830 bytes)
145c145
< #define AssertD(cond, msg)
---
>  cond, msg)
145c145
< #define AssertD(cond, msg)
---
> # AssertD(cond, msg)
145c145
< #define AssertD(cond, msg)
---
> # (cond, msg)
145c145
< #define AssertD(cond, msg)
---
> # AssertDcond, msg)
145c145
< #define AssertD(cond, msg)
---
> # cond, msg)
145c145
< #define AssertD(cond, msg)
---
> # AssertD(, msg)
145c145
< #define AssertD(cond, msg)
---
> # (, msg)
145c145
< #define AssertD(cond, msg)
---
> # AssertD, msg)
145c145
< #define AssertD(cond, msg)
---
> # , msg)
145c145
< #define AssertD(cond, msg)
---
> #define (cond, msg)
145c145
< #define AssertD(cond, msg)
---
> #define cond, msg)
145c145
< #define AssertD(cond, msg)
---
> #define (, msg)
145c145
< #define AssertD(cond, msg)
---
> #define , msg)
145c145
< #define AssertD(cond, msg)
---
> #define (cond msg)
145c145
< #define AssertD(cond, msg)
---
> #define cond msg)
145c145
< #define AssertD(cond, msg)
---
> #define ( msg)
145c145
< #define AssertD(cond, msg)
---
> #define  msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertDcond, msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertD, msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertDcond msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertD msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertDcond, )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD, )
145c145
< #define AssertD(cond, msg)
---
> #define AssertDcond )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(, msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertD( msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(, )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD( )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(, msg
145c145
< #define AssertD(cond, msg)
---
> #define AssertD( msg
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(, 
145c145
< #define AssertD(cond, msg)
---
> #define AssertD( 
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond msg)
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond msg
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond 
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond msg)
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond )
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond 
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, )
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, 
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, )
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, 
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, )
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, 
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, )
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>  VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, 
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>  VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>  VPrintf0zf fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #define  fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define  fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #  fprintfstderr, zf
145c145
< #define AssertD(cond, msg)
---
> #define AssertD(cond, msg
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>   fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>  VPrintf0zf fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define  fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>   fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define VPrintf0zf , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>  VPrintf0zf , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> define  , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
>   , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #  fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #  , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf fprintfstderr zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #  fprintfstderr zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> # VPrintf0zf  zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #   zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #define  fprintfstderr, zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #define  , zf
147c147
< #define VPrintf0zf fprintfstderr, zf
---
> #define  fprintfstderr zf
(89.4 %, 21820 bytes)
147c147
< #define  fprintfstderr, zf
---
> #define  , zf
147c147
< #define  fprintfstderr, zf
---
> #define   zf
147c147
< #define  fprintfstderr, zf
---
> #define  , 
147c147
< #define  fprintfstderr, zf
---
> #define   
147,148c147,148
< #define  fprintfstderr, zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define  , zf
> define VPrintf1zf , za1 fprintfstderr, zf, za1
147,148c147,148
< #define  fprintfstderr, zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   zf
> define VPrintf1zf , za1 fprintfstderr, zf, za1
147,148c147,148
< #define  fprintfstderr, zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define  , 
> define VPrintf1zf , za1 fprintfstderr, zf, za1
147,148c147,148
< #define  fprintfstderr, zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
> define VPrintf1zf , za1 fprintfstderr, zf, za1
147c147
< #define  fprintfstderr, zf
---
> #define  fprintfstderr zf
(89.4 %, 21806 bytes)
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
> define VPrintf1zf , za1 fprintfstderr, zf, za1
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
> # VPrintf1zf , za1 fprintfstderr, zf, za1
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
>  VPrintf1zf , za1 fprintfstderr, zf, za1
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
> #define  , za1 fprintfstderr, zf, za1
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
> define  , za1 fprintfstderr, zf, za1
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
> #  , za1 fprintfstderr, zf, za1
147,148c147,148
< #define   zf
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   
>   , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> define VPrintf1zf , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
>  VPrintf1zf , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> define  , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
>   , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> define VPrintf1zf  za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
>  VPrintf1zf  za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> define   za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
>    za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> # VPrintf1zf , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #  , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> # VPrintf1zf  za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #   za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> # VPrintf1zf ,  fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #  ,  fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> # VPrintf1zf   fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #    fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define  , za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define   za1 fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define  ,  fprintfstderr, zf, za1
148c148
< #define VPrintf1zf , za1 fprintfstderr, zf, za1
---
> #define    fprintfstderr, zf, za1
(89.4 %, 21795 bytes)
148c148
< #define   za1 fprintfstderr, zf, za1
---
> #define    , zf, za1
148c148
< #define   za1 fprintfstderr, zf, za1
---
> #define    fprintfstderr zf, za1
148c148
< #define   za1 fprintfstderr, zf, za1
---
> #define     zf, za1
(89.4 %, 21791 bytes)
148c148
< #define    fprintfstderr zf, za1
---
> #define     zf za1
148c148
< #define    fprintfstderr zf, za1
---
> #define      za1
148c148
< #define    fprintfstderr zf, za1
---
> #define     zf, 
(89.4 %, 21777 bytes)
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define      za1
> define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define      
> define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define      za1
> # VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define      
> # VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define      za1
>  VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define      
>  VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148c148
< #define     zf za1
---
> #define     zf 
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
> define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
> # VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
>  VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
> #define  , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
> define  , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
> #  , za1, za2 fprintfstderr, zf, za1, za2
148,149c148,149
< #define     zf za1
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define     zf 
>   , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
>  VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define  , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
>   , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define VPrintf2zf  za1, za2 fprintfstderr, zf, za1, za2
(89.4 %, 21774 bytes)
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
>  VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define  , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
>   , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define VPrintf2zf  za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
>  VPrintf2zf  za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> define   za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
>    za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> # VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #  , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> # VPrintf2zf  za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #   za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> # VPrintf2zf , , za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #  , , za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> # VPrintf2zf  , za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #   , za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define  , za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define   za1, za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define  , , za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define   , za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define  , za1 za2 fprintfstderr, zf, za1, za2
149c149
< #define VPrintf2zf , za1, za2 fprintfstderr, zf, za1, za2
---
> #define   za1 za2 fprintfstderr, zf, za1, za2
(89.4 %, 21763 bytes)
149c149
< #define   za1, za2 fprintfstderr, zf, za1, za2
---
> #define    za2 fprintfstderr, zf, za1, za2
149c149
< #define   za1, za2 fprintfstderr, zf, za1, za2
---
> #define   ,  fprintfstderr, zf, za1, za2
149c149
< #define   za1, za2 fprintfstderr, zf, za1, za2
---
> #define     fprintfstderr, zf, za1, za2
(89.4 %, 21759 bytes)
149c149
< #define    za2 fprintfstderr, zf, za1, za2
---
> #define     , zf, za1, za2
149c149
< #define    za2 fprintfstderr, zf, za1, za2
---
> #define     fprintfstderr zf, za1, za2
149c149
< #define    za2 fprintfstderr, zf, za1, za2
---
> #define      zf, za1, za2
(89.4 %, 21755 bytes)
149c149
< #define     fprintfstderr zf, za1, za2
---
> #define      zf za1, za2
149c149
< #define     fprintfstderr zf, za1, za2
---
> #define       za1, za2
(89.4 %, 21741 bytes)
149c149
< #define      zf za1, za2
---
> #define       za1 za2
149c149
< #define      zf za1, za2
---
> #define        za2
149c149
< #define      zf za1, za2
---
> #define       za1, 
(89.4 %, 21738 bytes)
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define        za2
> define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define        
> define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define        za2
> # VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define        
> # VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define        za2
>  VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define        
>  VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149c149
< #define       za1 za2
---
> #define       za1 
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
> define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
> # VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
>  VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
> #define  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
> define  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
> #  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
149,150c149,150
< #define       za1 za2
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define       za1 
>   , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
>  VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> define  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
>   , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
(89.4 %, 21735 bytes)
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
>  VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> define  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
>   , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> define VPrintf3zf  za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
>  VPrintf3zf  za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
>    za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> # VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> # VPrintf3zf  za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> # VPrintf3zf , , za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #  , , za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> # VPrintf3zf  , za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #   , za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define  , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define  , , za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define   , za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define  , za1 za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define VPrintf3zf , za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define   za1 za2, za3 fprintfstderr, zf, za1, za2, za3
(89.4 %, 21724 bytes)
150c150
< #define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define    za2, za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define   , , za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define    , za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define   , za2 za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define   za1, za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define    za2 za3 fprintfstderr, zf, za1, za2, za3
(89.4 %, 21720 bytes)
150c150
< #define    za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define     za3 fprintfstderr, zf, za1, za2, za3
150c150
< #define    za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define    ,  fprintfstderr, zf, za1, za2, za3
150c150
< #define    za2, za3 fprintfstderr, zf, za1, za2, za3
---
> #define      fprintfstderr, zf, za1, za2, za3
(89.4 %, 21716 bytes)
150c150
< #define     za3 fprintfstderr, zf, za1, za2, za3
---
> #define      , zf, za1, za2, za3
150c150
< #define     za3 fprintfstderr, zf, za1, za2, za3
---
> #define      fprintfstderr zf, za1, za2, za3
150c150
< #define     za3 fprintfstderr, zf, za1, za2, za3
---
> #define       zf, za1, za2, za3
(89.4 %, 21712 bytes)
150c150
< #define      fprintfstderr zf, za1, za2, za3
---
> #define       zf za1, za2, za3
150c150
< #define      fprintfstderr zf, za1, za2, za3
---
> #define        za1, za2, za3
150c150
< #define      fprintfstderr zf, za1, za2, za3
---
> #define       zf, , za2, za3
(89.4 %, 21698 bytes)
150c150
< #define       zf za1, za2, za3
---
> #define        za1 za2, za3
150c150
< #define       zf za1, za2, za3
---
> #define         za2, za3
150c150
< #define       zf za1, za2, za3
---
> #define        za1, , za3
(89.4 %, 21695 bytes)
150c150
< #define        za1 za2, za3
---
> #define         za2 za3
150c150
< #define        za1 za2, za3
---
> #define          za3
(89.4 %, 21691 bytes)
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define          za3
> define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define          
> define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define          za3
> # VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define          
> # VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define          za3
>  VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define          
>  VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150c150
< #define         za2 za3
---
> #define         za2 
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define         za2 
> define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define         za2 
> # VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define         za2 
>  VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define         za2 
> #define  , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
150,151c150,151
< #define         za2 za3
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define         za2 
> define  , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
(89.4 %, 21688 bytes)
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
>  VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> define  , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
>   , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> define VPrintf4zf  za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
>  VPrintf4zf  za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
>    za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> # VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #  , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> # VPrintf4zf  za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> # VPrintf4zf , , za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #  , , za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> # VPrintf4zf  , za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #   , za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define  , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define  , , za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define   , za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define  , za1 za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define VPrintf4zf , za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define   za1 za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
(89.4 %, 21677 bytes)
151c151
< #define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define    za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define   , , za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define    , za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define   , za2 za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define   za1, za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define    za2 za3, za4 fprintfstderr, zf, za1, za2, za3, za4
(89.4 %, 21673 bytes)
151c151
< #define    za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define     za3, za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define    za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define    , , za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define    za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define     , za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define    za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define    , za3 za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define    za2, za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define     za3 za4 fprintfstderr, zf, za1, za2, za3, za4
(89.4 %, 21669 bytes)
151c151
< #define     za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define      za4 fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define     za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define     ,  fprintfstderr, zf, za1, za2, za3, za4
151c151
< #define     za3, za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define       fprintfstderr, zf, za1, za2, za3, za4
(89.4 %, 21665 bytes)
151c151
< #define      za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define       , zf, za1, za2, za3, za4
151c151
< #define      za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define       fprintfstderr zf, za1, za2, za3, za4
151c151
< #define      za4 fprintfstderr, zf, za1, za2, za3, za4
---
> #define        zf, za1, za2, za3, za4
(89.4 %, 21661 bytes)
151c151
< #define       fprintfstderr zf, za1, za2, za3, za4
---
> #define        zf za1, za2, za3, za4
151c151
< #define       fprintfstderr zf, za1, za2, za3, za4
---
> #define         za1, za2, za3, za4
151c151
< #define       fprintfstderr zf, za1, za2, za3, za4
---
> #define        zf, , za2, za3, za4
(89.4 %, 21647 bytes)
151c151
< #define        zf za1, za2, za3, za4
---
> #define         za1 za2, za3, za4
151c151
< #define        zf za1, za2, za3, za4
---
> #define          za2, za3, za4
(89.4 %, 21644 bytes)
151c151
< #define         za1 za2, za3, za4
---
> #define          za2 za3, za4
151c151
< #define         za1 za2, za3, za4
---
> #define           za3, za4
(89.4 %, 21640 bytes)
151c151
< #define          za2 za3, za4
---
> #define           za3 za4
151c151
< #define          za2 za3, za4
---
> #define            za4
(89.4 %, 21636 bytes)
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define            za4
> define VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define            
> define VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define            za4
> # VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define            
> # VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define            za4
>  VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define            
>  VPrintf5zf                                                             \
151c151
< #define           za3 za4
---
> #define           za3 
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
> define VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
> # VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
>  VPrintf5zf                                                             \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
> #define                                                              \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
> define                                                              \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
> #                                                              \
151,152c151,152
< #define           za3 za4
< #define VPrintf5zf                                                             \
---
> #define           za3 
>                                                               \
152c152
< #define VPrintf5zf                                                             \
---
> define VPrintf5zf                                                             \
152c152
< #define VPrintf5zf                                                             \
---
>  VPrintf5zf                                                             \
152c152
< #define VPrintf5zf                                                             \
---
> define                                                              \
152c152
< #define VPrintf5zf                                                             \
---
>                                                               \
152c152
< #define VPrintf5zf                                                             \
---
> define VPrintf5zf                                                             
(89.4 %, 21633 bytes)
152c152
< #define VPrintf5zf                                                             \
---
> define VPrintf5zf                                                             \
152c152
< #define VPrintf5zf                                                             \
---
>  VPrintf5zf                                                             \
152c152
< #define VPrintf5zf                                                             \
---
> define                                                              \
152c152
< #define VPrintf5zf                                                             \
---
>                                                               \
152c152
< #define VPrintf5zf                                                             \
---
> define VPrintf5zf                                                             
152c152
< #define VPrintf5zf                                                             \
---
>  VPrintf5zf                                                             
152c152
< #define VPrintf5zf                                                             \
---
> define                                                              
152c152
< #define VPrintf5zf                                                             \
---
>                                                               
152c152
< #define VPrintf5zf                                                             \
---
> # VPrintf5zf                                                             \
152c152
< #define VPrintf5zf                                                             \
---
> #                                                              \
152c152
< #define VPrintf5zf                                                             \
---
> # VPrintf5zf                                                             
152c152
< #define VPrintf5zf                                                             \
---
> #                                                              
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> # VPrintf5zf                                                             \
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #                                                              \
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> # VPrintf5zf                                                             
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #                                                              
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152c152
< #define VPrintf5zf                                                             \
---
> #define                                                              \
152c152
< #define VPrintf5zf                                                             \
---
> #define                                                              
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              \
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              \
>   , , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>   , , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              \
>    , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>    , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152c152
< #define VPrintf5zf                                                             \
---
> #define VPrintf5zf                                                             
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define VPrintf5zf                                                             
>    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define VPrintf5zf                                                             
>   , , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define VPrintf5zf                                                             
>    , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define VPrintf5zf                                                             
>   , za1 za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define VPrintf5zf                                                             
>    za1 za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define VPrintf5zf                                                             \
<   , za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define VPrintf5zf                                                             
>   ,  za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
(89.4 %, 21622 bytes)
152,153c152,153
< #define                                                              \
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>    za1 za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define                                                              \
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define                                                              \
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>    za1, , za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define                                                              \
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>    , , za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define                                                              \
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>    za1 , za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
152,153c152,153
< #define                                                              \
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
> #define                                                              
>     , za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>    , za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>    , , za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>     , za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>    , za2 za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<    za1, za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>     za2 za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
(89.5 %, 21618 bytes)
153c153
<     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>      za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>     , , za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>      , za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>     , za3 za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<     za2, za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>      za3 za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
(89.5 %, 21614 bytes)
153c153
<      za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>       za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<      za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>      , , za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<      za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>       , za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<      za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>      , za4 za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<      za3, za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>       za4 za5 fprintfstderr, zf, za1, za2, za3, za4, za5
(89.5 %, 21610 bytes)
153c153
<       za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>        za5 fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<       za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>       ,  fprintfstderr, zf, za1, za2, za3, za4, za5
153c153
<       za4, za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>         fprintfstderr, zf, za1, za2, za3, za4, za5
(89.5 %, 21606 bytes)
153c153
<        za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>         , zf, za1, za2, za3, za4, za5
153c153
<        za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>         fprintfstderr zf, za1, za2, za3, za4, za5
153c153
<        za5 fprintfstderr, zf, za1, za2, za3, za4, za5
---
>          zf, za1, za2, za3, za4, za5
(89.5 %, 21602 bytes)
153c153
<         fprintfstderr zf, za1, za2, za3, za4, za5
---
>          zf za1, za2, za3, za4, za5
153c153
<         fprintfstderr zf, za1, za2, za3, za4, za5
---
>           za1, za2, za3, za4, za5
(89.5 %, 21588 bytes)
153c153
<          zf za1, za2, za3, za4, za5
---
>           za1 za2, za3, za4, za5
153c153
<          zf za1, za2, za3, za4, za5
---
>            za2, za3, za4, za5
(89.5 %, 21585 bytes)
153c153
<           za1 za2, za3, za4, za5
---
>            za2 za3, za4, za5
153c153
<           za1 za2, za3, za4, za5
---
>             za3, za4, za5
(89.5 %, 21581 bytes)
153c153
<            za2 za3, za4, za5
---
>             za3 za4, za5
153c153
<            za2 za3, za4, za5
---
>              za4, za5
(89.5 %, 21577 bytes)
153c153
<             za3 za4, za5
---
>              za4 za5
153c153
<             za3 za4, za5
---
>               za5
(89.5 %, 21573 bytes)
153c153
<              za4 za5
---
>               za5
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>               
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>               za5
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>               
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>               za5
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>               
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define  strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #  strm->bzallocstrm->opaque, nnn, 1
153c153
<              za4 za5
---
>              za4 
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>   strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define  strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>   strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn ->bzallocstrm->opaque, nnn, 1
(89.5 %, 21570 bytes)
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define  strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>   strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define BZALLOCnnn ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>  BZALLOCnnn ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> define  ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
>   ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #  strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #  ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn strmbzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #  strmbzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> # BZALLOCnnn bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #  bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  strm->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  ->bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  strmbzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  bzallocstrm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  strm->->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  ->->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  strm->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define  ->opaque, nnn, 1
155c155
< #define BZALLOCnnn strm->bzallocstrm->opaque, nnn, 1
---
> #define BZALLOCnnn ->bzallocstrm->opaque, nnn, 1
(89.5 %, 21558 bytes)
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define  ->, nnn, 1
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define  , nnn, 1
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define  ->opaque nnn, 1
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define  opaque nnn, 1
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define  -> nnn, 1
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define   nnn, 1
155c155
< #define  strmbzallocstrm->opaque, nnn, 1
---
> #define  strmbzallocstrmopaque, nnn, 1
(89.5 %, 21534 bytes)
155,156c155,156
< #define   nnn, 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define    
> define BZFREEppp strm->bzfreestrm->opaque, ppp
155c155
< #define   nnn, 1
---
> #define   nnn 1
155c155
< #define   nnn, 1
---
> #define   nnn 
(89.5 %, 21533 bytes)
155c155
< #define   nnn 1
---
> #define   nnn 
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
> define BZFREEppp strm->bzfreestrm->opaque, ppp
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
> # BZFREEppp strm->bzfreestrm->opaque, ppp
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
>  BZFREEppp strm->bzfreestrm->opaque, ppp
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
> #define  strm->bzfreestrm->opaque, ppp
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
> define  strm->bzfreestrm->opaque, ppp
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
> #  strm->bzfreestrm->opaque, ppp
155,156c155,156
< #define   nnn 1
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define   nnn 
>   strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> define BZFREEppp strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
>  BZFREEppp strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> define  strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
>   strm->bzfreestrm->opaque, ppp
(89.5 %, 21532 bytes)
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> define BZFREEppp strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
>  BZFREEppp strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> define  strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
>   strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> define BZFREEppp ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
>  BZFREEppp ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> define  ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
>   ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> # BZFREEppp strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #  strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> # BZFREEppp ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #  ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> # BZFREEppp strmbzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #  strmbzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> # BZFREEppp bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #  bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define  strm->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define  ->bzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define  strmbzfreestrm->opaque, ppp
156c156
< #define BZFREEppp strm->bzfreestrm->opaque, ppp
---
> #define  bzfreestrm->opaque, ppp
(89.5 %, 21521 bytes)
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define  ->, ppp
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define  , ppp
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define  ->opaque ppp
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define  opaque ppp
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define  -> ppp
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define   ppp
156c156
< #define  strmbzfreestrm->opaque, ppp
---
> #define  strmbzfreestrmopaque, ppp
(89.5 %, 21498 bytes)
156c156
< #define   ppp
---
> #define   
158c158
< #define BZ_HDR_B 2
---
>   2
158c158
< #define BZ_HDR_B 2
---
> define BZ_HDR_B 2
158c158
< #define BZ_HDR_B 2
---
>  BZ_HDR_B 2
158c158
< #define BZ_HDR_B 2
---
> define  2
158c158
< #define BZ_HDR_B 2
---
>   2
158c158
< #define BZ_HDR_B 2
---
> define BZ_HDR_B 
158c158
< #define BZ_HDR_B 2
---
>  BZ_HDR_B 
158c158
< #define BZ_HDR_B 2
---
> define  
158c158
< #define BZ_HDR_B 2
---
>   
158c158
< #define BZ_HDR_B 2
---
> # BZ_HDR_B 2
158c158
< #define BZ_HDR_B 2
---
> #  2
(89.5 %, 21482 bytes)
159c159
< #define BZ_HDR_Z 10
---
>   
159c159
< #define BZ_HDR_Z 10
---
> # BZ_HDR_Z 10
159c159
< #define BZ_HDR_Z 10
---
> #  10
(89.5 %, 21465 bytes)
160c160
< #define BZ_HDR_h 8
---
>   
160c160
< #define BZ_HDR_h 8
---
> # BZ_HDR_h 8
160c160
< #define BZ_HDR_h 8
---
> #  8
(89.5 %, 21449 bytes)
161c161
< #define BZ_HDR_0 0
---
>   
161c161
< #define BZ_HDR_0 0
---
> # BZ_HDR_0 0
161c161
< #define BZ_HDR_0 0
---
> #  0
(89.5 %, 21433 bytes)
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
>   
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> # BZ_MAX_ALPHA_SIZE 8
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> #  8
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> # BZ_MAX_ALPHA_SIZE 
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> #  
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> # BZ_MAX_ALPHA_SIZE 8
> define BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #  8
> define BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> # BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #  
> define BZ_MAX_CODE_LEN 3
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define  8
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define  
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define  8
> define BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define  
> define BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define  8
> # BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define  
> # BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define  8
>  BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define  
>  BZ_MAX_CODE_LEN 3
163c163
< #define BZ_MAX_ALPHA_SIZE 8
---
> #define BZ_MAX_ALPHA_SIZE 
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
> define BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
> # BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
>  BZ_MAX_CODE_LEN 3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
> #define  3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
> define  3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
> #  3
163,164c163,164
< #define BZ_MAX_ALPHA_SIZE 8
< #define BZ_MAX_CODE_LEN 3
---
> #define BZ_MAX_ALPHA_SIZE 
>   3
164c164
< #define BZ_MAX_CODE_LEN 3
---
> define BZ_MAX_CODE_LEN 3
164c164
< #define BZ_MAX_CODE_LEN 3
---
>  BZ_MAX_CODE_LEN 3
164c164
< #define BZ_MAX_CODE_LEN 3
---
> define  3
164c164
< #define BZ_MAX_CODE_LEN 3
---
>   3
164c164
< #define BZ_MAX_CODE_LEN 3
---
> define BZ_MAX_CODE_LEN 
164c164
< #define BZ_MAX_CODE_LEN 3
---
>  BZ_MAX_CODE_LEN 
164c164
< #define BZ_MAX_CODE_LEN 3
---
> define  
164c164
< #define BZ_MAX_CODE_LEN 3
---
>   
164c164
< #define BZ_MAX_CODE_LEN 3
---
> # BZ_MAX_CODE_LEN 3
164c164
< #define BZ_MAX_CODE_LEN 3
---
> #  3
(89.6 %, 21410 bytes)
166c166
< #define BZ_RUNA 0
---
>   
166c166
< #define BZ_RUNA 0
---
> # BZ_RUNA 0
166c166
< #define BZ_RUNA 0
---
> #  0
(89.6 %, 21395 bytes)
167c167
< #define BZ_RUNB 1
---
>   
167c167
< #define BZ_RUNB 1
---
> # BZ_RUNB 1
167c167
< #define BZ_RUNB 1
---
> #  1
(89.6 %, 21380 bytes)
169c169
< #define BZ_N_GROUPS 6
---
>   
169c169
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 6
169c169
< #define BZ_N_GROUPS 6
---
> #  6
169c169
< #define BZ_N_GROUPS 6
---
> # BZ_N_GROUPS 
169c169
< #define BZ_N_GROUPS 6
---
> #  
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> # BZ_N_GROUPS 6
> define BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #  6
> define BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> # BZ_N_GROUPS 
> define BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #  
> define BZ_G_SIZE 50
169c169
< #define BZ_N_GROUPS 6
---
> #define  6
169c169
< #define BZ_N_GROUPS 6
---
> #define  
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  6
> define BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  
> define BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  6
> # BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  
> # BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  6
>  BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define  
>  BZ_G_SIZE 50
169c169
< #define BZ_N_GROUPS 6
---
> #define BZ_N_GROUPS 
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> define BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> # BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
>  BZ_G_SIZE 50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> #define  50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> define  50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
> #  50
169,170c169,170
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE 50
---
> #define BZ_N_GROUPS 
>   50
170c170
< #define BZ_G_SIZE 50
---
> define BZ_G_SIZE 50
170c170
< #define BZ_G_SIZE 50
---
>  BZ_G_SIZE 50
170c170
< #define BZ_G_SIZE 50
---
> define  50
170c170
< #define BZ_G_SIZE 50
---
>   50
170c170
< #define BZ_G_SIZE 50
---
> define BZ_G_SIZE 
170c170
< #define BZ_G_SIZE 50
---
>  BZ_G_SIZE 
170c170
< #define BZ_G_SIZE 50
---
> define  
170c170
< #define BZ_G_SIZE 50
---
>   
170c170
< #define BZ_G_SIZE 50
---
> # BZ_G_SIZE 50
170c170
< #define BZ_G_SIZE 50
---
> #  50
170c170
< #define BZ_G_SIZE 50
---
> # BZ_G_SIZE 
170c170
< #define BZ_G_SIZE 50
---
> #  
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> # BZ_G_SIZE 50
> define BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #  50
> define BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> # BZ_G_SIZE 
> define BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #  
> define BZ_N_ITERS 4
170c170
< #define BZ_G_SIZE 50
---
> #define  50
170c170
< #define BZ_G_SIZE 50
---
> #define  
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  50
> define BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  
> define BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  50
> # BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  
> # BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  50
>  BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define  
>  BZ_N_ITERS 4
170c170
< #define BZ_G_SIZE 50
---
> #define BZ_G_SIZE 
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> define BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> # BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
>  BZ_N_ITERS 4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> #define  4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> define  4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
> #  4
170,171c170,171
< #define BZ_G_SIZE 50
< #define BZ_N_ITERS 4
---
> #define BZ_G_SIZE 
>   4
171c171
< #define BZ_N_ITERS 4
---
> define BZ_N_ITERS 4
171c171
< #define BZ_N_ITERS 4
---
>  BZ_N_ITERS 4
171c171
< #define BZ_N_ITERS 4
---
> define  4
171c171
< #define BZ_N_ITERS 4
---
>   4
171c171
< #define BZ_N_ITERS 4
---
> define BZ_N_ITERS 
171c171
< #define BZ_N_ITERS 4
---
>  BZ_N_ITERS 
171c171
< #define BZ_N_ITERS 4
---
> define  
171c171
< #define BZ_N_ITERS 4
---
>   
171c171
< #define BZ_N_ITERS 4
---
> # BZ_N_ITERS 4
171c171
< #define BZ_N_ITERS 4
---
> #  4
(89.6 %, 21362 bytes)
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
>    + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #  2 + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #   + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS 2  0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #  2  0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> # BZ_MAX_SELECTORS   0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #    0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2 + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define   + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2  0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define    0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2 +  / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define   +  / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define  2   / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define     / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS 2 + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS  +  / BZ_G_SIZE
(89.6 %, 21361 bytes)
173c173
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0  BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS  + 0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     BZ_G_SIZE
(89.6 %, 21360 bytes)
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / 
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / BZ_G_SIZE
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     BZ_G_SIZE
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS    / 
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0  BZ_G_SIZE
173c173
< #define BZ_MAX_SELECTORS   0 / BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS   0  
(89.6 %, 21358 bytes)
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          \
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #define                                                           \
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define                                                           \
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #                                                           \
173c173
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS     
175c175
< #define BZ_RAND_DECLS                                                          \
---
>                                                            \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          \
175c175
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define                                                           \
175c175
< #define BZ_RAND_DECLS                                                          \
---
>                                                            \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define BZ_RAND_DECLS                                                          
175c175
< #define BZ_RAND_DECLS                                                          \
---
>  BZ_RAND_DECLS                                                          
175c175
< #define BZ_RAND_DECLS                                                          \
---
> define                                                           
175c175
< #define BZ_RAND_DECLS                                                          \
---
>                                                            
175c175
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #                                                           \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> # BZ_RAND_DECLS                                                          
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #                                                           
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> # BZ_RAND_DECLS                                                          \
>    rNToGo;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #                                                           \
>    rNToGo;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> # BZ_RAND_DECLS                                                          
>    rNToGo;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #                                                           
>    rNToGo;                                                                \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #define                                                           \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #define                                                           
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           \
>    rNToGo;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           
>    rNToGo;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           \
>   Int32 ;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           
>   Int32 ;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           \
>    ;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define                                                           
>    ;                                                                \
175c175
< #define BZ_RAND_DECLS                                                          \
---
> #define BZ_RAND_DECLS                                                          
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>    rNToGo;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>   Int32 ;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>    ;                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>   Int32 rNToGo                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>    rNToGo                                                                \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>   Int32                                                                 \
175,176c175,176
< #define BZ_RAND_DECLS                                                          \
<   Int32 rNToGo;                                                                \
---
> #define BZ_RAND_DECLS                                                          
>                                                                    \
176c176
<   Int32 rNToGo;                                                                \
---
>    rNToGo;                                                                \
176c176
<   Int32 rNToGo;                                                                \
---
>    ;                                                                \
176c176
<   Int32 rNToGo;                                                                \
---
>    rNToGo                                                                \
176c176
<   Int32 rNToGo;                                                                \
---
>                                                                    \
(89.6 %, 21347 bytes)
176c176
<    ;                                                                \
---
>                                                                    
176,177c176,177
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    \
>    rTPos
176,177c176,177
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    
>    rTPos
176,177c176,177
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    \
>   Int32 
176,177c176,177
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    
>   Int32 
176,177c176,177
<    ;                                                                \
<   Int32 rTPos
---
>                                                                    \
>    
(89.6 %, 21341 bytes)
176c176
<                                                                    \
---
>                                                                    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
176,177c176,177
<                                                                    \
<   Int32 
---
>                                                                    
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
176c176
<                                                                    \
---
>                                                                    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
176,177c176,177
<                                                                    \
<   Int32 
---
>                                                                    
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
177c177
<   Int32 
---
>    
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      \
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define                                                       \
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       \
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> #                                                       \
177c177
<   Int32 
---
>    
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        \
(89.6 %, 21336 bytes)
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define BZ_RAND_INIT_MASK                                                      
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>  BZ_RAND_INIT_MASK                                                      
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> define                                                       
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
>                                                        
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> #                                                       \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> # BZ_RAND_INIT_MASK                                                      
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> #                                                       
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> # BZ_RAND_INIT_MASK                                                      \
>   ->rNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #                                                       \
>   ->rNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> # BZ_RAND_INIT_MASK                                                      
>   ->rNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #                                                       
>   ->rNToGo = 0;                                                               \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define                                                       \
179c179
< #define BZ_RAND_INIT_MASK                                                      \
---
> #define                                                       
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       \
>   ->rNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       
>   ->rNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       \
>   srNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       
>   srNToGo = 0;                                                               \
179,180c179,180
< #define BZ_RAND_INIT_MASK                                                      \
<   s->rNToGo = 0;                                                               \
---
> #define                                                       \
>   rNToGo = 0;                                                               \
(89.6 %, 21317 bytes)
179,180c179,180
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>   srNToGo = ;                                                               \
179,180c179,180
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>    = ;                                                               \
179,180c179,180
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>   srNToGo  ;                                                               \
179,180c179,180
< #define                                                       \
<   srNToGo = 0;                                                               \
---
> #define                                                       
>     ;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>    = 0;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>     0;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>    = ;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>     ;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>    = 0                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>     0                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>    =                                                                \
180c180
<   srNToGo = 0;                                                               \
---
>                                                                    \
180c180
<   srNToGo = 0;                                                               \
---
>   srNToGo  0;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>   srNToGo  ;                                                               \
180c180
<   srNToGo = 0;                                                               \
---
>   srNToGo  0                                                               \
(89.6 %, 21316 bytes)
180c180
<   srNToGo  0;                                                               \
---
>   srNToGo  ;                                                               \
180c180
<   srNToGo  0;                                                               \
---
>   srNToGo                                                                 \
(89.6 %, 21315 bytes)
180c180
<   srNToGo  ;                                                               \
---
>   srNToGo                                                                 \
180c180
<   srNToGo  ;                                                               \
---
>   srNToGo                                                                 
180,181c180,181
<   srNToGo  ;                                                               \
<   s->rTPos = 0
---
>   srNToGo                                                                 \
>   ->rTPos = 0
(89.6 %, 21314 bytes)
180c180
<   srNToGo                                                                 \
---
>   srNToGo                                                                 
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   ->rTPos = 0
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   srTPos = 0
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   rTPos = 0
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   s-> = 0
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   -> = 0
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>   s = 0
180,181c180,181
<   srNToGo                                                                 \
<   s->rTPos = 0
---
>   srNToGo                                                                 
>    = 0
181c181
<   s->rTPos = 0
---
>   ->rTPos = 0
181c181
<   s->rTPos = 0
---
>   rTPos = 0
(89.6 %, 21313 bytes)
181c181
<   ->rTPos = 0
---
>   rTPos = 0
181c181
<   ->rTPos = 0
---
>    = 0
181c181
<   ->rTPos = 0
---
>   rTPos  0
(89.6 %, 21311 bytes)
181c181
<   rTPos = 0
---
>    = 0
181c181
<   rTPos = 0
---
>     0
181c181
<   rTPos = 0
---
>    = 
(89.6 %, 21306 bytes)
181c181
<    = 0
---
>     0
181c181
<    = 0
---
>     
181c181
<    = 0
---
>     0
183c183
< #define BZ_RAND_MASK 1
---
> define BZ_RAND_MASK 1
(89.6 %, 21305 bytes)
181c181
<     0
---
>     
181c181
<     0
---
>     
183c183
< #define BZ_RAND_MASK 1
---
> define BZ_RAND_MASK 1
181c181
<     0
---
>     
183c183
< #define BZ_RAND_MASK 1
---
> # BZ_RAND_MASK 1
181c181
<     0
---
>     
183c183
< #define BZ_RAND_MASK 1
---
>  BZ_RAND_MASK 1
181c181
<     0
---
>     
183c183
< #define BZ_RAND_MASK 1
---
> #define  1
181c181
<     0
---
>     
183c183
< #define BZ_RAND_MASK 1
---
> define  1
181c181
<     0
---
>     
183c183
< #define BZ_RAND_MASK 1
---
> #  1
(89.6 %, 21304 bytes)
183c183
< #define BZ_RAND_MASK 1
---
> define BZ_RAND_MASK 1
183c183
< #define BZ_RAND_MASK 1
---
>  BZ_RAND_MASK 1
183c183
< #define BZ_RAND_MASK 1
---
> define  1
183c183
< #define BZ_RAND_MASK 1
---
>   1
183c183
< #define BZ_RAND_MASK 1
---
> define BZ_RAND_MASK 
183c183
< #define BZ_RAND_MASK 1
---
>  BZ_RAND_MASK 
183c183
< #define BZ_RAND_MASK 1
---
> define  
183c183
< #define BZ_RAND_MASK 1
---
>   
183c183
< #define BZ_RAND_MASK 1
---
> # BZ_RAND_MASK 1
183c183
< #define BZ_RAND_MASK 1
---
> #  1
(89.6 %, 21284 bytes)
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
>                                                         
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> # BZ_RAND_UPD_MASK                                                       \
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> #                                                        \
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> # BZ_RAND_UPD_MASK                                                       
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> #                                                        
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> # BZ_RAND_UPD_MASK                                                       \
>                                                                              \
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #                                                        \
>                                                                              \
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> # BZ_RAND_UPD_MASK                                                       
>                                                                              \
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #                                                        
>                                                                              \
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define                                                        \
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define                                                        
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        \
>                                                                              \
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        
>                                                                              \
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        \
>   if                                                                           
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        
>   if                                                                           
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        \
>                                                                              
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define                                                        
>                                                                              
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define BZ_RAND_UPD_MASK                                                       
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              \
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define BZ_RAND_UPD_MASK                                                       
>   if                                                                           
185,186c185,186
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              
185c185
< #define BZ_RAND_UPD_MASK                                                       \
---
> #define BZ_RAND_UPD_MASK                                                       
187c187
<     s->rNToGo == 0 s->rNToGo--;
---
>     ->rNToGo == 0 s->rNToGo--;
185,187c185,187
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo == 0 s->rNToGo--;
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              \
>     ->rNToGo == 0 s->rNToGo--;
185,187c185,187
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo == 0 s->rNToGo--;
---
> #define BZ_RAND_UPD_MASK                                                       
>   if                                                                           
>     ->rNToGo == 0 s->rNToGo--;
185,187c185,187
< #define BZ_RAND_UPD_MASK                                                       \
<   if                                                                           \
<     s->rNToGo == 0 s->rNToGo--;
---
> #define BZ_RAND_UPD_MASK                                                       
>                                                                              
>     ->rNToGo == 0 s->rNToGo--;
186c186
<   if                                                                           \
---
>                                                                              \
186c186
<   if                                                                           \
---
>                                                                              
186,187c186,187
<   if                                                                           \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              \
>     ->rNToGo == 0 s->rNToGo--;
(89.6 %, 21282 bytes)
186c186
<                                                                              \
---
>                                                                              
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>     ->rNToGo == 0 s->rNToGo--;
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>     srNToGo == 0 s->rNToGo--;
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>     rNToGo == 0 s->rNToGo--;
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>     s-> == 0 s->rNToGo--;
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>     -> == 0 s->rNToGo--;
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>     s == 0 s->rNToGo--;
186,187c186,187
<                                                                              \
<     s->rNToGo == 0 s->rNToGo--;
---
>                                                                              
>      == 0 s->rNToGo--;
187c187
<     s->rNToGo == 0 s->rNToGo--;
---
>     ->rNToGo == 0 s->rNToGo--;
187c187
<     s->rNToGo == 0 s->rNToGo--;
---
>     rNToGo == 0 s->rNToGo--;
(89.6 %, 21281 bytes)
187c187
<     ->rNToGo == 0 s->rNToGo--;
---
>     rNToGo == 0 s->rNToGo--;
187c187
<     ->rNToGo == 0 s->rNToGo--;
---
>      == 0 s->rNToGo--;
(89.6 %, 21279 bytes)
187c187
<     rNToGo == 0 s->rNToGo--;
---
>      == 0 s->rNToGo--;
187c187
<     rNToGo == 0 s->rNToGo--;
---
>       0 s->rNToGo--;
187c187
<     rNToGo == 0 s->rNToGo--;
---
>      ==  s->rNToGo--;
(89.6 %, 21273 bytes)
187c187
<      == 0 s->rNToGo--;
---
>       0 s->rNToGo--;
187c187
<      == 0 s->rNToGo--;
---
>        s->rNToGo--;
(89.6 %, 21271 bytes)
187c187
<       0 s->rNToGo--;
---
>        s->rNToGo--;
187c187
<       0 s->rNToGo--;
---
>        ->rNToGo--;
(89.6 %, 21270 bytes)
187c187
<        s->rNToGo--;
---
>        ->rNToGo--;
187c187
<        s->rNToGo--;
---
>        rNToGo--;
187c187
<        s->rNToGo--;
---
>        ->--;
(89.6 %, 21269 bytes)
187c187
<        ->rNToGo--;
---
>        rNToGo--;
187c187
<        ->rNToGo--;
---
>        --;
(89.6 %, 21267 bytes)
187c187
<        rNToGo--;
---
>        --;
187c187
<        rNToGo--;
---
>        ;
187c187
<        rNToGo--;
---
>        --
(89.6 %, 21261 bytes)
187c187
<        --;
---
>        ;
187c187
<        --;
---
>        
(89.6 %, 21259 bytes)
187c187
<        ;
---
>        
187c187
<        ;
---
>        
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> define BZ_INITIALISE_CRCcrcVar
187c187
<        ;
---
>        
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> # BZ_INITIALISE_CRCcrcVar
187c187
<        ;
---
>        
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
>  BZ_INITIALISE_CRCcrcVar
187c187
<        ;
---
>        
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> #define 
187c187
<        ;
---
>        
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> define 
187c187
<        ;
---
>        
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> # 
(89.6 %, 21258 bytes)
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> define BZ_INITIALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
>  BZ_INITIALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> define 
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
>  
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> define BZ_INITIALISE_CRCcrcVar
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> define BZ_FINALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
>  BZ_INITIALISE_CRCcrcVar
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> define BZ_FINALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> define 
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> define BZ_FINALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
>  
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> define BZ_FINALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> # BZ_INITIALISE_CRCcrcVar
189c189
< #define BZ_INITIALISE_CRCcrcVar
---
> # 
(89.6 %, 21228 bytes)
191c191
< #define BZ_FINALISE_CRCcrcVar
---
>  
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> define BZ_FINALISE_CRCcrcVar
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> define BZ_UPDATE_CRCcrcVar , cha
191c191
< #define BZ_FINALISE_CRCcrcVar
---
>  BZ_FINALISE_CRCcrcVar
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> define BZ_UPDATE_CRCcrcVar , cha
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> define 
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> define BZ_UPDATE_CRCcrcVar , cha
191c191
< #define BZ_FINALISE_CRCcrcVar
---
>  
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> define BZ_UPDATE_CRCcrcVar , cha
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> # BZ_FINALISE_CRCcrcVar
191c191
< #define BZ_FINALISE_CRCcrcVar
---
> # 
(89.7 %, 21200 bytes)
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
>   , cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> define BZ_UPDATE_CRCcrcVar  cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
>  BZ_UPDATE_CRCcrcVar  cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> define   cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
>    cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> # BZ_UPDATE_CRCcrcVar , cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> #  , cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> # BZ_UPDATE_CRCcrcVar  cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> #   cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> # BZ_UPDATE_CRCcrcVar , 
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> #  , 
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> # BZ_UPDATE_CRCcrcVar  
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> #   
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> #define  , cha
193c193
< #define BZ_UPDATE_CRCcrcVar , cha
---
> #define   cha
(89.7 %, 21171 bytes)
195c195
< #define BZ_M_IDLE 1
---
>   
195c195
< #define BZ_M_IDLE 1
---
> # BZ_M_IDLE 1
195c195
< #define BZ_M_IDLE 1
---
> #  1
(89.7 %, 21154 bytes)
196c196
< #define BZ_M_RUNNING 2
---
>   
196c196
< #define BZ_M_RUNNING 2
---
> # BZ_M_RUNNING 2
196c196
< #define BZ_M_RUNNING 2
---
> #  2
196c196
< #define BZ_M_RUNNING 2
---
> # BZ_M_RUNNING 
196c196
< #define BZ_M_RUNNING 2
---
> #  
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> # BZ_M_RUNNING 2
> define BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #  2
> define BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> # BZ_M_RUNNING 
> define BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #  
> define BZ_M_FLUSHING 3
196c196
< #define BZ_M_RUNNING 2
---
> #define  2
196c196
< #define BZ_M_RUNNING 2
---
> #define  
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  2
> define BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  
> define BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  2
> # BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  
> # BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  2
>  BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define  
>  BZ_M_FLUSHING 3
196c196
< #define BZ_M_RUNNING 2
---
> #define BZ_M_RUNNING 
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> define BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> # BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
>  BZ_M_FLUSHING 3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> #define  3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> define  3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
> #  3
196,197c196,197
< #define BZ_M_RUNNING 2
< #define BZ_M_FLUSHING 3
---
> #define BZ_M_RUNNING 
>   3
197c197
< #define BZ_M_FLUSHING 3
---
> define BZ_M_FLUSHING 3
197c197
< #define BZ_M_FLUSHING 3
---
>  BZ_M_FLUSHING 3
197c197
< #define BZ_M_FLUSHING 3
---
> define  3
197c197
< #define BZ_M_FLUSHING 3
---
>   3
197c197
< #define BZ_M_FLUSHING 3
---
> define BZ_M_FLUSHING 
197c197
< #define BZ_M_FLUSHING 3
---
>  BZ_M_FLUSHING 
197c197
< #define BZ_M_FLUSHING 3
---
> define  
197c197
< #define BZ_M_FLUSHING 3
---
>   
197c197
< #define BZ_M_FLUSHING 3
---
> # BZ_M_FLUSHING 3
197c197
< #define BZ_M_FLUSHING 3
---
> #  3
(89.7 %, 21133 bytes)
198c198
< #define BZ_M_FINISHING 4
---
>   
198c198
< #define BZ_M_FINISHING 4
---
> # BZ_M_FINISHING 4
198c198
< #define BZ_M_FINISHING 4
---
> #  4
(89.7 %, 21111 bytes)
200c200
< #define BZ_S_OUTPUT 1
---
>   
200c200
< #define BZ_S_OUTPUT 1
---
> # BZ_S_OUTPUT 1
200c200
< #define BZ_S_OUTPUT 1
---
> #  1
(89.7 %, 21092 bytes)
201c201
< #define BZ_S_INPUT 2
---
>   
201c201
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 2
201c201
< #define BZ_S_INPUT 2
---
> #  2
201c201
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 
201c201
< #define BZ_S_INPUT 2
---
> #  
201c201
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 2
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #  2
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> # BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #  
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define  2
201c201
< #define BZ_S_INPUT 2
---
> #define  
201c201
< #define BZ_S_INPUT 2
---
> #define  2
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define  
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define  2
203c203
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define  
203c203
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define  2
203c203
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define  
203c203
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
> #define  2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
> define  2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
> #  2
201c201
< #define BZ_S_INPUT 2
---
> #define BZ_S_INPUT 
203c203
< #define BZ_N_RADIX 2
---
>   2
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
203c203
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
203c203
< #define BZ_N_RADIX 2
---
> define  2
203c203
< #define BZ_N_RADIX 2
---
>   2
203c203
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 
203c203
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 
203c203
< #define BZ_N_RADIX 2
---
> define  
203c203
< #define BZ_N_RADIX 2
---
>   
203c203
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
203c203
< #define BZ_N_RADIX 2
---
> #  2
(89.7 %, 21074 bytes)
204c204
< #define BZ_N_QSORT 2
---
>   
204c204
< #define BZ_N_QSORT 2
---
> # BZ_N_QSORT 2
204c204
< #define BZ_N_QSORT 2
---
> #  2
(89.7 %, 21056 bytes)
205c205
< #define BZ_N_SHELL 8
---
>   
205c205
< #define BZ_N_SHELL 8
---
> # BZ_N_SHELL 8
205c205
< #define BZ_N_SHELL 8
---
> #  8
(89.7 %, 21038 bytes)
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
>    + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT  + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #   + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #  BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> # BZ_N_OVERSHOOT   BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #    BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define   + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define BZ_N_OVERSHOOT BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define  BZ_N_RADIX  BZ_N_QSORT + BZ_N_SHELL + 2
(89.7 %, 21024 bytes)
206c206
< #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define   + BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define    BZ_N_QSORT + BZ_N_SHELL + 2
206c206
< #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define   +  + BZ_N_SHELL + 2
206c206
< #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define     + BZ_N_SHELL + 2
206c206
< #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define   + BZ_N_QSORT  BZ_N_SHELL + 2
206c206
< #define  BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define    BZ_N_QSORT  BZ_N_SHELL + 2
(89.7 %, 21013 bytes)
206c206
< #define    BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define      BZ_N_SHELL + 2
206c206
< #define    BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define     +  + 2
206c206
< #define    BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define       + 2
206c206
< #define    BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define     + BZ_N_SHELL  2
206c206
< #define    BZ_N_QSORT + BZ_N_SHELL + 2
---
> #define      BZ_N_SHELL  2
(89.8 %, 21002 bytes)
206c206
< #define      BZ_N_SHELL + 2
---
> #define        2
206c206
< #define      BZ_N_SHELL + 2
---
> #define       + 
206c206
< #define      BZ_N_SHELL + 2
---
> #define        
206c206
< #define      BZ_N_SHELL + 2
---
> #define       + 2
208c208
< typedef struct {
---
>  struct {
206c206
< #define      BZ_N_SHELL + 2
---
> #define        2
208c208
< typedef struct {
---
>  struct {
206c206
< #define      BZ_N_SHELL + 2
---
> #define       + 
208c208
< typedef struct {
---
>  struct {
206c206
< #define      BZ_N_SHELL + 2
---
> #define        
208c208
< typedef struct {
---
>  struct {
206c206
< #define      BZ_N_SHELL + 2
---
> #define      BZ_N_SHELL  2
206c206
< #define      BZ_N_SHELL + 2
---
> #define      BZ_N_SHELL  
206c206
< #define      BZ_N_SHELL + 2
---
> #define      BZ_N_SHELL  2
208c208
< typedef struct {
---
>  struct {
(89.8 %, 21001 bytes)
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
>  struct {
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
> typedef  {
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
>   {
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
> typedef struct 
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
>  struct 
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
> typedef  
206c206
< #define      BZ_N_SHELL  2
---
> #define      BZ_N_SHELL  
208c208
< typedef struct {
---
>   
208c208
< typedef struct {
---
>  struct {
208c208
< typedef struct {
---
>   {
208c208
< typedef struct {
---
>  struct 
208c208
< typedef struct {
---
>   
208c208
< typedef struct {
---
>  struct {
210c210
<   bz_stream *strm;
---
>    *strm;
(89.8 %, 21000 bytes)
208c208
< typedef struct {
---
>  struct {
208c208
< typedef struct {
---
>   {
208c208
< typedef struct {
---
>  struct 
208c208
< typedef struct {
---
>   
208c208
< typedef struct {
---
>  struct {
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
>   {
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
>  struct 
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
>   
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
> typedef  {
208c208
< typedef struct {
---
> typedef  
208c208
< typedef struct {
---
> typedef  {
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
> typedef  
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
> typedef  {
210c210
<   bz_stream *strm;
---
>   bz_stream strm;
208c208
< typedef struct {
---
> typedef  
210c210
<   bz_stream *strm;
---
>   bz_stream strm;
208c208
< typedef struct {
---
> typedef  {
210c210
<   bz_stream *strm;
---
>    strm;
208c208
< typedef struct {
---
> typedef  
210c210
<   bz_stream *strm;
---
>    strm;
208c208
< typedef struct {
---
> typedef struct 
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>    *strm;
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>   bz_stream strm;
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>    strm;
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>   bz_stream *;
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>    *;
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>   bz_stream ;
208c208
< typedef struct {
---
> typedef struct 
210c210
<   bz_stream *strm;
---
>    ;
210c210
<   bz_stream *strm;
---
>    *strm;
210c210
<   bz_stream *strm;
---
>    strm;
210c210
<   bz_stream *strm;
---
>    *;
210c210
<   bz_stream *strm;
---
>    ;
210c210
<   bz_stream *strm;
---
>    *strm
210c210
<   bz_stream *strm;
---
>    strm
210c210
<   bz_stream *strm;
---
>    *
210c210
<   bz_stream *strm;
---
>    
(89.8 %, 20986 bytes)
210c210
<    ;
---
>    
212c212
<   Int32 mode;
---
>    ;
210c210
<    ;
---
>    
212c212
<   Int32 mode;
---
>   Int32 mode
210c210
<    ;
---
>    
212c212
<   Int32 mode;
---
>    mode
210c210
<    ;
---
>    
212c212
<   Int32 mode;
---
>   Int32 
210c210
<    ;
---
>    
212c212
<   Int32 mode;
---
>    
(89.8 %, 20976 bytes)
211a212
>    
213d213
<   Int32 state;
212,213c212,213
<    ;
<   Int32 state;
---
>    
>   Int32 state
212,213c212,213
<    ;
<   Int32 state;
---
>    
>    state
212,213c212,213
<    ;
<   Int32 state;
---
>    
>   Int32 
212,213c212,213
<    ;
<   Int32 state;
---
>    
>    
(89.8 %, 20965 bytes)
213c213
<    ;
---
>    
215c215
<   UInt32 avail_in_expect;
---
>    ;
213c213
<    ;
---
>    
215c215
<   UInt32 avail_in_expect;
---
>   UInt32 avail_in_expect
213c213
<    ;
---
>    
215c215
<   UInt32 avail_in_expect;
---
>    avail_in_expect
213c213
<    ;
---
>    
215c215
<   UInt32 avail_in_expect;
---
>   UInt32 
213c213
<    ;
---
>    
215c215
<   UInt32 avail_in_expect;
---
>    
(89.8 %, 20943 bytes)
215c215
<    ;
---
>    
217c217
<   UInt32 *arr1;
---
>    arr1;
215c215
<    ;
---
>    
217c217
<   UInt32 *arr1;
---
>   UInt32 *;
215c215
<    ;
---
>    
217c217
<   UInt32 *arr1;
---
>    *;
215c215
<    ;
---
>    
217c217
<   UInt32 *arr1;
---
>   UInt32 ;
215c215
<    ;
---
>    
217c217
<   UInt32 *arr1;
---
>    ;
217c217
<   UInt32 *arr1;
---
>    *arr1;
217c217
<   UInt32 *arr1;
---
>    arr1;
217c217
<   UInt32 *arr1;
---
>    *;
217c217
<   UInt32 *arr1;
---
>    ;
217c217
<   UInt32 *arr1;
---
>    *arr1
217c217
<   UInt32 *arr1;
---
>    arr1
217c217
<   UInt32 *arr1;
---
>    *
217c217
<   UInt32 *arr1;
---
>    
217c217
<   UInt32 *arr1;
---
>   UInt32 arr1;
217c217
<   UInt32 *arr1;
---
>   UInt32 ;
217c217
<   UInt32 *arr1;
---
>   UInt32 arr1
217c217
<   UInt32 *arr1;
---
>   UInt32 
217,218c217,218
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1;
>    *arr2;
217,218c217,218
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 ;
>    *arr2;
217,218c217,218
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>    *arr2;
217,218c217,218
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 
>    *arr2;
217c217
<   UInt32 *arr1;
---
>   UInt32 *;
217c217
<   UInt32 *arr1;
---
>   UInt32 *
217,218c217,218
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *;
>    *arr2;
217,218c217,218
<   UInt32 *arr1;
<   UInt32 *arr2;
---
>   UInt32 *
>    *arr2;
(89.8 %, 20942 bytes)
217c217
<   UInt32 arr1;
---
>   UInt32 ;
217c217
<   UInt32 arr1;
---
>   UInt32 
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 ;
>    *arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 
>    *arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 ;
>   UInt32 arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 
>   UInt32 arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 ;
>    arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 
>    arr2;
217c217
<   UInt32 arr1;
---
>   UInt32 arr1
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>    *arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>   UInt32 arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>    arr2;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>   UInt32 *;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>    *;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>   UInt32 ;
217,218c217,218
<   UInt32 arr1;
<   UInt32 *arr2;
---
>   UInt32 arr1
>    ;
218c218
<   UInt32 *arr2;
---
>    *arr2;
218c218
<   UInt32 *arr2;
---
>    arr2;
218c218
<   UInt32 *arr2;
---
>    *;
218c218
<   UInt32 *arr2;
---
>    ;
218c218
<   UInt32 *arr2;
---
>    *arr2
218c218
<   UInt32 *arr2;
---
>    arr2
218c218
<   UInt32 *arr2;
---
>    *
218c218
<   UInt32 *arr2;
---
>    
218c218
<   UInt32 *arr2;
---
>   UInt32 arr2;
218c218
<   UInt32 *arr2;
---
>   UInt32 ;
218c218
<   UInt32 *arr2;
---
>   UInt32 arr2
218c218
<   UInt32 *arr2;
---
>   UInt32 
218,219c218,219
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2;
>    *ftab;
218,219c218,219
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 ;
>    *ftab;
218,219c218,219
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>    *ftab;
218,219c218,219
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 
>    *ftab;
218c218
<   UInt32 *arr2;
---
>   UInt32 *;
218c218
<   UInt32 *arr2;
---
>   UInt32 *
218,219c218,219
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *;
>    *ftab;
218,219c218,219
<   UInt32 *arr2;
<   UInt32 *ftab;
---
>   UInt32 *
>    *ftab;
(89.8 %, 20941 bytes)
218c218
<   UInt32 arr2;
---
>   UInt32 ;
218c218
<   UInt32 arr2;
---
>   UInt32 
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 ;
>    *ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 
>    *ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 ;
>   UInt32 ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 
>   UInt32 ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 ;
>    ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 
>    ftab;
218c218
<   UInt32 arr2;
---
>   UInt32 arr2
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>    *ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>   UInt32 ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>    ftab;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>   UInt32 *;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>    *;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>   UInt32 ;
218,219c218,219
<   UInt32 arr2;
<   UInt32 *ftab;
---
>   UInt32 arr2
>    ;
219c219
<   UInt32 *ftab;
---
>    *ftab;
219c219
<   UInt32 *ftab;
---
>    ftab;
219c219
<   UInt32 *ftab;
---
>    *;
219c219
<   UInt32 *ftab;
---
>    ;
219c219
<   UInt32 *ftab;
---
>    *ftab
219c219
<   UInt32 *ftab;
---
>    ftab
219c219
<   UInt32 *ftab;
---
>    *
219c219
<   UInt32 *ftab;
---
>    
219c219
<   UInt32 *ftab;
---
>   UInt32 ftab;
219c219
<   UInt32 *ftab;
---
>   UInt32 ;
219c219
<   UInt32 *ftab;
---
>   UInt32 ftab
219c219
<   UInt32 *ftab;
---
>   UInt32 
219,220c219,220
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 ftab;
>    origPtr;
219,220c219,220
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>    origPtr;
219,220c219,220
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    origPtr;
219,220c219,220
<   UInt32 *ftab;
<   Int32 origPtr;
---
>   UInt32 
>    origPtr;
(89.8 %, 20940 bytes)
219c219
<   UInt32 ftab;
---
>   UInt32 ;
219c219
<   UInt32 ftab;
---
>   UInt32 
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>    origPtr;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 
>    origPtr;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>   Int32 ;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 
>   Int32 ;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ;
>    ;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 
>    ;
219c219
<   UInt32 ftab;
---
>   UInt32 ftab
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    origPtr;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>   Int32 ;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    ;
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>   Int32 origPtr
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    origPtr
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>   Int32 
219,220c219,220
<   UInt32 ftab;
<   Int32 origPtr;
---
>   UInt32 ftab
>    
220c220
<   Int32 origPtr;
---
>    origPtr;
220c220
<   Int32 origPtr;
---
>    ;
(89.8 %, 20927 bytes)
220c220
<    ;
---
>    
222c222
<   UInt32 *ptr;
---
>    ptr;
220c220
<    ;
---
>    
222c222
<   UInt32 *ptr;
---
>   UInt32 *;
220c220
<    ;
---
>    
222c222
<   UInt32 *ptr;
---
>    *;
220c220
<    ;
---
>    
222c222
<   UInt32 *ptr;
---
>   UInt32 ;
220c220
<    ;
---
>    
222c222
<   UInt32 *ptr;
---
>    ;
222c222
<   UInt32 *ptr;
---
>    *ptr;
222c222
<   UInt32 *ptr;
---
>    ptr;
222c222
<   UInt32 *ptr;
---
>    *;
222c222
<   UInt32 *ptr;
---
>    ;
(89.8 %, 20916 bytes)
221a222
>    
223d223
<   UChar *block;
223c223
<   UChar *block;
---
>    *block;
223c223
<   UChar *block;
---
>    block;
223c223
<   UChar *block;
---
>    *;
223c223
<   UChar *block;
---
>    ;
(89.8 %, 20904 bytes)
222a223
>    
224d224
<   UInt16 *mtfv;
224c224
<   UInt16 *mtfv;
---
>    *mtfv;
224c224
<   UInt16 *mtfv;
---
>    mtfv;
224c224
<   UInt16 *mtfv;
---
>    *;
224c224
<   UInt16 *mtfv;
---
>    ;
(89.8 %, 20892 bytes)
223a224
>    
225d225
<   UChar *zbits;
225c225
<   UChar *zbits;
---
>    *zbits;
225c225
<   UChar *zbits;
---
>    zbits;
225c225
<   UChar *zbits;
---
>    *;
225c225
<   UChar *zbits;
---
>    ;
225c225
<   UChar *zbits;
---
>    *zbits
225c225
<   UChar *zbits;
---
>    zbits
225c225
<   UChar *zbits;
---
>    *
225c225
<   UChar *zbits;
---
>    
225c225
<   UChar *zbits;
---
>   UChar zbits;
225c225
<   UChar *zbits;
---
>   UChar ;
225c225
<   UChar *zbits;
---
>   UChar zbits
225c225
<   UChar *zbits;
---
>   UChar 
225c225
<   UChar *zbits;
---
>   UChar zbits;
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar *zbits;
---
>   UChar ;
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar *zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar *zbits;
---
>   UChar 
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar *zbits;
---
>   UChar *;
225c225
<   UChar *zbits;
---
>   UChar *
225c225
<   UChar *zbits;
---
>   UChar *;
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar *zbits;
---
>   UChar *
227c227
<   Int32 workFactor;
---
>    workFactor;
(89.8 %, 20891 bytes)
225c225
<   UChar zbits;
---
>   UChar ;
225c225
<   UChar zbits;
---
>   UChar 
225c225
<   UChar zbits;
---
>   UChar ;
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar zbits;
---
>   UChar 
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar zbits;
---
>   UChar ;
227c227
<   Int32 workFactor;
---
>   Int32 ;
225c225
<   UChar zbits;
---
>   UChar 
227c227
<   Int32 workFactor;
---
>   Int32 ;
225c225
<   UChar zbits;
---
>   UChar ;
227c227
<   Int32 workFactor;
---
>    ;
225c225
<   UChar zbits;
---
>   UChar 
227c227
<   Int32 workFactor;
---
>    ;
225c225
<   UChar zbits;
---
>   UChar zbits
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>    workFactor;
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>   Int32 ;
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>    ;
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>   Int32 workFactor
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>    workFactor
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>   Int32 
225c225
<   UChar zbits;
---
>   UChar zbits
227c227
<   Int32 workFactor;
---
>    
227c227
<   Int32 workFactor;
---
>    workFactor;
227c227
<   Int32 workFactor;
---
>    ;
(89.8 %, 20875 bytes)
227c227
<    ;
---
>    
229c229
<   UInt32 state_in_ch;
---
>    ;
227c227
<    ;
---
>    
229c229
<   UInt32 state_in_ch;
---
>   UInt32 state_in_ch
227c227
<    ;
---
>    
229c229
<   UInt32 state_in_ch;
---
>    state_in_ch
227c227
<    ;
---
>    
229c229
<   UInt32 state_in_ch;
---
>   UInt32 
227c227
<    ;
---
>    
229c229
<   UInt32 state_in_ch;
---
>    
229c229
<   UInt32 state_in_ch;
---
>    state_in_ch;
229c229
<   UInt32 state_in_ch;
---
>    ;
(89.8 %, 20857 bytes)
228a229
>    
230d230
<   Int32 state_in_len;
229,230c229,230
<    ;
<   Int32 state_in_len;
---
>    
>   Int32 state_in_len
229,230c229,230
<    ;
<   Int32 state_in_len;
---
>    
>    state_in_len
229,230c229,230
<    ;
<   Int32 state_in_len;
---
>    
>   Int32 
229,230c229,230
<    ;
<   Int32 state_in_len;
---
>    
>    
(89.8 %, 20839 bytes)
230,231c230,231
<    ;
<   BZ_RAND_DECLS;
---
>    
>   
230c230
<    ;
---
>    
233c233
<   Int32 nblock;
---
>    nblock;
230,231c230,231
<    ;
<   BZ_RAND_DECLS;
---
>    
>   ;
233c233
<   Int32 nblock;
---
>    nblock;
230,231c230,231
<    ;
<   BZ_RAND_DECLS;
---
>    
>   BZ_RAND_DECLS
233c233
<   Int32 nblock;
---
>    nblock;
230,231c230,231
<    ;
<   BZ_RAND_DECLS;
---
>    
>   
233c233
<   Int32 nblock;
---
>    nblock;
231c231
<   BZ_RAND_DECLS;
---
>   ;
231c231
<   BZ_RAND_DECLS;
---
>   
231c231
<   BZ_RAND_DECLS;
---
>   ;
233c233
<   Int32 nblock;
---
>    nblock;
(89.8 %, 20826 bytes)
231c231
<   ;
---
>   
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>    nblock;
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>   Int32 ;
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>    ;
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>   Int32 nblock
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>    nblock
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>   Int32 
231c231
<   ;
---
>   
233c233
<   Int32 nblock;
---
>    
233c233
<   Int32 nblock;
---
>    nblock;
233c233
<   Int32 nblock;
---
>    ;
233c233
<   Int32 nblock;
---
>    nblock
233c233
<   Int32 nblock;
---
>    
(89.8 %, 20825 bytes)
233c233
<   Int32 nblock;
---
>    nblock;
233c233
<   Int32 nblock;
---
>    ;
233c233
<   Int32 nblock;
---
>    nblock
233c233
<   Int32 nblock;
---
>    
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    nblock;
>    nblockMAX;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    ;
>    nblockMAX;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    nblock
>    nblockMAX;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>    
>    nblockMAX;
233c233
<   Int32 nblock;
---
>   Int32 ;
233c233
<   Int32 nblock;
---
>   Int32 
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 ;
>    nblockMAX;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 
>    nblockMAX;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 ;
>   Int32 ;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 
>   Int32 ;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 ;
>    ;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 
>    ;
233c233
<   Int32 nblock;
---
>   Int32 nblock
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    nblockMAX;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>   Int32 ;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    ;
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>   Int32 nblockMAX
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    nblockMAX
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>   Int32 
233,234c233,234
<   Int32 nblock;
<   Int32 nblockMAX;
---
>   Int32 nblock
>    
234c234
<   Int32 nblockMAX;
---
>    nblockMAX;
234c234
<   Int32 nblockMAX;
---
>    ;
(89.8 %, 20810 bytes)
233a234
>    
235d235
<   Int32 numZ;
234,235c234,235
<    ;
<   Int32 numZ;
---
>    
>   Int32 numZ
234,235c234,235
<    ;
<   Int32 numZ;
---
>    
>    numZ
234,235c234,235
<    ;
<   Int32 numZ;
---
>    
>   Int32 
234,235c234,235
<    ;
<   Int32 numZ;
---
>    
>    
235c235
<   Int32 numZ;
---
>    numZ;
235c235
<   Int32 numZ;
---
>    ;
(89.9 %, 20800 bytes)
234a235
>    
236d236
<   Int32 state_out_pos;
235,236c235,236
<    ;
<   Int32 state_out_pos;
---
>    
>   Int32 state_out_pos
235,236c235,236
<    ;
<   Int32 state_out_pos;
---
>    
>    state_out_pos
235,236c235,236
<    ;
<   Int32 state_out_pos;
---
>    
>   Int32 
235,236c235,236
<    ;
<   Int32 state_out_pos;
---
>    
>    
236c236
<   Int32 state_out_pos;
---
>    state_out_pos;
236c236
<   Int32 state_out_pos;
---
>    ;
(89.9 %, 20781 bytes)
236c236
<    ;
---
>    
238c238
<   Int32 nInUse;
---
>    ;
236c236
<    ;
---
>    
238c238
<   Int32 nInUse;
---
>   Int32 nInUse
236c236
<    ;
---
>    
238c238
<   Int32 nInUse;
---
>    nInUse
236c236
<    ;
---
>    
238c238
<   Int32 nInUse;
---
>   Int32 
236c236
<    ;
---
>    
238c238
<   Int32 nInUse;
---
>    
238c238
<   Int32 nInUse;
---
>    nInUse;
238c238
<   Int32 nInUse;
---
>    ;
238c238
<   Int32 nInUse;
---
>    nInUse
238c238
<   Int32 nInUse;
---
>    
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>    nInUse;
>    inUse[6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>    ;
>    inUse[6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>    nInUse
>    inUse[6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>    
>    inUse[6];
238c238
<   Int32 nInUse;
---
>   Int32 ;
238c238
<   Int32 nInUse;
---
>   Int32 
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 ;
>    inUse[6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 
>    inUse[6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 ;
>   Bool [6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 
>   Bool [6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 ;
>    [6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 
>    [6];
238c238
<   Int32 nInUse;
---
>   Int32 nInUse
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>    inUse[6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>   Bool [6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>    [6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>   Bool inUse6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>    inUse6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>   Bool 6];
238,239c238,239
<   Int32 nInUse;
<   Bool inUse[6];
---
>   Int32 nInUse
>    6];
239c239
<   Bool inUse[6];
---
>    inUse[6];
239c239
<   Bool inUse[6];
---
>    [6];
239c239
<   Bool inUse[6];
---
>    inUse6];
239c239
<   Bool inUse[6];
---
>    6];
239c239
<   Bool inUse[6];
---
>    inUse[];
239c239
<   Bool inUse[6];
---
>    [];
239c239
<   Bool inUse[6];
---
>    inUse];
239c239
<   Bool inUse[6];
---
>    ];
239c239
<   Bool inUse[6];
---
>   Bool [6];
239c239
<   Bool inUse[6];
---
>   Bool 6];
239c239
<   Bool inUse[6];
---
>   Bool [];
239c239
<   Bool inUse[6];
---
>   Bool ];
239c239
<   Bool inUse[6];
---
>   Bool [6;
239c239
<   Bool inUse[6];
---
>   Bool 6;
239c239
<   Bool inUse[6];
---
>   Bool [;
239c239
<   Bool inUse[6];
---
>   Bool ;
239c239
<   Bool inUse[6];
---
>   Bool inUse6];
239c239
<   Bool inUse[6];
---
>   Bool inUse];
239c239
<   Bool inUse[6];
---
>   Bool inUse6;
239c239
<   Bool inUse[6];
---
>   Bool inUse;
239c239
<   Bool inUse[6];
---
>   Bool inUse6]
239c239
<   Bool inUse[6];
---
>   Bool inUse]
239c239
<   Bool inUse[6];
---
>   Bool inUse6
239c239
<   Bool inUse[6];
---
>   Bool inUse
239c239
<   Bool inUse[6];
---
>   Bool inUse[];
239c239
<   Bool inUse[6];
---
>   Bool inUse[;
239c239
<   Bool inUse[6];
---
>   Bool inUse[]
239c239
<   Bool inUse[6];
---
>   Bool inUse[
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[];
>    unseqToSeq[6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[;
>    unseqToSeq[6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[]
>    unseqToSeq[6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[
>    unseqToSeq[6];
239c239
<   Bool inUse[6];
---
>   Bool inUse[6;
239c239
<   Bool inUse[6];
---
>   Bool inUse[6
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6;
>    unseqToSeq[6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6
>    unseqToSeq[6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6;
>   UChar [6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6
>   UChar [6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6;
>    [6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6
>    [6];
239c239
<   Bool inUse[6];
---
>   Bool inUse[6]
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>    unseqToSeq[6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>   UChar [6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>    [6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>   UChar unseqToSeq6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>    unseqToSeq6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>   UChar 6];
239,240c239,240
<   Bool inUse[6];
<   UChar unseqToSeq[6];
---
>   Bool inUse[6]
>    6];
240c240
<   UChar unseqToSeq[6];
---
>    unseqToSeq[6];
240c240
<   UChar unseqToSeq[6];
---
>    [6];
240c240
<   UChar unseqToSeq[6];
---
>    unseqToSeq6];
240c240
<   UChar unseqToSeq[6];
---
>    6];
240c240
<   UChar unseqToSeq[6];
---
>    unseqToSeq[];
240c240
<   UChar unseqToSeq[6];
---
>    [];
240c240
<   UChar unseqToSeq[6];
---
>    unseqToSeq];
240c240
<   UChar unseqToSeq[6];
---
>    ];
240c240
<   UChar unseqToSeq[6];
---
>   UChar [6];
240c240
<   UChar unseqToSeq[6];
---
>   UChar 6];
240c240
<   UChar unseqToSeq[6];
---
>   UChar [];
240c240
<   UChar unseqToSeq[6];
---
>   UChar ];
240c240
<   UChar unseqToSeq[6];
---
>   UChar [6;
240c240
<   UChar unseqToSeq[6];
---
>   UChar 6;
240c240
<   UChar unseqToSeq[6];
---
>   UChar [;
240c240
<   UChar unseqToSeq[6];
---
>   UChar ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq6];
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq];
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq6;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq6]
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq]
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq6
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[];
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[]
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[];
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[;
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[]
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6;
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6;
242c242
<   UInt32 bsBuff;
---
>   UInt32 ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6
242c242
<   UInt32 bsBuff;
---
>   UInt32 ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6;
242c242
<   UInt32 bsBuff;
---
>    ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6
242c242
<   UInt32 bsBuff;
---
>    ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>   UInt32 ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>    ;
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>   UInt32 bsBuff
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>    bsBuff
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>   UInt32 
240c240
<   UChar unseqToSeq[6];
---
>   UChar unseqToSeq[6]
242c242
<   UInt32 bsBuff;
---
>    
242c242
<   UInt32 bsBuff;
---
>    bsBuff;
242c242
<   UInt32 bsBuff;
---
>    ;
(89.9 %, 20768 bytes)
241a242
>    
243d243
<   Int32 bsLive;
242,243c242,243
<    ;
<   Int32 bsLive;
---
>    
>   Int32 bsLive
242,243c242,243
<    ;
<   Int32 bsLive;
---
>    
>    bsLive
242,243c242,243
<    ;
<   Int32 bsLive;
---
>    
>   Int32 
242,243c242,243
<    ;
<   Int32 bsLive;
---
>    
>    
243c243
<   Int32 bsLive;
---
>    bsLive;
243c243
<   Int32 bsLive;
---
>    ;
(89.9 %, 20756 bytes)
243c243
<    ;
---
>    
245c245
<   UInt32 blockCRC;
---
>    ;
243c243
<    ;
---
>    
245c245
<   UInt32 blockCRC;
---
>   UInt32 blockCRC
243c243
<    ;
---
>    
245c245
<   UInt32 blockCRC;
---
>    blockCRC
243c243
<    ;
---
>    
245c245
<   UInt32 blockCRC;
---
>   UInt32 
243c243
<    ;
---
>    
245c245
<   UInt32 blockCRC;
---
>    
245c245
<   UInt32 blockCRC;
---
>    blockCRC;
245c245
<   UInt32 blockCRC;
---
>    ;
(89.9 %, 20741 bytes)
244a245
>    
246d246
<   UInt32 combinedCRC;
245,246c245,246
<    ;
<   UInt32 combinedCRC;
---
>    
>   UInt32 combinedCRC
245,246c245,246
<    ;
<   UInt32 combinedCRC;
---
>    
>    combinedCRC
245,246c245,246
<    ;
<   UInt32 combinedCRC;
---
>    
>   UInt32 
245,246c245,246
<    ;
<   UInt32 combinedCRC;
---
>    
>    
246c246
<   UInt32 combinedCRC;
---
>    combinedCRC;
246c246
<   UInt32 combinedCRC;
---
>    ;
(89.9 %, 20723 bytes)
246c246
<    ;
---
>    
248c248
<   Int32 verbosity;
---
>    ;
246c246
<    ;
---
>    
248c248
<   Int32 verbosity;
---
>   Int32 verbosity
246c246
<    ;
---
>    
248c248
<   Int32 verbosity;
---
>    verbosity
246c246
<    ;
---
>    
248c248
<   Int32 verbosity;
---
>   Int32 
246c246
<    ;
---
>    
248c248
<   Int32 verbosity;
---
>    
248c248
<   Int32 verbosity;
---
>    verbosity;
248c248
<   Int32 verbosity;
---
>    ;
(89.9 %, 20708 bytes)
247a248
>    
249d249
<   Int32 blockNo;
248,249c248,249
<    ;
<   Int32 blockNo;
---
>    
>   Int32 blockNo
248,249c248,249
<    ;
<   Int32 blockNo;
---
>    
>    blockNo
248,249c248,249
<    ;
<   Int32 blockNo;
---
>    
>   Int32 
248,249c248,249
<    ;
<   Int32 blockNo;
---
>    
>    
249c249
<   Int32 blockNo;
---
>    blockNo;
249c249
<   Int32 blockNo;
---
>    ;
249c249
<   Int32 blockNo;
---
>    blockNo
249c249
<   Int32 blockNo;
---
>    
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    blockNo;
>    blockSize100k;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    ;
>    blockSize100k;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    blockNo
>    blockSize100k;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>    
>    blockSize100k;
249c249
<   Int32 blockNo;
---
>   Int32 ;
249c249
<   Int32 blockNo;
---
>   Int32 
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 ;
>    blockSize100k;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 
>    blockSize100k;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 ;
>   Int32 ;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 
>   Int32 ;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 ;
>    ;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 
>    ;
249c249
<   Int32 blockNo;
---
>   Int32 blockNo
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    blockSize100k;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>   Int32 ;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    ;
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>   Int32 blockSize100k
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    blockSize100k
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>   Int32 
249,250c249,250
<   Int32 blockNo;
<   Int32 blockSize100k;
---
>   Int32 blockNo
>    
250c250
<   Int32 blockSize100k;
---
>    blockSize100k;
250c250
<   Int32 blockSize100k;
---
>    ;
(89.9 %, 20689 bytes)
250c250
<    ;
---
>    
252c252
<   Int32 nMTF;
---
>    ;
250c250
<    ;
---
>    
252c252
<   Int32 nMTF;
---
>   Int32 nMTF
250c250
<    ;
---
>    
252c252
<   Int32 nMTF;
---
>    nMTF
250c250
<    ;
---
>    
252c252
<   Int32 nMTF;
---
>   Int32 
250c250
<    ;
---
>    
252c252
<   Int32 nMTF;
---
>    
252c252
<   Int32 nMTF;
---
>    nMTF;
252c252
<   Int32 nMTF;
---
>    ;
252c252
<   Int32 nMTF;
---
>    nMTF
252c252
<   Int32 nMTF;
---
>    
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    nMTF;
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    ;
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    nMTF
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252c252
<   Int32 nMTF;
---
>   Int32 ;
252c252
<   Int32 nMTF;
---
>   Int32 
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
>   Int32 [BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 
>   Int32 [BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
>    [BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 
>    [BZ_MAX_ALPHA_SIZE];
252c252
<   Int32 nMTF;
---
>   Int32 nMTF
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>   Int32 [BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    [BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    mtfFreqBZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>   Int32 BZ_MAX_ALPHA_SIZE];
252,253c252,253
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 nMTF
>    BZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreq[BZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreqBZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreq[];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    [];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    mtfFreq];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>    ];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 BZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_MAX_ALPHA_SIZE;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 BZ_MAX_ALPHA_SIZE;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 [;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 ;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE]
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq]
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreqBZ_MAX_ALPHA_SIZE
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[]
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[];
>    selector[BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[;
>    selector[BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[]
>    selector[BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[
>    selector[BZ_MAX_SELECTORS];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
>    selector[BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
>    selector[BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
>   UChar [BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
>   UChar [BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE;
>    [BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE
>    [BZ_MAX_SELECTORS];
253c253
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>    selector[BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>   UChar [BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>    [BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>   UChar selectorBZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>    selectorBZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>   UChar BZ_MAX_SELECTORS];
253,254c253,254
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE]
>    BZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selector[BZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    [BZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selectorBZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selector[];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    [];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selector];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>    ];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar [BZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar BZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar [];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar ];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar [BZ_MAX_SELECTORS;
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar BZ_MAX_SELECTORS;
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar [;
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar ;
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar selectorBZ_MAX_SELECTORS];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar selector];
254c254
<   UChar selector[BZ_MAX_SELECTORS];
---
>   UChar selectorBZ_MAX_SELECTORS;
(89.9 %, 20663 bytes)
254,255c254,255
<   UChar ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar 
>    BZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    selectorMtf[BZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    [BZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    selectorMtfBZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    selectorMtf[];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    [];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    selectorMtf];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    ];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar [BZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar BZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar [];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar ];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar [BZ_MAX_SELECTORS;
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar BZ_MAX_SELECTORS;
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar [;
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar ;
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar selectorMtfBZ_MAX_SELECTORS];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar selectorMtf];
255c255
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>   UChar selectorMtfBZ_MAX_SELECTORS;
(89.9 %, 20634 bytes)
255c255
<   UChar ;
---
>   UChar 
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    len[][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    len][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar [][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar ][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar [BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar BZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar [[BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar [BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar len][BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
257c257
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar len[BZ_MAX_ALPHA_SIZE];
(89.9 %, 20632 bytes)
257c257
<   UChar lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
257c257
<   UChar lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPS;
257c257
<   UChar lenBZ_N_GROUPS[BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE]
(89.9 %, 20630 bytes)
257,258c257,258
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257,258c257,258
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257,258c257,258
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>   Int32 codeBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257,258c257,258
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>    codeBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257,258c257,258
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
257,258c257,258
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE;
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258c258
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258c258
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258c258
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    codeBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258c258
<   Int32 code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(89.9 %, 20620 bytes)
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(89.9 %, 20607 bytes)
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
258,259c258,259
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [;
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE;
258c258
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE
(90.0 %, 20588 bytes)
258,259c258,259
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 rfreqBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    rfreqBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
258,259c258,259
<    ;
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreqBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreq[][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    rfreq][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
259c259
<   Int32 rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(90.0 %, 20577 bytes)
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
259c259
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(90.0 %, 20564 bytes)
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
259c259
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
(90.0 %, 20545 bytes)
259c259
<    ;
---
>    
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    [BZ_MAX_ALPHA_SIZE][4];
259c259
<    ;
---
>    
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UInt32 len_packBZ_MAX_ALPHA_SIZE][4];
259c259
<    ;
---
>    
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_packBZ_MAX_ALPHA_SIZE][4];
259c259
<    ;
---
>    
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>   UInt32 BZ_MAX_ALPHA_SIZE][4];
259c259
<    ;
---
>    
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[BZ_MAX_ALPHA_SIZE][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    [BZ_MAX_ALPHA_SIZE][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_packBZ_MAX_ALPHA_SIZE][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack[][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    [][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    len_pack][4];
261c261
<   UInt32 len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>    ][4];
(90.0 %, 20530 bytes)
261c261
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    [4];
261c261
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE]4];
261c261
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    ]4];
261c261
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    BZ_MAX_ALPHA_SIZE4];
261c261
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    4];
261c261
<    [BZ_MAX_ALPHA_SIZE][4];
---
>    [][4];
(90.0 %, 20511 bytes)
261c261
<    [4];
---
>    ;
261c261
<    [4];
---
>    4]
261c261
<    [4];
---
>    ]
261c261
<    [4];
---
>    4
261c261
<    [4];
---
>    
(90.0 %, 20508 bytes)
261c261
<    ;
---
>    
263c263
< } EState;
---
>  ;
261c261
<    ;
---
>    
263c263
< } EState;
---
> } EState
261c261
<    ;
---
>    
263c263
< } EState;
---
>  EState
261c261
<    ;
---
>    
263c263
< } EState;
---
> } 
261c261
<    ;
---
>    
263c263
< } EState;
---
>  
263c263
< } EState;
---
>  EState;
263c263
< } EState;
---
>  ;
263c263
< } EState;
---
>  EState
263c263
< } EState;
---
>  
263c263,264
< } EState;
---
>  EState;
> 
265d265
< ;
263c263,264
< } EState;
---
>  ;
> 
265d265
< ;
263c263,264
< } EState;
---
>  EState
> 
265d265
< ;
263c263,264
< } EState;
---
>  
> 
265d265
< ;
263c263
< } EState;
---
> } ;
263c263
< } EState;
---
> } 
(90.0 %, 20506 bytes)
263c263
< } EState
---
>  EState
267c267
< ;
---
> 
263c263
< } EState
---
>  
267c267
< ;
---
> 
263c263,265
< } EState
---
>  EState
> 
> 
265d266
< ;
267d267
< ;
263c263,265
< } EState
---
>  
> 
> 
265d266
< ;
267d267
< ;
263c263
< } EState
---
> } 
263c263,264
< } EState
---
> } 
> 
265d265
< ;
263c263
< } EState
---
> } 
267c267
< ;
---
> 
263c263,265
< } EState
---
> } 
> 
> 
265d266
< ;
267d267
< ;
263c263
< } EState
---
> } 
269c269
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
263c263,264
< } EState
---
> } 
> 
265d265
< ;
269c269
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
263c263
< } EState
---
> } 
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
> define BZ_X_IDLE 1
263c263
< } EState
---
> } 
265d264
< ;
267d265
< ;
269c267,269
< #define BZ_X_IDLE 1
---
> 
> 
> define BZ_X_IDLE 1
265c265
< ;
---
> 
265d264
< ;
267c266,267
< ;
---
> 
> 
265c265
< ;
---
> 
269c269
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
265d264
< ;
267d265
< ;
269c267,269
< #define BZ_X_IDLE 1
---
> 
> 
> define BZ_X_IDLE 1
265c265
< ;
---
> 
269c269
< #define BZ_X_IDLE 1
---
> # BZ_X_IDLE 1
265d264
< ;
267d265
< ;
269c267,269
< #define BZ_X_IDLE 1
---
> 
> 
> # BZ_X_IDLE 1
265c265
< ;
---
> 
269c269
< #define BZ_X_IDLE 1
---
>  BZ_X_IDLE 1
265d264
< ;
267d265
< ;
269c267,269
< #define BZ_X_IDLE 1
---
> 
> 
>  BZ_X_IDLE 1
(90.0 %, 20505 bytes)
267c267
< ;
---
> 
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
> define BZ_X_IDLE 1
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
> # BZ_X_IDLE 1
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
>  BZ_X_IDLE 1
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
> #define  1
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
> define  1
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
> #  1
267d266
< ;
269c268,269
< #define BZ_X_IDLE 1
---
> 
>   1
269c269
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 1
269c269
< #define BZ_X_IDLE 1
---
>  BZ_X_IDLE 1
269c269
< #define BZ_X_IDLE 1
---
> define  1
269c269
< #define BZ_X_IDLE 1
---
>   1
269c269
< #define BZ_X_IDLE 1
---
> define BZ_X_IDLE 
269c269
< #define BZ_X_IDLE 1
---
>  BZ_X_IDLE 
269c269
< #define BZ_X_IDLE 1
---
> define  
269c269
< #define BZ_X_IDLE 1
---
>   
269c269
< #define BZ_X_IDLE 1
---
> # BZ_X_IDLE 1
269c269
< #define BZ_X_IDLE 1
---
> #  1
(90.0 %, 20488 bytes)
270c270
< #define BZ_X_OUTPUT 2
---
>   
270c270
< #define BZ_X_OUTPUT 2
---
> # BZ_X_OUTPUT 2
270c270
< #define BZ_X_OUTPUT 2
---
> #  2
(90.0 %, 20469 bytes)
272c272
< #define BZ_X_MAGIC_1 0
---
>   
272c272
< #define BZ_X_MAGIC_1 0
---
> # BZ_X_MAGIC_1 0
272c272
< #define BZ_X_MAGIC_1 0
---
> #  0
272c272
< #define BZ_X_MAGIC_1 0
---
> # BZ_X_MAGIC_1 
272c272
< #define BZ_X_MAGIC_1 0
---
> #  
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> # BZ_X_MAGIC_1 0
> define BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #  0
> define BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> # BZ_X_MAGIC_1 
> define BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #  
> define BZ_X_MAGIC_2 1
272c272
< #define BZ_X_MAGIC_1 0
---
> #define  0
272c272
< #define BZ_X_MAGIC_1 0
---
> #define  
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define  0
> define BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define  
> define BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define  0
> # BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define  
> # BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define  0
>  BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define  
>  BZ_X_MAGIC_2 1
272c272
< #define BZ_X_MAGIC_1 0
---
> #define BZ_X_MAGIC_1 
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
> define BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
> # BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
>  BZ_X_MAGIC_2 1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
> #define  1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
> define  1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
> #  1
272,273c272,273
< #define BZ_X_MAGIC_1 0
< #define BZ_X_MAGIC_2 1
---
> #define BZ_X_MAGIC_1 
>   1
273c273
< #define BZ_X_MAGIC_2 1
---
> define BZ_X_MAGIC_2 1
273c273
< #define BZ_X_MAGIC_2 1
---
>  BZ_X_MAGIC_2 1
273c273
< #define BZ_X_MAGIC_2 1
---
> define  1
273c273
< #define BZ_X_MAGIC_2 1
---
>   1
273c273
< #define BZ_X_MAGIC_2 1
---
> define BZ_X_MAGIC_2 
273c273
< #define BZ_X_MAGIC_2 1
---
>  BZ_X_MAGIC_2 
273c273
< #define BZ_X_MAGIC_2 1
---
> define  
273c273
< #define BZ_X_MAGIC_2 1
---
>   
273c273
< #define BZ_X_MAGIC_2 1
---
> # BZ_X_MAGIC_2 1
273c273
< #define BZ_X_MAGIC_2 1
---
> #  1
(90.0 %, 20449 bytes)
274c274
< #define BZ_X_MAGIC_3 2
---
>   
274c274
< #define BZ_X_MAGIC_3 2
---
> # BZ_X_MAGIC_3 2
274c274
< #define BZ_X_MAGIC_3 2
---
> #  2
274c274
< #define BZ_X_MAGIC_3 2
---
> # BZ_X_MAGIC_3 
(90.0 %, 20429 bytes)
275c275
< #define BZ_X_MAGIC_4 3
---
>   
275c275
< #define BZ_X_MAGIC_4 3
---
> # BZ_X_MAGIC_4 3
275c275
< #define BZ_X_MAGIC_4 3
---
> #  3
(90.0 %, 20409 bytes)
276c276
< #define BZ_X_BLKHDR_1 4
---
>   
276c276
< #define BZ_X_BLKHDR_1 4
---
> # BZ_X_BLKHDR_1 4
276c276
< #define BZ_X_BLKHDR_1 4
---
> #  4
(90.1 %, 20388 bytes)
277c277
< #define BZ_X_BLKHDR_2 5
---
>   
277c277
< #define BZ_X_BLKHDR_2 5
---
> # BZ_X_BLKHDR_2 5
277c277
< #define BZ_X_BLKHDR_2 5
---
> #  5
(90.1 %, 20367 bytes)
278c278
< #define BZ_X_BLKHDR_3 6
---
>   
278c278
< #define BZ_X_BLKHDR_3 6
---
> # BZ_X_BLKHDR_3 6
278c278
< #define BZ_X_BLKHDR_3 6
---
> #  6
(90.1 %, 20346 bytes)
279c279
< #define BZ_X_BLKHDR_4 7
---
>   
279c279
< #define BZ_X_BLKHDR_4 7
---
> # BZ_X_BLKHDR_4 7
279c279
< #define BZ_X_BLKHDR_4 7
---
> #  7
(90.1 %, 20325 bytes)
280c280
< #define BZ_X_BLKHDR_5 8
---
>   
280c280
< #define BZ_X_BLKHDR_5 8
---
> # BZ_X_BLKHDR_5 8
280c280
< #define BZ_X_BLKHDR_5 8
---
> #  8
(90.1 %, 20304 bytes)
281c281
< #define BZ_X_BLKHDR_6 9
---
>   
281c281
< #define BZ_X_BLKHDR_6 9
---
> # BZ_X_BLKHDR_6 9
281c281
< #define BZ_X_BLKHDR_6 9
---
> #  9
(90.1 %, 20283 bytes)
282c282
< #define BZ_X_BCRC_1 0
---
>   
282c282
< #define BZ_X_BCRC_1 0
---
> # BZ_X_BCRC_1 0
282c282
< #define BZ_X_BCRC_1 0
---
> #  0
(90.1 %, 20264 bytes)
283c283
< #define BZ_X_BCRC_2 1
---
>   
283c283
< #define BZ_X_BCRC_2 1
---
> # BZ_X_BCRC_2 1
283c283
< #define BZ_X_BCRC_2 1
---
> #  1
(90.1 %, 20245 bytes)
284c284
< #define BZ_X_BCRC_3 2
---
>   
284c284
< #define BZ_X_BCRC_3 2
---
> # BZ_X_BCRC_3 2
284c284
< #define BZ_X_BCRC_3 2
---
> #  2
(90.1 %, 20226 bytes)
285c285
< #define BZ_X_BCRC_4 3
---
>   
285c285
< #define BZ_X_BCRC_4 3
---
> # BZ_X_BCRC_4 3
285c285
< #define BZ_X_BCRC_4 3
---
> #  3
(90.1 %, 20207 bytes)
286c286
< #define BZ_X_RANDBIT 4
---
>   
286c286
< #define BZ_X_RANDBIT 4
---
> # BZ_X_RANDBIT 4
286c286
< #define BZ_X_RANDBIT 4
---
> #  4
(90.1 %, 20187 bytes)
287c287
< #define BZ_X_ORIGPTR_1 5
---
>   
287c287
< #define BZ_X_ORIGPTR_1 5
---
> # BZ_X_ORIGPTR_1 5
287c287
< #define BZ_X_ORIGPTR_1 5
---
> #  5
(90.2 %, 20165 bytes)
288c288
< #define BZ_X_ORIGPTR_2 6
---
>   
288c288
< #define BZ_X_ORIGPTR_2 6
---
> # BZ_X_ORIGPTR_2 6
288c288
< #define BZ_X_ORIGPTR_2 6
---
> #  6
288c288
< #define BZ_X_ORIGPTR_2 6
---
> # BZ_X_ORIGPTR_2 
288c288
< #define BZ_X_ORIGPTR_2 6
---
> #  
(90.2 %, 20143 bytes)
289c289
< #define BZ_X_ORIGPTR_3 7
---
>   
289c289
< #define BZ_X_ORIGPTR_3 7
---
> # BZ_X_ORIGPTR_3 7
289c289
< #define BZ_X_ORIGPTR_3 7
---
> #  7
(90.2 %, 20121 bytes)
290c290
< #define BZ_X_MAPPING_1 8
---
>   
290c290
< #define BZ_X_MAPPING_1 8
---
> # BZ_X_MAPPING_1 8
290c290
< #define BZ_X_MAPPING_1 8
---
> #  8
(90.2 %, 20099 bytes)
291c291
< #define BZ_X_MAPPING_2 9
---
>   
291c291
< #define BZ_X_MAPPING_2 9
---
> # BZ_X_MAPPING_2 9
291c291
< #define BZ_X_MAPPING_2 9
---
> #  9
(90.2 %, 20077 bytes)
292c292
< #define BZ_X_SELECTOR_1 0
---
>   
292c292
< #define BZ_X_SELECTOR_1 0
---
> # BZ_X_SELECTOR_1 0
292c292
< #define BZ_X_SELECTOR_1 0
---
> #  0
(90.2 %, 20054 bytes)
293c293
< #define BZ_X_SELECTOR_2 1
---
>   
293c293
< #define BZ_X_SELECTOR_2 1
---
> # BZ_X_SELECTOR_2 1
293c293
< #define BZ_X_SELECTOR_2 1
---
> #  1
(90.2 %, 20031 bytes)
294c294
< #define BZ_X_SELECTOR_3 2
---
>   
294c294
< #define BZ_X_SELECTOR_3 2
---
> # BZ_X_SELECTOR_3 2
294c294
< #define BZ_X_SELECTOR_3 2
---
> #  2
(90.2 %, 20008 bytes)
295c295
< #define BZ_X_CODING_1 3
---
>   
295c295
< #define BZ_X_CODING_1 3
---
> # BZ_X_CODING_1 3
295c295
< #define BZ_X_CODING_1 3
---
> #  3
(90.2 %, 19987 bytes)
296c296
< #define BZ_X_CODING_2 4
---
>   
296c296
< #define BZ_X_CODING_2 4
---
> # BZ_X_CODING_2 4
296c296
< #define BZ_X_CODING_2 4
---
> #  4
(90.3 %, 19966 bytes)
297c297
< #define BZ_X_CODING_3 5
---
>   
297c297
< #define BZ_X_CODING_3 5
---
> # BZ_X_CODING_3 5
297c297
< #define BZ_X_CODING_3 5
---
> #  5
(90.3 %, 19945 bytes)
298c298
< #define BZ_X_MTF_1 6
---
>   
298c298
< #define BZ_X_MTF_1 6
---
> # BZ_X_MTF_1 6
298c298
< #define BZ_X_MTF_1 6
---
> #  6
(90.3 %, 19927 bytes)
299c299
< #define BZ_X_MTF_2 7
---
>   
299c299
< #define BZ_X_MTF_2 7
---
> # BZ_X_MTF_2 7
299c299
< #define BZ_X_MTF_2 7
---
> #  7
299c299
< #define BZ_X_MTF_2 7
---
> # BZ_X_MTF_2 
(90.3 %, 19909 bytes)
300c300
< #define BZ_X_MTF_3 8
---
>   
300c300
< #define BZ_X_MTF_3 8
---
> # BZ_X_MTF_3 8
300c300
< #define BZ_X_MTF_3 8
---
> #  8
(90.3 %, 19891 bytes)
301c301
< #define BZ_X_MTF_4 9
---
>   
301c301
< #define BZ_X_MTF_4 9
---
> # BZ_X_MTF_4 9
301c301
< #define BZ_X_MTF_4 9
---
> #  9
301c301
< #define BZ_X_MTF_4 9
---
> # BZ_X_MTF_4 
(90.3 %, 19873 bytes)
302c302
< #define BZ_X_MTF_5 0
---
>   
302c302
< #define BZ_X_MTF_5 0
---
> # BZ_X_MTF_5 0
302c302
< #define BZ_X_MTF_5 0
---
> #  0
(90.3 %, 19855 bytes)
303c303
< #define BZ_X_MTF_6 1
---
>   
303c303
< #define BZ_X_MTF_6 1
---
> # BZ_X_MTF_6 1
303c303
< #define BZ_X_MTF_6 1
---
> #  1
(90.3 %, 19837 bytes)
304c304
< #define BZ_X_ENDHDR_2 2
---
>   
304c304
< #define BZ_X_ENDHDR_2 2
---
> # BZ_X_ENDHDR_2 2
304c304
< #define BZ_X_ENDHDR_2 2
---
> #  2
(90.3 %, 19816 bytes)
305c305
< #define BZ_X_ENDHDR_3 3
---
>   
305c305
< #define BZ_X_ENDHDR_3 3
---
> # BZ_X_ENDHDR_3 3
305c305
< #define BZ_X_ENDHDR_3 3
---
> #  3
(90.3 %, 19795 bytes)
306c306
< #define BZ_X_ENDHDR_4 4
---
>   
306c306
< #define BZ_X_ENDHDR_4 4
---
> # BZ_X_ENDHDR_4 4
306c306
< #define BZ_X_ENDHDR_4 4
---
> #  4
(90.4 %, 19774 bytes)
307c307
< #define BZ_X_ENDHDR_5 5
---
>   
307c307
< #define BZ_X_ENDHDR_5 5
---
> # BZ_X_ENDHDR_5 5
307c307
< #define BZ_X_ENDHDR_5 5
---
> #  5
(90.4 %, 19753 bytes)
308c308
< #define BZ_X_ENDHDR_6 6
---
>   
308c308
< #define BZ_X_ENDHDR_6 6
---
> # BZ_X_ENDHDR_6 6
308c308
< #define BZ_X_ENDHDR_6 6
---
> #  6
(90.4 %, 19732 bytes)
309c309
< #define BZ_X_CCRC_1 7
---
>   
309c309
< #define BZ_X_CCRC_1 7
---
> # BZ_X_CCRC_1 7
309c309
< #define BZ_X_CCRC_1 7
---
> #  7
(90.4 %, 19713 bytes)
310c310
< #define BZ_X_CCRC_2 8
---
>   
310c310
< #define BZ_X_CCRC_2 8
---
> # BZ_X_CCRC_2 8
310c310
< #define BZ_X_CCRC_2 8
---
> #  8
(90.4 %, 19694 bytes)
311c311
< #define BZ_X_CCRC_3 9
---
>   
311c311
< #define BZ_X_CCRC_3 9
---
> # BZ_X_CCRC_3 9
311c311
< #define BZ_X_CCRC_3 9
---
> #  9
(90.4 %, 19675 bytes)
312c312
< #define BZ_X_CCRC_4 0
---
>   
312c312
< #define BZ_X_CCRC_4 0
---
> # BZ_X_CCRC_4 0
312c312
< #define BZ_X_CCRC_4 0
---
> #  0
(90.4 %, 19656 bytes)
314c314
< #define MTFA_SIZE 4096
---
>   
314c314
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 4096
314c314
< #define MTFA_SIZE 4096
---
> #  4096
314c314
< #define MTFA_SIZE 4096
---
> # MTFA_SIZE 
314c314
< #define MTFA_SIZE 4096
---
> #  
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> # MTFA_SIZE 4096
> define MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #  4096
> define MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> # MTFA_SIZE 
> define MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #  
> define MTFL_SIZE 6
314c314
< #define MTFA_SIZE 4096
---
> #define  4096
314c314
< #define MTFA_SIZE 4096
---
> #define  
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
> define MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
> define MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
> # MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
> # MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  4096
>  MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define  
>  MTFL_SIZE 6
314c314
< #define MTFA_SIZE 4096
---
> #define MTFA_SIZE 
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> define MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> # MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
>  MTFL_SIZE 6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> #define  6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> define  6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
> #  6
314,315c314,315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
---
> #define MTFA_SIZE 
>   6
315c315
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 6
315c315
< #define MTFL_SIZE 6
---
>  MTFL_SIZE 6
315c315
< #define MTFL_SIZE 6
---
> define  6
315c315
< #define MTFL_SIZE 6
---
>   6
315c315
< #define MTFL_SIZE 6
---
> define MTFL_SIZE 
315c315
< #define MTFL_SIZE 6
---
>  MTFL_SIZE 
315c315
< #define MTFL_SIZE 6
---
> define  
315c315
< #define MTFL_SIZE 6
---
>   
315c315
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 6
315c315
< #define MTFL_SIZE 6
---
> #  6
315c315
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 
315c315
< #define MTFL_SIZE 6
---
> #  
315c315
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 6
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> #  6
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> # MTFL_SIZE 
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> #  
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> #define  6
315c315
< #define MTFL_SIZE 6
---
> #define  
315c315
< #define MTFL_SIZE 6
---
> #define  6
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> #define  
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> #define  6
317c317
< typedef struct {
---
> typedef  {
315c315
< #define MTFL_SIZE 6
---
> #define  
317c317
< typedef struct {
---
> typedef  {
315c315
< #define MTFL_SIZE 6
---
> #define  6
317c317
< typedef struct {
---
>   {
315c315
< #define MTFL_SIZE 6
---
> #define  
317c317
< typedef struct {
---
>   {
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
>  struct {
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
> typedef  {
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
>   {
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
> typedef struct 
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
>  struct 
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
> typedef  
315c315
< #define MTFL_SIZE 6
---
> #define MTFL_SIZE 
317c317
< typedef struct {
---
>   
317c317
< typedef struct {
---
>  struct {
317c317
< typedef struct {
---
>   {
317c317
< typedef struct {
---
>  struct 
317c317
< typedef struct {
---
>   
317c317
< typedef struct {
---
>  struct {
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
>   {
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
>  struct 
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
>   
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
> typedef  {
317c317
< typedef struct {
---
> typedef  
317c317
< typedef struct {
---
> typedef  {
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
> typedef  
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
> typedef  {
319c319
<   bz_stream *strm;
---
>   bz_stream strm;
317c317
< typedef struct {
---
> typedef  
319c319
<   bz_stream *strm;
---
>   bz_stream strm;
317c317
< typedef struct {
---
> typedef  {
319c319
<   bz_stream *strm;
---
>    strm;
317c317
< typedef struct {
---
> typedef  
319c319
<   bz_stream *strm;
---
>    strm;
317c317
< typedef struct {
---
> typedef struct 
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>    *strm;
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>   bz_stream strm;
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>    strm;
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>   bz_stream *;
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>    *;
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>   bz_stream ;
317c317
< typedef struct {
---
> typedef struct 
319c319
<   bz_stream *strm;
---
>    ;
319c319
<   bz_stream *strm;
---
>    *strm;
319c319
<   bz_stream *strm;
---
>    strm;
319c319
<   bz_stream *strm;
---
>    *;
319c319
<   bz_stream *strm;
---
>    ;
319c319
<   bz_stream *strm;
---
>    *strm
319c319
<   bz_stream *strm;
---
>    strm
319c319
<   bz_stream *strm;
---
>    *
319c319
<   bz_stream *strm;
---
>    
(90.4 %, 19642 bytes)
319c319
<    ;
---
>    
321c321
<   Int32 state;
---
>    ;
319c319
<    ;
---
>    
321c321
<   Int32 state;
---
>   Int32 state
319c319
<    ;
---
>    
321c321
<   Int32 state;
---
>    state
319c319
<    ;
---
>    
321c321
<   Int32 state;
---
>   Int32 
319c319
<    ;
---
>    
321c321
<   Int32 state;
---
>    
(90.4 %, 19631 bytes)
321c321
<    ;
---
>    
323c323
<   UChar state_out_ch;
---
>    ;
321c321
<    ;
---
>    
323c323
<   UChar state_out_ch;
---
>   UChar state_out_ch
321c321
<    ;
---
>    
323c323
<   UChar state_out_ch;
---
>    state_out_ch
321c321
<    ;
---
>    
323c323
<   UChar state_out_ch;
---
>   UChar 
321c321
<    ;
---
>    
323c323
<   UChar state_out_ch;
---
>    
(90.4 %, 19613 bytes)
322a323
>    
324d324
<   Int32 state_out_len;
323,324c323,324
<    ;
<   Int32 state_out_len;
---
>    
>   Int32 state_out_len
323,324c323,324
<    ;
<   Int32 state_out_len;
---
>    
>    state_out_len
323,324c323,324
<    ;
<   Int32 state_out_len;
---
>    
>   Int32 
323,324c323,324
<    ;
<   Int32 state_out_len;
---
>    
>    
(90.4 %, 19594 bytes)
323a324
>    
325d325
<   Bool blockRandomised;
324,325c324,325
<    ;
<   Bool blockRandomised;
---
>    
>   Bool blockRandomised
324,325c324,325
<    ;
<   Bool blockRandomised;
---
>    
>    blockRandomised
324,325c324,325
<    ;
<   Bool blockRandomised;
---
>    
>   Bool 
(90.4 %, 19574 bytes)
325,326c325,326
<    ;
<   BZ_RAND_DECLS;
---
>    
>   
325c325
<    ;
---
>    
328c328
<   UInt32 bsBuff;
---
>    bsBuff;
325,326c325,326
<    ;
<   BZ_RAND_DECLS;
---
>    
>   ;
328c328
<   UInt32 bsBuff;
---
>    bsBuff;
325,326c325,326
<    ;
<   BZ_RAND_DECLS;
---
>    
>   BZ_RAND_DECLS
328c328
<   UInt32 bsBuff;
---
>    bsBuff;
325,326c325,326
<    ;
<   BZ_RAND_DECLS;
---
>    
>   
328c328
<   UInt32 bsBuff;
---
>    bsBuff;
326c326
<   BZ_RAND_DECLS;
---
>   ;
326c326
<   BZ_RAND_DECLS;
---
>   
(90.5 %, 19559 bytes)
328c328
<   UInt32 bsBuff;
---
>    
328,329c328,329
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    bsBuff;
>    bsLive;
328,329c328,329
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    ;
>    bsLive;
328,329c328,329
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    bsBuff
>    bsLive;
328,329c328,329
<   UInt32 bsBuff;
<   Int32 bsLive;
---
>    
>    bsLive;
328c328
<   UInt32 bsBuff;
---
>   UInt32 ;
(90.5 %, 19546 bytes)
329c329
<   Int32 bsLive;
---
>    
329c329
<   Int32 bsLive;
---
>    bsLive;
331c331
<   Int32 blockSize100k;
---
>    blockSize100k;
329c329
<   Int32 bsLive;
---
>    ;
331c331
<   Int32 blockSize100k;
---
>    blockSize100k;
329c329
<   Int32 bsLive;
---
>    bsLive
331c331
<   Int32 blockSize100k;
---
>    blockSize100k;
329c329
<   Int32 bsLive;
---
>    
331c331
<   Int32 blockSize100k;
---
>    blockSize100k;
329c329
<   Int32 bsLive;
---
>   Int32 ;
(90.5 %, 19534 bytes)
331c331
<   Int32 blockSize100k;
---
>    
331,332c331,332
<   Int32 blockSize100k;
<   Bool smallDecompress;
---
>    blockSize100k;
>    smallDecompress;
331,332c331,332
<   Int32 blockSize100k;
<   Bool smallDecompress;
---
>    ;
>    smallDecompress;
331,332c331,332
<   Int32 blockSize100k;
<   Bool smallDecompress;
---
>    blockSize100k
>    smallDecompress;
331,332c331,332
<   Int32 blockSize100k;
<   Bool smallDecompress;
---
>    
>    smallDecompress;
331c331
<   Int32 blockSize100k;
---
>   Int32 ;
331c331
<   Int32 blockSize100k;
---
>   Int32 
331,332c331,332
<   Int32 blockSize100k;
<   Bool smallDecompress;
---
>   Int32 ;
>    smallDecompress;
331,332c331,332
<   Int32 blockSize100k;
<   Bool smallDecompress;
---
>   Int32 
>    smallDecompress;
(90.5 %, 19515 bytes)
332c332
<   Bool smallDecompress;
---
>    
332,333c332,333
<   Bool smallDecompress;
<   Int32 currBlockNo;
---
>    smallDecompress;
>    currBlockNo;
332,333c332,333
<   Bool smallDecompress;
<   Int32 currBlockNo;
---
>    ;
>    currBlockNo;
332,333c332,333
<   Bool smallDecompress;
<   Int32 currBlockNo;
---
>    smallDecompress
>    currBlockNo;
332,333c332,333
<   Bool smallDecompress;
<   Int32 currBlockNo;
---
>    
>    currBlockNo;
332c332
<   Bool smallDecompress;
---
>   Bool ;
(90.5 %, 19495 bytes)
333c333
<   Int32 currBlockNo;
---
>    
333,334c333,334
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    currBlockNo;
>    verbosity;
333,334c333,334
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    ;
>    verbosity;
333,334c333,334
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    currBlockNo
>    verbosity;
333,334c333,334
<   Int32 currBlockNo;
<   Int32 verbosity;
---
>    
>    verbosity;
333c333
<   Int32 currBlockNo;
---
>   Int32 ;
(90.5 %, 19478 bytes)
334c334
<   Int32 verbosity;
---
>    
334c334
<   Int32 verbosity;
---
>    verbosity;
336c336
<   Int32 origPtr;
---
>    origPtr;
334c334
<   Int32 verbosity;
---
>    ;
336c336
<   Int32 origPtr;
---
>    origPtr;
334c334
<   Int32 verbosity;
---
>    verbosity
336c336
<   Int32 origPtr;
---
>    origPtr;
334c334
<   Int32 verbosity;
---
>    
336c336
<   Int32 origPtr;
---
>    origPtr;
334c334
<   Int32 verbosity;
---
>   Int32 ;
(90.5 %, 19463 bytes)
336c336
<   Int32 origPtr;
---
>    
336,337c336,337
<   Int32 origPtr;
<   UInt32 tPos;
---
>    origPtr;
>    tPos;
336,337c336,337
<   Int32 origPtr;
<   UInt32 tPos;
---
>    ;
>    tPos;
336,337c336,337
<   Int32 origPtr;
<   UInt32 tPos;
---
>    origPtr
>    tPos;
336,337c336,337
<   Int32 origPtr;
<   UInt32 tPos;
---
>    
>    tPos;
336c336
<   Int32 origPtr;
---
>   Int32 ;
(90.5 %, 19450 bytes)
337c337
<   UInt32 tPos;
---
>    
337,338c337,338
<   UInt32 tPos;
<   Int32 k0;
---
>    tPos;
>    k0;
337,338c337,338
<   UInt32 tPos;
<   Int32 k0;
---
>    ;
>    k0;
337,338c337,338
<   UInt32 tPos;
<   Int32 k0;
---
>    tPos
>    k0;
337,338c337,338
<   UInt32 tPos;
<   Int32 k0;
---
>    
>    k0;
337c337
<   UInt32 tPos;
---
>   UInt32 ;
(90.5 %, 19439 bytes)
338c338
<   Int32 k0;
---
>    
338,339c338,339
<   Int32 k0;
<   Int32 unzftab[6];
---
>    k0;
>    unzftab[6];
338,339c338,339
<   Int32 k0;
<   Int32 unzftab[6];
---
>    ;
>    unzftab[6];
338,339c338,339
<   Int32 k0;
<   Int32 unzftab[6];
---
>    k0
>    unzftab[6];
338,339c338,339
<   Int32 k0;
<   Int32 unzftab[6];
---
>    
>    unzftab[6];
338c338
<   Int32 k0;
---
>   Int32 ;
(90.5 %, 19431 bytes)
339c339
<   Int32 unzftab[6];
---
>    6];
339c339
<   Int32 unzftab[6];
---
>    unzftab[];
339c339
<   Int32 unzftab[6];
---
>    [];
339c339
<   Int32 unzftab[6];
---
>    unzftab];
339c339
<   Int32 unzftab[6];
---
>    ];
339c339
<   Int32 unzftab[6];
---
>   Int32 [6];
339c339
<   Int32 unzftab[6];
---
>   Int32 6];
339c339
<   Int32 unzftab[6];
---
>   Int32 [];
339c339
<   Int32 unzftab[6];
---
>   Int32 ];
339c339
<   Int32 unzftab[6];
---
>   Int32 [6;
339c339
<   Int32 unzftab[6];
---
>   Int32 6;
339c339
<   Int32 unzftab[6];
---
>   Int32 [;
339c339
<   Int32 unzftab[6];
---
>   Int32 ;
339c339
<   Int32 unzftab[6];
---
>   Int32 unzftab6];
339c339
<   Int32 unzftab[6];
---
>   Int32 unzftab];
339c339
<   Int32 unzftab[6];
---
>   Int32 unzftab6;
(90.5 %, 19421 bytes)
339,340c339,340
<   Int32 ;
<   Int32 nblock_used;
---
>   Int32 
>    
340c340
<   Int32 nblock_used;
---
>    nblock_used;
340c340
<   Int32 nblock_used;
---
>    ;
340c340
<   Int32 nblock_used;
---
>    nblock_used
340c340
<   Int32 nblock_used;
---
>    
(90.5 %, 19405 bytes)
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>    cftab[7];
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>   Int32 [7];
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>    [7];
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>   Int32 cftab7];
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>    cftab7];
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>   Int32 7];
340,341c340,341
<    ;
<   Int32 cftab[7];
---
>    
>    7];
341c341
<   Int32 cftab[7];
---
>    cftab[7];
341c341
<   Int32 cftab[7];
---
>    [7];
341c341
<   Int32 cftab[7];
---
>    cftab7];
341c341
<   Int32 cftab[7];
---
>    7];
341c341
<   Int32 cftab[7];
---
>    cftab[];
341c341
<   Int32 cftab[7];
---
>    [];
341c341
<   Int32 cftab[7];
---
>    cftab];
341c341
<   Int32 cftab[7];
---
>    ];
341c341
<   Int32 cftab[7];
---
>   Int32 [7];
341c341
<   Int32 cftab[7];
---
>   Int32 7];
341c341
<   Int32 cftab[7];
---
>   Int32 [];
341c341
<   Int32 cftab[7];
---
>   Int32 ];
341c341
<   Int32 cftab[7];
---
>   Int32 [7;
341c341
<   Int32 cftab[7];
---
>   Int32 7;
341c341
<   Int32 cftab[7];
---
>   Int32 [;
341c341
<   Int32 cftab[7];
---
>   Int32 ;
341c341
<   Int32 cftab[7];
---
>   Int32 cftab7];
341c341
<   Int32 cftab[7];
---
>   Int32 cftab];
341c341
<   Int32 cftab[7];
---
>   Int32 cftab7;
(90.5 %, 19397 bytes)
341,342c341,342
<   Int32 ;
<   Int32 cftabCopy[7];
---
>   Int32 
>    7];
342c342
<   Int32 cftabCopy[7];
---
>    cftabCopy[7];
342c342
<   Int32 cftabCopy[7];
---
>    [7];
342c342
<   Int32 cftabCopy[7];
---
>    cftabCopy7];
342c342
<   Int32 cftabCopy[7];
---
>    7];
342c342
<   Int32 cftabCopy[7];
---
>    cftabCopy[];
342c342
<   Int32 cftabCopy[7];
---
>    [];
342c342
<   Int32 cftabCopy[7];
---
>    cftabCopy];
342c342
<   Int32 cftabCopy[7];
---
>    ];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 [7];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 7];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 [];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 ];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 [7;
342c342
<   Int32 cftabCopy[7];
---
>   Int32 7;
342c342
<   Int32 cftabCopy[7];
---
>   Int32 [;
342c342
<   Int32 cftabCopy[7];
---
>   Int32 ;
342c342
<   Int32 cftabCopy[7];
---
>   Int32 cftabCopy7];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 cftabCopy];
342c342
<   Int32 cftabCopy[7];
---
>   Int32 cftabCopy7;
(90.5 %, 19385 bytes)
342c342
<   Int32 ;
---
>   Int32 
344c344
<   UInt32 *tt;
---
>    ;
344c344
<   UInt32 *tt;
---
>    *tt;
344c344
<   UInt32 *tt;
---
>    tt;
344c344
<   UInt32 *tt;
---
>    *;
344c344
<   UInt32 *tt;
---
>    ;
344c344
<   UInt32 *tt;
---
>    *tt
344c344
<   UInt32 *tt;
---
>    tt
344c344
<   UInt32 *tt;
---
>    *
344c344
<   UInt32 *tt;
---
>    
344c344
<   UInt32 *tt;
---
>   UInt32 tt;
344c344
<   UInt32 *tt;
---
>   UInt32 ;
344c344
<   UInt32 *tt;
---
>   UInt32 tt
344c344
<   UInt32 *tt;
---
>   UInt32 
344c344
<   UInt32 *tt;
---
>   UInt32 tt;
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 *tt;
---
>   UInt32 ;
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 *tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 *tt;
---
>   UInt32 
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 *tt;
---
>   UInt32 *;
344c344
<   UInt32 *tt;
---
>   UInt32 *
344c344
<   UInt32 *tt;
---
>   UInt32 *;
346c346
<   UInt16 *ll16;
---
>    *ll16;
(90.5 %, 19384 bytes)
344c344
<   UInt32 tt;
---
>   UInt32 ;
344c344
<   UInt32 tt;
---
>   UInt32 
344c344
<   UInt32 tt;
---
>   UInt32 ;
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 tt;
---
>   UInt32 
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 tt;
---
>   UInt32 ;
346c346
<   UInt16 *ll16;
---
>   UInt16 ll16;
344c344
<   UInt32 tt;
---
>   UInt32 
346c346
<   UInt16 *ll16;
---
>   UInt16 ll16;
344c344
<   UInt32 tt;
---
>   UInt32 ;
346c346
<   UInt16 *ll16;
---
>    ll16;
344c344
<   UInt32 tt;
---
>   UInt32 
346c346
<   UInt16 *ll16;
---
>    ll16;
344c344
<   UInt32 tt;
---
>   UInt32 tt
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>    *ll16;
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>   UInt16 ll16;
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>    ll16;
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>   UInt16 *;
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>    *;
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>   UInt16 ;
344c344
<   UInt32 tt;
---
>   UInt32 tt
346c346
<   UInt16 *ll16;
---
>    ;
346c346
<   UInt16 *ll16;
---
>    *ll16;
346c346
<   UInt16 *ll16;
---
>    ll16;
346c346
<   UInt16 *ll16;
---
>    *;
346c346
<   UInt16 *ll16;
---
>    ;
346c346
<   UInt16 *ll16;
---
>    *ll16
346c346
<   UInt16 *ll16;
---
>    ll16
346c346
<   UInt16 *ll16;
---
>    *
346c346
<   UInt16 *ll16;
---
>    
346c346
<   UInt16 *ll16;
---
>   UInt16 ll16;
346c346
<   UInt16 *ll16;
---
>   UInt16 ;
346c346
<   UInt16 *ll16;
---
>   UInt16 ll16
346c346
<   UInt16 *ll16;
---
>   UInt16 
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 ll16;
>    *ll4;
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 ;
>    *ll4;
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>    *ll4;
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 
>    *ll4;
346c346
<   UInt16 *ll16;
---
>   UInt16 *;
346c346
<   UInt16 *ll16;
---
>   UInt16 *
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 *;
>    *ll4;
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 *
>    *ll4;
346,347c346,347
<   UInt16 *ll16;
<   UChar *ll4;
---
>   UInt16 *;
>   UChar ll4;
(90.5 %, 19383 bytes)
346c346
<   UInt16 ll16;
---
>   UInt16 ;
346c346
<   UInt16 ll16;
---
>   UInt16 
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ;
>    *ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 
>    *ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ;
>   UChar ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 
>   UChar ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ;
>    ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 
>    ll4;
346c346
<   UInt16 ll16;
---
>   UInt16 ll16
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>    *ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>   UChar ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>    ll4;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>   UChar *;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>    *;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>   UChar ;
346,347c346,347
<   UInt16 ll16;
<   UChar *ll4;
---
>   UInt16 ll16
>    ;
347c347
<   UChar *ll4;
---
>    *ll4;
347c347
<   UChar *ll4;
---
>    ll4;
347c347
<   UChar *ll4;
---
>    *;
347c347
<   UChar *ll4;
---
>    ;
347c347
<   UChar *ll4;
---
>    *ll4
347c347
<   UChar *ll4;
---
>    ll4
347c347
<   UChar *ll4;
---
>    *
347c347
<   UChar *ll4;
---
>    
347c347
<   UChar *ll4;
---
>   UChar ll4;
347c347
<   UChar *ll4;
---
>   UChar ;
347c347
<   UChar *ll4;
---
>   UChar ll4
347c347
<   UChar *ll4;
---
>   UChar 
347c347
<   UChar *ll4;
---
>   UChar ll4;
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar *ll4;
---
>   UChar ;
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar *ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar *ll4;
---
>   UChar 
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar *ll4;
---
>   UChar *;
347c347
<   UChar *ll4;
---
>   UChar *
347c347
<   UChar *ll4;
---
>   UChar *;
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
(90.5 %, 19382 bytes)
347c347
<   UChar ll4;
---
>   UChar ;
347c347
<   UChar ll4;
---
>   UChar 
347c347
<   UChar ll4;
---
>   UChar ;
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar ll4;
---
>   UChar 
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar ll4;
---
>   UChar ;
349c349
<   UInt32 storedBlockCRC;
---
>   UInt32 ;
347c347
<   UChar ll4;
---
>   UChar 
349c349
<   UInt32 storedBlockCRC;
---
>   UInt32 ;
347c347
<   UChar ll4;
---
>   UChar ;
349c349
<   UInt32 storedBlockCRC;
---
>    ;
347c347
<   UChar ll4;
---
>   UChar 
349c349
<   UInt32 storedBlockCRC;
---
>    ;
347c347
<   UChar ll4;
---
>   UChar ll4
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>   UInt32 ;
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>    ;
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>   UInt32 storedBlockCRC
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>   UInt32 
347c347
<   UChar ll4;
---
>   UChar ll4
349c349
<   UInt32 storedBlockCRC;
---
>    
349c349
<   UInt32 storedBlockCRC;
---
>    storedBlockCRC;
349c349
<   UInt32 storedBlockCRC;
---
>    ;
(90.6 %, 19361 bytes)
348a349
>    
350d350
<   UInt32 storedCombinedCRC;
349,350c349,350
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>   UInt32 storedCombinedCRC
349,350c349,350
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>    storedCombinedCRC
349,350c349,350
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>   UInt32 
349,350c349,350
<    ;
<   UInt32 storedCombinedCRC;
---
>    
>    
350c350
<   UInt32 storedCombinedCRC;
---
>    storedCombinedCRC;
350c350
<   UInt32 storedCombinedCRC;
---
>    ;
(90.6 %, 19337 bytes)
349a350
>    
351d351
<   UInt32 calculatedBlockCRC;
350,351c350,351
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>   UInt32 calculatedBlockCRC
350,351c350,351
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>    calculatedBlockCRC
350,351c350,351
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>   UInt32 
350,351c350,351
<    ;
<   UInt32 calculatedBlockCRC;
---
>    
>    
351c351
<   UInt32 calculatedBlockCRC;
---
>    calculatedBlockCRC;
351c351
<   UInt32 calculatedBlockCRC;
---
>    ;
(90.6 %, 19312 bytes)
350a351
>    
352d352
<   UInt32 calculatedCombinedCRC;
351,352c351,352
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>   UInt32 calculatedCombinedCRC
351,352c351,352
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>    calculatedCombinedCRC
351,352c351,352
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>   UInt32 
351,352c351,352
<    ;
<   UInt32 calculatedCombinedCRC;
---
>    
>    
352c352
<   UInt32 calculatedCombinedCRC;
---
>    calculatedCombinedCRC;
352c352
<   UInt32 calculatedCombinedCRC;
---
>    ;
(90.6 %, 19284 bytes)
352c352
<    ;
---
>    
354c354
<   Int32 nInUse;
---
>    ;
352c352
<    ;
---
>    
354c354
<   Int32 nInUse;
---
>   Int32 nInUse
352c352
<    ;
---
>    
354c354
<   Int32 nInUse;
---
>    nInUse
352c352
<    ;
---
>    
354c354
<   Int32 nInUse;
---
>   Int32 
352c352
<    ;
---
>    
354c354
<   Int32 nInUse;
---
>    
354c354
<   Int32 nInUse;
---
>    nInUse;
354c354
<   Int32 nInUse;
---
>    ;
(90.6 %, 19272 bytes)
354,355c354,355
<    ;
<   Bool inUse[6];
---
>    
>    [6];
354,355c354,355
<    ;
<   Bool inUse[6];
---
>    
>   Bool inUse6];
354,355c354,355
<    ;
<   Bool inUse[6];
---
>    
>    inUse6];
354,355c354,355
<    ;
<   Bool inUse[6];
---
>    
>   Bool 6];
354,355c354,355
<    ;
<   Bool inUse[6];
---
>    
>    6];
355c355
<   Bool inUse[6];
---
>    inUse[6];
355c355
<   Bool inUse[6];
---
>    [6];
355c355
<   Bool inUse[6];
---
>    inUse6];
355c355
<   Bool inUse[6];
---
>    6];
355c355
<   Bool inUse[6];
---
>    inUse[];
355c355
<   Bool inUse[6];
---
>    [];
355c355
<   Bool inUse[6];
---
>    inUse];
355c355
<   Bool inUse[6];
---
>    ];
355c355
<   Bool inUse[6];
---
>   Bool [6];
355c355
<   Bool inUse[6];
---
>   Bool 6];
355c355
<   Bool inUse[6];
---
>   Bool [];
355c355
<   Bool inUse[6];
---
>   Bool ];
355c355
<   Bool inUse[6];
---
>   Bool [6;
355c355
<   Bool inUse[6];
---
>   Bool 6;
355c355
<   Bool inUse[6];
---
>   Bool [;
355c355
<   Bool inUse[6];
---
>   Bool ;
355c355
<   Bool inUse[6];
---
>   Bool inUse6];
355c355
<   Bool inUse[6];
---
>   Bool inUse];
355c355
<   Bool inUse[6];
---
>   Bool inUse6;
(90.6 %, 19264 bytes)
355,356c355,356
<   Bool ;
<   Bool inUse16[6];
---
>   Bool 
>    6];
356c356
<   Bool inUse16[6];
---
>    inUse16[6];
356c356
<   Bool inUse16[6];
---
>    [6];
356c356
<   Bool inUse16[6];
---
>    inUse166];
356c356
<   Bool inUse16[6];
---
>    6];
356c356
<   Bool inUse16[6];
---
>    inUse16[];
356c356
<   Bool inUse16[6];
---
>    [];
356c356
<   Bool inUse16[6];
---
>    inUse16];
356c356
<   Bool inUse16[6];
---
>    ];
356c356
<   Bool inUse16[6];
---
>   Bool [6];
356c356
<   Bool inUse16[6];
---
>   Bool 6];
356c356
<   Bool inUse16[6];
---
>   Bool [];
356c356
<   Bool inUse16[6];
---
>   Bool ];
356c356
<   Bool inUse16[6];
---
>   Bool [6;
356c356
<   Bool inUse16[6];
---
>   Bool 6;
356c356
<   Bool inUse16[6];
---
>   Bool [;
356c356
<   Bool inUse16[6];
---
>   Bool ;
356c356
<   Bool inUse16[6];
---
>   Bool inUse166];
356c356
<   Bool inUse16[6];
---
>   Bool inUse16];
356c356
<   Bool inUse16[6];
---
>   Bool inUse166;
(90.6 %, 19254 bytes)
356,357c356,357
<   Bool ;
<   UChar seqToUnseq[6];
---
>   Bool 
>    6];
357c357
<   UChar seqToUnseq[6];
---
>    seqToUnseq[6];
357c357
<   UChar seqToUnseq[6];
---
>    [6];
357c357
<   UChar seqToUnseq[6];
---
>    seqToUnseq6];
357c357
<   UChar seqToUnseq[6];
---
>    6];
357c357
<   UChar seqToUnseq[6];
---
>    seqToUnseq[];
357c357
<   UChar seqToUnseq[6];
---
>    [];
357c357
<   UChar seqToUnseq[6];
---
>    seqToUnseq];
357c357
<   UChar seqToUnseq[6];
---
>    ];
357c357
<   UChar seqToUnseq[6];
---
>   UChar [6];
357c357
<   UChar seqToUnseq[6];
---
>   UChar 6];
357c357
<   UChar seqToUnseq[6];
---
>   UChar [];
357c357
<   UChar seqToUnseq[6];
---
>   UChar ];
357c357
<   UChar seqToUnseq[6];
---
>   UChar [6;
357c357
<   UChar seqToUnseq[6];
---
>   UChar 6;
357c357
<   UChar seqToUnseq[6];
---
>   UChar [;
357c357
<   UChar seqToUnseq[6];
---
>   UChar ;
357c357
<   UChar seqToUnseq[6];
---
>   UChar seqToUnseq6];
357c357
<   UChar seqToUnseq[6];
---
>   UChar seqToUnseq];
357c357
<   UChar seqToUnseq[6];
---
>   UChar seqToUnseq6;
(90.6 %, 19241 bytes)
357c357
<   UChar ;
---
>   UChar 
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    MTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    mtfa[MTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    [MTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    mtfaMTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    MTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    mtfa[];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    [];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    mtfa];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>    ];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar [MTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar MTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar [];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar ];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar [MTFA_SIZE;
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar MTFA_SIZE;
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar [;
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar ;
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar mtfaMTFA_SIZE];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar mtfa];
359c359
<   UChar mtfa[MTFA_SIZE];
---
>   UChar mtfaMTFA_SIZE;
(90.6 %, 19226 bytes)
359,360c359,360
<   UChar ;
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   UChar 
>    6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    mtfbase[6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    [6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    mtfbase6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    mtfbase[ / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    [ / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>    mtfbase / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>     / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 [6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 [ / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32  / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 [6  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 6  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 [  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32   MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase6 / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase6  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase6 / ];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase / ];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase6  ];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase  ];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[ / MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[ / ];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[  ];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[ / MTFL_SIZE;
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE;
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[ / ;
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[  ;
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[6  MTFL_SIZE];
360c360
<   Int32 mtfbase[6 / MTFL_SIZE];
---
>   Int32 mtfbase[6  ];
(90.6 %, 19224 bytes)
360c360
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  ;
360c360
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  ]
360c360
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  ];
>    selector[BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  ;
>    selector[BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  ]
>    selector[BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  
>    selector[BZ_MAX_SELECTORS];
360c360
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE;
360c360
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE;
>    selector[BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE
>    selector[BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE;
>   UChar [BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE
>   UChar [BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE;
>    [BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE
>    [BZ_MAX_SELECTORS];
360c360
<   Int32 mtfbase[  MTFL_SIZE];
---
>   Int32 mtfbase[  MTFL_SIZE]
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>    selector[BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>   UChar [BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>    [BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>   UChar selectorBZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>    selectorBZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>   UChar BZ_MAX_SELECTORS];
360,361c360,361
<   Int32 mtfbase[  MTFL_SIZE];
<   UChar selector[BZ_MAX_SELECTORS];
---
>   Int32 mtfbase[  MTFL_SIZE]
>    BZ_MAX_SELECTORS];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selector[BZ_MAX_SELECTORS];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    [BZ_MAX_SELECTORS];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selectorBZ_MAX_SELECTORS];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selector[];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    [];
361c361
<   UChar selector[BZ_MAX_SELECTORS];
---
>    selector];
(90.6 %, 19210 bytes)
361c361
<    [BZ_MAX_SELECTORS];
---
>    ;
361c361
<    [BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS]
361c361
<    [BZ_MAX_SELECTORS];
---
>    ]
361c361
<    [BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS
361c361
<    [BZ_MAX_SELECTORS];
---
>    
361c361
<    [BZ_MAX_SELECTORS];
---
>    [];
361c361
<    [BZ_MAX_SELECTORS];
---
>    [;
361c361
<    [BZ_MAX_SELECTORS];
---
>    []
361c361
<    [BZ_MAX_SELECTORS];
---
>    [
(90.6 %, 19192 bytes)
361,362c361,362
<    ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    
>    [BZ_MAX_SELECTORS];
361,362c361,362
<    ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    
>   UChar selectorMtfBZ_MAX_SELECTORS];
361,362c361,362
<    ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    
>    selectorMtfBZ_MAX_SELECTORS];
361,362c361,362
<    ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    
>   UChar BZ_MAX_SELECTORS];
361,362c361,362
<    ;
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    
>    BZ_MAX_SELECTORS];
362c362
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    selectorMtf[BZ_MAX_SELECTORS];
362c362
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    [BZ_MAX_SELECTORS];
362c362
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    selectorMtfBZ_MAX_SELECTORS];
362c362
<   UChar selectorMtf[BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS];
(90.6 %, 19175 bytes)
362c362
<    [BZ_MAX_SELECTORS];
---
>    ;
362c362
<    [BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS]
362c362
<    [BZ_MAX_SELECTORS];
---
>    ]
362c362
<    [BZ_MAX_SELECTORS];
---
>    BZ_MAX_SELECTORS
362c362
<    [BZ_MAX_SELECTORS];
---
>    
362c362
<    [BZ_MAX_SELECTORS];
---
>    [];
362c362
<    [BZ_MAX_SELECTORS];
---
>    [;
362c362
<    [BZ_MAX_SELECTORS];
---
>    []
362c362
<    [BZ_MAX_SELECTORS];
---
>    [
362,363c362,363
<    [BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
362,363c362,363
<    [BZ_MAX_SELECTORS];
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [;
>    len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19157 bytes)
362,363c362,363
<    ;
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
362,363c362,363
<    ;
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   UChar lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
362,363c362,363
<    ;
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
362,363c362,363
<    ;
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   UChar BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
362,363c362,363
<    ;
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    lenBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<   UChar len[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    len[][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19148 bytes)
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(90.7 %, 19135 bytes)
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19116 bytes)
363c363
<    ;
---
>    
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<    ;
---
>    
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 limitBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<    ;
---
>    
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limitBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<    ;
---
>    
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
363c363
<    ;
---
>    
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limitBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit[][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    limit][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
365c365
<   Int32 limit[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>   Int32 [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19105 bytes)
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(90.7 %, 19092 bytes)
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
365,366c365,366
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [;
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365c365
<    [BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE;
(90.7 %, 19073 bytes)
365,366c365,366
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 baseBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    baseBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
365,366c365,366
<    ;
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366c366
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366c366
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366c366
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    baseBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366c366
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366c366
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    base[][BZ_MAX_ALPHA_SIZE];
366c366
<   Int32 base[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19063 bytes)
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
366c366
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(90.7 %, 19050 bytes)
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
366c366
<    [BZ_MAX_ALPHA_SIZE];
---
>    [
366,367c366,367
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [];
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [;
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    [BZ_MAX_ALPHA_SIZE];
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19031 bytes)
366,367c366,367
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 permBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    permBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>   Int32 BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
366,367c366,367
<    ;
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    permBZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    perm[][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    perm][BZ_MAX_ALPHA_SIZE];
367c367
<   Int32 perm[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ][BZ_MAX_ALPHA_SIZE];
(90.7 %, 19021 bytes)
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPS]BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    ]BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_N_GROUPSBZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [][BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [[BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    []BZ_MAX_ALPHA_SIZE];
367c367
<    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>    [BZ_MAX_ALPHA_SIZE];
(90.7 %, 19008 bytes)
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    ;
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE]
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    ]
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    BZ_MAX_ALPHA_SIZE
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    [];
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    [;
367c367
<    [BZ_MAX_ALPHA_SIZE];
---
>    []
(90.7 %, 18989 bytes)
367,368c367,368
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>    [BZ_N_GROUPS];
367,368c367,368
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>   Int32 minLensBZ_N_GROUPS];
367,368c367,368
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>    minLensBZ_N_GROUPS];
367,368c367,368
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>   Int32 BZ_N_GROUPS];
367,368c367,368
<    ;
<   Int32 minLens[BZ_N_GROUPS];
---
>    
>    BZ_N_GROUPS];
368c368
<   Int32 minLens[BZ_N_GROUPS];
---
>    minLens[BZ_N_GROUPS];
368c368
<   Int32 minLens[BZ_N_GROUPS];
---
>    [BZ_N_GROUPS];
368c368
<   Int32 minLens[BZ_N_GROUPS];
---
>    minLensBZ_N_GROUPS];
(90.7 %, 18976 bytes)
368c368
<    [BZ_N_GROUPS];
---
>    ;
368c368
<    [BZ_N_GROUPS];
---
>    BZ_N_GROUPS]
368c368
<    [BZ_N_GROUPS];
---
>    ]
368c368
<    [BZ_N_GROUPS];
---
>    BZ_N_GROUPS
368c368
<    [BZ_N_GROUPS];
---
>    
368c368
<    [BZ_N_GROUPS];
---
>    [];
368c368
<    [BZ_N_GROUPS];
---
>    [;
368c368
<    [BZ_N_GROUPS];
---
>    []
368c368
<    [BZ_N_GROUPS];
---
>    [
368c368
<    [BZ_N_GROUPS];
---
>    [];
370c370
<   Int32 save_i;
---
>    save_i;
(90.7 %, 18963 bytes)
368c368
<    ;
---
>    
370c370
<   Int32 save_i;
---
>    ;
368c368
<    ;
---
>    
370c370
<   Int32 save_i;
---
>   Int32 save_i
368c368
<    ;
---
>    
370c370
<   Int32 save_i;
---
>    save_i
368c368
<    ;
---
>    
370c370
<   Int32 save_i;
---
>   Int32 
368c368
<    ;
---
>    
370c370
<   Int32 save_i;
---
>    
370c370
<   Int32 save_i;
---
>    save_i;
370c370
<   Int32 save_i;
---
>    ;
(90.8 %, 18951 bytes)
369a370
>    
371d371
<   Int32 save_j;
370,371c370,371
<    ;
<   Int32 save_j;
---
>    
>   Int32 save_j
370,371c370,371
<    ;
<   Int32 save_j;
---
>    
>    save_j
370,371c370,371
<    ;
<   Int32 save_j;
---
>    
>   Int32 
370,371c370,371
<    ;
<   Int32 save_j;
---
>    
>    
371c371
<   Int32 save_j;
---
>    save_j;
371c371
<   Int32 save_j;
---
>    ;
(90.8 %, 18939 bytes)
370a371
>    
372d372
<   Int32 save_t;
371,372c371,372
<    ;
<   Int32 save_t;
---
>    
>   Int32 save_t
371,372c371,372
<    ;
<   Int32 save_t;
---
>    
>    save_t
371,372c371,372
<    ;
<   Int32 save_t;
---
>    
>   Int32 
371,372c371,372
<    ;
<   Int32 save_t;
---
>    
>    
372c372
<   Int32 save_t;
---
>    save_t;
372c372
<   Int32 save_t;
---
>    ;
(90.8 %, 18927 bytes)
371a372
>    
373d373
<   Int32 save_alphaSize;
372,373c372,373
<    ;
<   Int32 save_alphaSize;
---
>    
>   Int32 save_alphaSize
372,373c372,373
<    ;
<   Int32 save_alphaSize;
---
>    
>    save_alphaSize
372,373c372,373
<    ;
<   Int32 save_alphaSize;
---
>    
>   Int32 
372,373c372,373
<    ;
<   Int32 save_alphaSize;
---
>    
>    
373c373
<   Int32 save_alphaSize;
---
>    save_alphaSize;
373c373
<   Int32 save_alphaSize;
---
>    ;
(90.8 %, 18907 bytes)
372a373
>    
374d374
<   Int32 save_nGroups;
373,374c373,374
<    ;
<   Int32 save_nGroups;
---
>    
>   Int32 save_nGroups
373,374c373,374
<    ;
<   Int32 save_nGroups;
---
>    
>    save_nGroups
373,374c373,374
<    ;
<   Int32 save_nGroups;
---
>    
>   Int32 
373,374c373,374
<    ;
<   Int32 save_nGroups;
---
>    
>    
374c374
<   Int32 save_nGroups;
---
>    save_nGroups;
374c374
<   Int32 save_nGroups;
---
>    ;
(90.8 %, 18889 bytes)
373a374
>    
375d375
<   Int32 save_nSelectors;
374,375c374,375
<    ;
<   Int32 save_nSelectors;
---
>    
>   Int32 save_nSelectors
374,375c374,375
<    ;
<   Int32 save_nSelectors;
---
>    
>    save_nSelectors
374,375c374,375
<    ;
<   Int32 save_nSelectors;
---
>    
>   Int32 
374,375c374,375
<    ;
<   Int32 save_nSelectors;
---
>    
>    
375c375
<   Int32 save_nSelectors;
---
>    save_nSelectors;
375c375
<   Int32 save_nSelectors;
---
>    ;
(90.8 %, 18868 bytes)
374a375
>    
376d376
<   Int32 save_EOB;
375,376c375,376
<    ;
<   Int32 save_EOB;
---
>    
>   Int32 save_EOB
375,376c375,376
<    ;
<   Int32 save_EOB;
---
>    
>    save_EOB
375,376c375,376
<    ;
<   Int32 save_EOB;
---
>    
>   Int32 
375,376c375,376
<    ;
<   Int32 save_EOB;
---
>    
>    
376c376
<   Int32 save_EOB;
---
>    save_EOB;
376c376
<   Int32 save_EOB;
---
>    ;
(90.8 %, 18854 bytes)
375a376
>    
377d377
<   Int32 save_groupNo;
376,377c376,377
<    ;
<   Int32 save_groupNo;
---
>    
>   Int32 save_groupNo
376,377c376,377
<    ;
<   Int32 save_groupNo;
---
>    
>    save_groupNo
376,377c376,377
<    ;
<   Int32 save_groupNo;
---
>    
>   Int32 
376,377c376,377
<    ;
<   Int32 save_groupNo;
---
>    
>    
377c377
<   Int32 save_groupNo;
---
>    save_groupNo;
377c377
<   Int32 save_groupNo;
---
>    ;
(90.8 %, 18836 bytes)
376a377
>    
378d378
<   Int32 save_groupPos;
377,378c377,378
<    ;
<   Int32 save_groupPos;
---
>    
>   Int32 save_groupPos
377,378c377,378
<    ;
<   Int32 save_groupPos;
---
>    
>    save_groupPos
377,378c377,378
<    ;
<   Int32 save_groupPos;
---
>    
>   Int32 
377,378c377,378
<    ;
<   Int32 save_groupPos;
---
>    
>    
378c378
<   Int32 save_groupPos;
---
>    save_groupPos;
378c378
<   Int32 save_groupPos;
---
>    ;
(90.8 %, 18817 bytes)
377a378
>    
379d379
<   Int32 save_nextSym;
378,379c378,379
<    ;
<   Int32 save_nextSym;
---
>    
>   Int32 save_nextSym
378,379c378,379
<    ;
<   Int32 save_nextSym;
---
>    
>    save_nextSym
378,379c378,379
<    ;
<   Int32 save_nextSym;
---
>    
>   Int32 
378,379c378,379
<    ;
<   Int32 save_nextSym;
---
>    
>    
379c379
<   Int32 save_nextSym;
---
>    save_nextSym;
379c379
<   Int32 save_nextSym;
---
>    ;
(90.8 %, 18799 bytes)
378a379
>    
380d380
<   Int32 save_nblockMAX;
379,380c379,380
<    ;
<   Int32 save_nblockMAX;
---
>    
>   Int32 save_nblockMAX
379,380c379,380
<    ;
<   Int32 save_nblockMAX;
---
>    
>    save_nblockMAX
379,380c379,380
<    ;
<   Int32 save_nblockMAX;
---
>    
>   Int32 
379,380c379,380
<    ;
<   Int32 save_nblockMAX;
---
>    
>    
380c380
<   Int32 save_nblockMAX;
---
>    save_nblockMAX;
380c380
<   Int32 save_nblockMAX;
---
>    ;
(90.8 %, 18779 bytes)
379a380
>    
381d381
<   Int32 save_nblock;
380,381c380,381
<    ;
<   Int32 save_nblock;
---
>    
>   Int32 save_nblock
380,381c380,381
<    ;
<   Int32 save_nblock;
---
>    
>    save_nblock
380,381c380,381
<    ;
<   Int32 save_nblock;
---
>    
>   Int32 
380,381c380,381
<    ;
<   Int32 save_nblock;
---
>    
>    
381c381
<   Int32 save_nblock;
---
>    save_nblock;
381c381
<   Int32 save_nblock;
---
>    ;
(90.8 %, 18762 bytes)
380a381
>    
382d382
<   Int32 save_es;
381,382c381,382
<    ;
<   Int32 save_es;
---
>    
>   Int32 save_es
381,382c381,382
<    ;
<   Int32 save_es;
---
>    
>    save_es
381,382c381,382
<    ;
<   Int32 save_es;
---
>    
>   Int32 
381,382c381,382
<    ;
<   Int32 save_es;
---
>    
>    
382c382
<   Int32 save_es;
---
>    save_es;
382c382
<   Int32 save_es;
---
>    ;
(90.9 %, 18749 bytes)
381a382
>    
383d383
<   Int32 save_N;
382,383c382,383
<    ;
<   Int32 save_N;
---
>    
>   Int32 save_N
382,383c382,383
<    ;
<   Int32 save_N;
---
>    
>    save_N
382,383c382,383
<    ;
<   Int32 save_N;
---
>    
>   Int32 
382,383c382,383
<    ;
<   Int32 save_N;
---
>    
>    
383c383
<   Int32 save_N;
---
>    save_N;
383c383
<   Int32 save_N;
---
>    ;
(90.9 %, 18737 bytes)
382a383
>    
384d384
<   Int32 save_curr;
383,384c383,384
<    ;
<   Int32 save_curr;
---
>    
>   Int32 save_curr
383,384c383,384
<    ;
<   Int32 save_curr;
---
>    
>    save_curr
383,384c383,384
<    ;
<   Int32 save_curr;
---
>    
>   Int32 
383,384c383,384
<    ;
<   Int32 save_curr;
---
>    
>    
384c384
<   Int32 save_curr;
---
>    save_curr;
384c384
<   Int32 save_curr;
---
>    ;
(90.9 %, 18722 bytes)
383a384
>    
385d385
<   Int32 save_zt;
384,385c384,385
<    ;
<   Int32 save_zt;
---
>    
>   Int32 save_zt
384,385c384,385
<    ;
<   Int32 save_zt;
---
>    
>    save_zt
384,385c384,385
<    ;
<   Int32 save_zt;
---
>    
>   Int32 
384,385c384,385
<    ;
<   Int32 save_zt;
---
>    
>    
385c385
<   Int32 save_zt;
---
>    save_zt;
385c385
<   Int32 save_zt;
---
>    ;
(90.9 %, 18709 bytes)
384a385
>    
386d386
<   Int32 save_zn;
385,386c385,386
<    ;
<   Int32 save_zn;
---
>    
>   Int32 save_zn
385,386c385,386
<    ;
<   Int32 save_zn;
---
>    
>    save_zn
385,386c385,386
<    ;
<   Int32 save_zn;
---
>    
>   Int32 
385,386c385,386
<    ;
<   Int32 save_zn;
---
>    
>    
386c386
<   Int32 save_zn;
---
>    save_zn;
386c386
<   Int32 save_zn;
---
>    ;
(90.9 %, 18696 bytes)
385a386
>    
387d387
<   Int32 save_zvec;
386,387c386,387
<    ;
<   Int32 save_zvec;
---
>    
>   Int32 save_zvec
386,387c386,387
<    ;
<   Int32 save_zvec;
---
>    
>    save_zvec
386,387c386,387
<    ;
<   Int32 save_zvec;
---
>    
>   Int32 
386,387c386,387
<    ;
<   Int32 save_zvec;
---
>    
>    
387c387
<   Int32 save_zvec;
---
>    save_zvec;
387c387
<   Int32 save_zvec;
---
>    ;
(90.9 %, 18681 bytes)
386a387
>    
388d388
<   Int32 save_zj;
387,388c387,388
<    ;
<   Int32 save_zj;
---
>    
>   Int32 save_zj
387,388c387,388
<    ;
<   Int32 save_zj;
---
>    
>    save_zj
387,388c387,388
<    ;
<   Int32 save_zj;
---
>    
>   Int32 
387,388c387,388
<    ;
<   Int32 save_zj;
---
>    
>    
388c388
<   Int32 save_zj;
---
>    save_zj;
388c388
<   Int32 save_zj;
---
>    ;
(90.9 %, 18668 bytes)
387a388
>    
389d389
<   Int32 save_gSel;
388,389c388,389
<    ;
<   Int32 save_gSel;
---
>    
>   Int32 save_gSel
388,389c388,389
<    ;
<   Int32 save_gSel;
---
>    
>    save_gSel
388,389c388,389
<    ;
<   Int32 save_gSel;
---
>    
>   Int32 
388,389c388,389
<    ;
<   Int32 save_gSel;
---
>    
>    
389c389
<   Int32 save_gSel;
---
>    save_gSel;
389c389
<   Int32 save_gSel;
---
>    ;
(90.9 %, 18653 bytes)
388a389
>    
390d390
<   Int32 save_gMinlen;
389,390c389,390
<    ;
<   Int32 save_gMinlen;
---
>    
>   Int32 save_gMinlen
389,390c389,390
<    ;
<   Int32 save_gMinlen;
---
>    
>    save_gMinlen
389,390c389,390
<    ;
<   Int32 save_gMinlen;
---
>    
>   Int32 
389,390c389,390
<    ;
<   Int32 save_gMinlen;
---
>    
>    
390c390
<   Int32 save_gMinlen;
---
>    save_gMinlen;
390c390
<   Int32 save_gMinlen;
---
>    ;
(90.9 %, 18635 bytes)
390,391c390,391
<    ;
<   Int32 *save_gLimit;
---
>    
>    save_gLimit;
390,391c390,391
<    ;
<   Int32 *save_gLimit;
---
>    
>   Int32 *;
390,391c390,391
<    ;
<   Int32 *save_gLimit;
---
>    
>    *;
390,391c390,391
<    ;
<   Int32 *save_gLimit;
---
>    
>   Int32 ;
389a390
>    
391d391
<   Int32 *save_gLimit;
391c391
<   Int32 *save_gLimit;
---
>    *save_gLimit;
391c391
<   Int32 *save_gLimit;
---
>    save_gLimit;
391c391
<   Int32 *save_gLimit;
---
>    *;
391c391
<   Int32 *save_gLimit;
---
>    ;
(90.9 %, 18617 bytes)
390a391
>    
392d392
<   Int32 *save_gBase;
392c392
<   Int32 *save_gBase;
---
>    *save_gBase;
392c392
<   Int32 *save_gBase;
---
>    save_gBase;
392c392
<   Int32 *save_gBase;
---
>    *;
392c392
<   Int32 *save_gBase;
---
>    ;
(90.9 %, 18600 bytes)
391a392
>    
393d393
<   Int32 *save_gPerm;
393c393
<   Int32 *save_gPerm;
---
>    *save_gPerm;
393c393
<   Int32 *save_gPerm;
---
>    save_gPerm;
393c393
<   Int32 *save_gPerm;
---
>    *;
393c393
<   Int32 *save_gPerm;
---
>    ;
(90.9 %, 18583 bytes)
393c393
<    ;
---
>    
395c395
< } DState;
---
>  
395c395
< } DState;
---
>  DState;
395c395
< } DState;
---
>  ;
395c395
< } DState;
---
>  DState
395c395
< } DState;
---
>  
395c395
< } DState;
---
>  DState;
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
>  ;
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
>  DState
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
>  
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } ;
395c395
< } DState;
---
> } 
395c395
< } DState;
---
> } ;
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } 
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } ;
397c397
< #define BZ_GET_FASTc                                                           \
---
> # BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } 
397c397
< #define BZ_GET_FASTc                                                           \
---
> # BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } ;
397c397
< #define BZ_GET_FASTc                                                           \
---
>  BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } 
397c397
< #define BZ_GET_FASTc                                                           \
---
>  BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } DState
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
> # BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
>  BZ_GET_FASTc                                                           \
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
> #define                                                            \
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
> define                                                            \
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
> #                                                            \
395c395
< } DState;
---
> } DState
397c397
< #define BZ_GET_FASTc                                                           \
---
>                                                             \
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           \
397c397
< #define BZ_GET_FASTc                                                           \
---
>  BZ_GET_FASTc                                                           \
397c397
< #define BZ_GET_FASTc                                                           \
---
> define                                                            \
397c397
< #define BZ_GET_FASTc                                                           \
---
>                                                             \
397c397
< #define BZ_GET_FASTc                                                           \
---
> define BZ_GET_FASTc                                                           
397c397
< #define BZ_GET_FASTc                                                           \
---
>  BZ_GET_FASTc                                                           
397c397
< #define BZ_GET_FASTc                                                           \
---
> define                                                            
397c397
< #define BZ_GET_FASTc                                                           \
---
>                                                             
397c397
< #define BZ_GET_FASTc                                                           \
---
> # BZ_GET_FASTc                                                           \
397c397
< #define BZ_GET_FASTc                                                           \
---
> #                                                            \
397c397
< #define BZ_GET_FASTc                                                           \
---
> # BZ_GET_FASTc                                                           
397c397
< #define BZ_GET_FASTc                                                           \
---
> #                                                            
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> # BZ_GET_FASTc                                                           \
>   ->tPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #                                                            \
>   ->tPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> # BZ_GET_FASTc                                                           
>   ->tPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #                                                            
>   ->tPos = s->tt[s->tPos];                                                    \
397c397
< #define BZ_GET_FASTc                                                           \
---
> #define                                                            \
397c397
< #define BZ_GET_FASTc                                                           \
---
> #define                                                            
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                            \
>   ->tPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                            
>   ->tPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                            \
>   stPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                            
>   stPos = s->tt[s->tPos];                                                    \
397,398c397,398
< #define BZ_GET_FASTc                                                           \
<   s->tPos = s->tt[s->tPos];                                                    \
---
> #define                                                            \
>   tPos = s->tt[s->tPos];                                                    \
(90.9 %, 18569 bytes)
397,398c397,398
< #define                                                            \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                            
>   stPos = ->tt[s->tPos];                                                    \
397,398c397,398
< #define                                                            \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                            
>    = ->tt[s->tPos];                                                    \
397,398c397,398
< #define                                                            \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                            
>   stPos  ->tt[s->tPos];                                                    \
397,398c397,398
< #define                                                            \
<   stPos = s->tt[s->tPos];                                                    \
---
> #define                                                            
>     ->tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>    = s->tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>     s->tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>    = ->tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>     ->tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>    = stt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>     stt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>    = tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>     tt[s->tPos];                                                    \
398c398
<   stPos = s->tt[s->tPos];                                                    \
---
>   stPos  s->tt[s->tPos];                                                    \
(90.9 %, 18561 bytes)
398c398
<     stt[s->tPos];                                                    \
---
>     stPos];                                                    \
398c398
<     stt[s->tPos];                                                    \
---
>     [tPos];                                                    \
398c398
<     stt[s->tPos];                                                    \
---
>     tPos];                                                    \
(90.9 %, 18555 bytes)
398c398
<     stPos];                                                    \
---
>     ;                                                    
398c398
<     stPos];                                                    \
---
>     ]                                                    
398c398
<     stPos];                                                    \
---
>                                                         
398c398
<     stPos];                                                    \
---
>     stPos;                                                    \
398c398
<     stPos];                                                    \
---
>     stPos                                                    \
398c398
<     stPos];                                                    \
---
>     stPos;                                                    
(90.9 %, 18554 bytes)
398c398
<     stPos;                                                    \
---
>     stPos                                                    \
398c398
<     stPos;                                                    \
---
>     stPos                                                    
398,399c398,399
<     stPos;                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    \
>    = UChars->tPos & 15;                                                       \
(90.9 %, 18553 bytes)
398c398
<     stPos                                                    \
---
>     stPos                                                    
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>    = UChars->tPos & 15;                                                       \
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>   c  UChars->tPos & 15;                                                       \
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>     UChars->tPos & 15;                                                       \
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>   c = ->tPos & 15;                                                       \
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>    = ->tPos & 15;                                                       \
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>   c  ->tPos & 15;                                                       \
398,399c398,399
<     stPos                                                    \
<   c = UChars->tPos & 15;                                                       \
---
>     stPos                                                    
>     ->tPos & 15;                                                       \
399c399
<   c = UChars->tPos & 15;                                                       \
---
>    = UChars->tPos & 15;                                                       \
399c399
<   c = UChars->tPos & 15;                                                       \
---
>     UChars->tPos & 15;                                                       \
(90.9 %, 18552 bytes)
399c399
<    = UChars->tPos & 15;                                                       \
---
>     UChars->tPos & 15;                                                       \
399c399
<    = UChars->tPos & 15;                                                       \
---
>     ->tPos & 15;                                                       \
(90.9 %, 18551 bytes)
399c399
<     UChars->tPos & 15;                                                       \
---
>     ->tPos & 15;                                                       \
399c399
<     UChars->tPos & 15;                                                       \
---
>     tPos & 15;                                                       \
(91.0 %, 18545 bytes)
399c399
<     ->tPos & 15;                                                       \
---
>     tPos & 15;                                                       \
399c399
<     ->tPos & 15;                                                       \
---
>      & 15;                                                       \
(91.0 %, 18543 bytes)
399c399
<     tPos & 15;                                                       \
---
>      & 15;                                                       \
399c399
<     tPos & 15;                                                       \
---
>       15;                                                       \
(91.0 %, 18539 bytes)
399c399
<      & 15;                                                       \
---
>       15;                                                       \
399c399
<      & 15;                                                       \
---
>       ;                                                       \
399c399
<      & 15;                                                       \
---
>       15                                                       \
(91.0 %, 18538 bytes)
399c399
<       15;                                                       \
---
>       ;                                                       \
399c399
<       15;                                                       \
---
>                                                              \
(91.0 %, 18536 bytes)
399c399
<       ;                                                       \
---
>                                                              \
399c399
<       ;                                                       \
---
>                                                              
399,400c399,400
<       ;                                                       \
<   s->tPos >>= 8;
---
>                                                              \
>   ->tPos >>= 8;
(91.0 %, 18535 bytes)
399c399
<                                                              \
---
>                                                              
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>   ->tPos >>= 8;
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>   stPos >>= 8;
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>   tPos >>= 8;
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>   s-> >>= 8;
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>   -> >>= 8;
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>   s >>= 8;
399,400c399,400
<                                                              \
<   s->tPos >>= 8;
---
>                                                              
>    >>= 8;
400c400
<   s->tPos >>= 8;
---
>   ->tPos >>= 8;
400c400
<   s->tPos >>= 8;
---
>   tPos >>= 8;
(91.0 %, 18534 bytes)
400c400
<   ->tPos >>= 8;
---
>   tPos >>= 8;
400c400
<   ->tPos >>= 8;
---
>    >>= 8;
(91.0 %, 18532 bytes)
400c400
<   tPos >>= 8;
---
>    >>= 8;
400c400
<   tPos >>= 8;
---
>     8;
(91.0 %, 18528 bytes)
400c400
<    >>= 8;
---
>     8;
400c400
<    >>= 8;
---
>     ;
400c400
<    >>= 8;
---
>     8
(91.0 %, 18525 bytes)
400c400
<     8;
---
>     ;
400c400
<     8;
---
>     
(91.0 %, 18524 bytes)
400c400
<     ;
---
>     
400c400
<     ;
---
>     
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> define BZ_GET_FAST_Cc                                                         \
400c400
<     ;
---
>     
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> # BZ_GET_FAST_Cc                                                         \
400c400
<     ;
---
>     
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
>  BZ_GET_FAST_Cc                                                         \
400c400
<     ;
---
>     
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> #define                                                          \
(91.0 %, 18523 bytes)
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> define BZ_GET_FAST_Cc                                                         \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
>  BZ_GET_FAST_Cc                                                         \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> define                                                          \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
>                                                           \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> define BZ_GET_FAST_Cc                                                         
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
>  BZ_GET_FAST_Cc                                                         
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> define                                                          
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
>                                                           
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> # BZ_GET_FAST_Cc                                                         \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> #                                                          \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> # BZ_GET_FAST_Cc                                                         
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> #                                                          
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> # BZ_GET_FAST_Cc                                                         \
>    = c_tt[c_tPos];                                                       \
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #                                                          \
>    = c_tt[c_tPos];                                                       \
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> # BZ_GET_FAST_Cc                                                         
>    = c_tt[c_tPos];                                                       \
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #                                                          
>    = c_tt[c_tPos];                                                       \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> #define                                                          \
402c402
< #define BZ_GET_FAST_Cc                                                         \
---
> #define                                                          
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          \
>    = c_tt[c_tPos];                                                       \
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>    = c_tt[c_tPos];                                                       \
402,403c402,403
< #define BZ_GET_FAST_Cc                                                         \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          \
>   c_tPos  c_tt[c_tPos];                                                       \
(91.0 %, 18509 bytes)
402c402
< #define                                                          \
---
> #define                                                          
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>    = c_tt[c_tPos];                                                       \
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>   c_tPos  c_tt[c_tPos];                                                       \
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>     c_tt[c_tPos];                                                       \
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>   c_tPos = [c_tPos];                                                       \
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>    = [c_tPos];                                                       \
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>   c_tPos  [c_tPos];                                                       \
402,403c402,403
< #define                                                          \
<   c_tPos = c_tt[c_tPos];                                                       \
---
> #define                                                          
>     [c_tPos];                                                       \
403c403
<   c_tPos = c_tt[c_tPos];                                                       \
---
>    = c_tt[c_tPos];                                                       \
403c403
<   c_tPos = c_tt[c_tPos];                                                       \
---
>     c_tt[c_tPos];                                                       \
403c403
<   c_tPos = c_tt[c_tPos];                                                       \
---
>    = [c_tPos];                                                       \
403c403
<   c_tPos = c_tt[c_tPos];                                                       \
---
>     [c_tPos];                                                       \
403c403
<   c_tPos = c_tt[c_tPos];                                                       \
---
>    = c_ttc_tPos];                                                       \
403c403
<   c_tPos = c_tt[c_tPos];                                                       \
---
>     c_ttc_tPos];                                                       \
(91.0 %, 18502 bytes)
403c403
<     c_tt[c_tPos];                                                       \
---
>     c_tPos];                                                       \
403c403
<     c_tt[c_tPos];                                                       \
---
>     [];                                                       \
403c403
<     c_tt[c_tPos];                                                       \
---
>     ];                                                       \
403c403
<     c_tt[c_tPos];                                                       \
---
>     [c_tPos;                                                       \
403c403
<     c_tt[c_tPos];                                                       \
---
>     c_tPos;                                                       \
(91.0 %, 18497 bytes)
403c403
<     c_tPos];                                                       \
---
>     ;                                                       \
403c403
<     c_tPos];                                                       \
---
>     ]                                                       \
403c403
<     c_tPos];                                                       \
---
>                                                            \
403c403
<     c_tPos];                                                       \
---
>     ];                                                       
403c403
<     c_tPos];                                                       \
---
>     ;                                                       
403c403
<     c_tPos];                                                       \
---
>     ]                                                       
403c403
<     c_tPos];                                                       \
---
>                                                            
403c403
<     c_tPos];                                                       \
---
>     c_tPos;                                                       \
(91.0 %, 18489 bytes)
403,404c403,404
<                                                            \
<   c = UCharc_tPos & 15;                                                        \
---
>                                                            
>     UCharc_tPos & 15;                                                        \
403,404c403,404
<                                                            \
<   c = UCharc_tPos & 15;                                                        \
---
>                                                            
>   c =  & 15;                                                        \
403,404c403,404
<                                                            \
<   c = UCharc_tPos & 15;                                                        \
---
>                                                            
>    =  & 15;                                                        \
403,404c403,404
<                                                            \
<   c = UCharc_tPos & 15;                                                        \
---
>                                                            
>   c   & 15;                                                        \
403,404c403,404
<                                                            \
<   c = UCharc_tPos & 15;                                                        \
---
>                                                            
>      & 15;                                                        \
404c404
<   c = UCharc_tPos & 15;                                                        \
---
>    = UCharc_tPos & 15;                                                        \
404c404
<   c = UCharc_tPos & 15;                                                        \
---
>     UCharc_tPos & 15;                                                        \
404c404
<   c = UCharc_tPos & 15;                                                        \
---
>    =  & 15;                                                        \
404c404
<   c = UCharc_tPos & 15;                                                        \
---
>      & 15;                                                        \
404c404
<   c = UCharc_tPos & 15;                                                        \
---
>    = UCharc_tPos  15;                                                        \
404c404
<   c = UCharc_tPos & 15;                                                        \
---
>     UCharc_tPos  15;                                                        \
(91.0 %, 18487 bytes)
404c404
<     UCharc_tPos & 15;                                                        \
---
>       15;                                                        \
404c404
<     UCharc_tPos & 15;                                                        \
---
>      & ;                                                        \
404c404
<     UCharc_tPos & 15;                                                        \
---
>       ;                                                        \
404c404
<     UCharc_tPos & 15;                                                        \
---
>      & 15                                                        \
404c404
<     UCharc_tPos & 15;                                                        \
---
>       15                                                        \
404c404
<     UCharc_tPos & 15;                                                        \
---
>      &                                                         \
404c404
<     UCharc_tPos & 15;                                                        \
---
>                                                               \
404c404
<     UCharc_tPos & 15;                                                        \
---
>     UCharc_tPos  15;                                                        \
(91.0 %, 18472 bytes)
404,405c404,405
<                                                               \
<   c_tPos >>= 8;
---
>                                                               
>     ;
405c405
<   c_tPos >>= 8;
---
>    >>= 8;
405c405
<   c_tPos >>= 8;
---
>     8;
405c405
<   c_tPos >>= 8;
---
>    >>= ;
405c405
<   c_tPos >>= 8;
---
>     ;
405c405
<   c_tPos >>= 8;
---
>    >>= 8
405c405
<   c_tPos >>= 8;
---
>     8
405c405
<   c_tPos >>= 8;
---
>    >>= 
405c405
<   c_tPos >>= 8;
---
>     
405c405
<   c_tPos >>= 8;
---
>   c_tPos  8;
405c405
<   c_tPos >>= 8;
---
>   c_tPos  ;
(91.0 %, 18469 bytes)
405c405
<   c_tPos  8;
---
>   c_tPos  ;
405c405
<   c_tPos  8;
---
>   c_tPos  
(91.0 %, 18468 bytes)
405c405
<   c_tPos  ;
---
>   c_tPos  
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
> define SET_LL4i , n
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
> # SET_LL4i , n
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
>  SET_LL4i , n
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
> #define  , n
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
> define  , n
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
> #  , n
405c405
<   c_tPos  ;
---
>   c_tPos  
407c407
< #define SET_LL4i , n
---
>   , n
407c407
< #define SET_LL4i , n
---
> define SET_LL4i , n
407c407
< #define SET_LL4i , n
---
>  SET_LL4i , n
407c407
< #define SET_LL4i , n
---
> define  , n
407c407
< #define SET_LL4i , n
---
>   , n
407c407
< #define SET_LL4i , n
---
> define SET_LL4i  n
(91.0 %, 18467 bytes)
407c407
< #define SET_LL4i , n
---
> define SET_LL4i , n
407c407
< #define SET_LL4i , n
---
>  SET_LL4i , n
407c407
< #define SET_LL4i , n
---
> define  , n
407c407
< #define SET_LL4i , n
---
>   , n
407c407
< #define SET_LL4i , n
---
> define SET_LL4i  n
407c407
< #define SET_LL4i , n
---
>  SET_LL4i  n
407c407
< #define SET_LL4i , n
---
> define   n
407c407
< #define SET_LL4i , n
---
>    n
407c407
< #define SET_LL4i , n
---
> # SET_LL4i , n
407c407
< #define SET_LL4i , n
---
> #  , n
407c407
< #define SET_LL4i , n
---
> # SET_LL4i  n
407c407
< #define SET_LL4i , n
---
> #   n
407c407
< #define SET_LL4i , n
---
> # SET_LL4i , 
407c407
< #define SET_LL4i , n
---
> #  , 
407c407
< #define SET_LL4i , n
---
> # SET_LL4i  
407c407
< #define SET_LL4i , n
---
> #   
407c407
< #define SET_LL4i , n
---
> #define  , n
407c407
< #define SET_LL4i , n
---
> #define   n
407c407
< #define SET_LL4i , n
---
> #define  , 
407c407
< #define SET_LL4i , n
---
> #define   
407c407
< #define SET_LL4i , n
---
> #define  , n
409c409
< #define GET_LL4i                                                               \
---
> define GET_LL4i                                                               \
407c407
< #define SET_LL4i , n
---
> #define   n
409c409
< #define GET_LL4i                                                               \
---
> define GET_LL4i                                                               \
407c407
< #define SET_LL4i , n
---
> #define  , 
409c409
< #define GET_LL4i                                                               \
---
> define GET_LL4i                                                               \
407c407
< #define SET_LL4i , n
---
> #define   
409c409
< #define GET_LL4i                                                               \
---
> define GET_LL4i                                                               \
407c407
< #define SET_LL4i , n
---
> #define SET_LL4i  n
(91.0 %, 18451 bytes)
409c409
< #define GET_LL4i                                                               \
---
>                                                                 
409c409
< #define GET_LL4i                                                               \
---
> # GET_LL4i                                                               \
409c409
< #define GET_LL4i                                                               \
---
> #                                                                \
409c409
< #define GET_LL4i                                                               \
---
> # GET_LL4i                                                               
409c409
< #define GET_LL4i                                                               \
---
> #                                                                
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> # GET_LL4i                                                               \
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #                                                                \
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> # GET_LL4i                                                               
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #                                                                
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409c409
< #define GET_LL4i                                                               \
---
> #define                                                                \
409c409
< #define GET_LL4i                                                               \
---
> #define                                                                
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                \
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                \
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                \
>    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                
>    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409c409
< #define GET_LL4i                                                               \
---
> #define GET_LL4i                                                               
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    ((->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    (->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    (->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define GET_LL4i                                                               \
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define GET_LL4i                                                               
>    ->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    ((UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    (UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
(91.0 %, 18441 bytes)
409,410c409,410
< #define                                                                \
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                
>    UInt32s[i >> 1] >> ((i tPos = GET_LLs->tPos;
409,410c409,410
< #define                                                                \
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
> #define                                                                
>    [i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ->[i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    [i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ->ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ->i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    i >> 1] >> ((i tPos = GET_LLs->tPos;
410c410
<    UInt32s->ll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    UInt32sll4[i >> 1] >> ((i tPos = GET_LLs->tPos;
(91.0 %, 18431 bytes)
410c410
<    ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>      1 >> ((i tPos = GET_LLs->tPos;
410c410
<    ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>     >>  >> ((i tPos = GET_LLs->tPos;
410c410
<    ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>       >> ((i tPos = GET_LLs->tPos;
410c410
<    ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i  1] >> ((i tPos = GET_LLs->tPos;
410c410
<    ll4i >> 1] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i  ] >> ((i tPos = GET_LLs->tPos;
(91.0 %, 18429 bytes)
410c410
<    ll4i  1] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i  ] >> ((i tPos = GET_LLs->tPos;
410c410
<    ll4i  1] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i   >> ((i tPos = GET_LLs->tPos;
(91.0 %, 18428 bytes)
410c410
<    ll4i  ] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i   >> ((i tPos = GET_LLs->tPos;
410c410
<    ll4i  ] >> ((i tPos = GET_LLs->tPos;
---
>    ll4i    ((i tPos = GET_LLs->tPos;
(91.0 %, 18427 bytes)
410c410
<    ll4i   >> ((i tPos = GET_LLs->tPos;
---
>    ll4i    ((i tPos = GET_LLs->tPos;
410c410
<    ll4i   >> ((i tPos = GET_LLs->tPos;
---
>    ll4i    (i tPos = GET_LLs->tPos;
(91.0 %, 18425 bytes)
410c410
<    ll4i    ((i tPos = GET_LLs->tPos;
---
>    ll4i    (i tPos = GET_LLs->tPos;
410c410
<    ll4i    ((i tPos = GET_LLs->tPos;
---
>    ll4i    i tPos = GET_LLs->tPos;
(91.0 %, 18424 bytes)
410c410
<    ll4i    (i tPos = GET_LLs->tPos;
---
>    ll4i    i tPos = GET_LLs->tPos;
410c410
<    ll4i    (i tPos = GET_LLs->tPos;
---
>    ll4i     tPos = GET_LLs->tPos;
(91.0 %, 18423 bytes)
410c410
<    ll4i    i tPos = GET_LLs->tPos;
---
>    ll4i     tPos = GET_LLs->tPos;
410c410
<    ll4i    i tPos = GET_LLs->tPos;
---
>    ll4i      = GET_LLs->tPos;
(91.0 %, 18422 bytes)
410c410
<    ll4i     tPos = GET_LLs->tPos;
---
>    ll4i      = GET_LLs->tPos;
410c410
<    ll4i     tPos = GET_LLs->tPos;
---
>    ll4i       GET_LLs->tPos;
(91.0 %, 18418 bytes)
410c410
<    ll4i      = GET_LLs->tPos;
---
>    ll4i       GET_LLs->tPos;
410c410
<    ll4i      = GET_LLs->tPos;
---
>    ll4i       ->tPos;
(91.0 %, 18417 bytes)
410c410
<    ll4i       GET_LLs->tPos;
---
>    ll4i       ->tPos;
410c410
<    ll4i       GET_LLs->tPos;
---
>    ll4i       tPos;
(91.0 %, 18410 bytes)
410c410
<    ll4i       ->tPos;
---
>    ll4i       tPos;
410c410
<    ll4i       ->tPos;
---
>    ll4i       ;
410c410
<    ll4i       ->tPos;
---
>    ll4i       tPos
(91.0 %, 18408 bytes)
410c410
<    ll4i       tPos;
---
>    ll4i       ;
410c410
<    ll4i       tPos;
---
>    ll4i       
410c410
<    ll4i       tPos;
---
>    ll4i       ;
412c412
< #define fswapzz1 , zz2
---
> define fswapzz1 , zz2
(91.0 %, 18404 bytes)
410c410
<    ll4i       ;
---
>    ll4i       
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
> define fswapzz1 , zz2
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
> # fswapzz1 , zz2
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
>  fswapzz1 , zz2
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
> #define  , zz2
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
> define  , zz2
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
> #  , zz2
410c410
<    ll4i       ;
---
>    ll4i       
412c412
< #define fswapzz1 , zz2
---
>   , zz2
412c412
< #define fswapzz1 , zz2
---
> define fswapzz1 , zz2
412c412
< #define fswapzz1 , zz2
---
>  fswapzz1 , zz2
412c412
< #define fswapzz1 , zz2
---
> define  , zz2
(91.0 %, 18403 bytes)
412c412
< #define fswapzz1 , zz2
---
> define fswapzz1 , zz2
412c412
< #define fswapzz1 , zz2
---
>  fswapzz1 , zz2
412c412
< #define fswapzz1 , zz2
---
> define  , zz2
412c412
< #define fswapzz1 , zz2
---
>   , zz2
412c412
< #define fswapzz1 , zz2
---
> define fswapzz1  zz2
412c412
< #define fswapzz1 , zz2
---
>  fswapzz1  zz2
412c412
< #define fswapzz1 , zz2
---
> define   zz2
412c412
< #define fswapzz1 , zz2
---
>    zz2
412c412
< #define fswapzz1 , zz2
---
> # fswapzz1 , zz2
412c412
< #define fswapzz1 , zz2
---
> #  , zz2
412c412
< #define fswapzz1 , zz2
---
> # fswapzz1  zz2
412c412
< #define fswapzz1 , zz2
---
> #   zz2
412c412
< #define fswapzz1 , zz2
---
> # fswapzz1 , 
412c412
< #define fswapzz1 , zz2
---
> #  , 
412c412
< #define fswapzz1 , zz2
---
> # fswapzz1  
412c412
< #define fswapzz1 , zz2
---
> #   
412c412
< #define fswapzz1 , zz2
---
> #define  , zz2
412c412
< #define fswapzz1 , zz2
---
> #define   zz2
(91.0 %, 18385 bytes)
414c414
< #define fvswapzzp1 , zzp2, zzn
---
>    zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> # fvswapzzp1 , zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #  , zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> # fvswapzzp1  zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #   zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> # fvswapzzp1 , , zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #  , , zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> # fvswapzzp1  , zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #   , zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #define  , zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #define   zzp2, zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #define  , , zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #define   , zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #define  , zzp2 zzn
414c414
< #define fvswapzzp1 , zzp2, zzn
---
> #define   zzp2 zzn
(91.0 %, 18374 bytes)
414c414
< #define   zzp2, zzn
---
> #define    zzn
414c414
< #define   zzp2, zzn
---
> #define   , 
414c414
< #define   zzp2, zzn
---
> #define    
414c414
< #define   zzp2, zzn
---
> #define   , zzn
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define   zzp2, zzn
---
> #define    zzn
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define   zzp2, zzn
---
> #define   , 
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define   zzp2, zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define   zzp2, zzn
---
> #define   zzp2 zzn
(91.0 %, 18369 bytes)
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
>  fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
414c414
< #define    zzn
---
> #define    
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
>  ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
>  fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
>  ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define fminab (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
>  fminab (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> define b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
>  b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # fminab (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # fmina, (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # , (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> # fmina (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #  (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define ,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define , (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  (a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define ,b a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define b a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define , a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a > 5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define fmina,b (a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define fminab (a > 5] |= (1  5] &= ~(1  5] & (1  5]
(91.0 %, 18361 bytes)
416c416
< #define  a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define     |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define  a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a  5] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define  a > 5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a  ] |= (1  5] &= ~(1  5] & (1  5]
(91.0 %, 18360 bytes)
416c416
< #define  a  5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a  ] |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define  a  5] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a   |= (1  5] &= ~(1  5] & (1  5]
(91.0 %, 18359 bytes)
416c416
< #define  a  ] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a   |= (1  5] &= ~(1  5] & (1  5]
416c416
< #define  a  ] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a    (1  5] &= ~(1  5] & (1  5]
416c416
< #define  a  ] |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a   |= 1  5] &= ~(1  5] & (1  5]
(91.0 %, 18358 bytes)
416c416
< #define  a   |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a    (1  5] &= ~(1  5] & (1  5]
416c416
< #define  a   |= (1  5] &= ~(1  5] & (1  5]
---
> #define  a    1  5] &= ~(1  5] & (1  5]
(91.0 %, 18356 bytes)
416c416
< #define  a    (1  5] &= ~(1  5] & (1  5]
---
> #define  a    1  5] &= ~(1  5] & (1  5]
416c416
< #define  a    (1  5] &= ~(1  5] & (1  5]
---
> #define  a      5] &= ~(1  5] & (1  5]
416c416
< #define  a    (1  5] &= ~(1  5] & (1  5]
---
> #define  a    1  ] &= ~(1  5] & (1  5]
(91.0 %, 18355 bytes)
416c416
< #define  a    1  5] &= ~(1  5] & (1  5]
---
> #define  a      5] &= ~(1  5] & (1  5]
416c416
< #define  a    1  5] &= ~(1  5] & (1  5]
---
> #define  a      ] &= ~(1  5] & (1  5]
(91.0 %, 18354 bytes)
416c416
< #define  a      5] &= ~(1  5] & (1  5]
---
> #define  a      ] &= ~(1  5] & (1  5]
416c416
< #define  a      5] &= ~(1  5] & (1  5]
---
> #define  a       &= ~(1  5] & (1  5]
416c416
< #define  a      5] &= ~(1  5] & (1  5]
---
> #define  a      ]  ~(1  5] & (1  5]
(91.0 %, 18353 bytes)
416c416
< #define  a      ] &= ~(1  5] & (1  5]
---
> #define  a       &= ~(1  5] & (1  5]
416c416
< #define  a      ] &= ~(1  5] & (1  5]
---
> #define  a        ~(1  5] & (1  5]
(91.0 %, 18352 bytes)
416c416
< #define  a       &= ~(1  5] & (1  5]
---
> #define  a        ~(1  5] & (1  5]
416c416
< #define  a       &= ~(1  5] & (1  5]
---
> #define  a        (1  5] & (1  5]
416c416
< #define  a       &= ~(1  5] & (1  5]
---
> #define  a        ~1  5] & (1  5]
(91.0 %, 18350 bytes)
416c416
< #define  a        ~(1  5] & (1  5]
---
> #define  a        (1  5] & (1  5]
416c416
< #define  a        ~(1  5] & (1  5]
---
> #define  a        1  5] & (1  5]
(91.0 %, 18349 bytes)
416c416
< #define  a        (1  5] & (1  5]
---
> #define  a        1  5] & (1  5]
416c416
< #define  a        (1  5] & (1  5]
---
> #define  a          5] & (1  5]
416c416
< #define  a        (1  5] & (1  5]
---
> #define  a        1  ] & (1  5]
(91.0 %, 18348 bytes)
416c416
< #define  a        1  5] & (1  5]
---
> #define  a          5] & (1  5]
416c416
< #define  a        1  5] & (1  5]
---
> #define  a          ] & (1  5]
(91.0 %, 18347 bytes)
416c416
< #define  a          5] & (1  5]
---
> #define  a          ] & (1  5]
416c416
< #define  a          5] & (1  5]
---
> #define  a           & (1  5]
416c416
< #define  a          5] & (1  5]
---
> #define  a          ]  (1  5]
(91.0 %, 18346 bytes)
416c416
< #define  a          ] & (1  5]
---
> #define  a           & (1  5]
416c416
< #define  a          ] & (1  5]
---
> #define  a            (1  5]
416c416
< #define  a          ] & (1  5]
---
> #define  a           & 1  5]
(91.0 %, 18345 bytes)
416c416
< #define  a           & (1  5]
---
> #define  a            (1  5]
416c416
< #define  a           & (1  5]
---
> #define  a            1  5]
416c416
< #define  a           & (1  5]
---
> #define  a            (  5]
(91.0 %, 18344 bytes)
416c416
< #define  a            (1  5]
---
> #define  a            1  5]
416c416
< #define  a            (1  5]
---
> #define  a              5]
416c416
< #define  a            (1  5]
---
> #define  a            1  ]
(91.0 %, 18343 bytes)
416c416
< #define  a            1  5]
---
> #define  a              5]
416c416
< #define  a            1  5]
---
> #define  a              ]
(91.0 %, 18342 bytes)
416c416
< #define  a              5]
---
> #define  a              ]
416c416
< #define  a              5]
---
> #define  a              
(91.1 %, 18341 bytes)
416c416
< #define  a              ]
---
> #define  a              
416,417c416,417
< #define  a              ]
< #define UNALIGNED_BHzz zz & 15
---
> #define  a              
> define UNALIGNED_BHzz zz & 15
416,417c416,417
< #define  a              ]
< #define UNALIGNED_BHzz zz & 15
---
> #define  a              
> # UNALIGNED_BHzz zz & 15
416,417c416,417
< #define  a              ]
< #define UNALIGNED_BHzz zz & 15
---
> #define  a              
>  UNALIGNED_BHzz zz & 15
416,417c416,417
< #define  a              ]
< #define UNALIGNED_BHzz zz & 15
---
> #define  a              
> #define  zz & 15
(91.1 %, 18340 bytes)
417c417
< #define UNALIGNED_BHzz zz & 15
---
> define UNALIGNED_BHzz zz & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
>  UNALIGNED_BHzz zz & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> define  zz & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
>   zz & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> define UNALIGNED_BHzz  & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
>  UNALIGNED_BHzz  & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> define   & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
>    & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> # UNALIGNED_BHzz zz & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> #  zz & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> # UNALIGNED_BHzz  & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> #   & 15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> # UNALIGNED_BHzz zz  15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> #  zz  15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> # UNALIGNED_BHzz   15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> #    15
417c417
< #define UNALIGNED_BHzz zz & 15
---
> #define  zz & 15
(91.1 %, 18317 bytes)
417c417
< #    15
---
> #    
419c419
< #undef SET_BH
---
>  
419c419
< #undef SET_BH
---
> undef SET_BH
419c419
< #undef SET_BH
---
>  SET_BH
419c419
< #undef SET_BH
---
> undef 
419c419
< #undef SET_BH
---
>  
419,420c419,420
< #undef SET_BH
< #undef CLEAR_BH
---
> undef SET_BH
> undef CLEAR_BH
419,420c419,420
< #undef SET_BH
< #undef CLEAR_BH
---
>  SET_BH
> undef CLEAR_BH
(91.1 %, 18303 bytes)
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
>  
> undef ISSET_BH
420c420
< #undef CLEAR_BH
---
> # CLEAR_BH
420c420
< #undef CLEAR_BH
---
> # 
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> # CLEAR_BH
> undef ISSET_BH
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> # 
> undef ISSET_BH
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> # CLEAR_BH
> # ISSET_BH
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> # 
> # ISSET_BH
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> # CLEAR_BH
>  ISSET_BH
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> # 
>  ISSET_BH
420c420
< #undef CLEAR_BH
---
> #undef 
420,421c420,421
< #undef CLEAR_BH
< #undef ISSET_BH
---
> #undef 
> undef ISSET_BH
(91.1 %, 18290 bytes)
421c421
< #undef ISSET_BH
---
>  ISSET_BH
421c421
< #undef ISSET_BH
---
> undef 
421c421
< #undef ISSET_BH
---
>  
421,422c421,422
< #undef ISSET_BH
< #undef WORD_BH
---
> undef ISSET_BH
> undef WORD_BH
421,422c421,422
< #undef ISSET_BH
< #undef WORD_BH
---
>  ISSET_BH
> undef WORD_BH
421,422c421,422
< #undef ISSET_BH
< #undef WORD_BH
---
> undef 
> undef WORD_BH
421,422c421,422
< #undef ISSET_BH
< #undef WORD_BH
---
>  
> undef WORD_BH
421c421
< #undef ISSET_BH
---
> # ISSET_BH
421c421
< #undef ISSET_BH
---
> # 
(91.1 %, 18276 bytes)
422c422
< #undef WORD_BH
---
>  
422,423c422,423
< #undef WORD_BH
< #undef UNALIGNED_BH
---
> undef WORD_BH
> undef UNALIGNED_BH
422,423c422,423
< #undef WORD_BH
< #undef UNALIGNED_BH
---
>  WORD_BH
> undef UNALIGNED_BH
422,423c422,423
< #undef WORD_BH
< #undef UNALIGNED_BH
---
> undef 
> undef UNALIGNED_BH
422,423c422,423
< #undef WORD_BH
< #undef UNALIGNED_BH
---
>  
> undef UNALIGNED_BH
422c422
< #undef WORD_BH
---
> # WORD_BH
422c422
< #undef WORD_BH
---
> # 
(91.1 %, 18263 bytes)
423c423
< #undef UNALIGNED_BH
---
>  
423c423
< #undef UNALIGNED_BH
---
> undef UNALIGNED_BH
425c425
< #define mswapzz1 , zz2
---
> define mswapzz1 , zz2
423c423
< #undef UNALIGNED_BH
---
>  UNALIGNED_BH
425c425
< #define mswapzz1 , zz2
---
> define mswapzz1 , zz2
423c423
< #undef UNALIGNED_BH
---
> undef 
425c425
< #define mswapzz1 , zz2
---
> define mswapzz1 , zz2
423c423
< #undef UNALIGNED_BH
---
>  
425c425
< #define mswapzz1 , zz2
---
> define mswapzz1 , zz2
423c423
< #undef UNALIGNED_BH
---
> # UNALIGNED_BH
423c423
< #undef UNALIGNED_BH
---
> # 
(91.1 %, 18245 bytes)
425c425
< #define mswapzz1 , zz2
---
>   , zz2
425c425
< #define mswapzz1 , zz2
---
> define mswapzz1  zz2
425c425
< #define mswapzz1 , zz2
---
>  mswapzz1  zz2
425c425
< #define mswapzz1 , zz2
---
> define   zz2
425c425
< #define mswapzz1 , zz2
---
>    zz2
425c425
< #define mswapzz1 , zz2
---
> # mswapzz1 , zz2
425c425
< #define mswapzz1 , zz2
---
> #  , zz2
425c425
< #define mswapzz1 , zz2
---
> # mswapzz1  zz2
425c425
< #define mswapzz1 , zz2
---
> #   zz2
425c425
< #define mswapzz1 , zz2
---
> # mswapzz1 , 
425c425
< #define mswapzz1 , zz2
---
> #  , 
425c425
< #define mswapzz1 , zz2
---
> # mswapzz1  
425c425
< #define mswapzz1 , zz2
---
> #   
425c425
< #define mswapzz1 , zz2
---
> #define  , zz2
425c425
< #define mswapzz1 , zz2
---
> #define   zz2
(91.1 %, 18227 bytes)
427c427
< #define mvswapzzp1 , zzp2, zzn
---
>    zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> # mvswapzzp1 , zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #  , zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> # mvswapzzp1  zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #   zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> # mvswapzzp1 , , zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #  , , zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> # mvswapzzp1  , zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #   , zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #define  , zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #define   zzp2, zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #define  , , zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #define   , zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #define  , zzp2 zzn
427c427
< #define mvswapzzp1 , zzp2, zzn
---
> #define   zzp2 zzn
(91.1 %, 18216 bytes)
427c427
< #define   zzp2, zzn
---
> #define    zzn
427c427
< #define   zzp2, zzn
---
> #define   , 
427c427
< #define   zzp2, zzn
---
> #define    
427c427
< #define   zzp2, zzn
---
> #define   , zzn
429c429
< #define mmina , b a < a
---
> define mmina , b a < a
427c427
< #define   zzp2, zzn
---
> #define    zzn
429c429
< #define mmina , b a < a
---
> define mmina , b a < a
427c427
< #define   zzp2, zzn
---
> #define   , 
429c429
< #define mmina , b a < a
---
> define mmina , b a < a
427c427
< #define   zzp2, zzn
---
> #define    
429c429
< #define mmina , b a < a
---
> define mmina , b a < a
427c427
< #define   zzp2, zzn
---
> #define   zzp2 zzn
(91.1 %, 18211 bytes)
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
> define mmina , b a < a
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
> # mmina , b a < a
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
>  mmina , b a < a
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
> #define  , b a < a
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
> define  , b a < a
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
> #  , b a < a
427c427
< #define    zzn
---
> #define    
429c429
< #define mmina , b a < a
---
>   , b a < a
429c429
< #define mmina , b a < a
---
> define mmina , b a < a
429c429
< #define mmina , b a < a
---
>  mmina , b a < a
429c429
< #define mmina , b a < a
---
> define  , b a < a
429c429
< #define mmina , b a < a
---
>   , b a < a
429c429
< #define mmina , b a < a
---
> define mmina  b a < a
429c429
< #define mmina , b a < a
---
>  mmina  b a < a
429c429
< #define mmina , b a < a
---
> define   b a < a
429c429
< #define mmina , b a < a
---
>    b a < a
429c429
< #define mmina , b a < a
---
> # mmina , b a < a
429c429
< #define mmina , b a < a
---
> #  , b a < a
429c429
< #define mmina , b a < a
---
> # mmina  b a < a
429c429
< #define mmina , b a < a
---
> #   b a < a
429c429
< #define mmina , b a < a
---
> # mmina ,  a < a
429c429
< #define mmina , b a < a
---
> #  ,  a < a
429c429
< #define mmina , b a < a
---
> # mmina   a < a
429c429
< #define mmina , b a < a
---
> #    a < a
429c429
< #define mmina , b a < a
---
> #define  , b a < a
429c429
< #define mmina , b a < a
---
> #define   b a < a
429c429
< #define mmina , b a < a
---
> #define  ,  a < a
429c429
< #define mmina , b a < a
---
> #define    a < a
429c429
< #define mmina , b a < a
---
> #define  , b  < a
429c429
< #define mmina , b a < a
---
> #define   b  < a
429c429
< #define mmina , b a < a
---
> #define  ,   < a
429c429
< #define mmina , b a < a
---
> #define     < a
429c429
< #define mmina , b a < a
---
> #define mmina  b a < a
(91.1 %, 18204 bytes)
429c429
< #define    a < a
---
> #define      
429c429
< #define    a < a
---
> #define     < a
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
429c429
< #define    a < a
---
> #define      a
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
429c429
< #define    a < a
---
> #define     < 
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
429c429
< #define    a < a
---
> #define      
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
429c429
< #define    a < a
---
> #define    a  a
429c429
< #define    a < a
---
> #define    a  
(91.1 %, 18203 bytes)
429c429
< #define    a  a
---
> #define    a  
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
> # mpushlz , hz, dz
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
>  mpushlz , hz, dz
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
> #define  , hz, dz
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
> define  , hz, dz
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
> #  , hz, dz
429c429
< #define    a  a
---
> #define    a  
431c431
< #define mpushlz , hz, dz
---
>   , hz, dz
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
431c431
< #define mpushlz , hz, dz
---
>  mpushlz , hz, dz
431c431
< #define mpushlz , hz, dz
---
> define  , hz, dz
431c431
< #define mpushlz , hz, dz
---
>   , hz, dz
431c431
< #define mpushlz , hz, dz
---
> define mpushlz  hz, dz
(91.1 %, 18202 bytes)
431c431
< #define mpushlz , hz, dz
---
> define mpushlz , hz, dz
431c431
< #define mpushlz , hz, dz
---
>  mpushlz , hz, dz
431c431
< #define mpushlz , hz, dz
---
> define  , hz, dz
431c431
< #define mpushlz , hz, dz
---
>   , hz, dz
431c431
< #define mpushlz , hz, dz
---
> define mpushlz  hz, dz
431c431
< #define mpushlz , hz, dz
---
>  mpushlz  hz, dz
431c431
< #define mpushlz , hz, dz
---
> define   hz, dz
431c431
< #define mpushlz , hz, dz
---
>    hz, dz
431c431
< #define mpushlz , hz, dz
---
> # mpushlz , hz, dz
431c431
< #define mpushlz , hz, dz
---
> #  , hz, dz
431c431
< #define mpushlz , hz, dz
---
> # mpushlz  hz, dz
431c431
< #define mpushlz , hz, dz
---
> #   hz, dz
431c431
< #define mpushlz , hz, dz
---
> # mpushlz , , dz
431c431
< #define mpushlz , hz, dz
---
> #  , , dz
431c431
< #define mpushlz , hz, dz
---
> # mpushlz  , dz
431c431
< #define mpushlz , hz, dz
---
> #   , dz
431c431
< #define mpushlz , hz, dz
---
> #define  , hz, dz
431c431
< #define mpushlz , hz, dz
---
> #define   hz, dz
431c431
< #define mpushlz , hz, dz
---
> #define  , , dz
431c431
< #define mpushlz , hz, dz
---
> #define   , dz
431c431
< #define mpushlz , hz, dz
---
> #define  , hz dz
431c431
< #define mpushlz , hz, dz
---
> #define   hz dz
(91.1 %, 18194 bytes)
431c431
< #define   hz, dz
---
> #define    dz
431c431
< #define   hz, dz
---
> #define   , 
431c431
< #define   hz, dz
---
> #define    
431c431
< #define   hz, dz
---
> #define   , dz
433c433
< #define mpoplz , hz, dz
---
> define mpoplz , hz, dz
431c431
< #define   hz, dz
---
> #define    dz
433c433
< #define mpoplz , hz, dz
---
> define mpoplz , hz, dz
431c431
< #define   hz, dz
---
> #define   , 
433c433
< #define mpoplz , hz, dz
---
> define mpoplz , hz, dz
431c431
< #define   hz, dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
> define mpoplz , hz, dz
431c431
< #define   hz, dz
---
> #define   hz dz
(91.1 %, 18191 bytes)
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
> define mpoplz , hz, dz
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
> # mpoplz , hz, dz
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
>  mpoplz , hz, dz
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
> #define  , hz, dz
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
> define  , hz, dz
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
> #  , hz, dz
431c431
< #define    dz
---
> #define    
433c433
< #define mpoplz , hz, dz
---
>   , hz, dz
433c433
< #define mpoplz , hz, dz
---
> define mpoplz , hz, dz
433c433
< #define mpoplz , hz, dz
---
>  mpoplz , hz, dz
433c433
< #define mpoplz , hz, dz
---
> define  , hz, dz
433c433
< #define mpoplz , hz, dz
---
>   , hz, dz
433c433
< #define mpoplz , hz, dz
---
> define mpoplz  hz, dz
433c433
< #define mpoplz , hz, dz
---
>  mpoplz  hz, dz
433c433
< #define mpoplz , hz, dz
---
> define   hz, dz
433c433
< #define mpoplz , hz, dz
---
>    hz, dz
433c433
< #define mpoplz , hz, dz
---
> # mpoplz , hz, dz
433c433
< #define mpoplz , hz, dz
---
> #  , hz, dz
433c433
< #define mpoplz , hz, dz
---
> # mpoplz  hz, dz
433c433
< #define mpoplz , hz, dz
---
> #   hz, dz
433c433
< #define mpoplz , hz, dz
---
> # mpoplz , , dz
433c433
< #define mpoplz , hz, dz
---
> #  , , dz
433c433
< #define mpoplz , hz, dz
---
> # mpoplz  , dz
433c433
< #define mpoplz , hz, dz
---
> #   , dz
433c433
< #define mpoplz , hz, dz
---
> #define  , hz, dz
433c433
< #define mpoplz , hz, dz
---
> #define   hz, dz
433c433
< #define mpoplz , hz, dz
---
> #define  , , dz
433c433
< #define mpoplz , hz, dz
---
> #define   , dz
433c433
< #define mpoplz , hz, dz
---
> #define  , hz dz
433c433
< #define mpoplz , hz, dz
---
> #define   hz dz
(91.1 %, 18184 bytes)
433c433
< #define   hz, dz
---
> #define    dz
433c433
< #define   hz, dz
---
> #define   , 
433c433
< #define   hz, dz
---
> #define    
433c433
< #define   hz, dz
---
> #define   , dz
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define   hz, dz
---
> #define    dz
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define   hz, dz
---
> #define   , 
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define   hz, dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define   hz, dz
---
> #define   hz dz
(91.1 %, 18181 bytes)
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> # mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
>  mnextsizeaz nextHi[az] - nextLo[az]
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #define  nextHi[az] - nextLo[az]
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define  nextHi[az] - nextLo[az]
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #  nextHi[az] - nextLo[az]
433c433
< #define    dz
---
> #define    
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
>   nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
>  mnextsizeaz nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define  nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
>   nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define mnextsizeaz [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
>  mnextsizeaz [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> define  [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
>   [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> # mnextsizeaz nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #  nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> # mnextsizeaz [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #  [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> # mnextsizeaz nextHiaz] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #  nextHiaz] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> # mnextsizeaz az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #  az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #define  nextHi[az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #define  [az] - nextLo[az]
435c435
< #define mnextsizeaz nextHi[az] - nextLo[az]
---
> #define  nextHiaz] - nextLo[az]
(91.1 %, 18170 bytes)
435c435
< #define  nextHi[az] - nextLo[az]
---
> #define  [az] - nextLo[az]
435c435
< #define  nextHi[az] - nextLo[az]
---
> #define  az] - nextLo[az]
435c435
< #define  nextHi[az] - nextLo[az]
---
> #define  [] - nextLo[az]
435c435
< #define  nextHi[az] - nextLo[az]
---
> #define  ] - nextLo[az]
435c435
< #define  nextHi[az] - nextLo[az]
---
> #define  [az - nextLo[az]
435c435
< #define  nextHi[az] - nextLo[az]
---
> #define  az - nextLo[az]
(91.1 %, 18163 bytes)
435c435
< #define  az] - nextLo[az]
---
> #define   - nextLo[az]
435c435
< #define  az] - nextLo[az]
---
> #define  ]  nextLo[az]
435c435
< #define  az] - nextLo[az]
---
> #define    nextLo[az]
435c435
< #define  az] - nextLo[az]
---
> #define  ] - [az]
435c435
< #define  az] - nextLo[az]
---
> #define   - [az]
435c435
< #define  az] - nextLo[az]
---
> #define  ]  [az]
435c435
< #define  az] - nextLo[az]
---
> #define    [az]
435c435
< #define  az] - nextLo[az]
---
> #define  az - nextLo[az]
(91.1 %, 18159 bytes)
435c435
< #define    nextLo[az]
---
> #define    ]
435c435
< #define    nextLo[az]
---
> #define    [az
435c435
< #define    nextLo[az]
---
> #define    az
435c435
< #define    nextLo[az]
---
> #define    [
435c435
< #define    nextLo[az]
---
> #define    
435c435
< #define    nextLo[az]
---
> #define    nextLoaz]
(91.1 %, 18151 bytes)
435c435
< #define    az
---
> #define    
437c437
< #define mnextswapaz , bz
---
> define  , bz
435c435
< #define    az
---
> #define    
437c437
< #define mnextswapaz , bz
---
> #  , bz
435c435
< #define    az
---
> #define    
437c437
< #define mnextswapaz , bz
---
>   , bz
437c437
< #define mnextswapaz , bz
---
> define mnextswapaz , bz
437c437
< #define mnextswapaz , bz
---
>  mnextswapaz , bz
437c437
< #define mnextswapaz , bz
---
> define  , bz
437c437
< #define mnextswapaz , bz
---
>   , bz
437c437
< #define mnextswapaz , bz
---
> define mnextswapaz  bz
437c437
< #define mnextswapaz , bz
---
>  mnextswapaz  bz
437c437
< #define mnextswapaz , bz
---
> define   bz
437c437
< #define mnextswapaz , bz
---
>    bz
437c437
< #define mnextswapaz , bz
---
> # mnextswapaz , bz
437c437
< #define mnextswapaz , bz
---
> #  , bz
437c437
< #define mnextswapaz , bz
---
> # mnextswapaz  bz
437c437
< #define mnextswapaz , bz
---
> #   bz
437c437
< #define mnextswapaz , bz
---
> # mnextswapaz , 
437c437
< #define mnextswapaz , bz
---
> #  , 
437c437
< #define mnextswapaz , bz
---
> # mnextswapaz  
437c437
< #define mnextswapaz , bz
---
> #   
437c437
< #define mnextswapaz , bz
---
> #define  , bz
437c437
< #define mnextswapaz , bz
---
> #define   bz
437c437
< #define mnextswapaz , bz
---
> #define  , 
437c437
< #define mnextswapaz , bz
---
> #define   
437c437
< #define mnextswapaz , bz
---
> #define  , bz
439c439
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
437c437
< #define mnextswapaz , bz
---
> #define   bz
439c439
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
437c437
< #define mnextswapaz , bz
---
> #define  , 
439c439
< #define MAIN_QSORT_SMALL_THRESH 0
---
> define MAIN_QSORT_SMALL_THRESH 0
(91.2 %, 18131 bytes)
439c439
< #define MAIN_QSORT_SMALL_THRESH 0
---
>   
439c439
< #define MAIN_QSORT_SMALL_THRESH 0
---
> # MAIN_QSORT_SMALL_THRESH 0
439c439
< #define MAIN_QSORT_SMALL_THRESH 0
---
> #  0
(91.2 %, 18100 bytes)
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
>    + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #  BZ_N_RADIX + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH  + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #   + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX  BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #  BZ_N_RADIX  BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> # MAIN_QSORT_DEPTH_THRESH   BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #    BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #define  BZ_N_RADIX + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #define   + BZ_N_QSORT
440c440
< #define MAIN_QSORT_DEPTH_THRESH BZ_N_RADIX + BZ_N_QSORT
---
> #define  BZ_N_RADIX  BZ_N_QSORT
(91.2 %, 18077 bytes)
440c440
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define   + BZ_N_QSORT
440c440
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define    BZ_N_QSORT
440c440
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define   + 
440c440
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define    
440,441c440,441
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define   + BZ_N_QSORT
> define MAIN_QSORT_STACK_SIZE 0
440,441c440,441
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    BZ_N_QSORT
> define MAIN_QSORT_STACK_SIZE 0
440,441c440,441
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define   + 
> define MAIN_QSORT_STACK_SIZE 0
440,441c440,441
< #define  BZ_N_RADIX + BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define MAIN_QSORT_STACK_SIZE 0
440c440
< #define  BZ_N_RADIX + BZ_N_QSORT
---
> #define  BZ_N_RADIX  BZ_N_QSORT
(91.2 %, 18066 bytes)
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define MAIN_QSORT_STACK_SIZE 0
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> # MAIN_QSORT_STACK_SIZE 0
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
>  MAIN_QSORT_STACK_SIZE 0
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> #define  0
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> define  0
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
> #  0
440,441c440,441
< #define    BZ_N_QSORT
< #define MAIN_QSORT_STACK_SIZE 0
---
> #define    
>   0
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
> define MAIN_QSORT_STACK_SIZE 0
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
>  MAIN_QSORT_STACK_SIZE 0
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
> define  0
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
>   0
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
> define MAIN_QSORT_STACK_SIZE 
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
>  MAIN_QSORT_STACK_SIZE 
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
> define  
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
>   
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
> # MAIN_QSORT_STACK_SIZE 0
441c441
< #define MAIN_QSORT_STACK_SIZE 0
---
> #  0
(91.2 %, 18037 bytes)
443,444c443,444
< #undef mswap
< #undef mvswap
---
>  
> undef mvswap
443c443
< #undef mswap
---
> # mswap
443c443
< #undef mswap
---
> # 
443,444c443,444
< #undef mswap
< #undef mvswap
---
> # mswap
> undef mvswap
443,444c443,444
< #undef mswap
< #undef mvswap
---
> # 
> undef mvswap
443,444c443,444
< #undef mswap
< #undef mvswap
---
> # mswap
> # mvswap
443,444c443,444
< #undef mswap
< #undef mvswap
---
> # 
> # mvswap
443,444c443,444
< #undef mswap
< #undef mvswap
---
> # mswap
>  mvswap
443,444c443,444
< #undef mswap
< #undef mvswap
---
> # 
>  mvswap
443c443
< #undef mswap
---
> #undef 
443,444c443,444
< #undef mswap
< #undef mvswap
---
> #undef 
> undef mvswap
(91.2 %, 18027 bytes)
444c444
< #undef mvswap
---
>  mvswap
444c444
< #undef mvswap
---
> undef 
444c444
< #undef mvswap
---
>  
444,445c444,445
< #undef mvswap
< #undef mpush
---
> undef mvswap
> undef mpush
444,445c444,445
< #undef mvswap
< #undef mpush
---
>  mvswap
> undef mpush
444,445c444,445
< #undef mvswap
< #undef mpush
---
> undef 
> undef mpush
444,445c444,445
< #undef mvswap
< #undef mpush
---
>  
> undef mpush
444c444
< #undef mvswap
---
> # mvswap
444c444
< #undef mvswap
---
> # 
(91.2 %, 18015 bytes)
445c445
< #undef mpush
---
>  
445,446c445,446
< #undef mpush
< #undef mpop
---
> undef mpush
> undef mpop
445,446c445,446
< #undef mpush
< #undef mpop
---
>  mpush
> undef mpop
445,446c445,446
< #undef mpush
< #undef mpop
---
> undef 
> undef mpop
445,446c445,446
< #undef mpush
< #undef mpop
---
>  
> undef mpop
445c445
< #undef mpush
---
> # mpush
445c445
< #undef mpush
---
> # 
(91.2 %, 18004 bytes)
446c446
< #undef mpop
---
>  
446,447c446,447
< #undef mpop
< #undef mmin
---
> undef mpop
> undef mmin
446,447c446,447
< #undef mpop
< #undef mmin
---
>  mpop
> undef mmin
446,447c446,447
< #undef mpop
< #undef mmin
---
> undef 
> undef mmin
446,447c446,447
< #undef mpop
< #undef mmin
---
>  
> undef mmin
446c446
< #undef mpop
---
> # mpop
446c446
< #undef mpop
---
> # 
(91.2 %, 17994 bytes)
447c447
< #undef mmin
---
>  
447,448c447,448
< #undef mmin
< #undef mnextsize
---
> undef mmin
> undef mnextsize
447,448c447,448
< #undef mmin
< #undef mnextsize
---
>  mmin
> undef mnextsize
447,448c447,448
< #undef mmin
< #undef mnextsize
---
> undef 
> undef mnextsize
447,448c447,448
< #undef mmin
< #undef mnextsize
---
>  
> undef mnextsize
447c447
< #undef mmin
---
> # mmin
447c447
< #undef mmin
---
> # 
(91.2 %, 17984 bytes)
448c448
< #undef mnextsize
---
>  
448,449c448,449
< #undef mnextsize
< #undef mnextswap
---
> undef mnextsize
> undef mnextswap
448,449c448,449
< #undef mnextsize
< #undef mnextswap
---
>  mnextsize
> undef mnextswap
448,449c448,449
< #undef mnextsize
< #undef mnextswap
---
> undef 
> undef mnextswap
448,449c448,449
< #undef mnextsize
< #undef mnextswap
---
>  
> undef mnextswap
448c448
< #undef mnextsize
---
> # mnextsize
448c448
< #undef mnextsize
---
> # 
448,449c448,449
< #undef mnextsize
< #undef mnextswap
---
> # mnextsize
> undef mnextswap
(91.2 %, 17969 bytes)
449c449
< #undef mnextswap
---
>  
449,450c449,450
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef mnextswap
> undef MAIN_QSORT_SMALL_THRESH
449,450c449,450
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  mnextswap
> undef MAIN_QSORT_SMALL_THRESH
449,450c449,450
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> undef 
> undef MAIN_QSORT_SMALL_THRESH
449,450c449,450
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
> undef MAIN_QSORT_SMALL_THRESH
449c449
< #undef mnextswap
---
> # mnextswap
449c449
< #undef mnextswap
---
> # 
(91.2 %, 17954 bytes)
450c450
< #undef MAIN_QSORT_SMALL_THRESH
---
>  
450,451c450,451
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
450,451c450,451
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  MAIN_QSORT_SMALL_THRESH
> undef MAIN_QSORT_DEPTH_THRESH
450,451c450,451
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef 
> undef MAIN_QSORT_DEPTH_THRESH
450,451c450,451
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
> undef MAIN_QSORT_DEPTH_THRESH
450c450
< #undef MAIN_QSORT_SMALL_THRESH
---
> # MAIN_QSORT_SMALL_THRESH
450c450
< #undef MAIN_QSORT_SMALL_THRESH
---
> # 
(91.3 %, 17925 bytes)
451c451
< #undef MAIN_QSORT_DEPTH_THRESH
---
>  
451,452c451,452
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
451,452c451,452
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_DEPTH_THRESH
> undef MAIN_QSORT_STACK_SIZE
451,452c451,452
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
> undef MAIN_QSORT_STACK_SIZE
451,452c451,452
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
>  
> undef MAIN_QSORT_STACK_SIZE
451c451
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # MAIN_QSORT_DEPTH_THRESH
451c451
< #undef MAIN_QSORT_DEPTH_THRESH
---
> # 
(91.3 %, 17896 bytes)
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
>  
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_STACK_SIZE
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
>  MAIN_QSORT_STACK_SIZE
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
> undef 
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
>  
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
> # MAIN_QSORT_STACK_SIZE
452c452
< #undef MAIN_QSORT_STACK_SIZE
---
> # 
(91.3 %, 17869 bytes)
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
>   ftab[b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> define BIGFREQb [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
>  BIGFREQb [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> define  [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
>   [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> # BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #  ftab[b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> # BIGFREQb [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #  [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> # BIGFREQb ftabb + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #  ftabb + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> # BIGFREQb b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #  b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  ftab[b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  [b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  ftabb + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  b + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  ftab[ + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  [ + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define  ftab + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define   + 1 << 8] - ftab[b << 8]
454c454
< #define BIGFREQb ftab[b + 1 << 8] - ftab[b << 8]
---
> #define BIGFREQb [b + 1 << 8] - ftab[b << 8]
(91.3 %, 17860 bytes)
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define   +  << 8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define     << 8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define   + 1  8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define    1  8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define   +   8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define      8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define  ftabb  1 << 8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define  ftabb   << 8] - ftab[b << 8]
454c454
< #define  ftabb + 1 << 8] - ftab[b << 8]
---
> #define  ftabb  1  8] - ftab[b << 8]
(91.3 %, 17859 bytes)
454c454
< #define  ftabb  1 << 8] - ftab[b << 8]
---
> #define  ftabb   << 8] - ftab[b << 8]
454c454
< #define  ftabb  1 << 8] - ftab[b << 8]
---
> #define  ftabb    8] - ftab[b << 8]
(91.3 %, 17858 bytes)
454c454
< #define  ftabb   << 8] - ftab[b << 8]
---
> #define  ftabb    8] - ftab[b << 8]
454c454
< #define  ftabb   << 8] - ftab[b << 8]
---
> #define  ftabb    ] - ftab[b << 8]
(91.3 %, 17856 bytes)
454c454
< #define  ftabb    8] - ftab[b << 8]
---
> #define  ftabb    ] - ftab[b << 8]
454c454
< #define  ftabb    8] - ftab[b << 8]
---
> #define  ftabb     - ftab[b << 8]
454c454
< #define  ftabb    8] - ftab[b << 8]
---
> #define  ftabb    ]  ftab[b << 8]
(91.3 %, 17855 bytes)
454c454
< #define  ftabb    ] - ftab[b << 8]
---
> #define  ftabb     - ftab[b << 8]
454c454
< #define  ftabb    ] - ftab[b << 8]
---
> #define  ftabb      ftab[b << 8]
454c454
< #define  ftabb    ] - ftab[b << 8]
---
> #define  ftabb     - [b << 8]
(91.3 %, 17854 bytes)
454c454
< #define  ftabb     - ftab[b << 8]
---
> #define  ftabb      ftab[b << 8]
454c454
< #define  ftabb     - ftab[b << 8]
---
> #define  ftabb      [b << 8]
(91.3 %, 17853 bytes)
454c454
< #define  ftabb      ftab[b << 8]
---
> #define  ftabb      [b << 8]
454c454
< #define  ftabb      ftab[b << 8]
---
> #define  ftabb      b << 8]
454c454
< #define  ftabb      ftab[b << 8]
---
> #define  ftabb      [ << 8]
(91.3 %, 17849 bytes)
454c454
< #define  ftabb      [b << 8]
---
> #define  ftabb      b << 8]
454c454
< #define  ftabb      [b << 8]
---
> #define  ftabb       << 8]
454c454
< #define  ftabb      [b << 8]
---
> #define  ftabb      b  8]
(91.3 %, 17848 bytes)
454c454
< #define  ftabb      b << 8]
---
> #define  ftabb       << 8]
454c454
< #define  ftabb      b << 8]
---
> #define  ftabb        8]
(91.3 %, 17847 bytes)
454c454
< #define  ftabb       << 8]
---
> #define  ftabb        8]
454c454
< #define  ftabb       << 8]
---
> #define  ftabb        ]
454c454
< #define  ftabb       << 8]
---
> #define  ftabb        8
(91.3 %, 17845 bytes)
454c454
< #define  ftabb        8]
---
> #define  ftabb        ]
454c454
< #define  ftabb        8]
---
> #define  ftabb        
454,455c454,455
< #define  ftabb        8]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        ]
> define SETMASK 1 < zz3 ? zz2 : zz3
(91.3 %, 17844 bytes)
454c454
< #define  ftabb        ]
---
> #define  ftabb        
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
> define SETMASK 1 < zz3 ? zz2 : zz3
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
> # SETMASK 1 < zz3 ? zz2 : zz3
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
>  SETMASK 1 < zz3 ? zz2 : zz3
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
> #define  1 < zz3 ? zz2 : zz3
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
> define  1 < zz3 ? zz2 : zz3
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
> #  1 < zz3 ? zz2 : zz3
454,455c454,455
< #define  ftabb        ]
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  ftabb        
>   1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define SETMASK 1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
>  SETMASK 1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define  1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
>   1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define SETMASK  < zz3 ? zz2 : zz3
(91.3 %, 17843 bytes)
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define SETMASK 1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
>  SETMASK 1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define  1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
>   1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define SETMASK  < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
>  SETMASK  < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> define   < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
>    < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> # SETMASK 1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #  1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> # SETMASK  < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #   < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> # SETMASK 1  zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #  1  zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> # SETMASK   zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #    zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  1 < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define   < zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  1  zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define    zz3 ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  1 <  ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define   <  ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define  1   ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define     ? zz2 : zz3
455c455
< #define SETMASK 1 < zz3 ? zz2 : zz3
---
> #define SETMASK  < zz3 ? zz2 : zz3
(91.3 %, 17834 bytes)
455c455
< #define    zz3 ? zz2 : zz3
---
> #define       : zz3
455c455
< #define    zz3 ? zz2 : zz3
---
> #define     ? zz2  zz3
455c455
< #define    zz3 ? zz2 : zz3
---
> #define      zz2  zz3
455c455
< #define    zz3 ? zz2 : zz3
---
> #define     ?   zz3
455c455
< #define    zz3 ? zz2 : zz3
---
> #define        zz3
(91.3 %, 17829 bytes)
455c455
< #define      zz2  zz3
---
> #define        
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> # ADDWEIGHTSzw1                                                          \
455c455
< #define      zz2  zz3
---
> #define        zz3
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>  ADDWEIGHTSzw1                                                          \
455c455
< #define      zz2  zz3
---
> #define        
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>  ADDWEIGHTSzw1                                                          \
455c455
< #define      zz2  zz3
---
> #define      zz2  
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define ADDWEIGHTSzw1                                                          \
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> # ADDWEIGHTSzw1                                                          \
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>  ADDWEIGHTSzw1                                                          \
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> #define                                                           \
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define                                                           \
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> #                                                           \
455c455
< #define      zz2  zz3
---
> #define      zz2  
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>                                                            \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define ADDWEIGHTSzw1                                                          \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>  ADDWEIGHTSzw1                                                          \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define                                                           \
(91.3 %, 17826 bytes)
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define ADDWEIGHTSzw1                                                          \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>  ADDWEIGHTSzw1                                                          \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define                                                           \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>                                                            \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define ADDWEIGHTSzw1                                                          
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>  ADDWEIGHTSzw1                                                          
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> define                                                           
457c457
< #define ADDWEIGHTSzw1                                                          \
---
>                                                            
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> # ADDWEIGHTSzw1                                                          \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> #                                                           \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> # ADDWEIGHTSzw1                                                          
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> #                                                           
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> # ADDWEIGHTSzw1                                                          \
>    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #                                                           \
>    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> # ADDWEIGHTSzw1                                                          
>    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #                                                           
>    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> #define                                                           \
457c457
< #define ADDWEIGHTSzw1                                                          \
---
> #define                                                           
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           \
>    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           \
>   ,  WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>   ,  WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define ADDWEIGHTSzw1                                                          \
<   , zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           \
>     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
(91.3 %, 17812 bytes)
457,458c457,458
< #define                                                           \
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>    zw2  + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define                                                           \
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>      + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define                                                           \
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>    zw2 WEIGHTOFzw1  WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define                                                           \
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>     WEIGHTOFzw1  WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define                                                           \
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>    zw2   WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
457,458c457,458
< #define                                                           \
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
> #define                                                           
>       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>      + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<    zw2 WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>     WEIGHTOFzw1  WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
(91.3 %, 17809 bytes)
458c458
<     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>      + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>      +  | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>        | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>      + WEIGHTOFzw2  1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<     WEIGHTOFzw1 + WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>       WEIGHTOFzw2  1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
(91.3 %, 17797 bytes)
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>         1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>        |  + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>          + MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>        | 1  MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>         1  MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>        |   MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1, DEPTHOFzw2
458c458
<       WEIGHTOFzw2 | 1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>       WEIGHTOFzw2  1 + MYMAXDEPTHOFzw1, DEPTHOFzw2
(91.3 %, 17783 bytes)
458c458
<           MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>            
460c460
< #define UPHEAPz
---
> define UPHEAPz
458c458
<           MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 DEPTHOFzw2
458c458
<           MYMAXDEPTHOFzw1, DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
(91.3 %, 17782 bytes)
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
460c460
< #define UPHEAPz
---
> define UPHEAPz
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
460c460
< #define UPHEAPz
---
> # UPHEAPz
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
460c460
< #define UPHEAPz
---
>  UPHEAPz
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
460c460
< #define UPHEAPz
---
> #define 
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
460c460
< #define UPHEAPz
---
> define 
458c458
<           MYMAXDEPTHOFzw1 DEPTHOFzw2
---
>           MYMAXDEPTHOFzw1 
460c460
< #define UPHEAPz
---
> # 
(91.3 %, 17772 bytes)
460c460
< #define UPHEAPz
---
> define UPHEAPz
460c460
< #define UPHEAPz
---
>  UPHEAPz
460c460
< #define UPHEAPz
---
> define 
460c460
< #define UPHEAPz
---
>  
460c460
< #define UPHEAPz
---
> define UPHEAPz
462c462
< #define DOWNHEAPz
---
> define DOWNHEAPz
460c460
< #define UPHEAPz
---
>  UPHEAPz
462c462
< #define DOWNHEAPz
---
> define DOWNHEAPz
460c460
< #define UPHEAPz
---
> define 
462c462
< #define DOWNHEAPz
---
> define DOWNHEAPz
460c460
< #define UPHEAPz
---
>  
462c462
< #define DOWNHEAPz
---
> define DOWNHEAPz
460c460
< #define UPHEAPz
---
> # UPHEAPz
460c460
< #define UPHEAPz
---
> # 
(91.3 %, 17758 bytes)
462c462
< #define DOWNHEAPz
---
>  
462c462
< #define DOWNHEAPz
---
> define DOWNHEAPz
464c464
< #define bsNEEDWnz
---
> define bsNEEDWnz
462c462
< #define DOWNHEAPz
---
>  DOWNHEAPz
464c464
< #define bsNEEDWnz
---
> define bsNEEDWnz
462c462
< #define DOWNHEAPz
---
> define 
464c464
< #define bsNEEDWnz
---
> define bsNEEDWnz
462c462
< #define DOWNHEAPz
---
>  
464c464
< #define bsNEEDWnz
---
> define bsNEEDWnz
462c462
< #define DOWNHEAPz
---
> # DOWNHEAPz
462c462
< #define DOWNHEAPz
---
> # 
(91.3 %, 17742 bytes)
464c464
< #define bsNEEDWnz
---
>  
464c464
< #define bsNEEDWnz
---
> define bsNEEDWnz
466c466
< static void makeMaps_e(void) {
---
>  void makeMaps_e(void) {
464c464
< #define bsNEEDWnz
---
>  bsNEEDWnz
466c466
< static void makeMaps_e(void) {
---
>  void makeMaps_e(void) {
464c464
< #define bsNEEDWnz
---
> define 
466c466
< static void makeMaps_e(void) {
---
>  void makeMaps_e(void) {
464c464
< #define bsNEEDWnz
---
>  
466c466
< static void makeMaps_e(void) {
---
>  void makeMaps_e(void) {
(91.4 %, 17726 bytes)
466c466
< static void makeMaps_e(void) {
---
>   (void) {
466c466
< static void makeMaps_e(void) {
---
>  void makeMaps_evoid) {
466c466
< static void makeMaps_e(void) {
---
>   makeMaps_evoid) {
466c466
< static void makeMaps_e(void) {
---
>  void void) {
466c466
< static void makeMaps_e(void) {
---
>   void) {
466c466
< static void makeMaps_e(void) {
---
> static  makeMaps_e(void) {
466c466
< static void makeMaps_e(void) {
---
> static  (void) {
466c466
< static void makeMaps_e(void) {
---
> static  makeMaps_evoid) {
466c466
< static void makeMaps_e(void) {
---
> static  void) {
466c466
< static void makeMaps_e(void) {
---
> static  makeMaps_e() {
(91.4 %, 17722 bytes)
466c466
< static  makeMaps_e(void) {
---
> static  (void) {
466c466
< static  makeMaps_e(void) {
---
> static  void) {
466c466
< static  makeMaps_e(void) {
---
> static  () {
466c466
< static  makeMaps_e(void) {
---
> static  ) {
466c466
< static  makeMaps_e(void) {
---
> static  (void {
466c466
< static  makeMaps_e(void) {
---
> static  void {
466c466
< static  makeMaps_e(void) {
---
> static  ( {
466c466
< static  makeMaps_e(void) {
---
> static   {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_evoid) {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e) {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_evoid {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_evoid) 
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e) 
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_evoid 
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e 
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e() {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e( {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e() 
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e( 
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e() {
>    *s = 0;
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e( {
>    *s = 0;
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e() 
>    *s = 0;
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e( 
>    *s = 0;
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e(void {
466c466
< static  makeMaps_e(void) {
---
> static  makeMaps_e(void 
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e(void {
>    *s = 0;
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e(void 
>    *s = 0;
466,467c466,467
< static  makeMaps_e(void) {
<   EState *s = 0;
---
> static  makeMaps_e(void {
>   EState s = 0;
(91.4 %, 17718 bytes)
466c466
< static  makeMaps_e() {
---
> static  makeMaps_e( {
466c466
< static  makeMaps_e() {
---
> static  makeMaps_e( 
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e( {
>    *s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e( 
>    *s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e( {
>   EState s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e( 
>   EState s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e( {
>    s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e( 
>    s = 0;
466c466
< static  makeMaps_e() {
---
> static  makeMaps_e() 
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>    *s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>   EState s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>    s = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>   EState * = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>    * = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>   EState  = 0;
466,467c466,467
< static  makeMaps_e() {
<   EState *s = 0;
---
> static  makeMaps_e() 
>     = 0;
467c467
<   EState *s = 0;
---
>    *s = 0;
467c467
<   EState *s = 0;
---
>    s = 0;
467c467
<   EState *s = 0;
---
>    * = 0;
467c467
<   EState *s = 0;
---
>     = 0;
467c467
<   EState *s = 0;
---
>    *s  0;
467c467
<   EState *s = 0;
---
>    s  0;
467c467
<   EState *s = 0;
---
>    *  0;
467c467
<   EState *s = 0;
---
>      0;
467c467
<   EState *s = 0;
---
>   EState s = 0;
467c467
<   EState *s = 0;
---
>   EState  = 0;
467c467
<   EState *s = 0;
---
>   EState s  0;
467c467
<   EState *s = 0;
---
>   EState   0;
467c467
<   EState *s = 0;
---
>   EState s = ;
467c467
<   EState *s = 0;
---
>   EState  = ;
467c467
<   EState *s = 0;
---
>   EState s  ;
467c467
<   EState *s = 0;
---
>   EState   ;
467c467
<   EState *s = 0;
---
>   EState * = 0;
467c467
<   EState *s = 0;
---
>   EState *  0;
467c467
<   EState *s = 0;
---
>   EState * = ;
467c467
<   EState *s = 0;
---
>   EState *  ;
467c467
<   EState *s = 0;
---
>   EState * = 0
467c467
<   EState *s = 0;
---
>   EState *  0
467c467
<   EState *s = 0;
---
>   EState * = 
467c467
<   EState *s = 0;
---
>   EState *  
467c467
<   EState *s = 0;
---
>   EState *s  0;
467c467
<   EState *s = 0;
---
>   EState *s  ;
467c467
<   EState *s = 0;
---
>   EState *s  0
467c467
<   EState *s = 0;
---
>   EState *s  
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s  0;
>    i;
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s  ;
>    i;
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s  0
>    i;
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s  
>    i;
467c467
<   EState *s = 0;
---
>   EState *s = ;
467c467
<   EState *s = 0;
---
>   EState *s = 
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s = ;
>    i;
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s = 
>    i;
467,468c467,468
<   EState *s = 0;
<   Int32 i;
---
>   EState *s = ;
>   Int32 ;
(91.4 %, 17716 bytes)
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>    i;
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>   Int32 ;
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>    ;
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>   Int32 i
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>    i
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>   Int32 
467,468c467,468
<   EState *s  ;
<   Int32 i;
---
>   EState *s  
>    
468c468
<   Int32 i;
---
>    i;
468c468
<   Int32 i;
---
>    ;
468c468
<   Int32 i;
---
>    i
468c468
<   Int32 i;
---
>    
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>    i;
>   ->nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>    ;
>   ->nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>    i
>   ->nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>    
>   ->nInUse = 0;
468c468
<   Int32 i;
---
>   Int32 ;
468c468
<   Int32 i;
---
>   Int32 
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 ;
>   ->nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 
>   ->nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 ;
>   snInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 
>   snInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 ;
>   nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 
>   nInUse = 0;
468c468
<   Int32 i;
---
>   Int32 i
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>   ->nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>   snInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>   nInUse = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>   s-> = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>   -> = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>   s = 0;
468,469c468,469
<   Int32 i;
<   s->nInUse = 0;
---
>   Int32 i
>    = 0;
469c469
<   s->nInUse = 0;
---
>   ->nInUse = 0;
469c469
<   s->nInUse = 0;
---
>   nInUse = 0;
469c469
<   s->nInUse = 0;
---
>   -> = 0;
469c469
<   s->nInUse = 0;
---
>    = 0;
469c469
<   s->nInUse = 0;
---
>   ->nInUse  0;
469c469
<   s->nInUse = 0;
---
>   nInUse  0;
469c469
<   s->nInUse = 0;
---
>   ->  0;
469c469
<   s->nInUse = 0;
---
>     0;
(91.4 %, 17706 bytes)
468a469
>     
470d470
<   i = 0;
469c469
<    = 0;
---
>    = ;
469c469
<    = 0;
---
>    = 
(91.4 %, 17702 bytes)
470c470
<    = 0;
---
>     
472c472
<   for (i; i < 6; i++) {
---
>    (i; i < 6; i++) {
470c470
<    = 0;
---
>    = ;
470c470
<    = 0;
---
>    = 
470c470
<    = 0;
---
>    = ;
472c472
<   for (i; i < 6; i++) {
---
>    (i; i < 6; i++) {
470c470
<    = 0;
---
>    = 
472c472
<   for (i; i < 6; i++) {
---
>    (i; i < 6; i++) {
470c470
<    = 0;
---
>    = ;
472c472
<   for (i; i < 6; i++) {
---
>   for i; i < 6; i++) {
470c470
<    = 0;
---
>    = 
472c472
<   for (i; i < 6; i++) {
---
>   for i; i < 6; i++) {
470c470
<    = 0;
---
>    = ;
472c472
<   for (i; i < 6; i++) {
---
>    i; i < 6; i++) {
470c470
<    = 0;
---
>    = 
472c472
<   for (i; i < 6; i++) {
---
>    i; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>    (i; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>   for i; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>    i; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>   for (; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>    (; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>   for ; i < 6; i++) {
470c470
<    = 0;
---
>    = 0
472c472
<   for (i; i < 6; i++) {
---
>    ; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    (i; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    i; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    (; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    ; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    (i i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    i i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>    ( i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>     i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for i; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for ; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for i i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for  i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for i;  < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for ;  < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for i  < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for   < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for (; i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for ( i < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for (;  < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for (  < 6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for (; i  6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for ( i  6; i++) {
472c472
<   for (i; i < 6; i++) {
---
>   for (;   6; i++) {
(91.4 %, 17701 bytes)
472c472
<   for (; i < 6; i++) {
---
>   for ( i < 6; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (  < 6; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for ( i  6; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (   6; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for ( i < ; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (  < ; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for ( i  ; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (   ; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (;  < 6; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (;   6; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (;  < ; i++) {
472c472
<   for (; i < 6; i++) {
---
>   for (;   ; i++) {
(91.4 %, 17699 bytes)
472c472
<   for (;   6; i++) {
---
>   for (;    i++) {
472c472
<   for (;   6; i++) {
---
>   for (;   ; ++) {
472c472
<   for (;   6; i++) {
---
>   for (;    ++) {
472c472
<   for (;   6; i++) {
---
>   for (;   ; i) {
472c472
<   for (;   6; i++) {
---
>   for (;    i) {
472c472
<   for (;   6; i++) {
---
>   for (;   ; ) {
(91.4 %, 17696 bytes)
472c472
<   for (;   ; i) {
---
>   for (;    i) 
472c472
<   for (;   ; i) {
---
>   for (;    ) 
472c472
<   for (;   ; i) {
---
>   for (;    i 
472c472
<   for (;   ; i) {
---
>   for (;     
472c472
<   for (;   ; i) {
---
>   for (;   ; ) {
472c472
<   for (;   ; i) {
---
>   for (;   ;  {
472c472
<   for (;   ; i) {
---
>   for (;   ; ) 
472c472
<   for (;   ; i) {
---
>   for (;   ;  
472,473c472,473
<   for (;   ; i) {
<     s->inUse[i];
---
>   for (;   ; ) {
>     ->inUse[i];
472,473c472,473
<   for (;   ; i) {
<     s->inUse[i];
---
>   for (;   ;  {
>     ->inUse[i];
472,473c472,473
<   for (;   ; i) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     ->inUse[i];
472,473c472,473
<   for (;   ; i) {
<     s->inUse[i];
---
>   for (;   ;  
>     ->inUse[i];
472c472
<   for (;   ; i) {
---
>   for (;   ; i {
472c472
<   for (;   ; i) {
---
>   for (;   ; i 
472,473c472,473
<   for (;   ; i) {
<     s->inUse[i];
---
>   for (;   ; i {
>     ->inUse[i];
472,473c472,473
<   for (;   ; i) {
<     s->inUse[i];
---
>   for (;   ; i 
>     ->inUse[i];
(91.4 %, 17695 bytes)
472c472
<   for (;   ; ) {
---
>   for (;   ;  {
472c472
<   for (;   ; ) {
---
>   for (;   ;  
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ;  {
>     ->inUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ;  
>     ->inUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ;  {
>     sinUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ;  
>     sinUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ;  {
>     inUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ;  
>     inUse[i];
472c472
<   for (;   ; ) {
---
>   for (;   ; ) 
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     ->inUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     sinUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     inUse[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     s->[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     ->[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     s[i];
472,473c472,473
<   for (;   ; ) {
<     s->inUse[i];
---
>   for (;   ; ) 
>     [i];
473c473
<     s->inUse[i];
---
>     ->inUse[i];
473c473
<     s->inUse[i];
---
>     inUse[i];
473c473
<     s->inUse[i];
---
>     ->[i];
473c473
<     s->inUse[i];
---
>     [i];
473c473
<     s->inUse[i];
---
>     ->inUsei];
473c473
<     s->inUse[i];
---
>     inUsei];
473c473
<     s->inUse[i];
---
>     ->i];
473c473
<     s->inUse[i];
---
>     i];
473c473
<     s->inUse[i];
---
>     sinUse[i];
473c473
<     s->inUse[i];
---
>     s[i];
473c473
<     s->inUse[i];
---
>     sinUsei];
473c473
<     s->inUse[i];
---
>     si];
473c473
<     s->inUse[i];
---
>     sinUse[];
473c473
<     s->inUse[i];
---
>     s[];
473c473
<     s->inUse[i];
---
>     sinUse];
473c473
<     s->inUse[i];
---
>     s];
473c473
<     s->inUse[i];
---
>     s->[i];
473c473
<     s->inUse[i];
---
>     s->i];
473c473
<     s->inUse[i];
---
>     s->[];
473c473
<     s->inUse[i];
---
>     s->];
(91.4 %, 17688 bytes)
473c473
<     s[i];
---
>     s];
473c473
<     s[i];
---
>     si;
473c473
<     s[i];
---
>     s;
473c473
<     s[i];
---
>     si]
473c473
<     s[i];
---
>     s]
473c473
<     s[i];
---
>     si
473c473
<     s[i];
---
>     s
473c473
<     s[i];
---
>     s[];
473c473
<     s[i];
---
>     s[;
473c473
<     s[i];
---
>     s[]
473c473
<     s[i];
---
>     s[
473c473
<     s[i];
---
>     s[];
475c475
<     {
---
>     
473c473
<     s[i];
---
>     s[;
475c475
<     {
---
>     
473c473
<     s[i];
---
>     s[]
475c475
<     {
---
>     
473c473
<     s[i];
---
>     s[
475c475
<     {
---
>     
(91.4 %, 17685 bytes)
473c473
<     s;
---
>     s
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       ->unseqToSeq[i] = s->nInUse;
473c473
<     s;
---
>     s
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       sunseqToSeq[i] = s->nInUse;
473c473
<     s;
---
>     s
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       sunseqToSeq[i] = s->nInUse;
473c473
<     s;
---
>     s
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       unseqToSeq[i] = s->nInUse;
473c473
<     s;
---
>     s
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       unseqToSeq[i] = s->nInUse;
475c475
<     {
---
>     
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       ->unseqToSeq[i] = s->nInUse;
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       sunseqToSeq[i] = s->nInUse;
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       unseqToSeq[i] = s->nInUse;
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       s->[i] = s->nInUse;
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       ->[i] = s->nInUse;
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       s[i] = s->nInUse;
475,476c475,476
<     {
<       s->unseqToSeq[i] = s->nInUse;
---
>     
>       [i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       ->unseqToSeq[i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       unseqToSeq[i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       ->[i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       [i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       ->unseqToSeqi] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       unseqToSeqi] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       ->i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       sunseqToSeq[i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s[i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       sunseqToSeqi] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       si] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       sunseqToSeq[] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s[] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       sunseqToSeq] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->[i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->i] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->[] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->[i = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->i = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->[ = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s-> = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeqi] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeqi = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeqi]  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq]  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeqi  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[] = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[ = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[]  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[] = ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[ = ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[]  ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[  ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i = s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i = ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i  ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i = snInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i  snInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i = nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i  nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  s->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  snInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  s->;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  ->;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  s;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i]  ;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = ->nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = nInUse;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = ->;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = ;
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = ->nInUse
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = nInUse
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = ->
476c476
<       s->unseqToSeq[i] = s->nInUse;
---
>       s->unseqToSeq[i] = 
(91.4 %, 17675 bytes)
476,477c476,477
<       s->unseqToSeq[i]  ;
<       s->nInUse++;
---
>       s->unseqToSeq[i]  
>       ++;
477c477
<       s->nInUse++;
---
>       ->nInUse++;
477c477
<       s->nInUse++;
---
>       nInUse++;
477c477
<       s->nInUse++;
---
>       ->++;
477c477
<       s->nInUse++;
---
>       ++;
477c477
<       s->nInUse++;
---
>       ->nInUse;
477c477
<       s->nInUse++;
---
>       nInUse;
477c477
<       s->nInUse++;
---
>       ->;
477c477
<       s->nInUse++;
---
>       ;
(91.4 %, 17665 bytes)
477,479c477,479
<       ++;
<     }
<   }
---
>       
>     
>   
477c477
<       ++;
---
>       ++
477,478c477,478
<       ++;
<     }
---
>       ++
>     
477c477
<       ++;
---
>       ++
479c479
<   }
---
>   
477,479c477,479
<       ++;
<     }
<   }
---
>       ++
>     
>   
477c477
<       ++;
---
>       ++
480c480
< }
---
> 
477,478c477,478
<       ++;
<     }
---
>       ++
>     
480c480
< }
---
> 
477c477
<       ++;
---
>       ++
479,480c479,480
<   }
< }
---
>   
> 
477,480c477,480
<       ++;
<     }
<   }
< }
---
>       ++
>     
>   
> 
478c478
<     }
---
>     
478,479c478,479
<     }
<   }
---
>     
>   
478c478
<     }
---
>     
480c480
< }
---
> 
478,480c478,480
<     }
<   }
< }
---
>     
>   
> 
478c478
<     }
---
>     
482c482
< static void generateMTFValues(void) {
---
>  void generateMTFValues(void) {
478,479c478,479
<     }
<   }
---
>     
>   
482c482
< static void generateMTFValues(void) {
---
>  void generateMTFValues(void) {
478c478
<     }
---
>     
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
>  void generateMTFValues(void) {
478,480c478,479
<     }
<   }
< }
---
>     
>   
482c481,482
< static void generateMTFValues(void) {
---
> 
>  void generateMTFValues(void) {
479c479
<   }
---
>   
479,480c479,480
<   }
< }
---
>   
> 
479c479
<   }
---
>   
482c482
< static void generateMTFValues(void) {
---
>  void generateMTFValues(void) {
479,480c479
<   }
< }
---
>   
482c481,482
< static void generateMTFValues(void) {
---
> 
>  void generateMTFValues(void) {
479c479
<   }
---
>   
482c482
< static void generateMTFValues(void) {
---
> static  generateMTFValues(void) {
479,480c479
<   }
< }
---
>   
482c481,482
< static void generateMTFValues(void) {
---
> 
> static  generateMTFValues(void) {
479c479
<   }
---
>   
482c482
< static void generateMTFValues(void) {
---
>   generateMTFValues(void) {
479,480c479
<   }
< }
---
>   
482c481,482
< static void generateMTFValues(void) {
---
> 
>   generateMTFValues(void) {
480c480
< }
---
> 
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
>  void generateMTFValues(void) {
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
> static  generateMTFValues(void) {
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
>   generateMTFValues(void) {
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
> static void (void) {
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
>  void (void) {
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
> static  (void) {
480d479
< }
482c481,482
< static void generateMTFValues(void) {
---
> 
>   (void) {
482c482
< static void generateMTFValues(void) {
---
>  void generateMTFValues(void) {
482c482
< static void generateMTFValues(void) {
---
>   generateMTFValues(void) {
(91.4 %, 17659 bytes)
482c482
<  void generateMTFValues(void) {
---
>   generateMTFValues(void) {
482c482
<  void generateMTFValues(void) {
---
>   (void) {
482c482
<  void generateMTFValues(void) {
---
>   generateMTFValuesvoid) {
482c482
<  void generateMTFValues(void) {
---
>   void) {
482c482
<  void generateMTFValues(void) {
---
>   generateMTFValues() {
(91.4 %, 17655 bytes)
482c482
<   generateMTFValues(void) {
---
>   (void) {
482c482
<   generateMTFValues(void) {
---
>   void) {
482c482
<   generateMTFValues(void) {
---
>   () {
482c482
<   generateMTFValues(void) {
---
>   ) {
482c482
<   generateMTFValues(void) {
---
>   (void {
482c482
<   generateMTFValues(void) {
---
>   void {
482c482
<   generateMTFValues(void) {
---
>   ( {
482c482
<   generateMTFValues(void) {
---
>    {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid) {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues) {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid) 
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues) 
482c482
<   generateMTFValues(void) {
---
>   generateMTFValuesvoid 
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues 
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues() {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues( {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues() 
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues( 
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues() {
>    *s = 0;
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues( {
>    *s = 0;
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues() 
>    *s = 0;
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues( 
>    *s = 0;
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues(void {
482c482
<   generateMTFValues(void) {
---
>   generateMTFValues(void 
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues(void {
>    *s = 0;
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues(void 
>    *s = 0;
482,483c482,483
<   generateMTFValues(void) {
<   EState *s = 0;
---
>   generateMTFValues(void {
>   EState s = 0;
(91.4 %, 17651 bytes)
482c482
<   generateMTFValues() {
---
>   generateMTFValues( {
482c482
<   generateMTFValues() {
---
>   generateMTFValues( 
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues( {
>    *s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues( 
>    *s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues( {
>   EState s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues( 
>   EState s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues( {
>    s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues( 
>    s = 0;
482c482
<   generateMTFValues() {
---
>   generateMTFValues() 
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>    *s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>   EState s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>    s = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>   EState * = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>    * = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>   EState  = 0;
482,483c482,483
<   generateMTFValues() {
<   EState *s = 0;
---
>   generateMTFValues() 
>     = 0;
483c483
<   EState *s = 0;
---
>    *s = 0;
483c483
<   EState *s = 0;
---
>    s = 0;
483c483
<   EState *s = 0;
---
>    * = 0;
483c483
<   EState *s = 0;
---
>     = 0;
483c483
<   EState *s = 0;
---
>    *s  0;
483c483
<   EState *s = 0;
---
>    s  0;
483c483
<   EState *s = 0;
---
>    *  0;
483c483
<   EState *s = 0;
---
>      0;
483c483
<   EState *s = 0;
---
>   EState s = 0;
483c483
<   EState *s = 0;
---
>   EState  = 0;
483c483
<   EState *s = 0;
---
>   EState s  0;
483c483
<   EState *s = 0;
---
>   EState   0;
483c483
<   EState *s = 0;
---
>   EState s = ;
483c483
<   EState *s = 0;
---
>   EState  = ;
483c483
<   EState *s = 0;
---
>   EState s  ;
483c483
<   EState *s = 0;
---
>   EState   ;
483c483
<   EState *s = 0;
---
>   EState * = 0;
483c483
<   EState *s = 0;
---
>   EState *  0;
483c483
<   EState *s = 0;
---
>   EState * = ;
483c483
<   EState *s = 0;
---
>   EState *  ;
483c483
<   EState *s = 0;
---
>   EState * = 0
483c483
<   EState *s = 0;
---
>   EState *  0
483c483
<   EState *s = 0;
---
>   EState * = 
483c483
<   EState *s = 0;
---
>   EState *  
483c483
<   EState *s = 0;
---
>   EState *s  0;
483c483
<   EState *s = 0;
---
>   EState *s  ;
483c483
<   EState *s = 0;
---
>   EState *s  0
483c483
<   EState *s = 0;
---
>   EState *s  
483c483
<   EState *s = 0;
---
>   EState *s  0;
485c485
<   UChar yy_1;
---
>    yy_1;
483c483
<   EState *s = 0;
---
>   EState *s  ;
485c485
<   UChar yy_1;
---
>    yy_1;
483c483
<   EState *s = 0;
---
>   EState *s  0
485c485
<   UChar yy_1;
---
>    yy_1;
483c483
<   EState *s = 0;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>    yy_1;
483c483
<   EState *s = 0;
---
>   EState *s = ;
(91.4 %, 17649 bytes)
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>    yy_1;
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>   UChar ;
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>    ;
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>   UChar yy_1
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>    yy_1
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>   UChar 
483c483
<   EState *s  ;
---
>   EState *s  
485c485
<   UChar yy_1;
---
>    
485c485
<   UChar yy_1;
---
>    yy_1;
485c485
<   UChar yy_1;
---
>    ;
485c485
<   UChar yy_1;
---
>    yy_1
485c485
<   UChar yy_1;
---
>    
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>    yy_1;
>    yy_0;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>    ;
>    yy_0;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>    yy_1
>    yy_0;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>    
>    yy_0;
485c485
<   UChar yy_1;
---
>   UChar ;
485c485
<   UChar yy_1;
---
>   UChar 
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar ;
>    yy_0;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar 
>    yy_0;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar ;
>   UChar ;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar 
>   UChar ;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar ;
>    ;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar 
>    ;
485c485
<   UChar yy_1;
---
>   UChar yy_1
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>    yy_0;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>   UChar ;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>    ;
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>   UChar yy_0
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>    yy_0
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>   UChar 
485,486c485,486
<   UChar yy_1;
<   UChar yy_0;
---
>   UChar yy_1
>    
486c486
<   UChar yy_0;
---
>    yy_0;
486c486
<   UChar yy_0;
---
>    ;
486c486
<   UChar yy_0;
---
>    yy_0
486c486
<   UChar yy_0;
---
>    
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>    yy_0;
>    i, j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>    ;
>    i, j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>    yy_0
>    i, j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>    
>    i, j;
486c486
<   UChar yy_0;
---
>   UChar ;
486c486
<   UChar yy_0;
---
>   UChar 
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar ;
>    i, j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar 
>    i, j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar ;
>   Int32 , j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar 
>   Int32 , j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar ;
>    , j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar 
>    , j;
486c486
<   UChar yy_0;
---
>   UChar yy_0
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>    i, j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>   Int32 , j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>    , j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>   Int32 i j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>    i j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>   Int32  j;
486,487c486,487
<   UChar yy_0;
<   Int32 i, j;
---
>   UChar yy_0
>     j;
487c487
<   Int32 i, j;
---
>    i, j;
487c487
<   Int32 i, j;
---
>    , j;
487c487
<   Int32 i, j;
---
>    i j;
487c487
<   Int32 i, j;
---
>     j;
487c487
<   Int32 i, j;
---
>    i, ;
487c487
<   Int32 i, j;
---
>    , ;
487c487
<   Int32 i, j;
---
>    i ;
487c487
<   Int32 i, j;
---
>     ;
487c487
<   Int32 i, j;
---
>   Int32 , j;
487c487
<   Int32 i, j;
---
>   Int32  j;
487c487
<   Int32 i, j;
---
>   Int32 , ;
487c487
<   Int32 i, j;
---
>   Int32  ;
487c487
<   Int32 i, j;
---
>   Int32 , j
487c487
<   Int32 i, j;
---
>   Int32  j
487c487
<   Int32 i, j;
---
>   Int32 , 
487c487
<   Int32 i, j;
---
>   Int32  
487c487
<   Int32 i, j;
---
>   Int32 i j;
487c487
<   Int32 i, j;
---
>   Int32 i ;
487c487
<   Int32 i, j;
---
>   Int32 i j
487c487
<   Int32 i, j;
---
>   Int32 i 
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i j;
>    zPend;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i ;
>    zPend;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i j
>    zPend;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i 
>    zPend;
487c487
<   Int32 i, j;
---
>   Int32 i, ;
487c487
<   Int32 i, j;
---
>   Int32 i, 
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, ;
>    zPend;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, 
>    zPend;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, ;
>   Int32 ;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, 
>   Int32 ;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, ;
>    ;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, 
>    ;
487c487
<   Int32 i, j;
---
>   Int32 i, j
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    zPend;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>   Int32 ;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    ;
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>   Int32 zPend
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    zPend
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>   Int32 
487,488c487,488
<   Int32 i, j;
<   Int32 zPend;
---
>   Int32 i, j
>    
488c488
<   Int32 zPend;
---
>    zPend;
488c488
<   Int32 zPend;
---
>    ;
488c488
<   Int32 zPend;
---
>    zPend
488c488
<   Int32 zPend;
---
>    
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>    zPend;
>    wr;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>    ;
>    wr;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>    zPend
>    wr;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>    
>    wr;
488c488
<   Int32 zPend;
---
>   Int32 ;
488c488
<   Int32 zPend;
---
>   Int32 
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 ;
>    wr;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 
>    wr;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 ;
>   Int32 ;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 
>   Int32 ;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 ;
>    ;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 
>    ;
488c488
<   Int32 zPend;
---
>   Int32 zPend
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    wr;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>   Int32 ;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    ;
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>   Int32 wr
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    wr
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>   Int32 
488,489c488,489
<   Int32 zPend;
<   Int32 wr;
---
>   Int32 zPend
>    
489c489
<   Int32 wr;
---
>    wr;
489c489
<   Int32 wr;
---
>    ;
489c489
<   Int32 wr;
---
>    wr
489c489
<   Int32 wr;
---
>    
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>    wr;
>    EOB;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>    ;
>    EOB;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>    wr
>    EOB;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>    
>    EOB;
489c489
<   Int32 wr;
---
>   Int32 ;
489c489
<   Int32 wr;
---
>   Int32 
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 ;
>    EOB;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 
>    EOB;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 ;
>   Int32 ;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 
>   Int32 ;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 ;
>    ;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 
>    ;
489c489
<   Int32 wr;
---
>   Int32 wr
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    EOB;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>   Int32 ;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    ;
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>   Int32 EOB
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    EOB
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>   Int32 
489,490c489,490
<   Int32 wr;
<   Int32 EOB;
---
>   Int32 wr
>    
490c490
<   Int32 EOB;
---
>    EOB;
490c490
<   Int32 EOB;
---
>    ;
490c490
<   Int32 EOB;
---
>    EOB
490c490
<   Int32 EOB;
---
>    
490c490
<   Int32 EOB;
---
>    EOB;
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>    ;
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>    EOB
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>    
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>   Int32 ;
490c490
<   Int32 EOB;
---
>   Int32 
490c490
<   Int32 EOB;
---
>   Int32 ;
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>   Int32 
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>   Int32 ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
490c490
<   Int32 EOB;
---
>   Int32 
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
490c490
<   Int32 EOB;
---
>   Int32 ;
492c492
<   UInt32 ptr_0;
---
>    ;
490c490
<   Int32 EOB;
---
>   Int32 
492c492
<   UInt32 ptr_0;
---
>    ;
490c490
<   Int32 EOB;
---
>   Int32 EOB
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>    ;
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>    ptr_0
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>   UInt32 
490c490
<   Int32 EOB;
---
>   Int32 EOB
492c492
<   UInt32 ptr_0;
---
>    
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
492c492
<   UInt32 ptr_0;
---
>    ;
492c492
<   UInt32 ptr_0;
---
>    ptr_0
492c492
<   UInt32 ptr_0;
---
>    
492c492
<   UInt32 ptr_0;
---
>    ptr_0;
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>    ;
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>    ptr_0
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>    
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>   UInt32 
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
494c494
<   UChar block_0;
---
>   UChar ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 
494c494
<   UChar block_0;
---
>   UChar ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ;
494c494
<   UChar block_0;
---
>    ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 
494c494
<   UChar block_0;
---
>    ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>    block_0;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>   UChar ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>    ;
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>   UChar block_0
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>    block_0
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>   UChar 
492c492
<   UInt32 ptr_0;
---
>   UInt32 ptr_0
494c494
<   UChar block_0;
---
>    
494c494
<   UChar block_0;
---
>    block_0;
494c494
<   UChar block_0;
---
>    ;
494c494
<   UChar block_0;
---
>    block_0
494c494
<   UChar block_0;
---
>    
494c494
<   UChar block_0;
---
>    block_0;
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>    ;
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>    block_0
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>    
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>   UChar ;
494c494
<   UChar block_0;
---
>   UChar 
494c494
<   UChar block_0;
---
>   UChar ;
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>   UChar 
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>   UChar ;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
494c494
<   UChar block_0;
---
>   UChar 
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
494c494
<   UChar block_0;
---
>   UChar ;
496c496
<   UInt16 mtfv_0;
---
>    ;
494c494
<   UChar block_0;
---
>   UChar 
496c496
<   UInt16 mtfv_0;
---
>    ;
494c494
<   UChar block_0;
---
>   UChar block_0
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>    ;
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>   UInt16 mtfv_0
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>   UInt16 
494c494
<   UChar block_0;
---
>   UChar block_0
496c496
<   UInt16 mtfv_0;
---
>    
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
496c496
<   UInt16 mtfv_0;
---
>    ;
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0
496c496
<   UInt16 mtfv_0;
---
>    
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0;
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>    ;
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>    mtfv_0
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>    
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>   UInt16 
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
499c499
<   EOB = s->nInUse + 1;
---
>    = s->nInUse + 1;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 
499c499
<   EOB = s->nInUse + 1;
---
>    = s->nInUse + 1;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 ;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>    = s->nInUse + 1;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>    = s->nInUse + 1;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 mtfv_0
496c496
<   UInt16 mtfv_0;
---
>   UInt16 mtfv_0
498c498
<   ;
---
>   
496c496
<   UInt16 mtfv_0;
---
>   UInt16 mtfv_0
499c499
<   EOB = s->nInUse + 1;
---
>    = s->nInUse + 1;
496c496
<   UInt16 mtfv_0;
---
>   UInt16 mtfv_0
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>    = s->nInUse + 1;
(91.4 %, 17648 bytes)
498c498
<   ;
---
>   
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>    = s->nInUse + 1;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>   EOB  s->nInUse + 1;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>     s->nInUse + 1;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>   EOB = ->nInUse + 1;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>    = ->nInUse + 1;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>   EOB  ->nInUse + 1;
498,499c498,499
<   ;
<   EOB = s->nInUse + 1;
---
>   
>     ->nInUse + 1;
499c499
<   EOB = s->nInUse + 1;
---
>    = s->nInUse + 1;
499c499
<   EOB = s->nInUse + 1;
---
>     s->nInUse + 1;
(91.4 %, 17644 bytes)
499c499
<    = s->nInUse + 1;
---
>     ->nInUse + 1;
499c499
<    = s->nInUse + 1;
---
>     snInUse + 1;
499c499
<    = s->nInUse + 1;
---
>     nInUse + 1;
499c499
<    = s->nInUse + 1;
---
>     s-> + 1;
499c499
<    = s->nInUse + 1;
---
>     -> + 1;
499c499
<    = s->nInUse + 1;
---
>     s + 1;
499c499
<    = s->nInUse + 1;
---
>      + 1;
499c499
<    = s->nInUse + 1;
---
>    = ->nInUse + 1;
499c499
<    = s->nInUse + 1;
---
>    = nInUse + 1;
499c499
<    = s->nInUse + 1;
---
>    = -> + 1;
499c499
<    = s->nInUse + 1;
---
>    =  + 1;
499c499
<    = s->nInUse + 1;
---
>    = ->nInUse  1;
499c499
<    = s->nInUse + 1;
---
>    = nInUse  1;
499c499
<    = s->nInUse + 1;
---
>    = ->  1;
499c499
<    = s->nInUse + 1;
---
>    =   1;
499c499
<    = s->nInUse + 1;
---
>    = snInUse + 1;
499c499
<    = s->nInUse + 1;
---
>    = s + 1;
(91.4 %, 17635 bytes)
499c499
<    =  + 1;
---
>    =   
499c499
<    =  + 1;
---
>    =   1;
501c501
<   i = 0;
---
>    = 0;
499c499
<    =  + 1;
---
>    =   ;
501c501
<   i = 0;
---
>    = 0;
499c499
<    =  + 1;
---
>    =   1
501c501
<   i = 0;
---
>    = 0;
499c499
<    =  + 1;
---
>    =   
501c501
<   i = 0;
---
>    = 0;
499c499
<    =  + 1;
---
>    =  + ;
499c499
<    =  + 1;
---
>    =  + 
499c499
<    =  + 1;
---
>    =  + ;
501c501
<   i = 0;
---
>    = 0;
499c499
<    =  + 1;
---
>    =  + 
501c501
<   i = 0;
---
>    = 0;
499c499
<    =  + 1;
---
>    =  + ;
501c501
<   i = 0;
---
>   i  0;
(91.4 %, 17632 bytes)
501c501
<   i = 0;
---
>     ;
501c501
<   i = 0;
---
>    = 0
501c501
<   i = 0;
---
>     0
501c501
<   i = 0;
---
>    = 
501c501
<   i = 0;
---
>     
501c501
<   i = 0;
---
>   i  0;
501c501
<   i = 0;
---
>   i  ;
501c501
<   i = 0;
---
>   i  0
501c501
<   i = 0;
---
>   i  
501c501
<   i = 0;
---
>   i  0;
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i  ;
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i  0
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i = ;
501c501
<   i = 0;
---
>   i = 
501c501
<   i = 0;
---
>   i = ;
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i = 
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i = ;
503c503
<   for (i; i <= EOB; i++)
---
>   for i; i <= EOB; i++)
501c501
<   i = 0;
---
>   i = 
503c503
<   for (i; i <= EOB; i++)
---
>   for i; i <= EOB; i++)
(91.4 %, 17630 bytes)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>   for i; i <= EOB; i++)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>    i; i <= EOB; i++)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>   for (; i <= EOB; i++)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>    (; i <= EOB; i++)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>   for ; i <= EOB; i++)
501c501
<   i  ;
---
>   i  
503c503
<   for (i; i <= EOB; i++)
---
>    ; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    (i; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    i; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    (; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    ; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    (i i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    i i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>    ( i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>     i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for i; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for ; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for i i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for  i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for i;  <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for ;  <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for i  <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for   <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for (; i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for ( i <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for (;  <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for (  <= EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for (; i  EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for ( i  EOB; i++)
503c503
<   for (i; i <= EOB; i++)
---
>   for (;   EOB; i++)
(91.4 %, 17629 bytes)
503c503
<   for (; i <= EOB; i++)
---
>   for ( i <= EOB; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (  <= EOB; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for ( i  EOB; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (   EOB; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for ( i <= ; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (  <= ; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for ( i  ; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (   ; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (;  <= EOB; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (;   EOB; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (;  <= ; i++)
503c503
<   for (; i <= EOB; i++)
---
>   for (;   ; i++)
(91.4 %, 17626 bytes)
503c503
<   for (;   EOB; i++)
---
>   for (;    i++)
503c503
<   for (;   EOB; i++)
---
>   for (;   ; ++)
503c503
<   for (;   EOB; i++)
---
>   for (;    ++)
503c503
<   for (;   EOB; i++)
---
>   for (;   ; i)
503c503
<   for (;   EOB; i++)
---
>   for (;    i)
503c503
<   for (;   EOB; i++)
---
>   for (;   ; )
(91.4 %, 17621 bytes)
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;    i)
>     ->mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;    )
>     ->mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;    i
>     ->mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;    
>     ->mtfFreq[i] = 0;
503c503
<   for (;   ; i)
---
>   for (;   ; )
503c503
<   for (;   ; i)
---
>   for (;   ; 
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; )
>     ->mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     ->mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; )
>     smtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     smtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; )
>     mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     mtfFreq[i] = 0;
503c503
<   for (;   ; i)
---
>   for (;   ; i
503,504c503,504
<   for (;   ; i)
<     s->mtfFreq[i] = 0;
---
>   for (;   ; i
>     ->mtfFreq[i] = 0;
(91.4 %, 17620 bytes)
503c503
<   for (;   ; )
---
>   for (;   ; 
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     ->mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     smtfFreq[i] = 0;
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     mtfFreq[i] = 0;
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     s->[i] = 0;
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     ->[i] = 0;
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     s[i] = 0;
503,504c503,504
<   for (;   ; )
<     s->mtfFreq[i] = 0;
---
>   for (;   ; 
>     [i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     ->mtfFreq[i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     mtfFreq[i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     ->[i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     [i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     ->mtfFreqi] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     mtfFreqi] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     ->i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     smtfFreq[i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s[i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     smtfFreqi] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     si] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     smtfFreq[] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s[] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     smtfFreq] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->[i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->i] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->[] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->[i = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->i = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->[ = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s-> = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreqi] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreqi = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreqi]  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq]  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreqi  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[] = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[ = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[]  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[] = ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[ = ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[]  ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[  ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i = ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i  ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i = 0
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i  0
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i = 
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i  
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  ;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  0
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  0;
506c506
<   wr = 0;
---
>    = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  ;
506c506
<   wr = 0;
---
>    = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  0
506c506
<   wr = 0;
---
>    = 0;
504c504
<     s->mtfFreq[i] = 0;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>    = 0;
(91.4 %, 17618 bytes)
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>    = 0;
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>   wr  0;
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>     0;
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>   wr = ;
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>    = ;
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>   wr  ;
504c504
<     s->mtfFreq[i]  ;
---
>     s->mtfFreq[i]  
506c506
<   wr = 0;
---
>     ;
(91.4 %, 17615 bytes)
506c506
<    = 0;
---
>     ;
506c506
<    = 0;
---
>     0
506c506
<    = 0;
---
>     
505a506
>     0;
507d507
<   zPend = 0;
505a506
>     ;
507d507
<   zPend = 0;
505a506
>     0
507d507
<   zPend = 0;
505a506
>     
507d507
<   zPend = 0;
(91.4 %, 17613 bytes)
506,507c506,507
<     ;
<   zPend = 0;
---
>     
>    = 0;
506,507c506,507
<     ;
<   zPend = 0;
---
>     
>   zPend  0;
506,507c506,507
<     ;
<   zPend = 0;
---
>     
>     0;
506,507c506,507
<     ;
<   zPend = 0;
---
>     
>   zPend = ;
506,507c506,507
<     ;
<   zPend = 0;
---
>     
>    = ;
506,507c506,507
<     ;
<   zPend = 0;
---
>     
>   zPend  ;
505a506
>     
507d507
<   zPend = 0;
(91.4 %, 17607 bytes)
507c507
<    = 0;
---
>     ;
507c507
<    = 0;
---
>     0
507c507
<    = 0;
---
>     
506a507
>     0;
508d508
<   i = 0;
506a507
>     ;
508d508
<   i = 0;
506a507
>     0
508d508
<   i = 0;
506a507
>     
508d508
<   i = 0;
(91.4 %, 17605 bytes)
507,508c507,508
<     ;
<   i = 0;
---
>     
>    = 0;
507,508c507,508
<     ;
<   i = 0;
---
>     
>   i  0;
507,508c507,508
<     ;
<   i = 0;
---
>     
>     0;
507,508c507,508
<     ;
<   i = 0;
---
>     
>   i = ;
507,508c507,508
<     ;
<   i = 0;
---
>     
>    = ;
507,508c507,508
<     ;
<   i = 0;
---
>     
>   i  ;
506a507
>     
508d508
<   i = 0;
(91.4 %, 17603 bytes)
508c508
<    = 0;
---
>     ;
508c508
<    = 0;
---
>     0
508c508
<    = 0;
---
>     
508c508
<    = 0;
---
>     0;
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<    = 0;
---
>     ;
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<    = 0;
---
>     0
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<    = 0;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<    = 0;
---
>    = ;
508c508
<    = 0;
---
>    = 
508c508
<    = 0;
---
>    = ;
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<    = 0;
---
>    = 
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<    = 0;
---
>    = ;
510c510
<   for (i; i < s->nInUse; i++)
---
>   for i; i < s->nInUse; i++)
(91.4 %, 17601 bytes)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>   for i; i < s->nInUse; i++)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>    i; i < s->nInUse; i++)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>   for (; i < s->nInUse; i++)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>    (; i < s->nInUse; i++)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>   for ; i < s->nInUse; i++)
508c508
<     ;
---
>     
510c510
<   for (i; i < s->nInUse; i++)
---
>    ; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    i; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    (; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    ; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    (i i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    i i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>    ( i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>     i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for i; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for ; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for i i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for  i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for i;  < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for ;  < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for i  < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for   < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for (; i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for ( i < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for (;  < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for (  < s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for (; i  s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for ( i  s->nInUse; i++)
510c510
<   for (i; i < s->nInUse; i++)
---
>   for (;   s->nInUse; i++)
(91.4 %, 17600 bytes)
510c510
<   for (; i < s->nInUse; i++)
---
>   for ( i < s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (  < s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for ( i  s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (   s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for ( i < ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (  < ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for ( i  ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (   ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;  < s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;   s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;  < ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;   ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;  < snInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;   snInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;  < nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (;   nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (; i  s->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (; i  ->nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (; i  snInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (; i  nInUse; i++)
510c510
<   for (; i < s->nInUse; i++)
---
>   for (; i  s->; i++)
(91.4 %, 17598 bytes)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   nInUse; i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   ->; i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   ; i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   ->nInUse i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   nInUse i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   -> i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;    i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   snInUse; i++)
510c510
<   for (;   s->nInUse; i++)
---
>   for (;   s; i++)
(91.4 %, 17589 bytes)
510c510
<   for (;   ; i++)
---
>   for (;    )
510c510
<   for (;   ; i++)
---
>   for (;    i++
510c510
<   for (;   ; i++)
---
>   for (;    ++
510c510
<   for (;   ; i++)
---
>   for (;    i
510c510
<   for (;   ; i++)
---
>   for (;    
510c510
<   for (;   ; i++)
---
>   for (;   ; ++)
510c510
<   for (;   ; i++)
---
>   for (;   ; )
510c510
<   for (;   ; i++)
---
>   for (;   ; ++
510c510
<   for (;   ; i++)
---
>   for (;   ; 
510,511c510,511
<   for (;   ; i++)
<     yy_0 = i;
---
>   for (;   ; ++)
>      = i;
510,511c510,511
<   for (;   ; i++)
<     yy_0 = i;
---
>   for (;   ; )
>      = i;
510,511c510,511
<   for (;   ; i++)
<     yy_0 = i;
---
>   for (;   ; ++
>      = i;
510,511c510,511
<   for (;   ; i++)
<     yy_0 = i;
---
>   for (;   ; 
>      = i;
510c510
<   for (;   ; i++)
---
>   for (;   ; i)
(91.4 %, 17586 bytes)
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>      = i;
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>     yy_0  i;
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>       i;
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>     yy_0 = ;
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>      = ;
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>     yy_0  ;
510,511c510,511
<   for (;   ; )
<     yy_0 = i;
---
>   for (;   ; 
>       ;
511c511
<     yy_0 = i;
---
>      = i;
511c511
<     yy_0 = i;
---
>       i;
511c511
<     yy_0 = i;
---
>      = ;
511c511
<     yy_0 = i;
---
>       ;
(91.4 %, 17581 bytes)
511c511
<       i;
---
>       
511c511
<       i;
---
>       ;
513c513
<   i = 0;
---
>    = 0;
511c511
<       i;
---
>       
513c513
<   i = 0;
---
>    = 0;
511c511
<       i;
---
>       ;
513c513
<   i = 0;
---
>   i  0;
511c511
<       i;
---
>       
513c513
<   i = 0;
---
>   i  0;
(91.4 %, 17579 bytes)
513c513
<   i = 0;
---
>     0;
513c513
<   i = 0;
---
>    = ;
513c513
<   i = 0;
---
>     ;
(91.4 %, 17577 bytes)
513c513
<     0;
---
>     
513c513
<     0;
---
>     ;
515c515
<   for (i; i < s->nblock; i++) {
---
>    (i; i < s->nblock; i++) {
513c513
<     0;
---
>     
515c515
<   for (i; i < s->nblock; i++) {
---
>    (i; i < s->nblock; i++) {
513c513
<     0;
---
>     ;
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i; i < s->nblock; i++) {
513c513
<     0;
---
>     
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i; i < s->nblock; i++) {
513c513
<     0;
---
>     ;
515c515
<   for (i; i < s->nblock; i++) {
---
>    i; i < s->nblock; i++) {
513c513
<     0;
---
>     
515c515
<   for (i; i < s->nblock; i++) {
---
>    i; i < s->nblock; i++) {
513c513
<     0;
---
>     0
513c513
<     0;
---
>     0
515c515
<   for (i; i < s->nblock; i++) {
---
>    (i; i < s->nblock; i++) {
513c513
<     0;
---
>     0
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i; i < s->nblock; i++) {
513c513
<     0;
---
>     0
515c515
<   for (i; i < s->nblock; i++) {
---
>    i; i < s->nblock; i++) {
513c513
<     0;
---
>     0
515c515
<   for (i; i < s->nblock; i++) {
---
>   for (; i < s->nblock; i++) {
(91.4 %, 17575 bytes)
515c515
<   for (i; i < s->nblock; i++) {
---
>    i; i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>    (; i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>    ; i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>    (i i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>    i i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>    ( i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>     i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i; i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for ; i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for  i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i;  < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for ;  < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for i  < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for   < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for (; i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for ( i < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for (;  < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for (  < s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for (; i  s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for ( i  s->nblock; i++) {
515c515
<   for (i; i < s->nblock; i++) {
---
>   for (;   s->nblock; i++) {
(91.4 %, 17574 bytes)
515c515
<   for (; i < s->nblock; i++) {
---
>   for ( i < s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (  < s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for ( i  s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (   s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for ( i < ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (  < ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for ( i  ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (   ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;  < s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;   s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;  < ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;   ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;  < snblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;   snblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;  < nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (;   nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (; i  s->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (; i  ->nblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (; i  snblock; i++) {
515c515
<   for (; i < s->nblock; i++) {
---
>   for (; i  nblock; i++) {
(91.4 %, 17572 bytes)
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   nblock; i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   ->; i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   ; i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   ->nblock i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   nblock i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   -> i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;    i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   snblock; i++) {
515c515
<   for (;   s->nblock; i++) {
---
>   for (;   s; i++) {
(91.4 %, 17563 bytes)
515c515
<   for (;   ; i++) {
---
>   for (;    ) {
515c515
<   for (;   ; i++) {
---
>   for (;    i++ {
515c515
<   for (;   ; i++) {
---
>   for (;    ++ {
515c515
<   for (;   ; i++) {
---
>   for (;    i {
515c515
<   for (;   ; i++) {
---
>   for (;     {
515c515
<   for (;   ; i++) {
---
>   for (;   ; ++) {
515c515
<   for (;   ; i++) {
---
>   for (;   ; ) {
515c515
<   for (;   ; i++) {
---
>   for (;   ; ++ {
515c515
<   for (;   ; i++) {
---
>   for (;   ;  {
515c515
<   for (;   ; i++) {
---
>   for (;   ; ++) 
515c515
<   for (;   ; i++) {
---
>   for (;   ; ) 
515c515
<   for (;   ; i++) {
---
>   for (;   ; ++ 
515c515
<   for (;   ; i++) {
---
>   for (;   ;  
515c515
<   for (;   ; i++) {
---
>   for (;   ; i) {
(91.4 %, 17560 bytes)
515c515
<   for (;   ; ) {
---
>   for (;   ;  
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ;  {
>      ll_i;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ;  
>      ll_i;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ;  {
>     UChar ;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ;  
>     UChar ;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ;  {
>      ;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ;  
>      ;
515c515
<   for (;   ; ) {
---
>   for (;   ; ) 
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>      ll_i;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>     UChar ;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>      ;
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>     UChar ll_i
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>      ll_i
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>     UChar 
515,516c515,516
<   for (;   ; ) {
<     UChar ll_i;
---
>   for (;   ; ) 
>      
516c516
<     UChar ll_i;
---
>      ll_i;
516c516
<     UChar ll_i;
---
>      ;
516c516
<     UChar ll_i;
---
>      ll_i
516c516
<     UChar ll_i;
---
>      
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>      ll_i;
>     (wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>      ;
>     (wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>      ll_i
>     (wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>      
>     (wr <= i, "generateMTFValues1");
516c516
<     UChar ll_i;
---
>     UChar ;
516c516
<     UChar ll_i;
---
>     UChar 
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ;
>     (wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar 
>     (wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ;
>     AssertDwr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar 
>     AssertDwr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ;
>     wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar 
>     wr <= i, "generateMTFValues1");
516c516
<     UChar ll_i;
---
>     UChar ll_i
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ll_i
>     (wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ll_i
>     AssertDwr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ll_i
>     wr <= i, "generateMTFValues1");
516,517c516,517
<     UChar ll_i;
<     AssertD(wr <= i, "generateMTFValues1");
---
>     UChar ll_i
>     AssertD( <= i, "generateMTFValues1");
(91.4 %, 17559 bytes)
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     (wr <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     wr <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     ( <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>      <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     (wr  i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     wr  i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     (  i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>       i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertDwr <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertDwr  i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD  i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertDwr <= , "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD <= , "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertDwr  , "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD  , "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD( <= i, "generateMTFValues1");
517c517
<     AssertD(wr <= i, "generateMTFValues1");
---
>     AssertD(  i, "generateMTFValues1");
(91.4 %, 17557 bytes)
517c517
<     AssertD( <= i, "generateMTFValues1");
---
>     AssertD(  i, "generateMTFValues1");
517c517
<     AssertD( <= i, "generateMTFValues1");
---
>     AssertD(  , "generateMTFValues1");
517c517
<     AssertD( <= i, "generateMTFValues1");
---
>     AssertD(  i "generateMTFValues1");
(91.4 %, 17555 bytes)
517c517
<     AssertD(  i, "generateMTFValues1");
---
>     AssertD(  , "generateMTFValues1");
517c517
<     AssertD(  i, "generateMTFValues1");
---
>     AssertD(   "generateMTFValues1");
517c517
<     AssertD(  i, "generateMTFValues1");
---
>     AssertD(  , );
(91.4 %, 17554 bytes)
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   "generateMTFValues1");
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   );
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   "generateMTFValues1";
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   ;
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   "generateMTFValues1")
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   )
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   "generateMTFValues1"
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(   
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(  , );
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(  , ;
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(  , )
517c517
<     AssertD(  , "generateMTFValues1");
---
>     AssertD(  , 
517,518c517,518
<     AssertD(  , "generateMTFValues1");
<     j = ptr_0 - 1;
---
>     AssertD(  , );
>      = ptr_0 - 1;
517,518c517,518
<     AssertD(  , "generateMTFValues1");
<     j = ptr_0 - 1;
---
>     AssertD(  , ;
>      = ptr_0 - 1;
517,518c517,518
<     AssertD(  , "generateMTFValues1");
<     j = ptr_0 - 1;
---
>     AssertD(  , )
>      = ptr_0 - 1;
(91.4 %, 17534 bytes)
517c517
<     AssertD(  , );
---
>     AssertD(  , ;
517c517
<     AssertD(  , );
---
>     AssertD(  , 
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , ;
>      = ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , 
>      = ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , ;
>     j  ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , 
>     j  ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , ;
>       ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , 
>       ptr_0 - 1;
517c517
<     AssertD(  , );
---
>     AssertD(  , )
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , )
>      = ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , )
>     j  ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , )
>       ptr_0 - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , )
>     j =  - 1;
517,518c517,518
<     AssertD(  , );
<     j = ptr_0 - 1;
---
>     AssertD(  , )
>      =  - 1;
(91.4 %, 17532 bytes)
518c518
<      = ptr_0 - 1;
---
>        - 1;
518c518
<      = ptr_0 - 1;
---
>       ptr_0  1;
518c518
<      = ptr_0 - 1;
---
>         1;
518c518
<      = ptr_0 - 1;
---
>       ptr_0 - ;
518c518
<      = ptr_0 - 1;
---
>        - ;
518c518
<      = ptr_0 - 1;
---
>       ptr_0  ;
518c518
<      = ptr_0 - 1;
---
>         ;
518c518
<      = ptr_0 - 1;
---
>      =  - 1;
(91.4 %, 17524 bytes)
518,519c518,519
<         ;
<     j < 0;
---
>         
>       ;
519c519
<     j < 0;
---
>      < 0;
519c519
<     j < 0;
---
>       0;
(91.5 %, 17520 bytes)
519c519
<       ;
---
>       
521c521
<     j += s->nblock;
---
>       ->nblock;
521c521
<     j += s->nblock;
---
>      += s->nblock;
521c521
<     j += s->nblock;
---
>       s->nblock;
521c521
<     j += s->nblock;
---
>      += ->nblock;
521c521
<     j += s->nblock;
---
>       ->nblock;
521c521
<     j += s->nblock;
---
>      += snblock;
521c521
<     j += s->nblock;
---
>       snblock;
521c521
<     j += s->nblock;
---
>      += nblock;
521c521
<     j += s->nblock;
---
>       nblock;
521c521
<     j += s->nblock;
---
>     j  s->nblock;
521c521
<     j += s->nblock;
---
>     j  ->nblock;
521c521
<     j += s->nblock;
---
>     j  snblock;
521c521
<     j += s->nblock;
---
>     j  nblock;
521c521
<     j += s->nblock;
---
>     j  s->;
(91.5 %, 17517 bytes)
521c521
<       s->nblock;
---
>       nblock;
521c521
<       s->nblock;
---
>       ->;
521c521
<       s->nblock;
---
>       ;
521c521
<       s->nblock;
---
>       ->nblock
521c521
<       s->nblock;
---
>       nblock
521c521
<       s->nblock;
---
>       ->
521c521
<       s->nblock;
---
>       
(91.5 %, 17508 bytes)
521,522c521,522
<       ;
<     ll_i = s->unseqToSeq[block_0];
---
>       
>       s->unseqToSeq[block_0];
521,522c521,522
<       ;
<     ll_i = s->unseqToSeq[block_0];
---
>       
>     ll_i = ->unseqToSeq[block_0];
521,522c521,522
<       ;
<     ll_i = s->unseqToSeq[block_0];
---
>       
>      = ->unseqToSeq[block_0];
521,522c521,522
<       ;
<     ll_i = s->unseqToSeq[block_0];
---
>       
>     ll_i  ->unseqToSeq[block_0];
521,522c521,522
<       ;
<     ll_i = s->unseqToSeq[block_0];
---
>       
>       ->unseqToSeq[block_0];
522c522
<     ll_i = s->unseqToSeq[block_0];
---
>      = s->unseqToSeq[block_0];
522c522
<     ll_i = s->unseqToSeq[block_0];
---
>       s->unseqToSeq[block_0];
(91.5 %, 17502 bytes)
522c522
<       s->unseqToSeq[block_0];
---
>       [block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       ->unseqToSeqblock_0];
522c522
<       s->unseqToSeq[block_0];
---
>       unseqToSeqblock_0];
522c522
<       s->unseqToSeq[block_0];
---
>       ->block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       sunseqToSeq[block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       s[block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       sunseqToSeqblock_0];
522c522
<       s->unseqToSeq[block_0];
---
>       sblock_0];
522c522
<       s->unseqToSeq[block_0];
---
>       sunseqToSeq[];
522c522
<       s->unseqToSeq[block_0];
---
>       s[];
522c522
<       s->unseqToSeq[block_0];
---
>       sunseqToSeq];
522c522
<       s->unseqToSeq[block_0];
---
>       s];
522c522
<       s->unseqToSeq[block_0];
---
>       s->[block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       s->block_0];
522c522
<       s->unseqToSeq[block_0];
---
>       s->[];
522c522
<       s->unseqToSeq[block_0];
---
>       s->];
522c522
<       s->unseqToSeq[block_0];
---
>       s->[block_0;
(91.5 %, 17490 bytes)
522c522
<       s[block_0];
---
>       s];
522c522
<       s[block_0];
---
>       sblock_0;
522c522
<       s[block_0];
---
>       s;
522c522
<       s[block_0];
---
>       sblock_0]
522c522
<       s[block_0];
---
>       s]
522c522
<       s[block_0];
---
>       sblock_0
522c522
<       s[block_0];
---
>       s
(91.5 %, 17481 bytes)
522,523c522,523
<       s;
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>       s
>     ll_i nInUse, "generateMTFValuesa");
522,523c522,523
<       s;
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>       s
>     AssertD( nInUse, "generateMTFValuesa");
522,523c522,523
<       s;
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>       s
>     ( nInUse, "generateMTFValuesa");
522,523c522,523
<       s;
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>       s
>     AssertD nInUse, "generateMTFValuesa");
522,523c522,523
<       s;
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>       s
>      nInUse, "generateMTFValuesa");
523c523
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     (ll_i nInUse, "generateMTFValuesa");
523c523
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     ll_i nInUse, "generateMTFValuesa");
523c523
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     ( nInUse, "generateMTFValuesa");
523c523
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>      nInUse, "generateMTFValuesa");
523c523
<     AssertD(ll_i nInUse, "generateMTFValuesa");
---
>     (ll_i , "generateMTFValuesa");
(91.5 %, 17476 bytes)
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     ( nInUse "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>      nInUse "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     (  "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>       "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD nInUse, "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD , "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD nInUse "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD  "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD nInUse, );
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD , );
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD nInUse );
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD  );
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD( , "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD(  "generateMTFValuesa");
523c523
<     AssertD( nInUse, "generateMTFValuesa");
---
>     AssertD( , );
(91.5 %, 17470 bytes)
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  "generateMTFValuesa");
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  );
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  "generateMTFValuesa";
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  ;
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  "generateMTFValuesa")
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  )
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  "generateMTFValuesa"
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD(  
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , );
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , ;
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , )
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , 
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , );
525c525
<     yy_0 == ll_i;
---
>      == ll_i;
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , ;
525c525
<     yy_0 == ll_i;
---
>      == ll_i;
523c523
<     AssertD( , "generateMTFValuesa");
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>      == ll_i;
(91.5 %, 17450 bytes)
523c523
<     AssertD( , );
---
>     AssertD( , ;
523c523
<     AssertD( , );
---
>     AssertD( , 
523c523
<     AssertD( , );
---
>     AssertD( , ;
525c525
<     yy_0 == ll_i;
---
>      == ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , 
525c525
<     yy_0 == ll_i;
---
>      == ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , ;
525c525
<     yy_0 == ll_i;
---
>     yy_0  ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , 
525c525
<     yy_0 == ll_i;
---
>     yy_0  ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , ;
525c525
<     yy_0 == ll_i;
---
>       ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , 
525c525
<     yy_0 == ll_i;
---
>       ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , )
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>      == ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>     yy_0  ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>       ll_i;
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>     yy_0 == ;
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>      == ;
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>     yy_0  ;
523c523
<     AssertD( , );
---
>     AssertD( , )
525c525
<     yy_0 == ll_i;
---
>       ;
(91.5 %, 17445 bytes)
525c525
<      == ll_i;
---
>       ;
525c525
<      == ll_i;
---
>       ll_i
525c525
<      == ll_i;
---
>       
525c525
<      == ll_i;
---
>       ll_i;
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<      == ll_i;
---
>       ;
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<      == ll_i;
---
>       ll_i
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<      == ll_i;
---
>       
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<      == ll_i;
---
>      == ;
525c525
<      == ll_i;
---
>      == 
525c525
<      == ll_i;
---
>      == ;
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<      == ll_i;
---
>      == 
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<      == ll_i;
---
>      == ;
527c527
<     { zPend++; }
---
>     { ++; }
(91.5 %, 17439 bytes)
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>      zPend++; }
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>     { ++; }
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>      ++; }
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>     { zPend; }
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>      zPend; }
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>     { ; }
525c525
<       ;
---
>       
527c527
<     { zPend++; }
---
>      ; }
527c527
<     { zPend++; }
---
>      zPend++; }
527c527
<     { zPend++; }
---
>      ++; }
527c527
<     { zPend++; }
---
>      zPend; }
527c527
<     { zPend++; }
---
>      ; }
527c527
<     { zPend++; }
---
>      zPend++ }
527c527
<     { zPend++; }
---
>      ++ }
527c527
<     { zPend++; }
---
>      zPend }
527c527
<     { zPend++; }
---
>       }
527c527
<     { zPend++; }
---
>     { ++; }
527c527
<     { zPend++; }
---
>     { ; }
527c527
<     { zPend++; }
---
>     { ++ }
527c527
<     { zPend++; }
---
>     {  }
(91.5 %, 17432 bytes)
527c527
<     { ; }
---
>     {  
527,528c527,528
<     { ; }
<     {
---
>     {  }
>     
527,528c527,528
<     { ; }
<     {
---
>     {  
>     
527c527
<     { ; }
---
>     {  }
530c530
<       zPend > 0;
---
>        > 0;
527c527
<     { ; }
---
>     {  
530c530
<       zPend > 0;
---
>        > 0;
527,528c527,528
<     { ; }
<     {
---
>     {  }
>     
530c530
<       zPend > 0;
---
>        > 0;
527,528c527,528
<     { ; }
<     {
---
>     {  
>     
530c530
<       zPend > 0;
---
>        > 0;
527c527
<     { ; }
---
>     { ; 
527,528c527,528
<     { ; }
<     {
---
>     { ; 
>     
(91.5 %, 17429 bytes)
530c530
<       zPend > 0;
---
>         ;
530c530
<       zPend > 0;
---
>        > 0
530c530
<       zPend > 0;
---
>         0
530c530
<       zPend > 0;
---
>        > 
530c530
<       zPend > 0;
---
>         
(91.5 %, 17422 bytes)
530c530
<         ;
---
>         
532,533c532,533
<       {
<         register UChar rtmp;
---
>       
>          UChar rtmp;
530c530
<         ;
---
>         
533c533
<         register UChar rtmp;
---
>         register  rtmp;
530c530
<         ;
---
>         
532,533c532,533
<       {
<         register UChar rtmp;
---
>       
>         register  rtmp;
530c530
<         ;
---
>         
533c533
<         register UChar rtmp;
---
>           rtmp;
530c530
<         ;
---
>         
532,533c532,533
<       {
<         register UChar rtmp;
---
>       
>           rtmp;
532c532
<       {
---
>       
532,533c532,533
<       {
<         register UChar rtmp;
---
>       
>          UChar rtmp;
532,533c532,533
<       {
<         register UChar rtmp;
---
>       
>         register  rtmp;
532,533c532,533
<       {
<         register UChar rtmp;
---
>       
>           rtmp;
(91.5 %, 17416 bytes)
532,533c532,533
<       {
<         register  rtmp;
---
>       
>         register  rtmp
532,533c532,533
<       {
<         register  rtmp;
---
>       
>           rtmp
532,533c532,533
<       {
<         register  rtmp;
---
>       
>         register  
532,533c532,533
<       {
<         register  rtmp;
---
>       
>           
533c533
<         register  rtmp;
---
>           rtmp;
533c533
<         register  rtmp;
---
>           ;
533c533
<         register  rtmp;
---
>           rtmp
533c533
<         register  rtmp;
---
>           
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>           rtmp;
>          UChar *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>           ;
>          UChar *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>           rtmp
>          UChar *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>           
>          UChar *ryy_j;
533c533
<         register  rtmp;
---
>         register  ;
533c533
<         register  rtmp;
---
>         register  
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  ;
>          UChar *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  
>          UChar *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  ;
>         register  *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  
>         register  *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  ;
>           *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  
>           *ryy_j;
533c533
<         register  rtmp;
---
>         register  rtmp
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>          UChar *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>         register  *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>           *ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>         register UChar ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>          UChar ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>         register  ryy_j;
533,534c533,534
<         register  rtmp;
<         register UChar *ryy_j;
---
>         register  rtmp
>           ryy_j;
534c534
<         register UChar *ryy_j;
---
>          UChar *ryy_j;
534c534
<         register UChar *ryy_j;
---
>           *ryy_j;
534c534
<         register UChar *ryy_j;
---
>          UChar ryy_j;
534c534
<         register UChar *ryy_j;
---
>           ryy_j;
534c534
<         register UChar *ryy_j;
---
>          UChar *;
534c534
<         register UChar *ryy_j;
---
>           *;
534c534
<         register UChar *ryy_j;
---
>          UChar ;
534c534
<         register UChar *ryy_j;
---
>           ;
534c534
<         register UChar *ryy_j;
---
>         register  *ryy_j;
(91.5 %, 17408 bytes)
534c534
<          UChar *ryy_j;
---
>           *ryy_j;
534c534
<          UChar *ryy_j;
---
>           ryy_j;
534c534
<          UChar *ryy_j;
---
>           *;
534c534
<          UChar *ryy_j;
---
>           ;
534c534
<          UChar *ryy_j;
---
>           *ryy_j
534c534
<          UChar *ryy_j;
---
>           ryy_j
534c534
<          UChar *ryy_j;
---
>           *
534c534
<          UChar *ryy_j;
---
>           
534c534
<          UChar *ryy_j;
---
>          UChar ryy_j;
534c534
<          UChar *ryy_j;
---
>          UChar ;
534c534
<          UChar *ryy_j;
---
>          UChar ryy_j
534c534
<          UChar *ryy_j;
---
>          UChar 
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar ryy_j;
>          UChar rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar ;
>          UChar rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar ryy_j
>          UChar rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar 
>          UChar rll_i;
534c534
<          UChar *ryy_j;
---
>          UChar *;
534c534
<          UChar *ryy_j;
---
>          UChar *
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *;
>          UChar rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *
>          UChar rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *;
>         register  rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *
>         register  rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *;
>           rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *
>           rll_i;
534c534
<          UChar *ryy_j;
---
>          UChar *ryy_j
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>          UChar rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>         register  rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>           rll_i;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>         register UChar ;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>          UChar ;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>         register  ;
534,535c534,535
<          UChar *ryy_j;
<         register UChar rll_i;
---
>          UChar *ryy_j
>           ;
535c535
<         register UChar rll_i;
---
>          UChar rll_i;
535c535
<         register UChar rll_i;
---
>           rll_i;
535c535
<         register UChar rll_i;
---
>          UChar ;
535c535
<         register UChar rll_i;
---
>           ;
535c535
<         register UChar rll_i;
---
>          UChar rll_i
535c535
<         register UChar rll_i;
---
>           rll_i
535c535
<         register UChar rll_i;
---
>          UChar 
535c535
<         register UChar rll_i;
---
>           
535c535
<         register UChar rll_i;
---
>         register  rll_i;
(91.5 %, 17400 bytes)
535c535
<          UChar rll_i;
---
>           rll_i;
535c535
<          UChar rll_i;
---
>           ;
535c535
<          UChar rll_i;
---
>           rll_i
535c535
<          UChar rll_i;
---
>           
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>           rll_i;
>          = yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>           ;
>          = yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>           rll_i
>          = yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>           
>          = yy_1;
535c535
<          UChar rll_i;
---
>          UChar ;
535c535
<          UChar rll_i;
---
>          UChar 
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar ;
>          = yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar 
>          = yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar ;
>         rtmp  yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar 
>         rtmp  yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar ;
>           yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar 
>           yy_1;
535c535
<          UChar rll_i;
---
>          UChar rll_i
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>          = yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>         rtmp  yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>           yy_1;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>         rtmp = ;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>          = ;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>         rtmp  ;
535,536c535,536
<          UChar rll_i;
<         rtmp = yy_1;
---
>          UChar rll_i
>           ;
(91.5 %, 17395 bytes)
536c536
<          = yy_1;
---
>           ;
536c536
<          = yy_1;
---
>           yy_1
536c536
<          = yy_1;
---
>           
536,537c536,537
<          = yy_1;
<         yy_1 = yy_0;
---
>           yy_1;
>          = yy_0;
536,537c536,537
<          = yy_1;
<         yy_1 = yy_0;
---
>           ;
>          = yy_0;
536,537c536,537
<          = yy_1;
<         yy_1 = yy_0;
---
>           yy_1
>          = yy_0;
536,537c536,537
<          = yy_1;
<         yy_1 = yy_0;
---
>           
>          = yy_0;
(91.5 %, 17390 bytes)
536,537c536,537
<           ;
<         yy_1 = yy_0;
---
>           
>          = yy_0;
536,537c536,537
<           ;
<         yy_1 = yy_0;
---
>           
>         yy_1  yy_0;
536,537c536,537
<           ;
<         yy_1 = yy_0;
---
>           
>           yy_0;
536,537c536,537
<           ;
<         yy_1 = yy_0;
---
>           
>         yy_1 = ;
536,537c536,537
<           ;
<         yy_1 = yy_0;
---
>           
>          = ;
536,537c536,537
<           ;
<         yy_1 = yy_0;
---
>           
>         yy_1  ;
535a536
>           
537d537
<         yy_1 = yy_0;
(91.5 %, 17385 bytes)
537c537
<          = yy_0;
---
>           ;
537c537
<          = yy_0;
---
>           yy_0
537c537
<          = yy_0;
---
>           
537,538c537,538
<          = yy_0;
<         ryy_j = &yy_1;
---
>           yy_0;
>          = &yy_1;
537,538c537,538
<          = yy_0;
<         ryy_j = &yy_1;
---
>           ;
>          = &yy_1;
537,538c537,538
<          = yy_0;
<         ryy_j = &yy_1;
---
>           yy_0
>          = &yy_1;
537,538c537,538
<          = yy_0;
<         ryy_j = &yy_1;
---
>           
>          = &yy_1;
(91.5 %, 17380 bytes)
537,538c537,538
<           ;
<         ryy_j = &yy_1;
---
>           
>          = &yy_1;
537,538c537,538
<           ;
<         ryy_j = &yy_1;
---
>           
>         ryy_j  &yy_1;
537,538c537,538
<           ;
<         ryy_j = &yy_1;
---
>           
>           &yy_1;
537,538c537,538
<           ;
<         ryy_j = &yy_1;
---
>           
>         ryy_j = yy_1;
537,538c537,538
<           ;
<         ryy_j = &yy_1;
---
>           
>          = yy_1;
(91.5 %, 17374 bytes)
538c538
<          = &yy_1;
---
>           yy_1;
538c538
<          = &yy_1;
---
>           &;
538c538
<          = &yy_1;
---
>           ;
538c538
<          = &yy_1;
---
>           &yy_1
538c538
<          = &yy_1;
---
>           yy_1
538c538
<          = &yy_1;
---
>           &
538c538
<          = &yy_1;
---
>           
538c538
<          = &yy_1;
---
>          = yy_1;
(91.5 %, 17368 bytes)
538,539c538,539
<           ;
<         rll_i = ll_i;
---
>           
>           ll_i;
538,539c538,539
<           ;
<         rll_i = ll_i;
---
>           
>         rll_i = ;
538,539c538,539
<           ;
<         rll_i = ll_i;
---
>           
>          = ;
538,539c538,539
<           ;
<         rll_i = ll_i;
---
>           
>         rll_i  ;
537a538
>           
539d539
<         rll_i = ll_i;
539c539
<         rll_i = ll_i;
---
>          = ll_i;
539c539
<         rll_i = ll_i;
---
>           ll_i;
(91.5 %, 17357 bytes)
539,540c539,540
<           ;
<         while (rll_i != rtmp)
---
>           
>           != rtmp)
540c540
<         while (rll_i != rtmp)
---
>          (rll_i != rtmp)
540c540
<         while (rll_i != rtmp)
---
>          rll_i != rtmp)
540c540
<         while (rll_i != rtmp)
---
>          ( != rtmp)
540c540
<         while (rll_i != rtmp)
---
>           != rtmp)
540c540
<         while (rll_i != rtmp)
---
>          (rll_i  rtmp)
540c540
<         while (rll_i != rtmp)
---
>          rll_i  rtmp)
540c540
<         while (rll_i != rtmp)
---
>          (  rtmp)
(91.5 %, 17352 bytes)
540c540
<          (rll_i != rtmp)
---
>          rll_i != rtmp)
540c540
<          (rll_i != rtmp)
---
>           != rtmp)
540c540
<          (rll_i != rtmp)
---
>          rll_i  rtmp)
540c540
<          (rll_i != rtmp)
---
>            rtmp)
540c540
<          (rll_i != rtmp)
---
>          rll_i != )
540c540
<          (rll_i != rtmp)
---
>           != )
540c540
<          (rll_i != rtmp)
---
>          rll_i  )
540c540
<          (rll_i != rtmp)
---
>            )
540c540
<          (rll_i != rtmp)
---
>          ( != rtmp)
540c540
<          (rll_i != rtmp)
---
>          (  rtmp)
540c540
<          (rll_i != rtmp)
---
>          ( != )
540c540
<          (rll_i != rtmp)
---
>          (  )
540c540
<          (rll_i != rtmp)
---
>          ( != rtmp
540c540
<          (rll_i != rtmp)
---
>          (  rtmp
540c540
<          (rll_i != rtmp)
---
>          ( != 
540c540
<          (rll_i != rtmp)
---
>          (  
540c540
<          (rll_i != rtmp)
---
>          (rll_i  rtmp)
540c540
<          (rll_i != rtmp)
---
>          (rll_i  )
(91.5 %, 17345 bytes)
540c540
<          (  rtmp)
---
>          (  
540,541c540,541
<          (  rtmp)
<           ;
---
>          (  )
>           
540,541c540,541
<          (  rtmp)
<           ;
---
>          (  
>           
540c540
<          (  rtmp)
---
>          (  )
542c542
<         yy_0 = rtmp;
---
>          = rtmp;
540c540
<          (  rtmp)
---
>          (  
542c542
<         yy_0 = rtmp;
---
>          = rtmp;
540,542c540,542
<          (  rtmp)
<           ;
<         yy_0 = rtmp;
---
>          (  )
>           
>          = rtmp;
540,542c540,542
<          (  rtmp)
<           ;
<         yy_0 = rtmp;
---
>          (  
>           
>          = rtmp;
540c540
<          (  rtmp)
---
>          (  rtmp
540,541c540,541
<          (  rtmp)
<           ;
---
>          (  rtmp
>           
540c540
<          (  rtmp)
---
>          (  rtmp
542c542
<         yy_0 = rtmp;
---
>          = rtmp;
540,542c540,542
<          (  rtmp)
<           ;
<         yy_0 = rtmp;
---
>          (  rtmp
>           
>          = rtmp;
540c540
<          (  rtmp)
---
>          (  rtmp
542c542
<         yy_0 = rtmp;
---
>         yy_0  rtmp;
540,542c540,542
<          (  rtmp)
<           ;
<         yy_0 = rtmp;
---
>          (  rtmp
>           
>         yy_0  rtmp;
540c540
<          (  rtmp)
---
>          (  rtmp
542c542
<         yy_0 = rtmp;
---
>           rtmp;
540,542c540,542
<          (  rtmp)
<           ;
<         yy_0 = rtmp;
---
>          (  rtmp
>           
>           rtmp;
541c541
<           ;
---
>           
541,542c541,542
<           ;
<         yy_0 = rtmp;
---
>           
>          = rtmp;
541,542c541,542
<           ;
<         yy_0 = rtmp;
---
>           
>         yy_0  rtmp;
541,542c541,542
<           ;
<         yy_0 = rtmp;
---
>           
>           rtmp;
541,542c541,542
<           ;
<         yy_0 = rtmp;
---
>           
>         yy_0 = ;
541,542c541,542
<           ;
<         yy_0 = rtmp;
---
>           
>          = ;
541,542c541,542
<           ;
<         yy_0 = rtmp;
---
>           
>         yy_0  ;
540a541
>           
542d542
<         yy_0 = rtmp;
(91.5 %, 17340 bytes)
542c542
<          = rtmp;
---
>           ;
542c542
<          = rtmp;
---
>           rtmp
542c542
<          = rtmp;
---
>           
542,543c542,543
<          = rtmp;
<         j = ryy_j - &yy_0;
---
>           rtmp;
>          = ryy_j - &yy_0;
542,543c542,543
<          = rtmp;
<         j = ryy_j - &yy_0;
---
>           ;
>          = ryy_j - &yy_0;
542,543c542,543
<          = rtmp;
<         j = ryy_j - &yy_0;
---
>           rtmp
>          = ryy_j - &yy_0;
542,543c542,543
<          = rtmp;
<         j = ryy_j - &yy_0;
---
>           
>          = ryy_j - &yy_0;
(91.5 %, 17335 bytes)
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>          = ryy_j - &yy_0;
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>         j  ryy_j - &yy_0;
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>           ryy_j - &yy_0;
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>         j =  - &yy_0;
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>          =  - &yy_0;
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>         j   - &yy_0;
542,543c542,543
<           ;
<         j = ryy_j - &yy_0;
---
>           
>            - &yy_0;
543c543
<         j = ryy_j - &yy_0;
---
>          = ryy_j - &yy_0;
543c543
<         j = ryy_j - &yy_0;
---
>           ryy_j - &yy_0;
(91.5 %, 17333 bytes)
543c543
<          = ryy_j - &yy_0;
---
>            - &yy_0;
543c543
<          = ryy_j - &yy_0;
---
>           ryy_j  &yy_0;
543c543
<          = ryy_j - &yy_0;
---
>             &yy_0;
543c543
<          = ryy_j - &yy_0;
---
>           ryy_j - yy_0;
543c543
<          = ryy_j - &yy_0;
---
>            - yy_0;
543c543
<          = ryy_j - &yy_0;
---
>           ryy_j  yy_0;
(91.5 %, 17326 bytes)
543c543
<             &yy_0;
---
>             
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             yy_0;
>          = j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             ;
>          = j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             yy_0
>          = j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             
>          = j + 1;
543c543
<             &yy_0;
---
>             &;
543c543
<             &yy_0;
---
>             &
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             &;
>          = j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             &
>          = j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             &;
>         mtfv_0  j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             &
>         mtfv_0  j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             &;
>           j + 1;
543,544c543,544
<             &yy_0;
<         mtfv_0 = j + 1;
---
>             &
>           j + 1;
(91.6 %, 17314 bytes)
544c544
<          = j + 1;
---
>             ;
544c544
<          = j + 1;
---
>          =  + 1;
(91.6 %, 17310 bytes)
544,545c544,545
<             ;
<         wr++;
---
>             
>         
545c545
<         wr++;
---
>         ++;
545c545
<         wr++;
---
>         ;
545c545
<         wr++;
---
>         ++
545c545
<         wr++;
---
>         
(91.6 %, 17306 bytes)
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         ->mtfFreq[j + 1]++;
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         smtfFreq[j + 1]++;
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         mtfFreq[j + 1]++;
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         s->[j + 1]++;
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         ->[j + 1]++;
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         s[j + 1]++;
545,546c545,546
<         ;
<         s->mtfFreq[j + 1]++;
---
>         
>         [j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         ->mtfFreq[j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         mtfFreq[j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         ->[j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         [j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         ->mtfFreqj + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         mtfFreqj + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         ->j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         smtfFreq[j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s[j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         smtfFreqj + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         sj + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         smtfFreq[ + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s[ + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         smtfFreq + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->[j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->j + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->[ + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s-> + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->[j  1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->j  1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->[  1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->  1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreqj + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreq + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreqj  1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreq  1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreqj + ]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreq + ]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreqj  ]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreq  ]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreq[ + 1]++;
546c546
<         s->mtfFreq[j + 1]++;
---
>         s->mtfFreq[  1]++;
(91.6 %, 17305 bytes)
546c546
<         s->mtfFreq[ + 1]++;
---
>         s->mtfFreq[  1]++;
546c546
<         s->mtfFreq[ + 1]++;
---
>         s->mtfFreq[  ]++;
546c546
<         s->mtfFreq[ + 1]++;
---
>         s->mtfFreq[  1++;
546c546
<         s->mtfFreq[ + 1]++;
---
>         s->mtfFreq[  ++;
546c546
<         s->mtfFreq[ + 1]++;
---
>         s->mtfFreq[  1];
(91.6 %, 17304 bytes)
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ]++;
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ++;
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ];
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ;
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ]++
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ++
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  ]
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1++;
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1;
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1++
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1++;
>       
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1;
>       
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1++
>       
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1
>       
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1];
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1]
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1];
>       
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1]
>       
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1];
548c548
<     }
---
>     
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1]
548c548
<     }
---
>     
546,548c546,548
<         s->mtfFreq[  1]++;
<       }
<     }
---
>         s->mtfFreq[  1];
>       
>     
546,548c546,548
<         s->mtfFreq[  1]++;
<       }
<     }
---
>         s->mtfFreq[  1]
>       
>     
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1]++
546,547c546,547
<         s->mtfFreq[  1]++;
<       }
---
>         s->mtfFreq[  1]++
>       
546c546
<         s->mtfFreq[  1]++;
---
>         s->mtfFreq[  1]++
548c548
<     }
---
>     
546,548c546,548
<         s->mtfFreq[  1]++;
<       }
<     }
---
>         s->mtfFreq[  1]++
>       
>     
(91.6 %, 17302 bytes)
546c546
<         s->mtfFreq[  1];
---
>         s->mtfFreq[  1]
546,547c546,547
<         s->mtfFreq[  1];
<       }
---
>         s->mtfFreq[  1]
>       
546c546
<         s->mtfFreq[  1];
---
>         s->mtfFreq[  1]
548c548
<     }
---
>     
546,548c546,548
<         s->mtfFreq[  1];
<       }
<     }
---
>         s->mtfFreq[  1]
>       
>     
546c546
<         s->mtfFreq[  1];
---
>         s->mtfFreq[  1]
549c549
<   }
---
>   
546,547c546,547
<         s->mtfFreq[  1];
<       }
---
>         s->mtfFreq[  1]
>       
549c549
<   }
---
>   
546c546
<         s->mtfFreq[  1];
---
>         s->mtfFreq[  1]
548,549c548,549
<     }
<   }
---
>     
>   
546,549c546,549
<         s->mtfFreq[  1];
<       }
<     }
<   }
---
>         s->mtfFreq[  1]
>       
>     
>   
547c547
<       }
---
>       
547,548c547,548
<       }
<     }
---
>       
>     
547c547
<       }
---
>       
549c549
<   }
---
>   
547,549c547,549
<       }
<     }
<   }
---
>       
>     
>   
547c547
<       }
---
>       
551c551
<   zPend > 0;
---
>    > 0;
547,548c547,548
<       }
<     }
---
>       
>     
551c551
<   zPend > 0;
---
>    > 0;
547c547
<       }
---
>       
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>    > 0;
547,549c547,549
<       }
<     }
<   }
---
>       
>     
>   
551c551
<   zPend > 0;
---
>    > 0;
548c548
<     }
---
>     
548,549c548,549
<     }
<   }
---
>     
>   
548c548
<     }
---
>     
551c551
<   zPend > 0;
---
>    > 0;
548,549c548,549
<     }
<   }
---
>     
>   
551c551
<   zPend > 0;
---
>    > 0;
548c548
<     }
---
>     
551c551
<   zPend > 0;
---
>   zPend  0;
548,549c548,549
<     }
<   }
---
>     
>   
551c551
<   zPend > 0;
---
>   zPend  0;
548c548
<     }
---
>     
551c551
<   zPend > 0;
---
>     0;
548,549c548,549
<     }
<   }
---
>     
>   
551c551
<   zPend > 0;
---
>     0;
549c549
<   }
---
>   
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>    > 0;
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>   zPend  0;
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>     0;
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>   zPend > ;
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>    > ;
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>   zPend  ;
549c549
<   }
---
>   
551c551
<   zPend > 0;
---
>     ;
551c551
<   zPend > 0;
---
>    > 0;
551c551
<   zPend > 0;
---
>     0;
551c551
<   zPend > 0;
---
>    > ;
551c551
<   zPend > 0;
---
>     ;
(91.6 %, 17296 bytes)
551c551
<     0;
---
>     
551c551
<     0;
---
>     ;
553c553
<   mtfv_0 = EOB;
---
>    = EOB;
551c551
<     0;
---
>     
553c553
<   mtfv_0 = EOB;
---
>    = EOB;
551c551
<     0;
---
>     ;
553c553
<   mtfv_0 = EOB;
---
>   mtfv_0  EOB;
551c551
<     0;
---
>     
553c553
<   mtfv_0 = EOB;
---
>   mtfv_0  EOB;
551c551
<     0;
---
>     ;
553c553
<   mtfv_0 = EOB;
---
>     EOB;
(91.6 %, 17294 bytes)
553c553
<   mtfv_0 = EOB;
---
>     EOB;
553c553
<   mtfv_0 = EOB;
---
>    = ;
553c553
<   mtfv_0 = EOB;
---
>     ;
(91.6 %, 17287 bytes)
553c553
<     EOB;
---
>     
553,554c553,554
<     EOB;
<   wr++;
---
>     ;
>   ++;
553,554c553,554
<     EOB;
<   wr++;
---
>     
>   ++;
553,554c553,554
<     EOB;
<   wr++;
---
>     ;
>   wr;
553,554c553,554
<     EOB;
<   wr++;
---
>     
>   wr;
(91.6 %, 17283 bytes)
554c554
<   wr++;
---
>   ;
554c554
<   wr++;
---
>   ++
554c554
<   wr++;
---
>   
(91.6 %, 17279 bytes)
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   ->mtfFreq[EOB]++;
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   smtfFreq[EOB]++;
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   mtfFreq[EOB]++;
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   s->[EOB]++;
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   ->[EOB]++;
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   s[EOB]++;
554,555c554,555
<   ;
<   s->mtfFreq[EOB]++;
---
>   
>   [EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   ->mtfFreq[EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   mtfFreq[EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   ->[EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   [EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   ->mtfFreqEOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   mtfFreqEOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   ->EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   smtfFreq[EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s[EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   smtfFreqEOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   sEOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   smtfFreq[]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s[]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   smtfFreq]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->[EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->EOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->[]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->[EOB++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->EOB++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->[++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreqEOB]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreqEOB++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreqEOB];
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq];
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreqEOB;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[]++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[];
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[]++
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[++
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[]
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[EOB++;
555c555
<   s->mtfFreq[EOB]++;
---
>   s->mtfFreq[EOB;
(91.6 %, 17272 bytes)
555c555
<   s->mtfFreq;
---
>   s->mtfFreq
557c557
<   s->nMTF = wr;
---
>    = wr;
557c557
<   s->nMTF = wr;
---
>   ->nMTF = wr;
557c557
<   s->nMTF = wr;
---
>   nMTF = wr;
557c557
<   s->nMTF = wr;
---
>   -> = wr;
557c557
<   s->nMTF = wr;
---
>    = wr;
557c557
<   s->nMTF = wr;
---
>   ->nMTF  wr;
557c557
<   s->nMTF = wr;
---
>   nMTF  wr;
557c557
<   s->nMTF = wr;
---
>   ->  wr;
557c557
<   s->nMTF = wr;
---
>     wr;
557c557
<   s->nMTF = wr;
---
>   snMTF = wr;
557c557
<   s->nMTF = wr;
---
>   s = wr;
(91.6 %, 17264 bytes)
557,558c557
<     wr;
< }
---
>     
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> define BZ_LESSER_ICOST 0
557c557
<     wr;
---
>     wr
557,558c557,558
<     wr;
< }
---
>     wr
> 
557c557
<     wr;
---
>     wr
560c560
< #define BZ_LESSER_ICOST 0
---
> define BZ_LESSER_ICOST 0
557,558c557
<     wr;
< }
---
>     wr
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> define BZ_LESSER_ICOST 0
557c557
<     wr;
---
>     wr
560c560
< #define BZ_LESSER_ICOST 0
---
> # BZ_LESSER_ICOST 0
557,558c557
<     wr;
< }
---
>     wr
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> # BZ_LESSER_ICOST 0
557c557
<     wr;
---
>     wr
560c560
< #define BZ_LESSER_ICOST 0
---
>  BZ_LESSER_ICOST 0
557,558c557
<     wr;
< }
---
>     wr
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
>  BZ_LESSER_ICOST 0
558c558
< }
---
> 
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> define BZ_LESSER_ICOST 0
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> # BZ_LESSER_ICOST 0
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
>  BZ_LESSER_ICOST 0
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> #define  0
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> define  0
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
> #  0
558d557
< }
560c559,560
< #define BZ_LESSER_ICOST 0
---
> 
>   0
560c560
< #define BZ_LESSER_ICOST 0
---
> define BZ_LESSER_ICOST 0
560c560
< #define BZ_LESSER_ICOST 0
---
>  BZ_LESSER_ICOST 0
560c560
< #define BZ_LESSER_ICOST 0
---
> define  0
560c560
< #define BZ_LESSER_ICOST 0
---
>   0
560c560
< #define BZ_LESSER_ICOST 0
---
> define BZ_LESSER_ICOST 
560c560
< #define BZ_LESSER_ICOST 0
---
>  BZ_LESSER_ICOST 
560c560
< #define BZ_LESSER_ICOST 0
---
> define  
560c560
< #define BZ_LESSER_ICOST 0
---
>   
560c560
< #define BZ_LESSER_ICOST 0
---
> # BZ_LESSER_ICOST 0
560c560
< #define BZ_LESSER_ICOST 0
---
> #  0
(91.6 %, 17241 bytes)
561c561
< #define BZ_GREATER_ICOST 5
---
>   
561c561
< #define BZ_GREATER_ICOST 5
---
> # BZ_GREATER_ICOST 5
561c561
< #define BZ_GREATER_ICOST 5
---
> #  5
(91.6 %, 17217 bytes)
563c563
< #define RETURNrrr ;
---
>   
563c563
< #define RETURNrrr ;
---
> # RETURNrrr ;
563c563
< #define RETURNrrr ;
---
> #  ;
563c563
< #define RETURNrrr ;
---
> # RETURNrrr 
563c563
< #define RETURNrrr ;
---
> #  
(91.6 %, 17200 bytes)
565c565
< #define GET_BITSlll                                                            \
---
>                                                              
565c565
< #define GET_BITSlll                                                            \
---
> # GET_BITSlll                                                            \
565c565
< #define GET_BITSlll                                                            \
---
> #                                                             \
565c565
< #define GET_BITSlll                                                            \
---
> # GET_BITSlll                                                            
565c565
< #define GET_BITSlll                                                            \
---
> #                                                             
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> # GET_BITSlll                                                            \
>    vvv, nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #                                                             \
>    vvv, nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> # GET_BITSlll                                                            
>    vvv, nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #                                                             
>    vvv, nnn case lll : s->state = lll;                                        \
565c565
< #define GET_BITSlll                                                            \
---
> #define                                                             \
565c565
< #define GET_BITSlll                                                            \
---
> #define                                                             
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             \
>    vvv, nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>    vvv, nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             \
>   , , nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>   , , nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             \
>    , nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>    , nnn case lll : s->state = lll;                                        \
565c565
< #define GET_BITSlll                                                            \
---
> #define GET_BITSlll                                                            
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define GET_BITSlll                                                            
>    vvv, nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define GET_BITSlll                                                            
>   , , nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define GET_BITSlll                                                            
>    , nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define GET_BITSlll                                                            
>   , vvv nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define GET_BITSlll                                                            \
<   , vvv, nnn case lll : s->state = lll;                                        \
---
> #define GET_BITSlll                                                            
>    vvv nnn case lll : s->state = lll;                                        \
(91.6 %, 17188 bytes)
565,566c565,566
< #define                                                             \
<    vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>    vvv nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define                                                             \
<    vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>     nnn case lll : s->state = lll;                                        \
565,566c565,566
< #define                                                             \
<    vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>    vvv,  case lll : s->state = lll;                                        \
565,566c565,566
< #define                                                             \
<    vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>    ,  case lll : s->state = lll;                                        \
565,566c565,566
< #define                                                             \
<    vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>    vvv  case lll : s->state = lll;                                        \
565,566c565,566
< #define                                                             \
<    vvv, nnn case lll : s->state = lll;                                        \
---
> #define                                                             
>      case lll : s->state = lll;                                        \
566c566
<    vvv, nnn case lll : s->state = lll;                                        \
---
>    , nnn case lll : s->state = lll;                                        \
566c566
<    vvv, nnn case lll : s->state = lll;                                        \
---
>     nnn case lll : s->state = lll;                                        \
566c566
<    vvv, nnn case lll : s->state = lll;                                        \
---
>    ,  case lll : s->state = lll;                                        \
566c566
<    vvv, nnn case lll : s->state = lll;                                        \
---
>      case lll : s->state = lll;                                        \
(91.6 %, 17184 bytes)
566c566
<     nnn case lll : s->state = lll;                                        \
---
>       lll : s->state = lll;                                        \
566c566
<     nnn case lll : s->state = lll;                                        \
---
>      case  : s->state = lll;                                        \
566c566
<     nnn case lll : s->state = lll;                                        \
---
>        : s->state = lll;                                        \
(91.6 %, 17177 bytes)
566c566
<       lll : s->state = lll;                                        \
---
>         s->state = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>        : ->state = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>         ->state = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>        : sstate = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>         sstate = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>        : state = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>         state = lll;                                        \
566c566
<       lll : s->state = lll;                                        \
---
>       lll  s->state = lll;                                        \
(91.6 %, 17171 bytes)
566c566
<         sstate = lll;                                        \
---
>           lll                                        \
566c566
<         sstate = lll;                                        \
---
>          =                                         \
566c566
<         sstate = lll;                                        \
---
>                                                   \
566c566
<         sstate = lll;                                        \
---
>         sstate  lll;                                        \
(91.6 %, 17163 bytes)
566,567c566,567
<           lll                                        \
<   while                                                                        \
---
>                                                   
>   while                                                                        
566,567c566,567
<           lll                                        \
<   while                                                                        \
---
>                                                   \
>                                                                           
566,567c566,567
<           lll                                        \
<   while                                                                        \
---
>                                                   
>                                                                           
566c566
<           lll                                        \
---
>           lll                                        
566,567c566,567
<           lll                                        \
<   while                                                                        \
---
>           lll                                        
>                                                                           \
566,567c566,567
<           lll                                        \
<   while                                                                        \
---
>           lll                                        
>   while                                                                        
566,567c566,567
<           lll                                        \
<   while                                                                        \
---
>           lll                                        
>                                                                           
566c566
<           lll                                        \
---
>           lll                                        
568c568
<   True
---
>   
566,568c566,568
<           lll                                        \
<   while                                                                        \
<   True
---
>           lll                                        
>                                                                           \
>   
566,568c566,568
<           lll                                        \
<   while                                                                        \
<   True
---
>           lll                                        
>   while                                                                        
>   
566,568c566,568
<           lll                                        \
<   while                                                                        \
<   True
---
>           lll                                        
>                                                                           
>   
567c567
<   while                                                                        \
---
>                                                                           \
(91.6 %, 17153 bytes)
567c567
<                                                                           \
---
>                                                                           
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> define  , uuu GET_BITSlll, uuu, 8
567c567
<                                                                           \
---
>                                                                           
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #  , uuu GET_BITSlll, uuu, 8
567c567
<                                                                           \
---
>                                                                           
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
>   , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
>  GET_UCHARlll , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> define  , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
>   , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> define GET_UCHARlll  uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
>  GET_UCHARlll  uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> define   uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
>    uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> # GET_UCHARlll , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #  , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> # GET_UCHARlll  uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #   uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> # GET_UCHARlll ,  GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #  ,  GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> # GET_UCHARlll   GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #    GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #define  , uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #define   uuu GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #define  ,  GET_BITSlll, uuu, 8
570c570
< #define GET_UCHARlll , uuu GET_BITSlll, uuu, 8
---
> #define    GET_BITSlll, uuu, 8
(91.6 %, 17140 bytes)
570c570
< #define   uuu GET_BITSlll, uuu, 8
---
> #define    , uuu, 8
570c570
< #define   uuu GET_BITSlll, uuu, 8
---
> #define    GET_BITSlll uuu, 8
570c570
< #define   uuu GET_BITSlll, uuu, 8
---
> #define     uuu, 8
(91.6 %, 17136 bytes)
570c570
< #define    GET_BITSlll uuu, 8
---
> #define     uuu 8
570c570
< #define    GET_BITSlll uuu, 8
---
> #define      8
570c570
< #define    GET_BITSlll uuu, 8
---
> #define     uuu, 
(91.6 %, 17124 bytes)
570c570
< #define     uuu 8
---
> #define      8
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define      
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define      8
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define      
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define      8
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>  GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define      
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>  GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>  GET_BITlll , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #define  , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define  , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #  , uuu GET_BITSlll, uuu, 1
570c570
< #define     uuu 8
---
> #define     uuu 
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>   , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define GET_BITlll , uuu GET_BITSlll, uuu, 1
(91.6 %, 17123 bytes)
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define GET_BITlll , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>  GET_BITlll , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define  , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>   , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define GET_BITlll  uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>  GET_BITlll  uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> define   uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
>    uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #  , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll  uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #   uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll ,  GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #  ,  GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> # GET_BITlll   GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #    GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #define  , uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #define   uuu GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #define  ,  GET_BITSlll, uuu, 1
572c572
< #define GET_BITlll , uuu GET_BITSlll, uuu, 1
---
> #define    GET_BITSlll, uuu, 1
(91.7 %, 17112 bytes)
572c572
< #define   uuu GET_BITSlll, uuu, 1
---
> #define    , uuu, 1
572c572
< #define   uuu GET_BITSlll, uuu, 1
---
> #define    GET_BITSlll uuu, 1
572c572
< #define   uuu GET_BITSlll, uuu, 1
---
> #define     uuu, 1
(91.7 %, 17108 bytes)
572c572
< #define    GET_BITSlll uuu, 1
---
> #define     uuu 1
572c572
< #define    GET_BITSlll uuu, 1
---
> #define      1
572c572
< #define    GET_BITSlll uuu, 1
---
> #define     uuu, 
(91.7 %, 17096 bytes)
572c572
< #define     uuu 1
---
> #define      1
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define      
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define      1
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define      
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define      1
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>  GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define      
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>  GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>  GET_MTF_VALlabel1 , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define  , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define  , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #  , label2, lval
572c572
< #define     uuu 1
---
> #define     uuu 
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>   , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define GET_MTF_VALlabel1 , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>  GET_MTF_VALlabel1 , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define  , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>   , label2, lval
(91.7 %, 17095 bytes)
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define GET_MTF_VALlabel1 , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>  GET_MTF_VALlabel1 , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define  , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>   , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define GET_MTF_VALlabel1  label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>  GET_MTF_VALlabel1  label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> define   label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
>    label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1 , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #  , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1  label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #   label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1 , , lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #  , , lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> # GET_MTF_VALlabel1  , lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #   , lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define  , label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define   label2, lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define  , , lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define   , lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define  , label2 lval
574c574
< #define GET_MTF_VALlabel1 , label2, lval
---
> #define   label2 lval
(91.7 %, 17077 bytes)
574c574
< #define   label2, lval
---
> #define    lval
574c574
< #define   label2, lval
---
> #define   , 
574c574
< #define   label2, lval
---
> #define    
574c574
< #define   label2, lval
---
> #define   , lval
576c576
< static void *default_bzalloc;
---
>  void *default_bzalloc;
574c574
< #define   label2, lval
---
> #define    lval
576c576
< static void *default_bzalloc;
---
>  void *default_bzalloc;
(91.7 %, 17070 bytes)
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
>  void *default_bzalloc;
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
> static  *default_bzalloc;
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
>   *default_bzalloc;
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
> static void default_bzalloc;
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
>  void default_bzalloc;
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
> static  default_bzalloc;
574c574
< #define    lval
---
> #define    
576c576
< static void *default_bzalloc;
---
>   default_bzalloc;
576c576
< static void *default_bzalloc;
---
>  void *default_bzalloc;
576c576
< static void *default_bzalloc;
---
>   *default_bzalloc;
576c576
< static void *default_bzalloc;
---
>  void default_bzalloc;
576c576
< static void *default_bzalloc;
---
>   default_bzalloc;
(91.7 %, 17064 bytes)
576c576
<  void *default_bzalloc;
---
>   *default_bzalloc;
576c576
<  void *default_bzalloc;
---
>   default_bzalloc;
(91.7 %, 17060 bytes)
576c576
<   *default_bzalloc;
---
>   default_bzalloc;
576c576
<   *default_bzalloc;
---
>   ;
576c576
<   *default_bzalloc;
---
>   default_bzalloc
576c576
<   *default_bzalloc;
---
>   
576c576
<   *default_bzalloc;
---
>   default_bzalloc;
578c578
< static void default_bzfree(void);
---
>  void default_bzfree(void);
(91.7 %, 17059 bytes)
576c576
<   default_bzalloc;
---
>   ;
576c576
<   default_bzalloc;
---
>   
576c576
<   default_bzalloc;
---
>   ;
578c578
< static void default_bzfree(void);
---
>  void default_bzfree(void);
576c576
<   default_bzalloc;
---
>   
578c578
< static void default_bzfree(void);
---
>  void default_bzfree(void);
576c576
<   default_bzalloc;
---
>   ;
578c578
< static void default_bzfree(void);
---
> static  default_bzfree(void);
576c576
<   default_bzalloc;
---
>   
578c578
< static void default_bzfree(void);
---
> static  default_bzfree(void);
576c576
<   default_bzalloc;
---
>   ;
578c578
< static void default_bzfree(void);
---
>   default_bzfree(void);
576c576
<   default_bzalloc;
---
>   
578c578
< static void default_bzfree(void);
---
>   default_bzfree(void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
>  void default_bzfree(void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
> static  default_bzfree(void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
>   default_bzfree(void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
> static void (void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
>  void (void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
> static  (void);
576c576
<   default_bzalloc;
---
>   default_bzalloc
578c578
< static void default_bzfree(void);
---
>   (void);
578c578
< static void default_bzfree(void);
---
>  void default_bzfree(void);
578c578
< static void default_bzfree(void);
---
>   default_bzfree(void);
(91.7 %, 17053 bytes)
578c578
<  void default_bzfree(void);
---
>   default_bzfree(void);
578c578
<  void default_bzfree(void);
---
>   (void);
578c578
<  void default_bzfree(void);
---
>   default_bzfreevoid);
578c578
<  void default_bzfree(void);
---
>   void);
578c578
<  void default_bzfree(void);
---
>   default_bzfree();
(91.7 %, 17049 bytes)
578c578
<   default_bzfree(void);
---
>   (void);
578c578
<   default_bzfree(void);
---
>   void);
578c578
<   default_bzfree(void);
---
>   ();
578c578
<   default_bzfree(void);
---
>   );
578c578
<   default_bzfree(void);
---
>   (void;
578c578
<   default_bzfree(void);
---
>   void;
578c578
<   default_bzfree(void);
---
>   (;
578c578
<   default_bzfree(void);
---
>   ;
578c578
<   default_bzfree(void);
---
>   default_bzfreevoid);
578c578
<   default_bzfree(void);
---
>   default_bzfree);
578c578
<   default_bzfree(void);
---
>   default_bzfreevoid;
578c578
<   default_bzfree(void);
---
>   default_bzfree;
578c578
<   default_bzfree(void);
---
>   default_bzfreevoid)
578c578
<   default_bzfree(void);
---
>   default_bzfree)
578c578
<   default_bzfree(void);
---
>   default_bzfreevoid
578c578
<   default_bzfree(void);
---
>   default_bzfree
578c578
<   default_bzfree(void);
---
>   default_bzfree();
(91.7 %, 17043 bytes)
578c578
<   default_bzfree;
---
>   default_bzfree
580c580
< int BZ_APIBZ2_bzCompressInit(
---
>  (
578c578
<   default_bzfree;
---
>   default_bzfree
580c580
< int BZ_APIBZ2_bzCompressInit(
---
> int BZ_APIBZ2_bzCompressInit
578c578
<   default_bzfree;
---
>   default_bzfree
580c580
< int BZ_APIBZ2_bzCompressInit(
---
>  BZ_APIBZ2_bzCompressInit
578c578
<   default_bzfree;
---
>   default_bzfree
580c580
< int BZ_APIBZ2_bzCompressInit(
---
> int 
578c578
<   default_bzfree;
---
>   default_bzfree
580c580
< int BZ_APIBZ2_bzCompressInit(
---
>  
580c580
< int BZ_APIBZ2_bzCompressInit(
---
>  BZ_APIBZ2_bzCompressInit(
(91.7 %, 17015 bytes)
580c580
<  (
---
>  
582c582
<     void) {
---
>      {
580c580
<  (
---
>  
582c582
<     void) {
---
>     void) 
580c580
<  (
---
>  
582c582
<     void) {
---
>     ) 
580c580
<  (
---
>  
582c582
<     void) {
---
>     void 
580c580
<  (
---
>  
582c582
<     void) {
---
>      
582c582
<     void) {
---
>     ) {
582c582
<     void) {
---
>      {
582c582
<     void) {
---
>     ) 
582c582
<     void) {
---
>      
582,583c582,583
<     void) {
<   int workFactor = 0;
---
>     ) {
>    workFactor = 0;
582,583c582,583
<     void) {
<   int workFactor = 0;
---
>      {
>    workFactor = 0;
582,583c582,583
<     void) {
<   int workFactor = 0;
---
>     ) 
>    workFactor = 0;
582,583c582,583
<     void) {
<   int workFactor = 0;
---
>      
>    workFactor = 0;
582c582
<     void) {
---
>     void {
582c582
<     void) {
---
>     void 
582,583c582,583
<     void) {
<   int workFactor = 0;
---
>     void {
>    workFactor = 0;
582,583c582,583
<     void) {
<   int workFactor = 0;
---
>     void 
>    workFactor = 0;
(91.7 %, 17011 bytes)
582c582
<     ) {
---
>      {
582c582
<     ) {
---
>      
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>      {
>    workFactor = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>      
>    workFactor = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>      {
>   int  = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>      
>   int  = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>      {
>     = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>      
>     = 0;
582c582
<     ) {
---
>     ) 
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>    workFactor = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>   int  = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>     = 0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>   int workFactor  0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>    workFactor  0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>   int   0;
582,583c582,583
<     ) {
<   int workFactor = 0;
---
>     ) 
>      0;
583c583
<   int workFactor = 0;
---
>    workFactor = 0;
583c583
<   int workFactor = 0;
---
>     = 0;
583c583
<   int workFactor = 0;
---
>    workFactor  0;
583c583
<   int workFactor = 0;
---
>      0;
583c583
<   int workFactor = 0;
---
>    workFactor = ;
583c583
<   int workFactor = 0;
---
>     = ;
583c583
<   int workFactor = 0;
---
>    workFactor  ;
583c583
<   int workFactor = 0;
---
>      ;
583c583
<   int workFactor = 0;
---
>   int  = 0;
583c583
<   int workFactor = 0;
---
>   int   0;
583c583
<   int workFactor = 0;
---
>   int  = ;
583c583
<   int workFactor = 0;
---
>   int   ;
583c583
<   int workFactor = 0;
---
>   int  = 0
583c583
<   int workFactor = 0;
---
>   int   0
583c583
<   int workFactor = 0;
---
>   int  = 
583c583
<   int workFactor = 0;
---
>   int   
583c583
<   int workFactor = 0;
---
>   int workFactor  0;
583c583
<   int workFactor = 0;
---
>   int workFactor  ;
583c583
<   int workFactor = 0;
---
>   int workFactor  0
583c583
<   int workFactor = 0;
---
>   int workFactor  
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  0;
>    verbosity = 0;
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  ;
>    verbosity = 0;
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  0
>    verbosity = 0;
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  
>    verbosity = 0;
583c583
<   int workFactor = 0;
---
>   int workFactor = ;
583c583
<   int workFactor = 0;
---
>   int workFactor = 
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor = ;
>    verbosity = 0;
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor = 
>    verbosity = 0;
583,584c583,584
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor = ;
>   int  = 0;
(91.7 %, 17009 bytes)
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>    verbosity = 0;
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>   int  = 0;
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>     = 0;
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>   int verbosity  0;
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>    verbosity  0;
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>   int   0;
583,584c583,584
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>      0;
584c584
<   int verbosity = 0;
---
>    verbosity = 0;
584c584
<   int verbosity = 0;
---
>     = 0;
584c584
<   int verbosity = 0;
---
>    verbosity  0;
584c584
<   int verbosity = 0;
---
>      0;
584c584
<   int verbosity = 0;
---
>    verbosity = ;
584c584
<   int verbosity = 0;
---
>     = ;
584c584
<   int verbosity = 0;
---
>    verbosity  ;
584c584
<   int verbosity = 0;
---
>      ;
584c584
<   int verbosity = 0;
---
>   int  = 0;
584c584
<   int verbosity = 0;
---
>   int   0;
584c584
<   int verbosity = 0;
---
>   int  = ;
584c584
<   int verbosity = 0;
---
>   int   ;
584c584
<   int verbosity = 0;
---
>   int  = 0
584c584
<   int verbosity = 0;
---
>   int   0
584c584
<   int verbosity = 0;
---
>   int  = 
584c584
<   int verbosity = 0;
---
>   int   
584c584
<   int verbosity = 0;
---
>   int verbosity  0;
584c584
<   int verbosity = 0;
---
>   int verbosity  ;
584c584
<   int verbosity = 0;
---
>   int verbosity  0
584c584
<   int verbosity = 0;
---
>   int verbosity  
584,585c584,585
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  0;
>    blockSize100k = 0;
584,585c584,585
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  ;
>    blockSize100k = 0;
584,585c584,585
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  0
>    blockSize100k = 0;
584,585c584,585
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  
>    blockSize100k = 0;
584c584
<   int verbosity = 0;
---
>   int verbosity = ;
584c584
<   int verbosity = 0;
---
>   int verbosity = 
584,585c584,585
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity = ;
>    blockSize100k = 0;
584,585c584,585
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity = 
>    blockSize100k = 0;
(91.7 %, 17007 bytes)
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>    blockSize100k = 0;
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>   int  = 0;
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>     = 0;
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>   int blockSize100k  0;
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>    blockSize100k  0;
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>   int   0;
584,585c584,585
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>      0;
585c585
<   int blockSize100k = 0;
---
>    blockSize100k = 0;
585c585
<   int blockSize100k = 0;
---
>     = 0;
585c585
<   int blockSize100k = 0;
---
>    blockSize100k  0;
585c585
<   int blockSize100k = 0;
---
>      0;
585c585
<   int blockSize100k = 0;
---
>    blockSize100k = ;
585c585
<   int blockSize100k = 0;
---
>     = ;
585c585
<   int blockSize100k = 0;
---
>    blockSize100k  ;
585c585
<   int blockSize100k = 0;
---
>      ;
585c585
<   int blockSize100k = 0;
---
>   int  = 0;
585c585
<   int blockSize100k = 0;
---
>   int   0;
585c585
<   int blockSize100k = 0;
---
>   int  = ;
585c585
<   int blockSize100k = 0;
---
>   int   ;
585c585
<   int blockSize100k = 0;
---
>   int  = 0
585c585
<   int blockSize100k = 0;
---
>   int   0
585c585
<   int blockSize100k = 0;
---
>   int  = 
585c585
<   int blockSize100k = 0;
---
>   int   
585c585
<   int blockSize100k = 0;
---
>   int blockSize100k  0;
585c585
<   int blockSize100k = 0;
---
>   int blockSize100k  ;
585c585
<   int blockSize100k = 0;
---
>   int blockSize100k  0
585c585
<   int blockSize100k = 0;
---
>   int blockSize100k  
585,586c585,586
<   int blockSize100k = 0;
<   bz_stream *strm = 0;
---
>   int blockSize100k  0;
>    *strm = 0;
585,586c585,586
<   int blockSize100k = 0;
<   bz_stream *strm = 0;
---
>   int blockSize100k  ;
>    *strm = 0;
585,586c585,586
<   int blockSize100k = 0;
<   bz_stream *strm = 0;
---
>   int blockSize100k  0
>    *strm = 0;
585,586c585,586
<   int blockSize100k = 0;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>    *strm = 0;
585c585
<   int blockSize100k = 0;
---
>   int blockSize100k = ;
585c585
<   int blockSize100k = 0;
---
>   int blockSize100k = 
585,586c585,586
<   int blockSize100k = 0;
<   bz_stream *strm = 0;
---
>   int blockSize100k = ;
>    *strm = 0;
585,586c585,586
<   int blockSize100k = 0;
<   bz_stream *strm = 0;
---
>   int blockSize100k = 
>    *strm = 0;
(91.7 %, 17005 bytes)
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>    *strm = 0;
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>   bz_stream strm = 0;
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>    strm = 0;
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>   bz_stream * = 0;
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>    * = 0;
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>   bz_stream  = 0;
585,586c585,586
<   int blockSize100k  ;
<   bz_stream *strm = 0;
---
>   int blockSize100k  
>     = 0;
586c586
<   bz_stream *strm = 0;
---
>    *strm = 0;
586c586
<   bz_stream *strm = 0;
---
>    strm = 0;
586c586
<   bz_stream *strm = 0;
---
>    * = 0;
586c586
<   bz_stream *strm = 0;
---
>     = 0;
586c586
<   bz_stream *strm = 0;
---
>    *strm  0;
586c586
<   bz_stream *strm = 0;
---
>    strm  0;
586c586
<   bz_stream *strm = 0;
---
>    *  0;
586c586
<   bz_stream *strm = 0;
---
>      0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream strm  0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream   0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream strm = ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream  = ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream strm  ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream   ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *  0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream * = ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *  ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream * = 0
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *  0
586c586
<   bz_stream *strm = 0;
---
>   bz_stream * = 
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *  
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
586,587c586,587
<   bz_stream *strm = 0;
<   Int32 n;
---
>   bz_stream *strm  0;
>    n;
586,587c586,587
<   bz_stream *strm = 0;
<   Int32 n;
---
>   bz_stream *strm  ;
>    n;
586,587c586,587
<   bz_stream *strm = 0;
<   Int32 n;
---
>   bz_stream *strm  0
>    n;
586,587c586,587
<   bz_stream *strm = 0;
<   Int32 n;
---
>   bz_stream *strm  
>    n;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
586c586
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
586,587c586,587
<   bz_stream *strm = 0;
<   Int32 n;
---
>   bz_stream *strm = ;
>    n;
586,587c586,587
<   bz_stream *strm = 0;
<   Int32 n;
---
>   bz_stream *strm = 
>    n;
(91.7 %, 17003 bytes)
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>    n;
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>   Int32 ;
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>    ;
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>   Int32 n
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>    n
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>   Int32 
586,587c586,587
<   bz_stream *strm  ;
<   Int32 n;
---
>   bz_stream *strm  
>    
587c587
<   Int32 n;
---
>    n;
587c587
<   Int32 n;
---
>    ;
587c587
<   Int32 n;
---
>    n
587c587
<   Int32 n;
---
>    
587,588c587,588
<   Int32 n;
<   EState *s;
---
>    n;
>    *s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>    ;
>    *s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>    n
>    *s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>    
>    *s;
587c587
<   Int32 n;
---
>   Int32 ;
587c587
<   Int32 n;
---
>   Int32 
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 ;
>    *s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 
>    *s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 ;
>   EState s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 
>   EState s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 ;
>    s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 
>    s;
587c587
<   Int32 n;
---
>   Int32 n
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    *s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>   EState s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    s;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>   EState *;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    *;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>   EState ;
587,588c587,588
<   Int32 n;
<   EState *s;
---
>   Int32 n
>    ;
588c588
<   EState *s;
---
>    *s;
588c588
<   EState *s;
---
>    s;
588c588
<   EState *s;
---
>    *;
588c588
<   EState *s;
---
>    ;
588c588
<   EState *s;
---
>    *s
588c588
<   EState *s;
---
>    s
588c588
<   EState *s;
---
>    *
588c588
<   EState *s;
---
>    
588c588
<   EState *s;
---
>   EState s;
588c588
<   EState *s;
---
>   EState ;
588c588
<   EState *s;
---
>   EState s
588c588
<   EState *s;
---
>   EState 
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState s;
>    *s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState ;
>    *s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState s
>    *s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState 
>    *s_8;
588c588
<   EState *s;
---
>   EState *;
588c588
<   EState *s;
---
>   EState *
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *;
>    *s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *
>    *s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *;
>   UInt32 s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *
>   UInt32 s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *;
>    s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *
>    s_8;
588c588
<   EState *s;
---
>   EState *s
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>    *s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>   UInt32 s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>    s_8;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>   UInt32 *;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>    *;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>   UInt32 ;
588,589c588,589
<   EState *s;
<   UInt32 *s_8;
---
>   EState *s
>    ;
589c589
<   UInt32 *s_8;
---
>    *s_8;
589c589
<   UInt32 *s_8;
---
>    s_8;
589c589
<   UInt32 *s_8;
---
>    *;
589c589
<   UInt32 *s_8;
---
>    ;
589c589
<   UInt32 *s_8;
---
>    *s_8
589c589
<   UInt32 *s_8;
---
>    s_8
589c589
<   UInt32 *s_8;
---
>    *
589c589
<   UInt32 *s_8;
---
>    
589c589
<   UInt32 *s_8;
---
>   UInt32 s_8;
589c589
<   UInt32 *s_8;
---
>   UInt32 ;
589c589
<   UInt32 *s_8;
---
>   UInt32 s_8
589c589
<   UInt32 *s_8;
---
>   UInt32 
589,590c589,590
<   UInt32 *s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8;
>    *s_10;
589,590c589,590
<   UInt32 *s_8;
<   UInt16 *s_10;
---
>   UInt32 ;
>    *s_10;
589,590c589,590
<   UInt32 *s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>    *s_10;
589,590c589,590
<   UInt32 *s_8;
<   UInt16 *s_10;
---
>   UInt32 
>    *s_10;
589c589
<   UInt32 *s_8;
---
>   UInt32 *;
(91.7 %, 17002 bytes)
589c589
<   UInt32 s_8;
---
>   UInt32 ;
589c589
<   UInt32 s_8;
---
>   UInt32 
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 ;
>    *s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 
>    *s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 ;
>   UInt16 s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 
>   UInt16 s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 ;
>    s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 
>    s_10;
589c589
<   UInt32 s_8;
---
>   UInt32 s_8
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>    *s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>   UInt16 s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>    s_10;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>   UInt16 *;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>    *;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>   UInt16 ;
589,590c589,590
<   UInt32 s_8;
<   UInt16 *s_10;
---
>   UInt32 s_8
>    ;
590c590
<   UInt16 *s_10;
---
>    *s_10;
590c590
<   UInt16 *s_10;
---
>    s_10;
590c590
<   UInt16 *s_10;
---
>    *;
590c590
<   UInt16 *s_10;
---
>    ;
590c590
<   UInt16 *s_10;
---
>    *s_10
590c590
<   UInt16 *s_10;
---
>    s_10
590c590
<   UInt16 *s_10;
---
>    *
590c590
<   UInt16 *s_10;
---
>    
590c590
<   UInt16 *s_10;
---
>   UInt16 s_10;
590c590
<   UInt16 *s_10;
---
>   UInt16 ;
590c590
<   UInt16 *s_10;
---
>   UInt16 s_10
590c590
<   UInt16 *s_10;
---
>   UInt16 
590,591c590,591
<   UInt16 *s_10;
<   UChar *s_9;
---
>   UInt16 s_10;
>    *s_9;
590,591c590,591
<   UInt16 *s_10;
<   UChar *s_9;
---
>   UInt16 ;
>    *s_9;
590,591c590,591
<   UInt16 *s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>    *s_9;
590,591c590,591
<   UInt16 *s_10;
<   UChar *s_9;
---
>   UInt16 
>    *s_9;
590c590
<   UInt16 *s_10;
---
>   UInt16 *;
590c590
<   UInt16 *s_10;
---
>   UInt16 *
590,591c590,591
<   UInt16 *s_10;
<   UChar *s_9;
---
>   UInt16 *;
>    *s_9;
(91.7 %, 17001 bytes)
590c590
<   UInt16 s_10;
---
>   UInt16 ;
590c590
<   UInt16 s_10;
---
>   UInt16 
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 ;
>    *s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 
>    *s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 ;
>   UChar s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 
>   UChar s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 ;
>    s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 
>    s_9;
590c590
<   UInt16 s_10;
---
>   UInt16 s_10
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>    *s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>   UChar s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>    s_9;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>   UChar *;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>    *;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>   UChar ;
590,591c590,591
<   UInt16 s_10;
<   UChar *s_9;
---
>   UInt16 s_10
>    ;
591c591
<   UChar *s_9;
---
>    *s_9;
591c591
<   UChar *s_9;
---
>    s_9;
591c591
<   UChar *s_9;
---
>    *;
591c591
<   UChar *s_9;
---
>    ;
591c591
<   UChar *s_9;
---
>    *s_9
591c591
<   UChar *s_9;
---
>    s_9
591c591
<   UChar *s_9;
---
>    *
591c591
<   UChar *s_9;
---
>    
591c591
<   UChar *s_9;
---
>   UChar s_9;
591c591
<   UChar *s_9;
---
>   UChar ;
591c591
<   UChar *s_9;
---
>   UChar s_9
591c591
<   UChar *s_9;
---
>   UChar 
591,592c591,592
<   UChar *s_9;
<   Int32 s_12;
---
>   UChar s_9;
>    s_12;
591,592c591,592
<   UChar *s_9;
<   Int32 s_12;
---
>   UChar ;
>    s_12;
591,592c591,592
<   UChar *s_9;
<   Int32 s_12;
---
>   UChar s_9
>    s_12;
591,592c591,592
<   UChar *s_9;
<   Int32 s_12;
---
>   UChar 
>    s_12;
591c591
<   UChar *s_9;
---
>   UChar *;
591c591
<   UChar *s_9;
---
>   UChar *
591,592c591,592
<   UChar *s_9;
<   Int32 s_12;
---
>   UChar *;
>    s_12;
(91.7 %, 17000 bytes)
591c591
<   UChar s_9;
---
>   UChar ;
591c591
<   UChar s_9;
---
>   UChar 
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar ;
>    s_12;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar 
>    s_12;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar ;
>   Int32 ;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar 
>   Int32 ;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar ;
>    ;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar 
>    ;
591c591
<   UChar s_9;
---
>   UChar s_9
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>    s_12;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>   Int32 ;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>    ;
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>   Int32 s_12
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>    s_12
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>   Int32 
591,592c591,592
<   UChar s_9;
<   Int32 s_12;
---
>   UChar s_9
>    
592c592
<   Int32 s_12;
---
>    s_12;
592c592
<   Int32 s_12;
---
>    ;
592c592
<   Int32 s_12;
---
>    s_12
592c592
<   Int32 s_12;
---
>    
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>    s_12;
>    s_28;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>    ;
>    s_28;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>    s_12
>    s_28;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>    
>    s_28;
592c592
<   Int32 s_12;
---
>   Int32 ;
592c592
<   Int32 s_12;
---
>   Int32 
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 ;
>    s_28;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 
>    s_28;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 ;
>   Int32 ;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 
>   Int32 ;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 ;
>    ;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 
>    ;
592c592
<   Int32 s_12;
---
>   Int32 s_12
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>    s_28;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>   Int32 ;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>    ;
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>   Int32 s_28
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>    s_28
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>   Int32 
592,593c592,593
<   Int32 s_12;
<   Int32 s_28;
---
>   Int32 s_12
>    
593c593
<   Int32 s_28;
---
>    s_28;
593c593
<   Int32 s_28;
---
>    ;
593c593
<   Int32 s_28;
---
>    s_28
593c593
<   Int32 s_28;
---
>    
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>    s_28;
>    s_18;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>    ;
>    s_18;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>    s_28
>    s_18;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>    
>    s_18;
593c593
<   Int32 s_28;
---
>   Int32 ;
593c593
<   Int32 s_28;
---
>   Int32 
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 ;
>    s_18;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 
>    s_18;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 ;
>   Int32 ;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 
>   Int32 ;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 ;
>    ;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 
>    ;
593c593
<   Int32 s_28;
---
>   Int32 s_28
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>    s_18;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>   Int32 ;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>    ;
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>   Int32 s_18
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>    s_18
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>   Int32 
593,594c593,594
<   Int32 s_28;
<   Int32 s_18;
---
>   Int32 s_28
>    
594c594
<   Int32 s_18;
---
>    s_18;
594c594
<   Int32 s_18;
---
>    ;
594c594
<   Int32 s_18;
---
>    s_18
594c594
<   Int32 s_18;
---
>    
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>    s_18;
>    s_30;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>    ;
>    s_30;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>    s_18
>    s_30;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>    
>    s_30;
594c594
<   Int32 s_18;
---
>   Int32 ;
594c594
<   Int32 s_18;
---
>   Int32 
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 ;
>    s_30;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 
>    s_30;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 ;
>   Int32 ;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 
>   Int32 ;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 ;
>    ;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 
>    ;
594c594
<   Int32 s_18;
---
>   Int32 s_18
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>    s_30;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>   Int32 ;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>    ;
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>   Int32 s_30
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>    s_30
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>   Int32 
594,595c594,595
<   Int32 s_18;
<   Int32 s_30;
---
>   Int32 s_18
>    
595c595
<   Int32 s_30;
---
>    s_30;
595c595
<   Int32 s_30;
---
>    ;
595c595
<   Int32 s_30;
---
>    s_30
595c595
<   Int32 s_30;
---
>    
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>    s_30;
>    s_27;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>    ;
>    s_27;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>    s_30
>    s_27;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>    
>    s_27;
595c595
<   Int32 s_30;
---
>   Int32 ;
595c595
<   Int32 s_30;
---
>   Int32 
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 ;
>    s_27;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 
>    s_27;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 ;
>   UInt32 ;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 
>   UInt32 ;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 ;
>    ;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 
>    ;
595c595
<   Int32 s_30;
---
>   Int32 s_30
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>    s_27;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>   UInt32 ;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>    ;
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>   UInt32 s_27
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>    s_27
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>   UInt32 
595,596c595,596
<   Int32 s_30;
<   UInt32 s_27;
---
>   Int32 s_30
>    
596c596
<   UInt32 s_27;
---
>    s_27;
596c596
<   UInt32 s_27;
---
>    ;
596c596
<   UInt32 s_27;
---
>    s_27
596c596
<   UInt32 s_27;
---
>    
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>    s_27;
>    s_1;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>    ;
>    s_1;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>    s_27
>    s_1;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>    
>    s_1;
596c596
<   UInt32 s_27;
---
>   UInt32 ;
596c596
<   UInt32 s_27;
---
>   UInt32 
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 ;
>    s_1;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 
>    s_1;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 ;
>   Int32 ;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 
>   Int32 ;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 ;
>    ;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 
>    ;
596c596
<   UInt32 s_27;
---
>   UInt32 s_27
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>    s_1;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>   Int32 ;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>    ;
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>   Int32 s_1
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>    s_1
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>   Int32 
596,597c596,597
<   UInt32 s_27;
<   Int32 s_1;
---
>   UInt32 s_27
>    
597c597
<   Int32 s_1;
---
>    s_1;
597c597
<   Int32 s_1;
---
>    ;
597c597
<   Int32 s_1;
---
>    s_1
597c597
<   Int32 s_1;
---
>    
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>    s_1;
>    s_2;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>    ;
>    s_2;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>    s_1
>    s_2;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>    
>    s_2;
597c597
<   Int32 s_1;
---
>   Int32 ;
597c597
<   Int32 s_1;
---
>   Int32 
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 ;
>    s_2;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 
>    s_2;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 ;
>   Int32 ;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 
>   Int32 ;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 ;
>    ;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 
>    ;
597c597
<   Int32 s_1;
---
>   Int32 s_1
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>    s_2;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>   Int32 ;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>    ;
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>   Int32 s_2
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>    s_2
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>   Int32 
597,598c597,598
<   Int32 s_1;
<   Int32 s_2;
---
>   Int32 s_1
>    
598c598
<   Int32 s_2;
---
>    s_2;
598c598
<   Int32 s_2;
---
>    ;
598c598
<   Int32 s_2;
---
>    s_2
598c598
<   Int32 s_2;
---
>    
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>    s_2;
>    *s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>    ;
>    *s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>    s_2
>    *s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>    
>    *s_6;
598c598
<   Int32 s_2;
---
>   Int32 ;
598c598
<   Int32 s_2;
---
>   Int32 
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 ;
>    *s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 
>    *s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 ;
>   UInt32 s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 
>   UInt32 s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 ;
>    s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 
>    s_6;
598c598
<   Int32 s_2;
---
>   Int32 s_2
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>    *s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>   UInt32 s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>    s_6;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>   UInt32 *;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>    *;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>   UInt32 ;
598,599c598,599
<   Int32 s_2;
<   UInt32 *s_6;
---
>   Int32 s_2
>    ;
599c599
<   UInt32 *s_6;
---
>    *s_6;
599c599
<   UInt32 *s_6;
---
>    s_6;
599c599
<   UInt32 *s_6;
---
>    *;
599c599
<   UInt32 *s_6;
---
>    ;
599c599
<   UInt32 *s_6;
---
>    *s_6
599c599
<   UInt32 *s_6;
---
>    s_6
599c599
<   UInt32 *s_6;
---
>    *
599c599
<   UInt32 *s_6;
---
>    
599c599
<   UInt32 *s_6;
---
>   UInt32 s_6;
599c599
<   UInt32 *s_6;
---
>   UInt32 ;
599c599
<   UInt32 *s_6;
---
>   UInt32 s_6
599c599
<   UInt32 *s_6;
---
>   UInt32 
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6;
>    *s_5;
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 ;
>    *s_5;
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>    *s_5;
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 
>    *s_5;
599c599
<   UInt32 *s_6;
---
>   UInt32 *;
599c599
<   UInt32 *s_6;
---
>   UInt32 *
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 *;
>    *s_5;
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 *
>    *s_5;
599,600c599,600
<   UInt32 *s_6;
<   UInt32 *s_5;
---
>   UInt32 *;
>   UInt32 s_5;
(91.7 %, 16999 bytes)
599c599
<   UInt32 s_6;
---
>   UInt32 ;
599c599
<   UInt32 s_6;
---
>   UInt32 
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 ;
>    *s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 
>    *s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 ;
>   UInt32 s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 
>   UInt32 s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 ;
>    s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 
>    s_5;
599c599
<   UInt32 s_6;
---
>   UInt32 s_6
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>    *s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>   UInt32 s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>    s_5;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>   UInt32 *;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>    *;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>   UInt32 ;
599,600c599,600
<   UInt32 s_6;
<   UInt32 *s_5;
---
>   UInt32 s_6
>    ;
600c600
<   UInt32 *s_5;
---
>    *s_5;
600c600
<   UInt32 *s_5;
---
>    s_5;
600c600
<   UInt32 *s_5;
---
>    *;
600c600
<   UInt32 *s_5;
---
>    ;
600c600
<   UInt32 *s_5;
---
>    *s_5
600c600
<   UInt32 *s_5;
---
>    s_5
600c600
<   UInt32 *s_5;
---
>    *
600c600
<   UInt32 *s_5;
---
>    
600c600
<   UInt32 *s_5;
---
>   UInt32 s_5;
600c600
<   UInt32 *s_5;
---
>   UInt32 ;
600c600
<   UInt32 *s_5;
---
>   UInt32 s_5
600c600
<   UInt32 *s_5;
---
>   UInt32 
600,601c600,601
<   UInt32 *s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5;
>    *s_4;
600,601c600,601
<   UInt32 *s_5;
<   UInt32 *s_4;
---
>   UInt32 ;
>    *s_4;
600,601c600,601
<   UInt32 *s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>    *s_4;
600,601c600,601
<   UInt32 *s_5;
<   UInt32 *s_4;
---
>   UInt32 
>    *s_4;
600c600
<   UInt32 *s_5;
---
>   UInt32 *;
(91.7 %, 16998 bytes)
600c600
<   UInt32 s_5;
---
>   UInt32 ;
600c600
<   UInt32 s_5;
---
>   UInt32 
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 ;
>    *s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 
>    *s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 ;
>   UInt32 s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 
>   UInt32 s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 ;
>    s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 
>    s_4;
600c600
<   UInt32 s_5;
---
>   UInt32 s_5
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>    *s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>   UInt32 s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>    s_4;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>   UInt32 *;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>    *;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>   UInt32 ;
600,601c600,601
<   UInt32 s_5;
<   UInt32 *s_4;
---
>   UInt32 s_5
>    ;
601c601
<   UInt32 *s_4;
---
>    *s_4;
601c601
<   UInt32 *s_4;
---
>    s_4;
601c601
<   UInt32 *s_4;
---
>    *;
601c601
<   UInt32 *s_4;
---
>    ;
601c601
<   UInt32 *s_4;
---
>    *s_4
601c601
<   UInt32 *s_4;
---
>    s_4
601c601
<   UInt32 *s_4;
---
>    *
601c601
<   UInt32 *s_4;
---
>    
601c601
<   UInt32 *s_4;
---
>   UInt32 s_4;
601c601
<   UInt32 *s_4;
---
>   UInt32 ;
601c601
<   UInt32 *s_4;
---
>   UInt32 s_4
601c601
<   UInt32 *s_4;
---
>   UInt32 
601,602c601,602
<   UInt32 *s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4;
>    *s_0;
601,602c601,602
<   UInt32 *s_4;
<   bz_stream *s_0;
---
>   UInt32 ;
>    *s_0;
601,602c601,602
<   UInt32 *s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>    *s_0;
601,602c601,602
<   UInt32 *s_4;
<   bz_stream *s_0;
---
>   UInt32 
>    *s_0;
601c601
<   UInt32 *s_4;
---
>   UInt32 *;
(91.7 %, 16997 bytes)
601c601
<   UInt32 s_4;
---
>   UInt32 ;
601c601
<   UInt32 s_4;
---
>   UInt32 
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 ;
>    *s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 
>    *s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 ;
>   bz_stream s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 
>   bz_stream s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 ;
>    s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 
>    s_0;
601c601
<   UInt32 s_4;
---
>   UInt32 s_4
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>    *s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>   bz_stream s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>    s_0;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>   bz_stream *;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>    *;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>   bz_stream ;
601,602c601,602
<   UInt32 s_4;
<   bz_stream *s_0;
---
>   UInt32 s_4
>    ;
602c602
<   bz_stream *s_0;
---
>    *s_0;
602c602
<   bz_stream *s_0;
---
>    s_0;
602c602
<   bz_stream *s_0;
---
>    *;
602c602
<   bz_stream *s_0;
---
>    ;
602c602
<   bz_stream *s_0;
---
>    *s_0
602c602
<   bz_stream *s_0;
---
>    s_0
602c602
<   bz_stream *s_0;
---
>    *
602c602
<   bz_stream *s_0;
---
>    
602c602
<   bz_stream *s_0;
---
>   bz_stream s_0;
602c602
<   bz_stream *s_0;
---
>   bz_stream ;
602c602
<   bz_stream *s_0;
---
>   bz_stream s_0
602c602
<   bz_stream *s_0;
---
>   bz_stream 
602c602
<   bz_stream *s_0;
---
>   bz_stream s_0;
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream ;
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream s_0
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream 
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream *;
602c602
<   bz_stream *s_0;
---
>   bz_stream *
602c602
<   bz_stream *s_0;
---
>   bz_stream *;
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream *
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream *;
604c604
<   !0;
---
>   !;
602c602
<   bz_stream *s_0;
---
>   bz_stream *
604c604
<   !0;
---
>   !;
602c602
<   bz_stream *s_0;
---
>   bz_stream *;
604c604
<   !0;
---
>   ;
602c602
<   bz_stream *s_0;
---
>   bz_stream *
604c604
<   !0;
---
>   ;
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   0;
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   !;
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   ;
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   !0
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   0
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   !
602c602
<   bz_stream *s_0;
---
>   bz_stream *s_0
604c604
<   !0;
---
>   
604c604
<   !0;
---
>   0;
(91.7 %, 16994 bytes)
604c604
<   ;
---
>   
606c606
<   return BZ_CONFIG_ERROR;
---
>    ;
604c604
<   ;
---
>   
606c606
<   return BZ_CONFIG_ERROR;
---
>   return BZ_CONFIG_ERROR
604c604
<   ;
---
>   
606c606
<   return BZ_CONFIG_ERROR;
---
>    BZ_CONFIG_ERROR
604c604
<   ;
---
>   
606c606
<   return BZ_CONFIG_ERROR;
---
>   return 
604c604
<   ;
---
>   
606c606
<   return BZ_CONFIG_ERROR;
---
>    
606c606
<   return BZ_CONFIG_ERROR;
---
>    BZ_CONFIG_ERROR;
(91.7 %, 16972 bytes)
606c606
<    ;
---
>    
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
606c606
<    ;
---
>    
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
606c606
<    ;
---
>    
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
606c606
<    ;
---
>    
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if  == NULL || blockSize100k < 1 || blockSize100k > 9 ||
606c606
<    ;
---
>    
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>     == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>     == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>    (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>      NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if  == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm  NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if   NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm ==  || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if  ==  || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if strm   || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if    || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( == NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( ==  || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   || blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( == NULL  blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (  NULL  blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if ( ==   blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (strm == NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (    blockSize100k < 1 || blockSize100k > 9 ||
(91.7 %, 16966 bytes)
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (    blockSize100k < 1 || blockSize100k > 9 ||
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   ||  < 1 || blockSize100k > 9 ||
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     < 1 || blockSize100k > 9 ||
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   || blockSize100k  1 || blockSize100k > 9 ||
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (    blockSize100k  1 || blockSize100k > 9 ||
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (   ||   1 || blockSize100k > 9 ||
608c608
<   if (  NULL || blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (      1 || blockSize100k > 9 ||
(91.7 %, 16960 bytes)
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (      1 || blockSize100k > 9 ||
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     <  || blockSize100k > 9 ||
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (       || blockSize100k > 9 ||
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     < 1  blockSize100k > 9 ||
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (      1  blockSize100k > 9 ||
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (     <   blockSize100k > 9 ||
608c608
<   if (    blockSize100k < 1 || blockSize100k > 9 ||
---
>   if (        blockSize100k > 9 ||
(91.7 %, 16946 bytes)
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (        blockSize100k > 9 ||
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (       ||  > 9 ||
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (         > 9 ||
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (       || blockSize100k  9 ||
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (        blockSize100k  9 ||
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (       ||   9 ||
608c608
<   if (      1 || blockSize100k > 9 ||
---
>   if (          9 ||
(91.7 %, 16943 bytes)
608c608
<   if (        blockSize100k > 9 ||
---
>   if (          9 ||
608c608
<   if (        blockSize100k > 9 ||
---
>   if (         >  ||
608c608
<   if (        blockSize100k > 9 ||
---
>   if (           ||
608c608
<   if (        blockSize100k > 9 ||
---
>   if (         > 9 
608c608
<   if (        blockSize100k > 9 ||
---
>   if (          9 
608c608
<   if (        blockSize100k > 9 ||
---
>   if (         >  
608c608
<   if (        blockSize100k > 9 ||
---
>   if (           
(91.7 %, 16929 bytes)
608c608
<   if (          9 ||
---
>   if (           
608,609c608,609
<   if (          9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if (           ||
>        < 0 || workFactor > 0)
608,609c608,609
<   if (          9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if (           
>        < 0 || workFactor > 0)
608,609c608,609
<   if (          9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if (           ||
>       workFactor  0 || workFactor > 0)
608,609c608,609
<   if (          9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if (           
>       workFactor  0 || workFactor > 0)
608,609c608,609
<   if (          9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if (           ||
>         0 || workFactor > 0)
608,609c608,609
<   if (          9 ||
<       workFactor < 0 || workFactor > 0)
---
>   if (           
>         0 || workFactor > 0)
(91.7 %, 16926 bytes)
609c609
<       workFactor < 0 || workFactor > 0)
---
>         0 || workFactor > 0)
609c609
<       workFactor < 0 || workFactor > 0)
---
>        <  || workFactor > 0)
609c609
<       workFactor < 0 || workFactor > 0)
---
>          || workFactor > 0)
609c609
<       workFactor < 0 || workFactor > 0)
---
>        < 0  workFactor > 0)
609c609
<       workFactor < 0 || workFactor > 0)
---
>         0  workFactor > 0)
609c609
<       workFactor < 0 || workFactor > 0)
---
>        <   workFactor > 0)
609c609
<       workFactor < 0 || workFactor > 0)
---
>           workFactor > 0)
(91.7 %, 16915 bytes)
609c609
<         0 || workFactor > 0)
---
>           workFactor > 0)
609c609
<         0 || workFactor > 0)
---
>          ||  > 0)
609c609
<         0 || workFactor > 0)
---
>            > 0)
609c609
<         0 || workFactor > 0)
---
>          || workFactor  0)
609c609
<         0 || workFactor > 0)
---
>           workFactor  0)
609c609
<         0 || workFactor > 0)
---
>          ||   0)
609c609
<         0 || workFactor > 0)
---
>             0)
(91.7 %, 16912 bytes)
609c609
<           workFactor > 0)
---
>             0)
609c609
<           workFactor > 0)
---
>            > )
609c609
<           workFactor > 0)
---
>             )
609c609
<           workFactor > 0)
---
>            > 0
609c609
<           workFactor > 0)
---
>             0
609c609
<           workFactor > 0)
---
>            > 
609c609
<           workFactor > 0)
---
>             
609c609
<           workFactor > 0)
---
>           workFactor  0)
609c609
<           workFactor > 0)
---
>           workFactor  )
(91.8 %, 16901 bytes)
609c609
<             0)
---
>             
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             )
>      BZ_PARAM_ERROR;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             
>      BZ_PARAM_ERROR;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             )
>     return ;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             
>     return ;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             )
>      ;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             
>      ;
609c609
<             0)
---
>             0
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>      BZ_PARAM_ERROR;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>     return ;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>      ;
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>     return BZ_PARAM_ERROR
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>      BZ_PARAM_ERROR
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>     return 
609,610c609,610
<             0)
<     return BZ_PARAM_ERROR;
---
>             0
>      
610c610
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
610c610
<     return BZ_PARAM_ERROR;
---
>      ;
610c610
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(91.8 %, 16895 bytes)
610c610
<      BZ_PARAM_ERROR;
---
>      ;
610c610
<      BZ_PARAM_ERROR;
---
>      
(91.8 %, 16881 bytes)
610c610
<      ;
---
>      
610c610
<      ;
---
>      
612c612
<   workFactor == 0;
---
>    == 0;
610c610
<      ;
---
>      
612c612
<   workFactor == 0;
---
>   workFactor  0;
610c610
<      ;
---
>      
612c612
<   workFactor == 0;
---
>     0;
(91.8 %, 16880 bytes)
612c612
<   workFactor == 0;
---
>    == 0;
612c612
<   workFactor == 0;
---
>     0;
612c612
<   workFactor == 0;
---
>    == ;
612c612
<   workFactor == 0;
---
>     ;
(91.8 %, 16868 bytes)
612c612
<     0;
---
>     
612c612
<     0;
---
>     ;
614c614
<   workFactor = 0;
---
>    = 0;
612c612
<     0;
---
>     
614c614
<   workFactor = 0;
---
>    = 0;
612c612
<     0;
---
>     ;
614c614
<   workFactor = 0;
---
>   workFactor  0;
612c612
<     0;
---
>     
614c614
<   workFactor = 0;
---
>   workFactor  0;
612c612
<     0;
---
>     ;
614c614
<   workFactor = 0;
---
>     0;
(91.8 %, 16866 bytes)
614c614
<   workFactor = 0;
---
>     0;
614c614
<   workFactor = 0;
---
>    = ;
614c614
<   workFactor = 0;
---
>     ;
(91.8 %, 16855 bytes)
614c614
<     0;
---
>     
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     ;
>    (strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     
>    (strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     ;
>   if strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     
>   if strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     ;
>    strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     
>    strm->bzalloc == NULL)
614c614
<     0;
---
>     0
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     0
>    (strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     0
>   if strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     0
>    strm->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     0
>   if (->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     0
>    (->bzalloc == NULL)
614,615c614,615
<     0;
<   if (strm->bzalloc == NULL)
---
>     0
>   if ->bzalloc == NULL)
(91.8 %, 16853 bytes)
615c615
<   if (strm->bzalloc == NULL)
---
>    strm->bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>    (->bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>    ->bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>    (strmbzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>    strmbzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>    (bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>    bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if ->bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if strmbzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if strm-> == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if -> == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if strm == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if  == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (-> == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if ( == NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc  NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc  NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (->  NULL)
615c615
<   if (strm->bzalloc == NULL)
---
>   if (  NULL)
(91.8 %, 16845 bytes)
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  )
>     ->bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  NULL
>     ->bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  
>     ->bzalloc = default_bzalloc;
615c615
<   if (bzalloc  NULL)
---
>   if (bzalloc  )
615c615
<   if (bzalloc  NULL)
---
>   if (bzalloc  
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     ->bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     ->bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     strmbzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     strmbzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     bzalloc = default_bzalloc;
615c615
<   if (bzalloc  NULL)
---
>   if (bzalloc  NULL
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     ->bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strmbzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     bzalloc = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm-> = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     -> = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm = default_bzalloc;
615,616c615,616
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>      = default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc = default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc = default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     -> = default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>      = default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc  default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc  default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     ->  default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>       default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     strmbzalloc = default_bzalloc;
616c616
<     strm->bzalloc = default_bzalloc;
---
>     strm = default_bzalloc;
(91.8 %, 16831 bytes)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       
>    strm->bzfree == NULL)
616c616
<       default_bzalloc;
---
>       default_bzalloc
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (strm->bzfree == NULL)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if strm->bzfree == NULL)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    strm->bzfree == NULL)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if (->bzfree == NULL)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (->bzfree == NULL)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if ->bzfree == NULL)
616,617c616,617
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    ->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    (strm->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    strm->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    (->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    ->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    (strmbzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    strmbzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    (bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>    bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if strm->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if ->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if strmbzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if strm-> == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if -> == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if strm == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if  == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (->bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (bzfree == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (-> == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if ( == NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (->bzfree  NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (bzfree  NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (->  NULL)
617c617
<   if (strm->bzfree == NULL)
---
>   if (  NULL)
(91.8 %, 16823 bytes)
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  )
>     ->bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  NULL
>     ->bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  
>     ->bzfree = default_bzfree;
617c617
<   if (bzfree  NULL)
---
>   if (bzfree  )
617c617
<   if (bzfree  NULL)
---
>   if (bzfree  
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     ->bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     ->bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     strmbzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     strmbzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     bzfree = default_bzfree;
617c617
<   if (bzfree  NULL)
---
>   if (bzfree  NULL
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     ->bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strmbzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     bzfree = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm-> = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     -> = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm = default_bzfree;
617,618c617,618
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>      = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     ->bzfree = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     bzfree = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     -> = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>      = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     ->bzfree  default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     bzfree  default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     ->  default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>       default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     strmbzfree = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     strm = default_bzfree;
618c618
<     strm->bzfree = default_bzfree;
---
>     strmbzfree  default_bzfree;
(91.8 %, 16810 bytes)
618c618
<       default_bzfree;
---
>       
620c620
<   s = 0;
---
>     0;
618c618
<       default_bzfree;
---
>       default_bzfree
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>    = 0;
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>   s  0;
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>     0;
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>   s = ;
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>    = ;
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>   s  ;
618c618
<       default_bzfree;
---
>       default_bzfree
620c620
<   s = 0;
---
>     ;
(91.8 %, 16793 bytes)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     
>    s == NULL)
620c620
<     0;
---
>     0
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>    (s == NULL)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>   if s == NULL)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>    s == NULL)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>   if ( == NULL)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>    ( == NULL)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>   if  == NULL)
620,621c620,621
<     0;
<   if (s == NULL)
---
>     0
>     == NULL)
621c621
<   if (s == NULL)
---
>    (s == NULL)
621c621
<   if (s == NULL)
---
>    s == NULL)
621c621
<   if (s == NULL)
---
>    ( == NULL)
621c621
<   if (s == NULL)
---
>     == NULL)
621c621
<   if (s == NULL)
---
>    (s  NULL)
621c621
<   if (s == NULL)
---
>    s  NULL)
621c621
<   if (s == NULL)
---
>    (  NULL)
621c621
<   if (s == NULL)
---
>      NULL)
621c621
<   if (s == NULL)
---
>   if s == NULL)
621c621
<   if (s == NULL)
---
>   if  == NULL)
621c621
<   if (s == NULL)
---
>   if s  NULL)
621c621
<   if (s == NULL)
---
>   if   NULL)
621c621
<   if (s == NULL)
---
>   if s == )
621c621
<   if (s == NULL)
---
>   if  == )
621c621
<   if (s == NULL)
---
>   if s  )
621c621
<   if (s == NULL)
---
>   if   )
621c621
<   if (s == NULL)
---
>   if ( == NULL)
621c621
<   if (s == NULL)
---
>   if (  NULL)
621c621
<   if (s == NULL)
---
>   if ( == )
621c621
<   if (s == NULL)
---
>   if (  )
621c621
<   if (s == NULL)
---
>   if ( == NULL
621c621
<   if (s == NULL)
---
>   if (  NULL
621c621
<   if (s == NULL)
---
>   if ( == 
621c621
<   if (s == NULL)
---
>   if (  
621c621
<   if (s == NULL)
---
>   if (s  NULL)
621c621
<   if (s == NULL)
---
>   if (s  )
(91.8 %, 16790 bytes)
621c621
<   if (  NULL)
---
>   if (  
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      BZ_MEM_ERROR;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      BZ_MEM_ERROR;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>     return ;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>     return ;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      ;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      ;
621c621
<   if (  NULL)
---
>   if (  NULL
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return ;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      ;
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return BZ_MEM_ERROR
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return 
621,622c621,622
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      
622c622
<     return BZ_MEM_ERROR;
---
>      BZ_MEM_ERROR;
622c622
<     return BZ_MEM_ERROR;
---
>      ;
(91.8 %, 16784 bytes)
622c622
<      BZ_MEM_ERROR;
---
>      ;
622c622
<      BZ_MEM_ERROR;
---
>      
622,623c622,623
<      BZ_MEM_ERROR;
<   s_0 = strm;
---
>      ;
>    = strm;
(91.8 %, 16772 bytes)
622c622
<      ;
---
>      
622,623c622,623
<      ;
<   s_0 = strm;
---
>      
>    = strm;
622,623c622,623
<      ;
<   s_0 = strm;
---
>      
>   s_0  strm;
622,623c622,623
<      ;
<   s_0 = strm;
---
>      
>     strm;
(91.8 %, 16771 bytes)
623c623
<   s_0 = strm;
---
>    = strm;
623c623
<   s_0 = strm;
---
>     strm;
623c623
<   s_0 = strm;
---
>    = ;
623c623
<   s_0 = strm;
---
>     ;
(91.8 %, 16767 bytes)
623c623
<     strm;
---
>     
623c623
<     strm;
---
>     ;
625c625
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
623c623
<     strm;
---
>     
625c625
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
623c623
<     strm;
---
>     ;
625c625
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
623c623
<     strm;
---
>     
625c625
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
623c623
<     strm;
---
>     ;
625c625
<   s->arr1 = NULL;
---
>   arr1 = NULL;
623c623
<     strm;
---
>     
625c625
<   s->arr1 = NULL;
---
>   arr1 = NULL;
623c623
<     strm;
---
>     strm
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>   ->arr1 = NULL;
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>   sarr1 = NULL;
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>   arr1 = NULL;
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>   s-> = NULL;
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>   -> = NULL;
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>   s = NULL;
623c623
<     strm;
---
>     strm
625c625
<   s->arr1 = NULL;
---
>    = NULL;
(91.8 %, 16762 bytes)
625c625
<   s->arr1 = NULL;
---
>   arr1 = NULL;
625c625
<   s->arr1 = NULL;
---
>   -> = NULL;
625c625
<   s->arr1 = NULL;
---
>    = NULL;
625c625
<   s->arr1 = NULL;
---
>   ->arr1  NULL;
625c625
<   s->arr1 = NULL;
---
>   arr1  NULL;
625c625
<   s->arr1 = NULL;
---
>   ->  NULL;
625c625
<   s->arr1 = NULL;
---
>     NULL;
(91.8 %, 16758 bytes)
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>     ;
>   ->arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>     NULL
>   ->arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>     
>   ->arr2 = NULL;
625c625
<   arr1  NULL;
---
>   arr1  ;
625c625
<   arr1  NULL;
---
>   arr1  
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  ;
>   ->arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  
>   ->arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  ;
>   sarr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  
>   sarr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  ;
>   arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  
>   arr2 = NULL;
625c625
<   arr1  NULL;
---
>   arr1  NULL
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>   ->arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>   sarr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>   arr2 = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>   s-> = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>   -> = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>   s = NULL;
625,626c625,626
<   arr1  NULL;
<   s->arr2 = NULL;
---
>   arr1  NULL
>    = NULL;
626c626
<   s->arr2 = NULL;
---
>   ->arr2 = NULL;
626c626
<   s->arr2 = NULL;
---
>   arr2 = NULL;
626c626
<   s->arr2 = NULL;
---
>   -> = NULL;
626c626
<   s->arr2 = NULL;
---
>    = NULL;
626c626
<   s->arr2 = NULL;
---
>   ->arr2  NULL;
626c626
<   s->arr2 = NULL;
---
>   arr2  NULL;
626c626
<   s->arr2 = NULL;
---
>   ->  NULL;
626c626
<   s->arr2 = NULL;
---
>     NULL;
(91.8 %, 16754 bytes)
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>     ;
>   ->ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>     NULL
>   ->ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>     
>   ->ftab = NULL;
626c626
<   arr2  NULL;
---
>   arr2  ;
626c626
<   arr2  NULL;
---
>   arr2  
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  ;
>   ->ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  
>   ->ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  ;
>   sftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  
>   sftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  ;
>   ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  
>   ftab = NULL;
626c626
<   arr2  NULL;
---
>   arr2  NULL
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   ->ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   sftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   ftab = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   s-> = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   -> = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>   s = NULL;
626,627c626,627
<   arr2  NULL;
<   s->ftab = NULL;
---
>   arr2  NULL
>    = NULL;
627c627
<   s->ftab = NULL;
---
>   ->ftab = NULL;
627c627
<   s->ftab = NULL;
---
>   ftab = NULL;
627c627
<   s->ftab = NULL;
---
>   -> = NULL;
627c627
<   s->ftab = NULL;
---
>    = NULL;
627c627
<   s->ftab = NULL;
---
>   ->ftab  NULL;
627c627
<   s->ftab = NULL;
---
>   ftab  NULL;
627c627
<   s->ftab = NULL;
---
>   ->  NULL;
627c627
<   s->ftab = NULL;
---
>     NULL;
(91.8 %, 16750 bytes)
627c627
<   ftab  NULL;
---
>     ;
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
627c627
<   ftab  NULL;
---
>     NULL
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
627c627
<   ftab  NULL;
---
>     
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  ;
627c627
<   ftab  NULL;
---
>   ftab  
627c627
<   ftab  NULL;
---
>   ftab  ;
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  ;
629c629
<   n = 0 * blockSize100k;
---
>   n  0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  
629c629
<   n = 0 * blockSize100k;
---
>   n  0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  ;
629c629
<   n = 0 * blockSize100k;
---
>     0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  
629c629
<   n = 0 * blockSize100k;
---
>     0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>   n  0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>     0 * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>   n =  * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>    =  * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>   n   * blockSize100k;
627c627
<   ftab  NULL;
---
>   ftab  NULL
629c629
<   n = 0 * blockSize100k;
---
>      * blockSize100k;
629c629
<   n = 0 * blockSize100k;
---
>    = 0 * blockSize100k;
629c629
<   n = 0 * blockSize100k;
---
>     0 * blockSize100k;
(91.8 %, 16746 bytes)
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>       
>    = 0;
629c629
<      * blockSize100k;
---
>      * ;
629c629
<      * blockSize100k;
---
>      * 
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * ;
>    = 0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * 
>    = 0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * ;
>   s_4  0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * 
>   s_4  0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * ;
>     0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * 
>     0;
629c629
<      * blockSize100k;
---
>      * blockSize100k
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>    = 0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>   s_4  0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>     0;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>   s_4 = ;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>    = ;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>   s_4  ;
629,630c629,630
<      * blockSize100k;
<   s_4 = 0;
---
>      * blockSize100k
>     ;
(91.8 %, 16728 bytes)
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     
>     0 * sizeof(UInt32);
630c630
<     0;
---
>     0
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>    = 0 * sizeof(UInt32);
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>   s_5  0 * sizeof(UInt32);
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>     0 * sizeof(UInt32);
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>   s_5 =  * sizeof(UInt32);
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>    =  * sizeof(UInt32);
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>   s_5   * sizeof(UInt32);
630,631c630,631
<     0;
<   s_5 = 0 * sizeof(UInt32);
---
>     0
>      * sizeof(UInt32);
(91.8 %, 16722 bytes)
631c631
<     0 * sizeof(UInt32);
---
>       UInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0  sizeof(UInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0  (UInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0  sizeofUInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0  UInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0  sizeof();
631c631
<     0 * sizeof(UInt32);
---
>     0  ();
631c631
<     0 * sizeof(UInt32);
---
>     0  sizeof);
631c631
<     0 * sizeof(UInt32);
---
>     0  );
631c631
<     0 * sizeof(UInt32);
---
>     0 * (UInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0 * UInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0 * ();
631c631
<     0 * sizeof(UInt32);
---
>     0 * );
631c631
<     0 * sizeof(UInt32);
---
>     0 * (UInt32;
631c631
<     0 * sizeof(UInt32);
---
>     0 * UInt32;
631c631
<     0 * sizeof(UInt32);
---
>     0 * (;
631c631
<     0 * sizeof(UInt32);
---
>     0 * ;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeofUInt32);
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof);
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeofUInt32;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeofUInt32)
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof)
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeofUInt32
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof();
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof(;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof()
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof(
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof();
>    = 0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(;
>    = 0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof()
>    = 0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(
>    = 0;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof(UInt32;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof(UInt32
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32;
>    = 0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32
>    = 0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32;
>   s_6  0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32
>   s_6  0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32;
>     0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32
>     0;
631c631
<     0 * sizeof(UInt32);
---
>     0 * sizeof(UInt32)
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>    = 0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>   s_6  0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>     0;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>   s_6 = ;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>    = ;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>   s_6  ;
631,632c631,632
<     0 * sizeof(UInt32);
<   s_6 = 0;
---
>     0 * sizeof(UInt32)
>     ;
632c632
<   s_6 = 0;
---
>    = 0;
632c632
<   s_6 = 0;
---
>     0;
(91.8 %, 16716 bytes)
632c632
<     ;
---
>     
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>    arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if sarr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s-> == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if -> == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if s == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if  == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (-> == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ( == NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (->arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (arr1  NULL || s->arr2 == NULL || s->ftab == NULL)
(91.8 %, 16713 bytes)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ( ==  || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (   || s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ( == NULL  s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (  NULL  s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if ( ==   s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (arr1 == NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (    s->arr2 == NULL || s->ftab == NULL)
(91.8 %, 16707 bytes)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (    s->arr2 == NULL || s->ftab == NULL)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (   || ->arr2 == NULL || s->ftab == NULL)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (    ->arr2 == NULL || s->ftab == NULL)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (   || sarr2 == NULL || s->ftab == NULL)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (    sarr2 == NULL || s->ftab == NULL)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (   || arr2 == NULL || s->ftab == NULL)
634c634
<   if (  NULL || s->arr2 == NULL || s->ftab == NULL)
---
>   if (    arr2 == NULL || s->ftab == NULL)
(91.9 %, 16701 bytes)
634c634
<   if (    s->arr2 == NULL || s->ftab == NULL)
---
>   if (    arr2 == NULL || s->ftab == NULL)
634c634
<   if (    s->arr2 == NULL || s->ftab == NULL)
---
>   if (    -> == NULL || s->ftab == NULL)
634c634
<   if (    s->arr2 == NULL || s->ftab == NULL)
---
>   if (     == NULL || s->ftab == NULL)
634c634
<   if (    s->arr2 == NULL || s->ftab == NULL)
---
>   if (    ->arr2  NULL || s->ftab == NULL)
634c634
<   if (    s->arr2 == NULL || s->ftab == NULL)
---
>   if (    arr2  NULL || s->ftab == NULL)
(91.9 %, 16698 bytes)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (      NULL || s->ftab == NULL)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (     ==  || s->ftab == NULL)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (       || s->ftab == NULL)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (     == NULL  s->ftab == NULL)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (      NULL  s->ftab == NULL)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (     ==   s->ftab == NULL)
634c634
<   if (    arr2 == NULL || s->ftab == NULL)
---
>   if (        s->ftab == NULL)
(91.9 %, 16692 bytes)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (        s->ftab == NULL)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (       || ->ftab == NULL)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (        ->ftab == NULL)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (       || sftab == NULL)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (        sftab == NULL)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (       || ftab == NULL)
634c634
<   if (      NULL || s->ftab == NULL)
---
>   if (        ftab == NULL)
(91.9 %, 16686 bytes)
634c634
<   if (        s->ftab == NULL)
---
>   if (        ftab == NULL)
634c634
<   if (        s->ftab == NULL)
---
>   if (        -> == NULL)
634c634
<   if (        s->ftab == NULL)
---
>   if (         == NULL)
634c634
<   if (        s->ftab == NULL)
---
>   if (        ->ftab  NULL)
634c634
<   if (        s->ftab == NULL)
---
>   if (        ftab  NULL)
(91.9 %, 16683 bytes)
634c634
<   if (        ftab == NULL)
---
>   if (          NULL)
634c634
<   if (        ftab == NULL)
---
>   if (         == )
634c634
<   if (        ftab == NULL)
---
>   if (          )
634c634
<   if (        ftab == NULL)
---
>   if (         == NULL
634c634
<   if (        ftab == NULL)
---
>   if (          NULL
634c634
<   if (        ftab == NULL)
---
>   if (         == 
634c634
<   if (        ftab == NULL)
---
>   if (          
634c634
<   if (        ftab == NULL)
---
>   if (        ftab  NULL)
(91.9 %, 16677 bytes)
634c634
<   if (          NULL)
---
>   if (          
634c634
<   if (          NULL)
---
>   if (          )
636c636
<     s->blockNo = 0;
---
>     ->blockNo = 0;
634c634
<   if (          NULL)
---
>   if (          
636c636
<     s->blockNo = 0;
---
>     ->blockNo = 0;
634c634
<   if (          NULL)
---
>   if (          )
636c636
<     s->blockNo = 0;
---
>     sblockNo = 0;
634c634
<   if (          NULL)
---
>   if (          
636c636
<     s->blockNo = 0;
---
>     sblockNo = 0;
634c634
<   if (          NULL)
---
>   if (          )
636c636
<     s->blockNo = 0;
---
>     blockNo = 0;
634c634
<   if (          NULL)
---
>   if (          
636c636
<     s->blockNo = 0;
---
>     blockNo = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>     ->blockNo = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>     sblockNo = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>     blockNo = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>     s-> = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>     -> = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>     s = 0;
634c634
<   if (          NULL)
---
>   if (          NULL
636c636
<     s->blockNo = 0;
---
>      = 0;
636c636
<     s->blockNo = 0;
---
>     ->blockNo = 0;
636c636
<     s->blockNo = 0;
---
>     blockNo = 0;
636c636
<     s->blockNo = 0;
---
>     -> = 0;
636c636
<     s->blockNo = 0;
---
>      = 0;
636c636
<     s->blockNo = 0;
---
>     ->blockNo  0;
636c636
<     s->blockNo = 0;
---
>     blockNo  0;
636c636
<     s->blockNo = 0;
---
>     ->  0;
636c636
<     s->blockNo = 0;
---
>       0;
636c636
<     s->blockNo = 0;
---
>     sblockNo = 0;
636c636
<     s->blockNo = 0;
---
>     s = 0;
(91.9 %, 16666 bytes)
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       
>     BZ_S_INPUT;
636c636
<       0;
---
>       0
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>    = BZ_S_INPUT;
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>   s_2  BZ_S_INPUT;
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>     BZ_S_INPUT;
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>   s_2 = ;
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>    = ;
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>   s_2  ;
636,637c636,637
<       0;
<   s_2 = BZ_S_INPUT;
---
>       0
>     ;
(91.9 %, 16660 bytes)
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     
>     BZ_M_RUNNING;
637c637
<     BZ_S_INPUT;
---
>     BZ_S_INPUT
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>    = BZ_M_RUNNING;
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   s_1  BZ_M_RUNNING;
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>     BZ_M_RUNNING;
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   s_1 = ;
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>    = ;
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>   s_1  ;
637,638c637,638
<     BZ_S_INPUT;
<   s_1 = BZ_M_RUNNING;
---
>     BZ_S_INPUT
>     ;
(91.9 %, 16645 bytes)
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     
>     0;
638c638
<     BZ_M_RUNNING;
---
>     BZ_M_RUNNING
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>    = 0;
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>   s_27  0;
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>     0;
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>   s_27 = ;
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>    = ;
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>   s_27  ;
638,639c638,639
<     BZ_M_RUNNING;
<   s_27 = 0;
---
>     BZ_M_RUNNING
>     ;
(91.9 %, 16627 bytes)
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     
>     blockSize100k;
639c639
<     0;
---
>     0
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>    = blockSize100k;
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>   s_30  blockSize100k;
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>     blockSize100k;
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>   s_30 = ;
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>    = ;
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>   s_30  ;
639,640c639,640
<     0;
<   s_30 = blockSize100k;
---
>     0
>     ;
(91.9 %, 16620 bytes)
640,641c640,641
<     blockSize100k;
<   s_18 = 0 * blockSize100k - 9;
---
>     
>     0 * blockSize100k - 9;
640c640
<     blockSize100k;
---
>     blockSize100k
640,641c640,641
<     blockSize100k;
<   s_18 = 0 * blockSize100k - 9;
---
>     blockSize100k
>    = 0 * blockSize100k - 9;
(91.9 %, 16601 bytes)
641c641
<     0 * blockSize100k - 9;
---
>         9;
641c641
<     0 * blockSize100k - 9;
---
>     0  blockSize100k - 9;
641c641
<     0 * blockSize100k - 9;
---
>     0   - 9;
(91.9 %, 16585 bytes)
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         
>     verbosity;
641c641
<         9;
---
>         9
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>    = verbosity;
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>   s_28  verbosity;
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>     verbosity;
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>   s_28 = ;
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>    = ;
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>   s_28  ;
641,642c641,642
<         9;
<   s_28 = verbosity;
---
>         9
>     ;
(91.9 %, 16578 bytes)
642,643c642,643
<     verbosity;
<   s_12 = workFactor;
---
>     
>     workFactor;
642c642
<     verbosity;
---
>     verbosity
642,643c642,643
<     verbosity;
<   s_12 = workFactor;
---
>     verbosity
>    = workFactor;
(91.9 %, 16563 bytes)
643c643
<     workFactor;
---
>     
645c645
<   s_9 = s_5;
---
>     s_5;
643c643
<     workFactor;
---
>     workFactor
643c643
<     workFactor;
---
>     workFactor
645c645
<   s_9 = s_5;
---
>    = s_5;
(91.9 %, 16548 bytes)
645,646c645,646
<     s_5;
<   s_10 = s_4;
---
>     
>     s_4;
645c645
<     s_5;
---
>     s_5
645,646c645,646
<     s_5;
<   s_10 = s_4;
---
>     s_5
>    = s_4;
(91.9 %, 16539 bytes)
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     
>   zbits = NULL;
646c646
<     s_4;
---
>     s_4
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>   ->zbits = NULL;
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>   szbits = NULL;
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>   zbits = NULL;
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>   s-> = NULL;
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>   -> = NULL;
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>   s = NULL;
646,647c646,647
<     s_4;
<   s->zbits = NULL;
---
>     s_4
>    = NULL;
647c647
<   s->zbits = NULL;
---
>   ->zbits = NULL;
647c647
<   s->zbits = NULL;
---
>   zbits = NULL;
647c647
<   s->zbits = NULL;
---
>   -> = NULL;
647c647
<   s->zbits = NULL;
---
>    = NULL;
647c647
<   s->zbits = NULL;
---
>   ->zbits  NULL;
647c647
<   s->zbits = NULL;
---
>   zbits  NULL;
(91.9 %, 16530 bytes)
647,648c647,648
<    = NULL;
<   s_8 = s_4;
---
>     
>    = s_4;
647c647
<    = NULL;
---
>    = ;
647c647
<    = NULL;
---
>    = 
(91.9 %, 16521 bytes)
648c648
<    = s_4;
---
>     
650c650
<   strm->state = s;
---
>   ->state = s;
648c648
<    = s_4;
---
>    = ;
648c648
<    = s_4;
---
>    = 
648c648
<    = s_4;
---
>    = ;
650c650
<   strm->state = s;
---
>   ->state = s;
648c648
<    = s_4;
---
>    = 
650c650
<   strm->state = s;
---
>   ->state = s;
648c648
<    = s_4;
---
>    = ;
650c650
<   strm->state = s;
---
>   strmstate = s;
648c648
<    = s_4;
---
>    = 
650c650
<   strm->state = s;
---
>   strmstate = s;
648c648
<    = s_4;
---
>    = ;
650c650
<   strm->state = s;
---
>   state = s;
648c648
<    = s_4;
---
>    = 
650c650
<   strm->state = s;
---
>   state = s;
648c648
<    = s_4;
---
>    = s_4
648c648
<    = s_4;
---
>    = s_4
650c650
<   strm->state = s;
---
>   ->state = s;
648c648
<    = s_4;
---
>    = s_4
650c650
<   strm->state = s;
---
>   strmstate = s;
648c648
<    = s_4;
---
>    = s_4
650c650
<   strm->state = s;
---
>   state = s;
648c648
<    = s_4;
---
>    = s_4
650c650
<   strm->state = s;
---
>   strm-> = s;
(91.9 %, 16517 bytes)
650c650
<   strm->state = s;
---
>   state = s;
650c650
<   strm->state = s;
---
>   -> = s;
650c650
<   strm->state = s;
---
>    = s;
650c650
<   strm->state = s;
---
>   ->state  s;
650c650
<   strm->state = s;
---
>   state  s;
650c650
<   strm->state = s;
---
>   ->  s;
650c650
<   strm->state = s;
---
>     s;
650c650
<   strm->state = s;
---
>   strmstate = s;
650c650
<   strm->state = s;
---
>   strm = s;
(91.9 %, 16505 bytes)
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     
>   total_in_lo32 = 0;
650c650
<     s;
---
>     s
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   ->total_in_lo32 = 0;
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   strmtotal_in_lo32 = 0;
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   total_in_lo32 = 0;
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   strm-> = 0;
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   -> = 0;
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>   strm = 0;
650,651c650,651
<     s;
<   strm->total_in_lo32 = 0;
---
>     s
>    = 0;
651c651
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32 = 0;
651c651
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32 = 0;
651c651
<   strm->total_in_lo32 = 0;
---
>   -> = 0;
651c651
<   strm->total_in_lo32 = 0;
---
>    = 0;
651c651
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32  0;
651c651
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32  0;
651c651
<   strm->total_in_lo32 = 0;
---
>   ->  0;
651c651
<   strm->total_in_lo32 = 0;
---
>     0;
(92.0 %, 16485 bytes)
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>     
>   ->total_in_hi32 = 0;
651c651
<    = 0;
---
>    = ;
651c651
<    = 0;
---
>    = 
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   ->total_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   ->total_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   strmtotal_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   strmtotal_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = ;
>   total_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 
>   total_in_hi32 = 0;
651c651
<    = 0;
---
>    = 0
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   ->total_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strmtotal_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   total_in_hi32 = 0;
651,652c651,652
<    = 0;
<   strm->total_in_hi32 = 0;
---
>    = 0
>   strm-> = 0;
(92.0 %, 16483 bytes)
652c652
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32 = 0;
652c652
<   strm->total_in_hi32 = 0;
---
>   -> = 0;
652c652
<   strm->total_in_hi32 = 0;
---
>    = 0;
652c652
<   strm->total_in_hi32 = 0;
---
>   ->total_in_hi32  0;
652c652
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32  0;
652c652
<   strm->total_in_hi32 = 0;
---
>   ->  0;
652c652
<   strm->total_in_hi32 = 0;
---
>     0;
652c652
<   strm->total_in_hi32 = 0;
---
>   strmtotal_in_hi32 = 0;
652c652
<   strm->total_in_hi32 = 0;
---
>   strm = 0;
(92.0 %, 16463 bytes)
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     
>   total_out_lo32 = 0;
652c652
<     0;
---
>     0
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   ->total_out_lo32 = 0;
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strmtotal_out_lo32 = 0;
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   total_out_lo32 = 0;
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm-> = 0;
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   -> = 0;
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm = 0;
652,653c652,653
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>    = 0;
653c653
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32 = 0;
653c653
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32 = 0;
653c653
<   strm->total_out_lo32 = 0;
---
>   -> = 0;
653c653
<   strm->total_out_lo32 = 0;
---
>    = 0;
653c653
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32  0;
653c653
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32  0;
653c653
<   strm->total_out_lo32 = 0;
---
>   ->  0;
653c653
<   strm->total_out_lo32 = 0;
---
>     0;
653c653
<   strm->total_out_lo32 = 0;
---
>   strmtotal_out_lo32 = 0;
653c653
<   strm->total_out_lo32 = 0;
---
>   strm = 0;
(92.0 %, 16442 bytes)
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     
>   total_out_hi32 = 0;
653c653
<     0;
---
>     0
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   ->total_out_hi32 = 0;
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strmtotal_out_hi32 = 0;
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   total_out_hi32 = 0;
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm-> = 0;
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   -> = 0;
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm = 0;
653,654c653,654
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>    = 0;
654c654
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32 = 0;
654c654
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32 = 0;
654c654
<   strm->total_out_hi32 = 0;
---
>   -> = 0;
654c654
<   strm->total_out_hi32 = 0;
---
>    = 0;
654c654
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32  0;
654c654
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32  0;
654c654
<   strm->total_out_hi32 = 0;
---
>   ->  0;
654c654
<   strm->total_out_hi32 = 0;
---
>     0;
654c654
<   strm->total_out_hi32 = 0;
---
>   strmtotal_out_hi32 = 0;
654c654
<   strm->total_out_hi32 = 0;
---
>   strm = 0;
(92.0 %, 16421 bytes)
654,656c654,656
<     0;
<   ;
<   ;
---
>     
>   
>   
654c654
<     0;
---
>     0
(92.0 %, 16417 bytes)
657,658c657,658
<   return BZ_OK;
< }
---
>    
> 
657c657
<   return BZ_OK;
---
>   return ;
657c657
<   return BZ_OK;
---
>   return 
657,658c657,658
<   return BZ_OK;
< }
---
>   return ;
> 
657,658c657,658
<   return BZ_OK;
< }
---
>   return 
> 
657c657
<   return BZ_OK;
---
>   return ;
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define ADD_CHAR_TO_BLOCKzs , zchh0
657c657
<   return BZ_OK;
---
>   return 
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define ADD_CHAR_TO_BLOCKzs , zchh0
657,658c657
<   return BZ_OK;
< }
---
>   return ;
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> define ADD_CHAR_TO_BLOCKzs , zchh0
657,658c657
<   return BZ_OK;
< }
---
>   return 
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> define ADD_CHAR_TO_BLOCKzs , zchh0
657c657
<   return BZ_OK;
---
>   return BZ_OK
657,658c657,658
<   return BZ_OK;
< }
---
>   return BZ_OK
> 
657c657
<   return BZ_OK;
---
>   return BZ_OK
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define ADD_CHAR_TO_BLOCKzs , zchh0
657,658c657
<   return BZ_OK;
< }
---
>   return BZ_OK
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> define ADD_CHAR_TO_BLOCKzs , zchh0
657c657
<   return BZ_OK;
---
>   return BZ_OK
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> # ADD_CHAR_TO_BLOCKzs , zchh0
657,658c657
<   return BZ_OK;
< }
---
>   return BZ_OK
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> # ADD_CHAR_TO_BLOCKzs , zchh0
657c657
<   return BZ_OK;
---
>   return BZ_OK
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
>  ADD_CHAR_TO_BLOCKzs , zchh0
657,658c657
<   return BZ_OK;
< }
---
>   return BZ_OK
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
>  ADD_CHAR_TO_BLOCKzs , zchh0
658c658
< }
---
> 
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> define ADD_CHAR_TO_BLOCKzs , zchh0
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> # ADD_CHAR_TO_BLOCKzs , zchh0
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
>  ADD_CHAR_TO_BLOCKzs , zchh0
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> #define  , zchh0
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> define  , zchh0
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
> #  , zchh0
658d657
< }
660c659,660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> 
>   , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define ADD_CHAR_TO_BLOCKzs , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
>  ADD_CHAR_TO_BLOCKzs , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define  , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
>   , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define ADD_CHAR_TO_BLOCKzs  zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
>  ADD_CHAR_TO_BLOCKzs  zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> define   zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
>    zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> # ADD_CHAR_TO_BLOCKzs , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> #  , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> # ADD_CHAR_TO_BLOCKzs  zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> #   zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> # ADD_CHAR_TO_BLOCKzs , 
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> #  , 
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> # ADD_CHAR_TO_BLOCKzs  
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> #   
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> #define  , zchh0
660c660
< #define ADD_CHAR_TO_BLOCKzs , zchh0
---
> #define   zchh0
(92.0 %, 16386 bytes)
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
>  ) {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int (void) {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int void) {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int () {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int ) {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int (void {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int void {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int ( {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int  {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompressvoid) {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress) {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompressvoid {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompressvoid) 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress) 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompressvoid 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress() {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress( {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress() 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress( 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress() {
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress( {
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress( 
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress(void {
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress(void 
662c662
< int BZ_APIBZ2_bzCompress(void) {
---
> int BZ_APIBZ2_bzCompress(void {
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
(92.0 %, 16382 bytes)
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( {
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( 
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( {
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( 
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( {
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( 
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( {
664c664
<   bz_stream *strm = 0;
---
>    strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress( 
664c664
<   bz_stream *strm = 0;
---
>    strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>    strm = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>    * = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
662c662
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress() 
664c664
<   bz_stream *strm = 0;
---
>     = 0;
664c664
<   bz_stream *strm = 0;
---
>    *strm = 0;
664c664
<   bz_stream *strm = 0;
---
>    strm = 0;
664c664
<   bz_stream *strm = 0;
---
>    * = 0;
664c664
<   bz_stream *strm = 0;
---
>     = 0;
664c664
<   bz_stream *strm = 0;
---
>    *strm  0;
664c664
<   bz_stream *strm = 0;
---
>    strm  0;
664c664
<   bz_stream *strm = 0;
---
>    *  0;
664c664
<   bz_stream *strm = 0;
---
>      0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm  0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream   0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm = ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream  = ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream strm  ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream   ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *  0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream * = ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *  ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream * = 0
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *  0
664c664
<   bz_stream *strm = 0;
---
>   bz_stream * = 
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *  
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
666c666
<   EState *s;
---
>   EState s;
(92.0 %, 16380 bytes)
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>    *s;
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>   EState s;
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>    s;
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>   EState *;
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>    *;
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>   EState ;
664c664
<   bz_stream *strm  ;
---
>   bz_stream *strm  
666c666
<   EState *s;
---
>    ;
666c666
<   EState *s;
---
>    *s;
666c666
<   EState *s;
---
>    s;
666c666
<   EState *s;
---
>    *;
666c666
<   EState *s;
---
>    ;
666c666
<   EState *s;
---
>    *s
666c666
<   EState *s;
---
>    s
666c666
<   EState *s;
---
>    *
666c666
<   EState *s;
---
>    
666c666
<   EState *s;
---
>   EState s;
666c666
<   EState *s;
---
>   EState ;
666c666
<   EState *s;
---
>   EState s
666c666
<   EState *s;
---
>   EState 
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState s;
>    s_1;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState ;
>    s_1;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState s
>    s_1;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState 
>    s_1;
666c666
<   EState *s;
---
>   EState *;
666c666
<   EState *s;
---
>   EState *
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *;
>    s_1;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *
>    s_1;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *;
>   Int32 ;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *
>   Int32 ;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *;
>    ;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *
>    ;
666c666
<   EState *s;
---
>   EState *s
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>    s_1;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>   Int32 ;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>    ;
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>   Int32 s_1
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>    s_1
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>   Int32 
666,667c666,667
<   EState *s;
<   Int32 s_1;
---
>   EState *s
>    
667c667
<   Int32 s_1;
---
>    s_1;
667c667
<   Int32 s_1;
---
>    ;
667c667
<   Int32 s_1;
---
>    s_1
667c667
<   Int32 s_1;
---
>    
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>    s_1;
>    *s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>    ;
>    *s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>    s_1
>    *s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>    
>    *s_0;
667c667
<   Int32 s_1;
---
>   Int32 ;
667c667
<   Int32 s_1;
---
>   Int32 
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 ;
>    *s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 
>    *s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 ;
>   bz_stream s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 
>   bz_stream s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 ;
>    s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 
>    s_0;
667c667
<   Int32 s_1;
---
>   Int32 s_1
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    *s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>   bz_stream s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    s_0;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>   bz_stream *;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    *;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>   bz_stream ;
667,668c667,668
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    ;
668c668
<   bz_stream *s_0;
---
>    *s_0;
668c668
<   bz_stream *s_0;
---
>    s_0;
668c668
<   bz_stream *s_0;
---
>    *;
668c668
<   bz_stream *s_0;
---
>    ;
668c668
<   bz_stream *s_0;
---
>    *s_0
668c668
<   bz_stream *s_0;
---
>    s_0
668c668
<   bz_stream *s_0;
---
>    *
668c668
<   bz_stream *s_0;
---
>    
668c668
<   bz_stream *s_0;
---
>   bz_stream s_0;
668c668
<   bz_stream *s_0;
---
>   bz_stream ;
668c668
<   bz_stream *s_0;
---
>   bz_stream s_0
668c668
<   bz_stream *s_0;
---
>   bz_stream 
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0;
>    (strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream ;
>    (strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0
>    (strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream 
>    (strm == NULL)
668c668
<   bz_stream *s_0;
---
>   bz_stream *;
668c668
<   bz_stream *s_0;
---
>   bz_stream *
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    (strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    (strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>   if strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>   if strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    strm == NULL)
668c668
<   bz_stream *s_0;
---
>   bz_stream *s_0
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    (strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    strm == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if ( == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    ( == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if  == NULL)
668,669c668,669
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>     == NULL)
669c669
<   if (strm == NULL)
---
>    (strm == NULL)
669c669
<   if (strm == NULL)
---
>    strm == NULL)
669c669
<   if (strm == NULL)
---
>    ( == NULL)
669c669
<   if (strm == NULL)
---
>     == NULL)
669c669
<   if (strm == NULL)
---
>    (strm  NULL)
669c669
<   if (strm == NULL)
---
>    strm  NULL)
669c669
<   if (strm == NULL)
---
>    (  NULL)
669c669
<   if (strm == NULL)
---
>      NULL)
669c669
<   if (strm == NULL)
---
>   if strm == NULL)
669c669
<   if (strm == NULL)
---
>   if  == NULL)
669c669
<   if (strm == NULL)
---
>   if strm  NULL)
669c669
<   if (strm == NULL)
---
>   if   NULL)
669c669
<   if (strm == NULL)
---
>   if strm == )
669c669
<   if (strm == NULL)
---
>   if  == )
669c669
<   if (strm == NULL)
---
>   if strm  )
669c669
<   if (strm == NULL)
---
>   if   )
669c669
<   if (strm == NULL)
---
>   if ( == NULL)
669c669
<   if (strm == NULL)
---
>   if (  NULL)
669c669
<   if (strm == NULL)
---
>   if ( == )
669c669
<   if (strm == NULL)
---
>   if (  )
669c669
<   if (strm == NULL)
---
>   if ( == NULL
669c669
<   if (strm == NULL)
---
>   if (  NULL
669c669
<   if (strm == NULL)
---
>   if ( == 
669c669
<   if (strm == NULL)
---
>   if (  
669c669
<   if (strm == NULL)
---
>   if (strm  NULL)
669c669
<   if (strm == NULL)
---
>   if (strm  )
(92.0 %, 16374 bytes)
669c669
<   if (  NULL)
---
>   if (  
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
669c669
<   if (  NULL)
---
>   if (  NULL
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
669,670c669,670
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
670c670
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
670c670
<     return BZ_PARAM_ERROR;
---
>      ;
670c670
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(92.0 %, 16368 bytes)
670c670
<      BZ_PARAM_ERROR;
---
>      ;
670c670
<      BZ_PARAM_ERROR;
---
>      
(92.0 %, 16354 bytes)
670c670
<      ;
---
>      
670,671c670,671
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
670,671c670,671
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
670,671c670,671
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(92.0 %, 16353 bytes)
671c671
<   s = strm->state;
---
>    = strm->state;
671c671
<   s = strm->state;
---
>     strm->state;
671c671
<   s = strm->state;
---
>    = ->state;
671c671
<   s = strm->state;
---
>     ->state;
671c671
<   s = strm->state;
---
>    = strmstate;
671c671
<   s = strm->state;
---
>     strmstate;
671c671
<   s = strm->state;
---
>    = state;
671c671
<   s = strm->state;
---
>     state;
671c671
<   s = strm->state;
---
>   s  strm->state;
671c671
<   s = strm->state;
---
>   s  ->state;
671c671
<   s = strm->state;
---
>   s  strmstate;
671c671
<   s = strm->state;
---
>   s  state;
671c671
<   s = strm->state;
---
>   s  strm->;
(92.0 %, 16351 bytes)
671c671
<     strm->state;
---
>     state;
671c671
<     strm->state;
---
>     ->;
671c671
<     strm->state;
---
>     ;
671c671
<     strm->state;
---
>     ->state
671c671
<     strm->state;
---
>     state
671c671
<     strm->state;
---
>     ->
671c671
<     strm->state;
---
>     
(92.0 %, 16340 bytes)
671,672c671,672
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
671,672c671,672
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
671,672c671,672
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
671,672c671,672
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
671,672c671,672
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
672c672
<   if (s == NULL)
---
>    (s == NULL)
672c672
<   if (s == NULL)
---
>    s == NULL)
672c672
<   if (s == NULL)
---
>    ( == NULL)
672c672
<   if (s == NULL)
---
>     == NULL)
672c672
<   if (s == NULL)
---
>    (s  NULL)
672c672
<   if (s == NULL)
---
>    s  NULL)
672c672
<   if (s == NULL)
---
>    (  NULL)
672c672
<   if (s == NULL)
---
>      NULL)
672c672
<   if (s == NULL)
---
>   if s == NULL)
672c672
<   if (s == NULL)
---
>   if  == NULL)
672c672
<   if (s == NULL)
---
>   if s  NULL)
672c672
<   if (s == NULL)
---
>   if   NULL)
672c672
<   if (s == NULL)
---
>   if s == )
672c672
<   if (s == NULL)
---
>   if  == )
672c672
<   if (s == NULL)
---
>   if s  )
672c672
<   if (s == NULL)
---
>   if   )
672c672
<   if (s == NULL)
---
>   if ( == NULL)
672c672
<   if (s == NULL)
---
>   if (  NULL)
672c672
<   if (s == NULL)
---
>   if ( == )
672c672
<   if (s == NULL)
---
>   if (  )
672c672
<   if (s == NULL)
---
>   if ( == NULL
672c672
<   if (s == NULL)
---
>   if (  NULL
672c672
<   if (s == NULL)
---
>   if ( == 
672c672
<   if (s == NULL)
---
>   if (  
672c672
<   if (s == NULL)
---
>   if (s  NULL)
672c672
<   if (s == NULL)
---
>   if (s  )
(92.0 %, 16337 bytes)
672c672
<   if (  NULL)
---
>   if (  
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
672c672
<   if (  NULL)
---
>   if (  NULL
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
672,673c672,673
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
673c673
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
673c673
<     return BZ_PARAM_ERROR;
---
>      ;
(92.0 %, 16331 bytes)
673c673
<      BZ_PARAM_ERROR;
---
>      ;
673c673
<      BZ_PARAM_ERROR;
---
>      
673,674c673,674
<      BZ_PARAM_ERROR;
<   s_0 != strm;
---
>      ;
>    != strm;
(92.0 %, 16317 bytes)
673c673
<      ;
---
>      
673,674c673,674
<      ;
<   s_0 != strm;
---
>      
>    != strm;
673,674c673,674
<      ;
<   s_0 != strm;
---
>      
>   s_0  strm;
673,674c673,674
<      ;
<   s_0 != strm;
---
>      
>     strm;
(92.0 %, 16316 bytes)
674c674
<   s_0 != strm;
---
>    != strm;
674c674
<   s_0 != strm;
---
>     strm;
674c674
<   s_0 != strm;
---
>    != ;
674c674
<   s_0 != strm;
---
>     ;
(92.0 %, 16311 bytes)
674c674
<     strm;
---
>     
674c674
<     strm;
---
>     ;
676c676
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
674c674
<     strm;
---
>     
676c676
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
(92.0 %, 16306 bytes)
676c676
<   return BZ_PARAM_ERROR;
---
>    ;
676c676
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR
676c676
<   return BZ_PARAM_ERROR;
---
>    
(92.1 %, 16286 bytes)
676c676
<    ;
---
>    
678c678
< preswitch:
---
> :
676c676
<    ;
---
>    
678c678
< preswitch:
---
> preswitch
676c676,677
<    ;
---
>    
> 
678d678
< preswitch:
676c676
<    ;
---
>    
679c679
<   switch (s_1)
---
>    (s_1)
676c676
<    ;
---
>    
678,679c678,679
< preswitch:
<   switch (s_1)
---
> :
>    (s_1)
676c676
<    ;
---
>    
678,679c678,679
< preswitch:
<   switch (s_1)
---
> preswitch
>    (s_1)
676c676
<    ;
---
>    
678,679c678,679
< preswitch:
<   switch (s_1)
---
> 
>    (s_1)
678c678
< preswitch:
---
> :
678c678
< preswitch:
---
> 
(92.1 %, 16275 bytes)
679c679
<   switch (s_1)
---
>    )
679c679
<   switch (s_1)
---
>    (s_1
679c679
<   switch (s_1)
---
>    s_1
679c679
<   switch (s_1)
---
>    (
679c679
<   switch (s_1)
---
>    
679c679
<   switch (s_1)
---
>   switch s_1)
679c679
<   switch (s_1)
---
>   switch )
679c679
<   switch (s_1)
---
>   switch s_1
679c679
<   switch (s_1)
---
>   switch 
679,680c679,680
<   switch (s_1)
<     return BZ_OK;
---
>   switch s_1)
>      BZ_OK;
679,680c679,680
<   switch (s_1)
<     return BZ_OK;
---
>   switch )
>      BZ_OK;
679,680c679,680
<   switch (s_1)
<     return BZ_OK;
---
>   switch s_1
>      BZ_OK;
679,680c679,680
<   switch (s_1)
<     return BZ_OK;
---
>   switch 
>      BZ_OK;
679c679
<   switch (s_1)
---
>   switch ()
679c679
<   switch (s_1)
---
>   switch (
(92.1 %, 16264 bytes)
680,681c680,681
<     return BZ_OK;
< }
---
>      
> 
680c680
<     return BZ_OK;
---
>     return ;
680c680
<     return BZ_OK;
---
>     return 
680,681c680,681
<     return BZ_OK;
< }
---
>     return ;
> 
680,681c680,681
<     return BZ_OK;
< }
---
>     return 
> 
680c680
<     return BZ_OK;
---
>     return ;
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd(void) {
680c680
<     return BZ_OK;
---
>     return 
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd(void) {
680,681c680
<     return BZ_OK;
< }
---
>     return ;
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzCompressEnd(void) {
680,681c680
<     return BZ_OK;
< }
---
>     return 
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzCompressEnd(void) {
680c680
<     return BZ_OK;
---
>     return BZ_OK
680,681c680,681
<     return BZ_OK;
< }
---
>     return BZ_OK
> 
680c680
<     return BZ_OK;
---
>     return BZ_OK
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd(void) {
680,681c680
<     return BZ_OK;
< }
---
>     return BZ_OK
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzCompressEnd(void) {
680c680
<     return BZ_OK;
---
>     return BZ_OK
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> int (void) {
680,681c680
<     return BZ_OK;
< }
---
>     return BZ_OK
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
> int (void) {
680c680
<     return BZ_OK;
---
>     return BZ_OK
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  (void) {
680,681c680
<     return BZ_OK;
< }
---
>     return BZ_OK
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  (void) {
681c681
< }
---
> 
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzCompressEnd(void) {
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
> int (void) {
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  (void) {
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
> int BZ_APIBZ2_bzCompressEndvoid) {
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzCompressEndvoid) {
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
> int void) {
681d680
< }
683c682,683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
> 
>  void) {
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd(void) {
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  (void) {
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEndvoid) {
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  void) {
683c683
< int BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd() {
(92.1 %, 16261 bytes)
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  (void) {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  void) {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  () {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  ) {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  (void {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  void {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  ( {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>   {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEndvoid) {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd) {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEndvoid {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEndvoid) 
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd) 
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEndvoid 
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd 
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd() {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd( {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd() 
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd( 
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() {
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( {
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( 
>    *strm = 0;
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd(void {
683c683
<  BZ_APIBZ2_bzCompressEnd(void) {
---
>  BZ_APIBZ2_bzCompressEnd(void 
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd(void {
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd(void 
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd(void {
>   bz_stream strm = 0;
(92.1 %, 16257 bytes)
683c683
<  BZ_APIBZ2_bzCompressEnd() {
---
>  BZ_APIBZ2_bzCompressEnd( {
683c683
<  BZ_APIBZ2_bzCompressEnd() {
---
>  BZ_APIBZ2_bzCompressEnd( 
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( {
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( 
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( {
>   bz_stream strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( 
>   bz_stream strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( {
>    strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd( 
>    strm = 0;
683c683
<  BZ_APIBZ2_bzCompressEnd() {
---
>  BZ_APIBZ2_bzCompressEnd() 
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>    *strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>   bz_stream strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>    strm = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>   bz_stream * = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>    * = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>   bz_stream  = 0;
683,684c683,684
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzCompressEnd() 
>     = 0;
684c684
<   bz_stream *strm = 0;
---
>    *strm = 0;
684c684
<   bz_stream *strm = 0;
---
>    strm = 0;
684c684
<   bz_stream *strm = 0;
---
>    * = 0;
684c684
<   bz_stream *strm = 0;
---
>     = 0;
684c684
<   bz_stream *strm = 0;
---
>    *strm  0;
684c684
<   bz_stream *strm = 0;
---
>    strm  0;
684c684
<   bz_stream *strm = 0;
---
>    *  0;
684c684
<   bz_stream *strm = 0;
---
>      0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream strm  0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream   0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream strm = ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream  = ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream strm  ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream   ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *  0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream * = ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *  ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream * = 0
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *  0
684c684
<   bz_stream *strm = 0;
---
>   bz_stream * = 
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *  
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm  0;
>    *s;
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm  ;
>    *s;
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm  0
>    *s;
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm  
>    *s;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
684c684
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm = ;
>    *s;
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm = 
>    *s;
684,685c684,685
<   bz_stream *strm = 0;
<   EState *s;
---
>   bz_stream *strm = ;
>   EState s;
(92.1 %, 16255 bytes)
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>    *s;
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>   EState s;
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>    s;
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>   EState *;
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>    *;
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>   EState ;
684,685c684,685
<   bz_stream *strm  ;
<   EState *s;
---
>   bz_stream *strm  
>    ;
685c685
<   EState *s;
---
>    *s;
685c685
<   EState *s;
---
>    s;
685c685
<   EState *s;
---
>    *;
685c685
<   EState *s;
---
>    ;
685c685
<   EState *s;
---
>    *s
685c685
<   EState *s;
---
>    s
685c685
<   EState *s;
---
>    *
685c685
<   EState *s;
---
>    
685c685
<   EState *s;
---
>   EState s;
685c685
<   EState *s;
---
>   EState ;
685c685
<   EState *s;
---
>   EState s
685c685
<   EState *s;
---
>   EState 
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState s;
>    *s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState ;
>    *s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState s
>    *s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState 
>    *s_0;
685c685
<   EState *s;
---
>   EState *;
685c685
<   EState *s;
---
>   EState *
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *;
>    *s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *
>    *s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *;
>   bz_stream s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *
>   bz_stream s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *;
>    s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *
>    s_0;
685c685
<   EState *s;
---
>   EState *s
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>    *s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>   bz_stream s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>    s_0;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>   bz_stream *;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>    *;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>   bz_stream ;
685,686c685,686
<   EState *s;
<   bz_stream *s_0;
---
>   EState *s
>    ;
686c686
<   bz_stream *s_0;
---
>    *s_0;
686c686
<   bz_stream *s_0;
---
>    s_0;
686c686
<   bz_stream *s_0;
---
>    *;
686c686
<   bz_stream *s_0;
---
>    ;
686c686
<   bz_stream *s_0;
---
>    *s_0
686c686
<   bz_stream *s_0;
---
>    s_0
686c686
<   bz_stream *s_0;
---
>    *
686c686
<   bz_stream *s_0;
---
>    
686c686
<   bz_stream *s_0;
---
>   bz_stream s_0;
686c686
<   bz_stream *s_0;
---
>   bz_stream ;
686c686
<   bz_stream *s_0;
---
>   bz_stream s_0
686c686
<   bz_stream *s_0;
---
>   bz_stream 
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0;
>    (strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream ;
>    (strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0
>    (strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream 
>    (strm == NULL)
686c686
<   bz_stream *s_0;
---
>   bz_stream *;
686c686
<   bz_stream *s_0;
---
>   bz_stream *
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    (strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    (strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>   if strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>   if strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    strm == NULL)
686c686
<   bz_stream *s_0;
---
>   bz_stream *s_0
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    (strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    strm == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if ( == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    ( == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if  == NULL)
686,687c686,687
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>     == NULL)
687c687
<   if (strm == NULL)
---
>    (strm == NULL)
687c687
<   if (strm == NULL)
---
>    strm == NULL)
687c687
<   if (strm == NULL)
---
>    ( == NULL)
687c687
<   if (strm == NULL)
---
>     == NULL)
687c687
<   if (strm == NULL)
---
>    (strm  NULL)
687c687
<   if (strm == NULL)
---
>    strm  NULL)
687c687
<   if (strm == NULL)
---
>    (  NULL)
687c687
<   if (strm == NULL)
---
>      NULL)
687c687
<   if (strm == NULL)
---
>   if strm == NULL)
687c687
<   if (strm == NULL)
---
>   if  == NULL)
687c687
<   if (strm == NULL)
---
>   if strm  NULL)
687c687
<   if (strm == NULL)
---
>   if   NULL)
687c687
<   if (strm == NULL)
---
>   if strm == )
687c687
<   if (strm == NULL)
---
>   if  == )
687c687
<   if (strm == NULL)
---
>   if strm  )
687c687
<   if (strm == NULL)
---
>   if   )
687c687
<   if (strm == NULL)
---
>   if ( == NULL)
687c687
<   if (strm == NULL)
---
>   if (  NULL)
687c687
<   if (strm == NULL)
---
>   if ( == )
687c687
<   if (strm == NULL)
---
>   if (  )
687c687
<   if (strm == NULL)
---
>   if ( == NULL
687c687
<   if (strm == NULL)
---
>   if (  NULL
687c687
<   if (strm == NULL)
---
>   if ( == 
687c687
<   if (strm == NULL)
---
>   if (  
687c687
<   if (strm == NULL)
---
>   if (strm  NULL)
687c687
<   if (strm == NULL)
---
>   if (strm  )
(92.1 %, 16249 bytes)
687c687
<   if (  NULL)
---
>   if (  
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
687c687
<   if (  NULL)
---
>   if (  NULL
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
687,688c687,688
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
688c688
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
688c688
<     return BZ_PARAM_ERROR;
---
>      ;
688c688
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(92.1 %, 16243 bytes)
688c688
<      BZ_PARAM_ERROR;
---
>      ;
688c688
<      BZ_PARAM_ERROR;
---
>      
(92.1 %, 16229 bytes)
688c688
<      ;
---
>      
688,689c688,689
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
688,689c688,689
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
688,689c688,689
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(92.1 %, 16228 bytes)
689c689
<   s = strm->state;
---
>    = strm->state;
689c689
<   s = strm->state;
---
>     strm->state;
689c689
<   s = strm->state;
---
>    = ->state;
689c689
<   s = strm->state;
---
>     ->state;
689c689
<   s = strm->state;
---
>    = strmstate;
689c689
<   s = strm->state;
---
>     strmstate;
689c689
<   s = strm->state;
---
>    = state;
689c689
<   s = strm->state;
---
>     state;
689c689
<   s = strm->state;
---
>   s  strm->state;
689c689
<   s = strm->state;
---
>   s  ->state;
689c689
<   s = strm->state;
---
>   s  strmstate;
689c689
<   s = strm->state;
---
>   s  state;
689c689
<   s = strm->state;
---
>   s  strm->;
(92.1 %, 16226 bytes)
689c689
<     strm->state;
---
>     state;
689c689
<     strm->state;
---
>     ->;
689c689
<     strm->state;
---
>     ;
689c689
<     strm->state;
---
>     ->state
689c689
<     strm->state;
---
>     state
689c689
<     strm->state;
---
>     ->
689c689
<     strm->state;
---
>     
(92.1 %, 16215 bytes)
689,690c689,690
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
689,690c689,690
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
689,690c689,690
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
689,690c689,690
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
689,690c689,690
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
690c690
<   if (s == NULL)
---
>    (s == NULL)
690c690
<   if (s == NULL)
---
>    s == NULL)
690c690
<   if (s == NULL)
---
>    ( == NULL)
690c690
<   if (s == NULL)
---
>     == NULL)
690c690
<   if (s == NULL)
---
>    (s  NULL)
690c690
<   if (s == NULL)
---
>    s  NULL)
690c690
<   if (s == NULL)
---
>    (  NULL)
690c690
<   if (s == NULL)
---
>      NULL)
690c690
<   if (s == NULL)
---
>   if s == NULL)
690c690
<   if (s == NULL)
---
>   if  == NULL)
690c690
<   if (s == NULL)
---
>   if s  NULL)
690c690
<   if (s == NULL)
---
>   if   NULL)
690c690
<   if (s == NULL)
---
>   if s == )
690c690
<   if (s == NULL)
---
>   if  == )
690c690
<   if (s == NULL)
---
>   if s  )
690c690
<   if (s == NULL)
---
>   if   )
690c690
<   if (s == NULL)
---
>   if ( == NULL)
690c690
<   if (s == NULL)
---
>   if (  NULL)
690c690
<   if (s == NULL)
---
>   if ( == )
690c690
<   if (s == NULL)
---
>   if (  )
690c690
<   if (s == NULL)
---
>   if ( == NULL
690c690
<   if (s == NULL)
---
>   if (  NULL
690c690
<   if (s == NULL)
---
>   if ( == 
690c690
<   if (s == NULL)
---
>   if (  
690c690
<   if (s == NULL)
---
>   if (s  NULL)
690c690
<   if (s == NULL)
---
>   if (s  )
(92.1 %, 16212 bytes)
690c690
<   if (  NULL)
---
>   if (  
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
690c690
<   if (  NULL)
---
>   if (  NULL
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
690,691c690,691
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
691c691
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
691c691
<     return BZ_PARAM_ERROR;
---
>      ;
(92.1 %, 16206 bytes)
691c691
<      BZ_PARAM_ERROR;
---
>      ;
691c691
<      BZ_PARAM_ERROR;
---
>      
691,692c691,692
<      BZ_PARAM_ERROR;
<   s_0 != strm;
---
>      ;
>    != strm;
(92.1 %, 16192 bytes)
691c691
<      ;
---
>      
691,692c691,692
<      ;
<   s_0 != strm;
---
>      
>    != strm;
691,692c691,692
<      ;
<   s_0 != strm;
---
>      
>   s_0  strm;
691,692c691,692
<      ;
<   s_0 != strm;
---
>      
>     strm;
(92.1 %, 16191 bytes)
692c692
<   s_0 != strm;
---
>    != strm;
692c692
<   s_0 != strm;
---
>     strm;
692c692
<   s_0 != strm;
---
>    != ;
692c692
<   s_0 != strm;
---
>     ;
(92.1 %, 16186 bytes)
692c692
<     strm;
---
>     
692c692
<     strm;
---
>     ;
694c694
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
692c692
<     strm;
---
>     
694c694
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
(92.1 %, 16181 bytes)
694c694
<   return BZ_PARAM_ERROR;
---
>    ;
694c694
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR
694c694
<   return BZ_PARAM_ERROR;
---
>    
(92.1 %, 16161 bytes)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>    (s->arr1 != NULL)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>   if s->arr1 != NULL)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>    s->arr1 != NULL)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>   if (->arr1 != NULL)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>    (->arr1 != NULL)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>   if ->arr1 != NULL)
694c694
<    ;
---
>    
696c696
<   if (s->arr1 != NULL)
---
>    ->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    (s->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    s->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    (->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    ->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    (sarr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    sarr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    (arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>    arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if s->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if ->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if sarr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if s-> != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if -> != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if s != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if  != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (->arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (arr1 != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (-> != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if ( != NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (->arr1  NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (arr1  NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (->  NULL)
696c696
<   if (s->arr1 != NULL)
---
>   if (  NULL)
(92.1 %, 16156 bytes)
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (  )
>     (s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (  NULL
>     (s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (  
>     (s->arr1);
696c696
<   if (arr1  NULL)
---
>   if (arr1  )
696c696
<   if (arr1  NULL)
---
>   if (arr1  
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  )
>     (s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  
>     (s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  )
>     BZFREEs->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  
>     BZFREEs->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  )
>     s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  
>     s->arr1);
696c696
<   if (arr1  NULL)
---
>   if (arr1  NULL
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     (s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     BZFREEs->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     s->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     BZFREE(->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     (->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     BZFREE->arr1);
696,697c696,697
<   if (arr1  NULL)
<     BZFREE(s->arr1);
---
>   if (arr1  NULL
>     ->arr1);
697c697
<     BZFREE(s->arr1);
---
>     (s->arr1);
697c697
<     BZFREE(s->arr1);
---
>     s->arr1);
697c697
<     BZFREE(s->arr1);
---
>     (->arr1);
697c697
<     BZFREE(s->arr1);
---
>     ->arr1);
697c697
<     BZFREE(s->arr1);
---
>     (sarr1);
697c697
<     BZFREE(s->arr1);
---
>     sarr1);
697c697
<     BZFREE(s->arr1);
---
>     (arr1);
697c697
<     BZFREE(s->arr1);
---
>     arr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREEs->arr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE->arr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREEsarr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREEarr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREEs->);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE->);
697c697
<     BZFREE(s->arr1);
---
>     BZFREEs);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE(->arr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE(arr1);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE(->);
697c697
<     BZFREE(s->arr1);
---
>     BZFREE();
(92.1 %, 16153 bytes)
697c697
<     BZFREE(arr1);
---
>     BZFREE(;
697c697
<     BZFREE(arr1);
---
>     BZFREE()
697c697
<     BZFREE(arr1);
---
>     BZFREE(
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE();
>    (s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(;
>    (s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE()
>    (s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(
>    (s->arr2 != NULL)
697c697
<     BZFREE(arr1);
---
>     BZFREE(arr1;
697c697
<     BZFREE(arr1);
---
>     BZFREE(arr1
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1;
>    (s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1
>    (s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1;
>   if s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1
>   if s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1;
>    s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1
>    s->arr2 != NULL)
697c697
<     BZFREE(arr1);
---
>     BZFREE(arr1)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>    (s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>   if s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>    s->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>   if (->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>    (->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>   if ->arr2 != NULL)
697,698c697,698
<     BZFREE(arr1);
<   if (s->arr2 != NULL)
---
>     BZFREE(arr1)
>    ->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    (s->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    s->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    (->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    ->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    (sarr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    sarr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    (arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>    arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if s->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if ->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if sarr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if s-> != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if -> != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if s != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if  != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (->arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (arr2 != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (-> != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if ( != NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (->arr2  NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (arr2  NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (->  NULL)
698c698
<   if (s->arr2 != NULL)
---
>   if (  NULL)
(92.1 %, 16148 bytes)
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (  )
>     ;
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (  NULL
>     ;
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (  
>     ;
698c698
<   if (arr2  NULL)
---
>   if (arr2  )
698c698
<   if (arr2  NULL)
---
>   if (arr2  
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  )
>     ;
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  
>     ;
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  )
>     BZFREE
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  
>     BZFREE
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  )
>     
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  
>     
698c698
<   if (arr2  NULL)
---
>   if (arr2  NULL
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  NULL
>     ;
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  NULL
>     BZFREE
698,699c698,699
<   if (arr2  NULL)
<     BZFREE;
---
>   if (arr2  NULL
>     
698c698
<   if (arr2  NULL)
---
>   if (arr2  NULL
700c700
<   if (s->ftab != NULL)
---
>    (s->ftab != NULL)
698,700c698,700
<   if (arr2  NULL)
<     BZFREE;
<   if (s->ftab != NULL)
---
>   if (arr2  NULL
>     ;
>    (s->ftab != NULL)
698,700c698,700
<   if (arr2  NULL)
<     BZFREE;
<   if (s->ftab != NULL)
---
>   if (arr2  NULL
>     BZFREE
>    (s->ftab != NULL)
698,700c698,700
<   if (arr2  NULL)
<     BZFREE;
<   if (s->ftab != NULL)
---
>   if (arr2  NULL
>     
>    (s->ftab != NULL)
699c699
<     BZFREE;
---
>     ;
699c699
<     BZFREE;
---
>     
(92.1 %, 16142 bytes)
699c699
<     ;
---
>     
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>    (s->ftab != NULL)
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>   if s->ftab != NULL)
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>    s->ftab != NULL)
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>   if (->ftab != NULL)
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>    (->ftab != NULL)
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>   if ->ftab != NULL)
699,700c699,700
<     ;
<   if (s->ftab != NULL)
---
>     
>    ->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    (s->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    s->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    (->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    ->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    (sftab != NULL)
(92.1 %, 16141 bytes)
700c700
<   if (s->ftab != NULL)
---
>    (s->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    s->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    (->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    ->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    (sftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    sftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    (ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>    ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if s->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if ->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if sftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if s-> != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if -> != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if s != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if  != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (->ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (ftab != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (-> != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if ( != NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (->ftab  NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (ftab  NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (->  NULL)
700c700
<   if (s->ftab != NULL)
---
>   if (  NULL)
(92.1 %, 16136 bytes)
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (  )
>     ;
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (  NULL
>     ;
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (  
>     ;
700c700
<   if (ftab  NULL)
---
>   if (ftab  )
700c700
<   if (ftab  NULL)
---
>   if (ftab  
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  )
>     ;
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  
>     ;
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  )
>     BZFREE
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  
>     BZFREE
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  )
>     
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  
>     
700c700
<   if (ftab  NULL)
---
>   if (ftab  NULL
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  NULL
>     ;
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  NULL
>     BZFREE
700,701c700,701
<   if (ftab  NULL)
<     BZFREE;
---
>   if (ftab  NULL
>     
700c700
<   if (ftab  NULL)
---
>   if (ftab  NULL
702c702
<   0;
---
>   ;
700,702c700,702
<   if (ftab  NULL)
<     BZFREE;
<   0;
---
>   if (ftab  NULL
>     ;
>   ;
700,702c700,702
<   if (ftab  NULL)
<     BZFREE;
<   0;
---
>   if (ftab  NULL
>     BZFREE
>   ;
700,702c700,702
<   if (ftab  NULL)
<     BZFREE;
<   0;
---
>   if (ftab  NULL
>     
>   ;
701c701
<     BZFREE;
---
>     ;
701c701
<     BZFREE;
---
>     
(92.1 %, 16130 bytes)
701c701
<     ;
---
>     
701,702c701,702
<     ;
<   0;
---
>     
>   ;
701,702c701,702
<     ;
<   0;
---
>     
>   0
(92.1 %, 16129 bytes)
702c702
<   0;
---
>   ;
702c702
<   0;
---
>   
702c702
<   0;
---
>   ;
704c704
<   strm->state = NULL;
---
>   ->state = NULL;
(92.1 %, 16128 bytes)
702c702
<   ;
---
>   
702c702
<   ;
---
>   
704c704
<   strm->state = NULL;
---
>   ->state = NULL;
702c702
<   ;
---
>   
704c704
<   strm->state = NULL;
---
>   strmstate = NULL;
702c702
<   ;
---
>   
704c704
<   strm->state = NULL;
---
>   state = NULL;
702c702
<   ;
---
>   
704c704
<   strm->state = NULL;
---
>   strm-> = NULL;
702c702
<   ;
---
>   
704c704
<   strm->state = NULL;
---
>   -> = NULL;
702c702
<   ;
---
>   
704c704
<   strm->state = NULL;
---
>   strm = NULL;
(92.1 %, 16127 bytes)
704c704
<   strm->state = NULL;
---
>   ->state = NULL;
704c704
<   strm->state = NULL;
---
>   state = NULL;
704c704
<   strm->state = NULL;
---
>   -> = NULL;
704c704
<   strm->state = NULL;
---
>    = NULL;
704c704
<   strm->state = NULL;
---
>   ->state  NULL;
704c704
<   strm->state = NULL;
---
>   state  NULL;
704c704
<   strm->state = NULL;
---
>   ->  NULL;
704c704
<   strm->state = NULL;
---
>     NULL;
(92.1 %, 16120 bytes)
704c704
<   state  NULL;
---
>     ;
706c706
<   return BZ_OK;
---
>    BZ_OK;
704c704
<   state  NULL;
---
>     NULL
706c706
<   return BZ_OK;
---
>    BZ_OK;
704c704
<   state  NULL;
---
>     
706c706
<   return BZ_OK;
---
>    BZ_OK;
(92.1 %, 16105 bytes)
704c704,706
<     ;
---
>     
> 
>    ;
706,707d707
<    BZ_OK;
< }
704c704,706
<     ;
---
>     
> 
>    BZ_OK
706,707d707
<    BZ_OK;
< }
704c704,706
<     ;
---
>     
> 
>    
706,707d707
<    BZ_OK;
< }
706c706
<    BZ_OK;
---
>    ;
706c706
<    BZ_OK;
---
>    
(92.1 %, 16100 bytes)
706c706
<    ;
---
>    
706,707c706,707
<    ;
< }
---
>    
> 
706c706
<    ;
---
>    
709c709
< int BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit(
(92.1 %, 16099 bytes)
707c707
< }
---
> 
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
>  BZ_APIBZ2_bzDecompressInit(
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
> int (
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
>  (
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
> int BZ_APIBZ2_bzDecompressInit
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
>  BZ_APIBZ2_bzDecompressInit
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
> int 
707d706
< }
709c708,709
< int BZ_APIBZ2_bzDecompressInit(
---
> 
>  
709c709
< int BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit(
709c709
< int BZ_APIBZ2_bzDecompressInit(
---
>  (
709c709
< int BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
709c709
< int BZ_APIBZ2_bzDecompressInit(
---
>  
709c709
< int BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit(
711c711
<     void) {
---
>     ) {
(92.1 %, 16096 bytes)
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  (
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  (
711c711
<     void) {
---
>     ) {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  
711c711
<     void) {
---
>     ) {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  (
711c711
<     void) {
---
>     void {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  
711c711
<     void) {
---
>     void {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  (
711c711
<     void) {
---
>      {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  
711c711
<     void) {
---
>      {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>     ) {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>     void {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>      {
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>     void) 
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>     ) 
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>     void 
709c709
<  BZ_APIBZ2_bzDecompressInit(
---
>  BZ_APIBZ2_bzDecompressInit
711c711
<     void) {
---
>      
711c711
<     void) {
---
>     ) {
711c711
<     void) {
---
>      {
711c711
<     void) {
---
>     ) 
711c711
<     void) {
---
>      
711,712c711,712
<     void) {
<   int small = 0;
---
>     ) {
>    small = 0;
711,712c711,712
<     void) {
<   int small = 0;
---
>      {
>    small = 0;
711,712c711,712
<     void) {
<   int small = 0;
---
>     ) 
>    small = 0;
711,712c711,712
<     void) {
<   int small = 0;
---
>      
>    small = 0;
(92.1 %, 16092 bytes)
711c711
<     ) {
---
>      {
711c711
<     ) {
---
>      
711,712c711,712
<     ) {
<   int small = 0;
---
>      {
>    small = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>      
>    small = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>      {
>   int  = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>      
>   int  = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>      {
>     = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>      
>     = 0;
711c711
<     ) {
---
>     ) 
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>    small = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>   int  = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>     = 0;
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>   int small  0;
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>    small  0;
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>   int   0;
711,712c711,712
<     ) {
<   int small = 0;
---
>     ) 
>      0;
712c712
<   int small = 0;
---
>    small = 0;
712c712
<   int small = 0;
---
>     = 0;
712c712
<   int small = 0;
---
>    small  0;
712c712
<   int small = 0;
---
>      0;
712c712
<   int small = 0;
---
>    small = ;
712c712
<   int small = 0;
---
>     = ;
712c712
<   int small = 0;
---
>    small  ;
712c712
<   int small = 0;
---
>      ;
712c712
<   int small = 0;
---
>   int  = 0;
712c712
<   int small = 0;
---
>   int   0;
712c712
<   int small = 0;
---
>   int  = ;
712c712
<   int small = 0;
---
>   int   ;
712c712
<   int small = 0;
---
>   int  = 0
712c712
<   int small = 0;
---
>   int   0
712c712
<   int small = 0;
---
>   int  = 
712c712
<   int small = 0;
---
>   int   
712c712
<   int small = 0;
---
>   int small  0;
712c712
<   int small = 0;
---
>   int small  ;
712c712
<   int small = 0;
---
>   int small  0
712c712
<   int small = 0;
---
>   int small  
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small  0;
>    verbosity = 0;
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small  ;
>    verbosity = 0;
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small  0
>    verbosity = 0;
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small  
>    verbosity = 0;
712c712
<   int small = 0;
---
>   int small = ;
712c712
<   int small = 0;
---
>   int small = 
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small = ;
>    verbosity = 0;
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small = 
>    verbosity = 0;
712,713c712,713
<   int small = 0;
<   int verbosity = 0;
---
>   int small = ;
>   int  = 0;
(92.1 %, 16090 bytes)
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>    verbosity = 0;
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>   int  = 0;
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>     = 0;
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>   int verbosity  0;
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>    verbosity  0;
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>   int   0;
712,713c712,713
<   int small  ;
<   int verbosity = 0;
---
>   int small  
>      0;
713c713
<   int verbosity = 0;
---
>    verbosity = 0;
713c713
<   int verbosity = 0;
---
>     = 0;
713c713
<   int verbosity = 0;
---
>    verbosity  0;
713c713
<   int verbosity = 0;
---
>      0;
713c713
<   int verbosity = 0;
---
>    verbosity = ;
713c713
<   int verbosity = 0;
---
>     = ;
713c713
<   int verbosity = 0;
---
>    verbosity  ;
713c713
<   int verbosity = 0;
---
>      ;
713c713
<   int verbosity = 0;
---
>   int  = 0;
713c713
<   int verbosity = 0;
---
>   int   0;
713c713
<   int verbosity = 0;
---
>   int  = ;
713c713
<   int verbosity = 0;
---
>   int   ;
713c713
<   int verbosity = 0;
---
>   int  = 0
713c713
<   int verbosity = 0;
---
>   int   0
713c713
<   int verbosity = 0;
---
>   int  = 
713c713
<   int verbosity = 0;
---
>   int   
713c713
<   int verbosity = 0;
---
>   int verbosity  0;
713c713
<   int verbosity = 0;
---
>   int verbosity  ;
713c713
<   int verbosity = 0;
---
>   int verbosity  0
713c713
<   int verbosity = 0;
---
>   int verbosity  
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity  0;
>    *strm = 0;
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity  ;
>    *strm = 0;
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity  0
>    *strm = 0;
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity  
>    *strm = 0;
713c713
<   int verbosity = 0;
---
>   int verbosity = ;
713c713
<   int verbosity = 0;
---
>   int verbosity = 
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity = ;
>    *strm = 0;
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity = 
>    *strm = 0;
713,714c713,714
<   int verbosity = 0;
<   bz_stream *strm = 0;
---
>   int verbosity = ;
>   bz_stream strm = 0;
(92.1 %, 16088 bytes)
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>    *strm = 0;
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>   bz_stream strm = 0;
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>    strm = 0;
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>   bz_stream * = 0;
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>    * = 0;
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>   bz_stream  = 0;
713,714c713,714
<   int verbosity  ;
<   bz_stream *strm = 0;
---
>   int verbosity  
>     = 0;
714c714
<   bz_stream *strm = 0;
---
>    *strm = 0;
714c714
<   bz_stream *strm = 0;
---
>    strm = 0;
714c714
<   bz_stream *strm = 0;
---
>    * = 0;
714c714
<   bz_stream *strm = 0;
---
>     = 0;
714c714
<   bz_stream *strm = 0;
---
>    *strm  0;
714c714
<   bz_stream *strm = 0;
---
>    strm  0;
714c714
<   bz_stream *strm = 0;
---
>    *  0;
714c714
<   bz_stream *strm = 0;
---
>      0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream strm  0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream   0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream strm = ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream  = ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream strm  ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream   ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *  0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream * = ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *  ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream * = 0
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *  0
714c714
<   bz_stream *strm = 0;
---
>   bz_stream * = 
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *  
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  0;
>    *s;
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  ;
>    *s;
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  0
>    *s;
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  
>    *s;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
714c714
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = ;
>    *s;
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = 
>    *s;
714,715c714,715
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = ;
>   DState s;
(92.2 %, 16086 bytes)
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    *s;
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState s;
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    s;
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState *;
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    *;
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState ;
714,715c714,715
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    ;
715c715
<   DState *s;
---
>    *s;
715c715
<   DState *s;
---
>    s;
715c715
<   DState *s;
---
>    *;
715c715
<   DState *s;
---
>    ;
715c715
<   DState *s;
---
>    *s
715c715
<   DState *s;
---
>    s
715c715
<   DState *s;
---
>    *
715c715
<   DState *s;
---
>    
715c715
<   DState *s;
---
>   DState s;
715c715
<   DState *s;
---
>   DState ;
715c715
<   DState *s;
---
>   DState s
715c715
<   DState *s;
---
>   DState 
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState s;
>    s_12;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState ;
>    s_12;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState s
>    s_12;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState 
>    s_12;
715c715
<   DState *s;
---
>   DState *;
715c715
<   DState *s;
---
>   DState *
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *;
>    s_12;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *
>    s_12;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *;
>   Int32 ;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *
>   Int32 ;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *;
>    ;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *
>    ;
715c715
<   DState *s;
---
>   DState *s
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>    s_12;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>   Int32 ;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>    ;
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>   Int32 s_12
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>    s_12
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>   Int32 
715,716c715,716
<   DState *s;
<   Int32 s_12;
---
>   DState *s
>    
716c716
<   Int32 s_12;
---
>    s_12;
716c716
<   Int32 s_12;
---
>    ;
716c716
<   Int32 s_12;
---
>    s_12
716c716
<   Int32 s_12;
---
>    
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>    s_12;
>    s_11;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>    ;
>    s_11;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>    s_12
>    s_11;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>    
>    s_11;
716c716
<   Int32 s_12;
---
>   Int32 ;
716c716
<   Int32 s_12;
---
>   Int32 
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 ;
>    s_11;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 
>    s_11;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 ;
>   Int32 ;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 
>   Int32 ;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 ;
>    ;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 
>    ;
716c716
<   Int32 s_12;
---
>   Int32 s_12
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>    s_11;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>   Int32 ;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>    ;
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>   Int32 s_11
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>    s_11
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>   Int32 
716,717c716,717
<   Int32 s_12;
<   Int32 s_11;
---
>   Int32 s_12
>    
717c717
<   Int32 s_11;
---
>    s_11;
717c717
<   Int32 s_11;
---
>    ;
717c717
<   Int32 s_11;
---
>    s_11
717c717
<   Int32 s_11;
---
>    
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>    s_11;
>    s_10;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>    ;
>    s_10;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>    s_11
>    s_10;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>    
>    s_10;
717c717
<   Int32 s_11;
---
>   Int32 ;
717c717
<   Int32 s_11;
---
>   Int32 
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 ;
>    s_10;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 
>    s_10;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 ;
>   Bool ;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 
>   Bool ;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 ;
>    ;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 
>    ;
717c717
<   Int32 s_11;
---
>   Int32 s_11
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>    s_10;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>   Bool ;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>    ;
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>   Bool s_10
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>    s_10
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>   Bool 
717,718c717,718
<   Int32 s_11;
<   Bool s_10;
---
>   Int32 s_11
>    
718c718
<   Bool s_10;
---
>    s_10;
718c718
<   Bool s_10;
---
>    ;
718c718
<   Bool s_10;
---
>    s_10
718c718
<   Bool s_10;
---
>    
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>    s_10;
>    s_26;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>    ;
>    s_26;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>    s_10
>    s_26;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>    
>    s_26;
718c718
<   Bool s_10;
---
>   Bool ;
718c718
<   Bool s_10;
---
>   Bool 
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool ;
>    s_26;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool 
>    s_26;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool ;
>   UInt32 ;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool 
>   UInt32 ;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool ;
>    ;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool 
>    ;
718c718
<   Bool s_10;
---
>   Bool s_10
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>    s_26;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>   UInt32 ;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>    ;
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>   UInt32 s_26
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>    s_26
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>   UInt32 
718,719c718,719
<   Bool s_10;
<   UInt32 s_26;
---
>   Bool s_10
>    
719c719
<   UInt32 s_26;
---
>    s_26;
719c719
<   UInt32 s_26;
---
>    ;
719c719
<   UInt32 s_26;
---
>    s_26
719c719
<   UInt32 s_26;
---
>    
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>    s_26;
>    s_7;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>    ;
>    s_7;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>    s_26
>    s_7;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>    
>    s_7;
719c719
<   UInt32 s_26;
---
>   UInt32 ;
719c719
<   UInt32 s_26;
---
>   UInt32 
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 ;
>    s_7;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 
>    s_7;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 ;
>   UInt32 ;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 
>   UInt32 ;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 ;
>    ;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 
>    ;
719c719
<   UInt32 s_26;
---
>   UInt32 s_26
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>    s_7;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>   UInt32 ;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>    ;
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>   UInt32 s_7
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>    s_7
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>   UInt32 
719,720c719,720
<   UInt32 s_26;
<   UInt32 s_7;
---
>   UInt32 s_26
>    
720c720
<   UInt32 s_7;
---
>    s_7;
720c720
<   UInt32 s_7;
---
>    ;
720c720
<   UInt32 s_7;
---
>    s_7
720c720
<   UInt32 s_7;
---
>    
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>    s_7;
>    s_8;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>    ;
>    s_8;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>    s_7
>    s_8;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>    
>    s_8;
720c720
<   UInt32 s_7;
---
>   UInt32 ;
720c720
<   UInt32 s_7;
---
>   UInt32 
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 ;
>    s_8;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 
>    s_8;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 ;
>   Int32 ;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 
>   Int32 ;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 ;
>    ;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 
>    ;
720c720
<   UInt32 s_7;
---
>   UInt32 s_7
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>    s_8;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>   Int32 ;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>    ;
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>   Int32 s_8
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>    s_8
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>   Int32 
720,721c720,721
<   UInt32 s_7;
<   Int32 s_8;
---
>   UInt32 s_7
>    
721c721
<   Int32 s_8;
---
>    s_8;
721c721
<   Int32 s_8;
---
>    ;
721c721
<   Int32 s_8;
---
>    s_8
721c721
<   Int32 s_8;
---
>    
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>    s_8;
>    s_1;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>    ;
>    s_1;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>    s_8
>    s_1;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>    
>    s_1;
721c721
<   Int32 s_8;
---
>   Int32 ;
721c721
<   Int32 s_8;
---
>   Int32 
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 ;
>    s_1;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 
>    s_1;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 ;
>   Int32 ;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 
>   Int32 ;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 ;
>    ;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 
>    ;
721c721
<   Int32 s_8;
---
>   Int32 s_8
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>    s_1;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>   Int32 ;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>    ;
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>   Int32 s_1
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>    s_1
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>   Int32 
721,722c721,722
<   Int32 s_8;
<   Int32 s_1;
---
>   Int32 s_8
>    
722c722
<   Int32 s_1;
---
>    s_1;
722c722
<   Int32 s_1;
---
>    ;
722c722
<   Int32 s_1;
---
>    s_1
722c722
<   Int32 s_1;
---
>    
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>    s_1;
>    *s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>    ;
>    *s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>    s_1
>    *s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>    
>    *s_0;
722c722
<   Int32 s_1;
---
>   Int32 ;
722c722
<   Int32 s_1;
---
>   Int32 
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 ;
>    *s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 
>    *s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 ;
>   bz_stream s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 
>   bz_stream s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 ;
>    s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 
>    s_0;
722c722
<   Int32 s_1;
---
>   Int32 s_1
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    *s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>   bz_stream s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    s_0;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>   bz_stream *;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    *;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>   bz_stream ;
722,723c722,723
<   Int32 s_1;
<   bz_stream *s_0;
---
>   Int32 s_1
>    ;
723c723
<   bz_stream *s_0;
---
>    *s_0;
723c723
<   bz_stream *s_0;
---
>    s_0;
723c723
<   bz_stream *s_0;
---
>    *;
723c723
<   bz_stream *s_0;
---
>    ;
723c723
<   bz_stream *s_0;
---
>    *s_0
723c723
<   bz_stream *s_0;
---
>    s_0
723c723
<   bz_stream *s_0;
---
>    *
723c723
<   bz_stream *s_0;
---
>    
723c723
<   bz_stream *s_0;
---
>   bz_stream s_0;
723c723
<   bz_stream *s_0;
---
>   bz_stream ;
723c723
<   bz_stream *s_0;
---
>   bz_stream s_0
723c723
<   bz_stream *s_0;
---
>   bz_stream 
723c723
<   bz_stream *s_0;
---
>   bz_stream s_0;
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream ;
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream s_0
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream 
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream *;
723c723
<   bz_stream *s_0;
---
>   bz_stream *
723c723
<   bz_stream *s_0;
---
>   bz_stream *;
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream *
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream *;
725c725
<   !0;
---
>   !;
723c723
<   bz_stream *s_0;
---
>   bz_stream *
725c725
<   !0;
---
>   !;
723c723
<   bz_stream *s_0;
---
>   bz_stream *;
725c725
<   !0;
---
>   ;
723c723
<   bz_stream *s_0;
---
>   bz_stream *
725c725
<   !0;
---
>   ;
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   0;
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   !;
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   ;
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   !0
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   0
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   !
723c723
<   bz_stream *s_0;
---
>   bz_stream *s_0
725c725
<   !0;
---
>   
725c725
<   !0;
---
>   0;
(92.2 %, 16083 bytes)
725c725
<   ;
---
>   
727c727
<   return BZ_CONFIG_ERROR;
---
>    ;
725c725
<   ;
---
>   
727c727
<   return BZ_CONFIG_ERROR;
---
>   return BZ_CONFIG_ERROR
725c725
<   ;
---
>   
727c727
<   return BZ_CONFIG_ERROR;
---
>    BZ_CONFIG_ERROR
725c725
<   ;
---
>   
727c727
<   return BZ_CONFIG_ERROR;
---
>   return 
725c725
<   ;
---
>   
727c727
<   return BZ_CONFIG_ERROR;
---
>    
727c727
<   return BZ_CONFIG_ERROR;
---
>    BZ_CONFIG_ERROR;
(92.2 %, 16061 bytes)
727c727
<    ;
---
>    
729c729
<   if (strm == NULL)
---
>    strm == NULL)
727c727
<    ;
---
>    
729c729
<   if (strm == NULL)
---
>   if ( == NULL)
727c727
<    ;
---
>    
729c729
<   if (strm == NULL)
---
>    ( == NULL)
727c727
<    ;
---
>    
729c729
<   if (strm == NULL)
---
>   if  == NULL)
727c727
<    ;
---
>    
729c729
<   if (strm == NULL)
---
>     == NULL)
729c729
<   if (strm == NULL)
---
>    (strm == NULL)
729c729
<   if (strm == NULL)
---
>    strm == NULL)
729c729
<   if (strm == NULL)
---
>    ( == NULL)
729c729
<   if (strm == NULL)
---
>     == NULL)
729c729
<   if (strm == NULL)
---
>    (strm  NULL)
729c729
<   if (strm == NULL)
---
>    strm  NULL)
729c729
<   if (strm == NULL)
---
>    (  NULL)
729c729
<   if (strm == NULL)
---
>      NULL)
729c729
<   if (strm == NULL)
---
>   if strm == NULL)
729c729
<   if (strm == NULL)
---
>   if  == NULL)
729c729
<   if (strm == NULL)
---
>   if strm  NULL)
729c729
<   if (strm == NULL)
---
>   if   NULL)
729c729
<   if (strm == NULL)
---
>   if strm == )
729c729
<   if (strm == NULL)
---
>   if  == )
729c729
<   if (strm == NULL)
---
>   if strm  )
729c729
<   if (strm == NULL)
---
>   if   )
729c729
<   if (strm == NULL)
---
>   if ( == NULL)
729c729
<   if (strm == NULL)
---
>   if (  NULL)
729c729
<   if (strm == NULL)
---
>   if ( == )
729c729
<   if (strm == NULL)
---
>   if (  )
729c729
<   if (strm == NULL)
---
>   if ( == NULL
729c729
<   if (strm == NULL)
---
>   if (  NULL
729c729
<   if (strm == NULL)
---
>   if ( == 
729c729
<   if (strm == NULL)
---
>   if (  
729c729
<   if (strm == NULL)
---
>   if (strm  NULL)
729c729
<   if (strm == NULL)
---
>   if (strm  )
(92.2 %, 16055 bytes)
729c729
<   if (  NULL)
---
>   if (  
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
729c729
<   if (  NULL)
---
>   if (  NULL
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
729,730c729,730
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
730c730
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
730c730
<     return BZ_PARAM_ERROR;
---
>      ;
(92.2 %, 16049 bytes)
730c730
<      BZ_PARAM_ERROR;
---
>      ;
730c730
<      BZ_PARAM_ERROR;
---
>      
730,731c730,731
<      BZ_PARAM_ERROR;
<   small != 0 && small != 1;
---
>      ;
>    != 0 && small != 1;
(92.2 %, 16035 bytes)
730c730
<      ;
---
>      
730,731c730,731
<      ;
<   small != 0 && small != 1;
---
>      
>    != 0 && small != 1;
730,731c730,731
<      ;
<   small != 0 && small != 1;
---
>      
>   small  0 && small != 1;
730,731c730,731
<      ;
<   small != 0 && small != 1;
---
>      
>     0 && small != 1;
(92.2 %, 16034 bytes)
731c731
<   small != 0 && small != 1;
---
>    != 0 && small != 1;
731c731
<   small != 0 && small != 1;
---
>     0 && small != 1;
731c731
<   small != 0 && small != 1;
---
>    !=  && small != 1;
731c731
<   small != 0 && small != 1;
---
>      && small != 1;
731c731
<   small != 0 && small != 1;
---
>    != 0  small != 1;
731c731
<   small != 0 && small != 1;
---
>     0  small != 1;
731c731
<   small != 0 && small != 1;
---
>    !=   small != 1;
731c731
<   small != 0 && small != 1;
---
>       small != 1;
(92.2 %, 16027 bytes)
731c731
<     0 && small != 1;
---
>       small != 1;
731c731
<     0 && small != 1;
---
>      &&  != 1;
731c731
<     0 && small != 1;
---
>        != 1;
731c731
<     0 && small != 1;
---
>      && small  1;
731c731
<     0 && small != 1;
---
>       small  1;
731c731
<     0 && small != 1;
---
>      &&   1;
731c731
<     0 && small != 1;
---
>         1;
(92.2 %, 16024 bytes)
731c731
<       small != 1;
---
>         1;
731c731
<       small != 1;
---
>        != ;
731c731
<       small != 1;
---
>         ;
(92.2 %, 16017 bytes)
731c731
<         1;
---
>         
731c731
<         1;
---
>         ;
733c733
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
731c731
<         1;
---
>         
733c733
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
(92.2 %, 16015 bytes)
733c733
<   return BZ_PARAM_ERROR;
---
>    ;
733c733
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR
733c733
<   return BZ_PARAM_ERROR;
---
>    
(92.2 %, 15995 bytes)
733,734c733,734
<    ;
<   verbosity<0 || verbosity> 4;
---
>    
>   <0 || verbosity> 4;
733,734c733,734
<    ;
<   verbosity<0 || verbosity> 4;
---
>    
>   verbosity0 || verbosity> 4;
733,734c733,734
<    ;
<   verbosity<0 || verbosity> 4;
---
>    
>   0 || verbosity> 4;
733,734c733,734
<    ;
<   verbosity<0 || verbosity> 4;
---
>    
>   verbosity< || verbosity> 4;
733,734c733,734
<    ;
<   verbosity<0 || verbosity> 4;
---
>    
>   < || verbosity> 4;
733,734c733,734
<    ;
<   verbosity<0 || verbosity> 4;
---
>    
>   verbosity || verbosity> 4;
(92.2 %, 15984 bytes)
734c734
<   0 || verbosity> 4;
---
>     > 4;
734c734
<   0 || verbosity> 4;
---
>    || verbosity 4;
734c734
<   0 || verbosity> 4;
---
>     verbosity 4;
734c734
<   0 || verbosity> 4;
---
>    ||  4;
734c734
<   0 || verbosity> 4;
---
>      4;
734c734
<   0 || verbosity> 4;
---
>   0  verbosity> 4;
734c734
<   0 || verbosity> 4;
---
>   0  > 4;
(92.2 %, 15971 bytes)
734c734
<      4;
---
>      
736c736
<   return BZ_PARAM_ERROR;
---
>    ;
734c734
<      4;
---
>      4
734c734
<      4;
---
>      4
736c736
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
734c734
<      4;
---
>      4
736c736
<   return BZ_PARAM_ERROR;
---
>   return ;
734c734
<      4;
---
>      4
736c736
<   return BZ_PARAM_ERROR;
---
>    ;
(92.2 %, 15949 bytes)
736c736
<    ;
---
>    
738c738
<   if (strm->bzalloc == NULL)
---
>    ->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    (strm->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    strm->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    (->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    ->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    (strmbzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    strmbzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    (bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>    bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if strm->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if ->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if strmbzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if strm-> == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if -> == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if strm == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if  == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (-> == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if ( == NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (->bzalloc  NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (bzalloc  NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (->  NULL)
738c738
<   if (strm->bzalloc == NULL)
---
>   if (  NULL)
(92.2 %, 15941 bytes)
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  )
>     ->bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  NULL
>     ->bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (  
>     ->bzalloc = default_bzalloc;
738c738
<   if (bzalloc  NULL)
---
>   if (bzalloc  )
738c738
<   if (bzalloc  NULL)
---
>   if (bzalloc  
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     ->bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     ->bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     strmbzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     strmbzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  )
>     bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  
>     bzalloc = default_bzalloc;
738c738
<   if (bzalloc  NULL)
---
>   if (bzalloc  NULL
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     ->bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strmbzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     bzalloc = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm-> = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     -> = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>     strm = default_bzalloc;
738,739c738,739
<   if (bzalloc  NULL)
<     strm->bzalloc = default_bzalloc;
---
>   if (bzalloc  NULL
>      = default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc = default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc = default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     -> = default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>      = default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     ->bzalloc  default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     bzalloc  default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     ->  default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>       default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     strmbzalloc = default_bzalloc;
739c739
<     strm->bzalloc = default_bzalloc;
---
>     strm = default_bzalloc;
(92.2 %, 15927 bytes)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       
>    strm->bzfree == NULL)
739c739
<       default_bzalloc;
---
>       default_bzalloc
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (strm->bzfree == NULL)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if strm->bzfree == NULL)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    strm->bzfree == NULL)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if (->bzfree == NULL)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    (->bzfree == NULL)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>   if ->bzfree == NULL)
739,740c739,740
<       default_bzalloc;
<   if (strm->bzfree == NULL)
---
>       default_bzalloc
>    ->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    (strm->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    strm->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    (->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    ->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    (strmbzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    strmbzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    (bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>    bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if strm->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if ->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if strmbzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if strm-> == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if -> == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if strm == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if  == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (->bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (bzfree == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (-> == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if ( == NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (->bzfree  NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (bzfree  NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (->  NULL)
740c740
<   if (strm->bzfree == NULL)
---
>   if (  NULL)
(92.2 %, 15919 bytes)
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  )
>     ->bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  NULL
>     ->bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (  
>     ->bzfree = default_bzfree;
740c740
<   if (bzfree  NULL)
---
>   if (bzfree  )
740c740
<   if (bzfree  NULL)
---
>   if (bzfree  
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     ->bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     ->bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     strmbzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     strmbzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  )
>     bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  
>     bzfree = default_bzfree;
740c740
<   if (bzfree  NULL)
---
>   if (bzfree  NULL
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     ->bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strmbzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     bzfree = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm-> = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     -> = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>     strm = default_bzfree;
740,741c740,741
<   if (bzfree  NULL)
<     strm->bzfree = default_bzfree;
---
>   if (bzfree  NULL
>      = default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     ->bzfree = default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     bzfree = default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     -> = default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>      = default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     ->bzfree  default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     bzfree  default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     ->  default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>       default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     strmbzfree = default_bzfree;
741c741
<     strm->bzfree = default_bzfree;
---
>     strm = default_bzfree;
(92.2 %, 15906 bytes)
741c741
<       default_bzfree;
---
>       
743c743
<   s = 0;
---
>     0;
741c741
<       default_bzfree;
---
>       default_bzfree
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>    = 0;
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>   s  0;
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>     0;
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>   s = ;
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>    = ;
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>   s  ;
741c741
<       default_bzfree;
---
>       default_bzfree
743c743
<   s = 0;
---
>     ;
(92.2 %, 15889 bytes)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     
>    s == NULL)
743c743
<     0;
---
>     0
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>    (s == NULL)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>   if s == NULL)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>    s == NULL)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>   if ( == NULL)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>    ( == NULL)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>   if  == NULL)
743,744c743,744
<     0;
<   if (s == NULL)
---
>     0
>     == NULL)
744c744
<   if (s == NULL)
---
>    (s == NULL)
744c744
<   if (s == NULL)
---
>    s == NULL)
744c744
<   if (s == NULL)
---
>    ( == NULL)
744c744
<   if (s == NULL)
---
>     == NULL)
744c744
<   if (s == NULL)
---
>    (s  NULL)
744c744
<   if (s == NULL)
---
>    s  NULL)
744c744
<   if (s == NULL)
---
>    (  NULL)
744c744
<   if (s == NULL)
---
>      NULL)
744c744
<   if (s == NULL)
---
>   if s == NULL)
744c744
<   if (s == NULL)
---
>   if  == NULL)
744c744
<   if (s == NULL)
---
>   if s  NULL)
744c744
<   if (s == NULL)
---
>   if   NULL)
744c744
<   if (s == NULL)
---
>   if s == )
744c744
<   if (s == NULL)
---
>   if  == )
744c744
<   if (s == NULL)
---
>   if s  )
744c744
<   if (s == NULL)
---
>   if   )
744c744
<   if (s == NULL)
---
>   if ( == NULL)
744c744
<   if (s == NULL)
---
>   if (  NULL)
744c744
<   if (s == NULL)
---
>   if ( == )
744c744
<   if (s == NULL)
---
>   if (  )
744c744
<   if (s == NULL)
---
>   if ( == NULL
744c744
<   if (s == NULL)
---
>   if (  NULL
744c744
<   if (s == NULL)
---
>   if ( == 
744c744
<   if (s == NULL)
---
>   if (  
744c744
<   if (s == NULL)
---
>   if (s  NULL)
744c744
<   if (s == NULL)
---
>   if (s  )
(92.2 %, 15886 bytes)
744c744
<   if (  NULL)
---
>   if (  
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      BZ_MEM_ERROR;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      BZ_MEM_ERROR;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>     return ;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>     return ;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  )
>      ;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  
>      ;
744c744
<   if (  NULL)
---
>   if (  NULL
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return ;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      ;
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return BZ_MEM_ERROR
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      BZ_MEM_ERROR
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>     return 
744,745c744,745
<   if (  NULL)
<     return BZ_MEM_ERROR;
---
>   if (  NULL
>      
745c745
<     return BZ_MEM_ERROR;
---
>      BZ_MEM_ERROR;
745c745
<     return BZ_MEM_ERROR;
---
>      ;
(92.3 %, 15880 bytes)
745c745
<      BZ_MEM_ERROR;
---
>      ;
745c745
<      BZ_MEM_ERROR;
---
>      
745,746c745,746
<      BZ_MEM_ERROR;
<   s_0 = strm;
---
>      ;
>    = strm;
745,746c745,746
<      BZ_MEM_ERROR;
<   s_0 = strm;
---
>      
>    = strm;
745,746c745,746
<      BZ_MEM_ERROR;
<   s_0 = strm;
---
>      ;
>   s_0  strm;
745,746c745,746
<      BZ_MEM_ERROR;
<   s_0 = strm;
---
>      
>   s_0  strm;
745,746c745,746
<      BZ_MEM_ERROR;
<   s_0 = strm;
---
>      ;
>     strm;
(92.3 %, 15868 bytes)
745c745
<      ;
---
>      
745,746c745,746
<      ;
<   s_0 = strm;
---
>      
>    = strm;
745,746c745,746
<      ;
<   s_0 = strm;
---
>      
>   s_0  strm;
745,746c745,746
<      ;
<   s_0 = strm;
---
>      
>     strm;
(92.3 %, 15867 bytes)
746c746
<   s_0 = strm;
---
>    = strm;
746c746
<   s_0 = strm;
---
>     strm;
746c746
<   s_0 = strm;
---
>    = ;
746c746
<   s_0 = strm;
---
>     ;
(92.3 %, 15863 bytes)
746c746
<     strm;
---
>     
746,747c746,747
<     strm;
<   strm->state = s;
---
>     ;
>   ->state = s;
746,747c746,747
<     strm;
<   strm->state = s;
---
>     
>   ->state = s;
746,747c746,747
<     strm;
<   strm->state = s;
---
>     ;
>   strmstate = s;
746,747c746,747
<     strm;
<   strm->state = s;
---
>     
>   strmstate = s;
746,747c746,747
<     strm;
<   strm->state = s;
---
>     ;
>   state = s;
746,747c746,747
<     strm;
<   strm->state = s;
---
>     
>   state = s;
746c746
<     strm;
---
>     strm
746,747c746,747
<     strm;
<   strm->state = s;
---
>     strm
>   ->state = s;
(92.3 %, 15858 bytes)
747c747
<   strm->state = s;
---
>   state = s;
747c747
<   strm->state = s;
---
>   -> = s;
747c747
<   strm->state = s;
---
>    = s;
747c747
<   strm->state = s;
---
>   ->state  s;
747c747
<   strm->state = s;
---
>   state  s;
747c747
<   strm->state = s;
---
>   ->  s;
747c747
<   strm->state = s;
---
>     s;
747c747
<   strm->state = s;
---
>   strmstate = s;
747c747
<   strm->state = s;
---
>   strm = s;
747c747
<   strm->state = s;
---
>   strmstate  s;
747c747
<   strm->state = s;
---
>   strm  s;
747c747
<   strm->state = s;
---
>   strmstate = ;
747c747
<   strm->state = s;
---
>   strm = ;
747c747
<   strm->state = s;
---
>   strmstate  ;
747c747
<   strm->state = s;
---
>   strm  ;
(92.3 %, 15846 bytes)
747,748c747,748
<     s;
<   s_1 = BZ_X_MAGIC_1;
---
>     
>     BZ_X_MAGIC_1;
747c747
<     s;
---
>     s
747,748c747,748
<     s;
<   s_1 = BZ_X_MAGIC_1;
---
>     s
>    = BZ_X_MAGIC_1;
(92.3 %, 15840 bytes)
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     
>     0;
748c748
<     BZ_X_MAGIC_1;
---
>     BZ_X_MAGIC_1
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>    = 0;
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>   s_8  0;
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>     0;
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>   s_8 = ;
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>    = ;
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>   s_8  ;
748,749c748,749
<     BZ_X_MAGIC_1;
<   s_8 = 0;
---
>     BZ_X_MAGIC_1
>     ;
(92.3 %, 15823 bytes)
748a749
>     
750d750
<   s_7 = 0;
749c749
<     0;
---
>     0
749,750c749,750
<     0;
<   s_7 = 0;
---
>     0
>    = 0;
749,750c749,750
<     0;
<   s_7 = 0;
---
>     0
>   s_7  0;
748a749
>     0
750d750
<   s_7 = 0;
749,750c749,750
<     0;
<   s_7 = 0;
---
>     0
>   s_7 = ;
749,750c749,750
<     0;
<   s_7 = 0;
---
>     0
>    = ;
749,750c749,750
<     0;
<   s_7 = 0;
---
>     0
>   s_7  ;
749,750c749,750
<     0;
<   s_7 = 0;
---
>     0
>     ;
(92.3 %, 15817 bytes)
749a750
>     
751d751
<   s_26 = 0;
750c750
<     0;
---
>     0
750,751c750,751
<     0;
<   s_26 = 0;
---
>     0
>    = 0;
750,751c750,751
<     0;
<   s_26 = 0;
---
>     0
>   s_26  0;
749a750
>     0
751d751
<   s_26 = 0;
750,751c750,751
<     0;
<   s_26 = 0;
---
>     0
>   s_26 = ;
750,751c750,751
<     0;
<   s_26 = 0;
---
>     0
>    = ;
750,751c750,751
<     0;
<   s_26 = 0;
---
>     0
>   s_26  ;
750,751c750,751
<     0;
<   s_26 = 0;
---
>     0
>     ;
(92.3 %, 15810 bytes)
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     
>   total_in_lo32 = 0;
751c751
<     0;
---
>     0
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>   ->total_in_lo32 = 0;
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>   strmtotal_in_lo32 = 0;
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>   total_in_lo32 = 0;
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>   strm-> = 0;
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>   -> = 0;
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>   strm = 0;
751,752c751,752
<     0;
<   strm->total_in_lo32 = 0;
---
>     0
>    = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32 = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32 = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>   -> = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>    = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>   ->total_in_lo32  0;
752c752
<   strm->total_in_lo32 = 0;
---
>   total_in_lo32  0;
752c752
<   strm->total_in_lo32 = 0;
---
>   ->  0;
752c752
<   strm->total_in_lo32 = 0;
---
>     0;
752c752
<   strm->total_in_lo32 = 0;
---
>   strmtotal_in_lo32 = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>   strm = 0;
752c752
<   strm->total_in_lo32 = 0;
---
>   strmtotal_in_lo32  0;
752c752
<   strm->total_in_lo32 = 0;
---
>   strm  0;
752c752
<   strm->total_in_lo32 = 0;
---
>   strmtotal_in_lo32 = ;
(92.3 %, 15790 bytes)
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     
>   total_in_hi32 = 0;
752c752
<     0;
---
>     0
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>   ->total_in_hi32 = 0;
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>   strmtotal_in_hi32 = 0;
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>   total_in_hi32 = 0;
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>   strm-> = 0;
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>   -> = 0;
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>   strm = 0;
752,753c752,753
<     0;
<   strm->total_in_hi32 = 0;
---
>     0
>    = 0;
753c753
<   strm->total_in_hi32 = 0;
---
>   ->total_in_hi32 = 0;
753c753
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32 = 0;
753c753
<   strm->total_in_hi32 = 0;
---
>   -> = 0;
753c753
<   strm->total_in_hi32 = 0;
---
>    = 0;
753c753
<   strm->total_in_hi32 = 0;
---
>   ->total_in_hi32  0;
753c753
<   strm->total_in_hi32 = 0;
---
>   total_in_hi32  0;
753c753
<   strm->total_in_hi32 = 0;
---
>   ->  0;
753c753
<   strm->total_in_hi32 = 0;
---
>     0;
753c753
<   strm->total_in_hi32 = 0;
---
>   strmtotal_in_hi32 = 0;
753c753
<   strm->total_in_hi32 = 0;
---
>   strm = 0;
(92.3 %, 15770 bytes)
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     
>   total_out_lo32 = 0;
753c753
<     0;
---
>     0
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   ->total_out_lo32 = 0;
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strmtotal_out_lo32 = 0;
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   total_out_lo32 = 0;
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm-> = 0;
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   -> = 0;
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>   strm = 0;
753,754c753,754
<     0;
<   strm->total_out_lo32 = 0;
---
>     0
>    = 0;
754c754
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32 = 0;
754c754
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32 = 0;
754c754
<   strm->total_out_lo32 = 0;
---
>   -> = 0;
754c754
<   strm->total_out_lo32 = 0;
---
>    = 0;
754c754
<   strm->total_out_lo32 = 0;
---
>   ->total_out_lo32  0;
754c754
<   strm->total_out_lo32 = 0;
---
>   total_out_lo32  0;
754c754
<   strm->total_out_lo32 = 0;
---
>   ->  0;
754c754
<   strm->total_out_lo32 = 0;
---
>     0;
754c754
<   strm->total_out_lo32 = 0;
---
>   strmtotal_out_lo32 = 0;
754c754
<   strm->total_out_lo32 = 0;
---
>   strm = 0;
(92.3 %, 15749 bytes)
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     
>   total_out_hi32 = 0;
754c754
<     0;
---
>     0
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   ->total_out_hi32 = 0;
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strmtotal_out_hi32 = 0;
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   total_out_hi32 = 0;
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm-> = 0;
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   -> = 0;
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>   strm = 0;
754,755c754,755
<     0;
<   strm->total_out_hi32 = 0;
---
>     0
>    = 0;
755c755
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32 = 0;
755c755
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32 = 0;
755c755
<   strm->total_out_hi32 = 0;
---
>   -> = 0;
755c755
<   strm->total_out_hi32 = 0;
---
>    = 0;
755c755
<   strm->total_out_hi32 = 0;
---
>   ->total_out_hi32  0;
755c755
<   strm->total_out_hi32 = 0;
---
>   total_out_hi32  0;
755c755
<   strm->total_out_hi32 = 0;
---
>   ->  0;
755c755
<   strm->total_out_hi32 = 0;
---
>     0;
755c755
<   strm->total_out_hi32 = 0;
---
>   strmtotal_out_hi32 = 0;
755c755
<   strm->total_out_hi32 = 0;
---
>   strm = 0;
(92.3 %, 15728 bytes)
755,756c755,756
<     0;
<   s_10 = small;
---
>     
>     small;
755c755
<     0;
---
>     0
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>    = small;
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>   s_10  small;
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>     small;
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>   s_10 = ;
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>    = ;
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>   s_10  ;
755,756c755,756
<     0;
<   s_10 = small;
---
>     0
>     ;
(92.3 %, 15721 bytes)
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     
>   ll4 = NULL;
756c756
<     small;
---
>     small
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>   ->ll4 = NULL;
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>   sll4 = NULL;
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>   ll4 = NULL;
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>   s-> = NULL;
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>   -> = NULL;
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>   s = NULL;
756,757c756,757
<     small;
<   s->ll4 = NULL;
---
>     small
>    = NULL;
757c757
<   s->ll4 = NULL;
---
>   ->ll4 = NULL;
757c757
<   s->ll4 = NULL;
---
>   ll4 = NULL;
757c757
<   s->ll4 = NULL;
---
>   -> = NULL;
757c757
<   s->ll4 = NULL;
---
>    = NULL;
757c757
<   s->ll4 = NULL;
---
>   ->ll4  NULL;
757c757
<   s->ll4 = NULL;
---
>   ll4  NULL;
(92.3 %, 15714 bytes)
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>     
>   ->ll16 = NULL;
757c757
<    = NULL;
---
>    = ;
757c757
<    = NULL;
---
>    = 
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = ;
>   ->ll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = 
>   ->ll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = ;
>   sll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = 
>   sll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = ;
>   ll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = 
>   ll16 = NULL;
757c757
<    = NULL;
---
>    = NULL
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   ->ll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   sll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   ll16 = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   s-> = NULL;
757,758c757,758
<    = NULL;
<   s->ll16 = NULL;
---
>    = NULL
>   -> = NULL;
(92.3 %, 15709 bytes)
758c758
<   s->ll16 = NULL;
---
>   ll16 = NULL;
758c758
<   s->ll16 = NULL;
---
>   -> = NULL;
758c758
<   s->ll16 = NULL;
---
>    = NULL;
758c758
<   s->ll16 = NULL;
---
>   ->ll16  NULL;
758c758
<   s->ll16 = NULL;
---
>   ll16  NULL;
758c758
<   s->ll16 = NULL;
---
>   ->  NULL;
758c758
<   s->ll16 = NULL;
---
>     NULL;
(92.3 %, 15705 bytes)
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>     ;
>   ->tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>     NULL
>   ->tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>     
>   ->tt = NULL;
758c758
<   ll16  NULL;
---
>   ll16  ;
758c758
<   ll16  NULL;
---
>   ll16  
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  ;
>   ->tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  
>   ->tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  ;
>   stt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  
>   stt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  ;
>   tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  
>   tt = NULL;
758c758
<   ll16  NULL;
---
>   ll16  NULL
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   ->tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   stt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   tt = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   s-> = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   -> = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>   s = NULL;
758,759c758,759
<   ll16  NULL;
<   s->tt = NULL;
---
>   ll16  NULL
>    = NULL;
759c759
<   s->tt = NULL;
---
>   ->tt = NULL;
759c759
<   s->tt = NULL;
---
>   tt = NULL;
759c759
<   s->tt = NULL;
---
>   -> = NULL;
759c759
<   s->tt = NULL;
---
>    = NULL;
759c759
<   s->tt = NULL;
---
>   ->tt  NULL;
759c759
<   s->tt = NULL;
---
>   tt  NULL;
759c759
<   s->tt = NULL;
---
>   ->  NULL;
759c759
<   s->tt = NULL;
---
>     NULL;
(92.3 %, 15701 bytes)
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>     ;
>    = 0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>     NULL
>    = 0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>     
>    = 0;
759c759
<   tt  NULL;
---
>   tt  ;
759c759
<   tt  NULL;
---
>   tt  
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  ;
>    = 0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  
>    = 0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  ;
>   s_11  0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  
>   s_11  0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  ;
>     0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  
>     0;
759c759
<   tt  NULL;
---
>   tt  NULL
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>    = 0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>   s_11  0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>     0;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>   s_11 = ;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>    = ;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>   s_11  ;
759,760c759,760
<   tt  NULL;
<   s_11 = 0;
---
>   tt  NULL
>     ;
760c760
<   s_11 = 0;
---
>    = 0;
760c760
<   s_11 = 0;
---
>     0;
(92.3 %, 15694 bytes)
759a760
>     
761d761
<   s_12 = verbosity;
761c761
<   s_12 = verbosity;
---
>    = verbosity;
761c761
<   s_12 = verbosity;
---
>     verbosity;
(92.3 %, 15679 bytes)
761c761
<     ;
---
>     
763c763
<   return BZ_OK;
---
>    
763c763
<   return BZ_OK;
---
>    BZ_OK;
763c763
<   return BZ_OK;
---
>    ;
(92.4 %, 15673 bytes)
763c763
<    BZ_OK;
---
>    ;
763c763
<    BZ_OK;
---
>    
(92.4 %, 15668 bytes)
763c763
<    ;
---
>    
763,764c763,764
<    ;
< }
---
>    
> 
763c763
<    ;
---
>    
766c766
< int BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress(void) {
(92.4 %, 15667 bytes)
764c764
< }
---
> 
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
>  BZ_APIBZ2_bzDecompress(void) {
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
> int (void) {
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
>  (void) {
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
> int BZ_APIBZ2_bzDecompressvoid) {
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
>  BZ_APIBZ2_bzDecompressvoid) {
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
> int void) {
764d763
< }
766c765,766
< int BZ_APIBZ2_bzDecompress(void) {
---
> 
>  void) {
766c766
< int BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress(void) {
766c766
< int BZ_APIBZ2_bzDecompress(void) {
---
>  (void) {
766c766
< int BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompressvoid) {
766c766
< int BZ_APIBZ2_bzDecompress(void) {
---
>  void) {
766c766
< int BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress() {
(92.4 %, 15664 bytes)
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  (void) {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  void) {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  () {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  ) {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  (void {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  void {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  ( {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>   {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompressvoid) {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress) {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompressvoid {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompressvoid) 
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress) 
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompressvoid 
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress 
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress() {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress( {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress() 
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress( 
766,767c766,767
<  BZ_APIBZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() {
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( {
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( 
>    *strm = 0;
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress(void {
766c766
<  BZ_APIBZ2_bzDecompress(void) {
---
>  BZ_APIBZ2_bzDecompress(void 
766,767c766,767
<  BZ_APIBZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress(void {
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress(void 
>    *strm = 0;
(92.4 %, 15660 bytes)
766c766
<  BZ_APIBZ2_bzDecompress() {
---
>  BZ_APIBZ2_bzDecompress( {
766c766
<  BZ_APIBZ2_bzDecompress() {
---
>  BZ_APIBZ2_bzDecompress( 
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( {
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( 
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( {
>   bz_stream strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( 
>   bz_stream strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( {
>    strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress( 
>    strm = 0;
766c766
<  BZ_APIBZ2_bzDecompress() {
---
>  BZ_APIBZ2_bzDecompress() 
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>    *strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>   bz_stream strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>    strm = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>   bz_stream * = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>    * = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>   bz_stream  = 0;
766,767c766,767
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompress() 
>     = 0;
767c767
<   bz_stream *strm = 0;
---
>    *strm = 0;
767c767
<   bz_stream *strm = 0;
---
>    strm = 0;
767c767
<   bz_stream *strm = 0;
---
>    * = 0;
767c767
<   bz_stream *strm = 0;
---
>     = 0;
767c767
<   bz_stream *strm = 0;
---
>    *strm  0;
767c767
<   bz_stream *strm = 0;
---
>    strm  0;
767c767
<   bz_stream *strm = 0;
---
>    *  0;
767c767
<   bz_stream *strm = 0;
---
>      0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream strm  0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream   0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream strm = ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream  = ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream strm  ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream   ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *  0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream * = ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *  ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream * = 0
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *  0
767c767
<   bz_stream *strm = 0;
---
>   bz_stream * = 
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *  
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  0;
>    *s;
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  ;
>    *s;
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  0
>    *s;
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  
>    *s;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
767c767
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = ;
>    *s;
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = 
>    *s;
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = ;
>   DState s;
767,768c767,768
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = 
>   DState s;
(92.4 %, 15658 bytes)
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    *s;
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState s;
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    s;
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState *;
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    *;
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState ;
767,768c767,768
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    ;
768c768
<   DState *s;
---
>    *s;
768c768
<   DState *s;
---
>    s;
768c768
<   DState *s;
---
>    *;
768c768
<   DState *s;
---
>    ;
768c768
<   DState *s;
---
>    *s
768c768
<   DState *s;
---
>    s
768c768
<   DState *s;
---
>    *
768c768
<   DState *s;
---
>    
768c768
<   DState *s;
---
>   DState s;
768c768
<   DState *s;
---
>   DState ;
768c768
<   DState *s;
---
>   DState s
768c768
<   DState *s;
---
>   DState 
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState s;
>    *s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState ;
>    *s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState s
>    *s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState 
>    *s_0;
768c768
<   DState *s;
---
>   DState *;
768c768
<   DState *s;
---
>   DState *
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *;
>    *s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *
>    *s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *;
>   bz_stream s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *
>   bz_stream s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *;
>    s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *
>    s_0;
768c768
<   DState *s;
---
>   DState *s
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    *s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>   bz_stream s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    s_0;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>   bz_stream *;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    *;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>   bz_stream ;
768,769c768,769
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    ;
769c769
<   bz_stream *s_0;
---
>    *s_0;
769c769
<   bz_stream *s_0;
---
>    s_0;
769c769
<   bz_stream *s_0;
---
>    *;
769c769
<   bz_stream *s_0;
---
>    ;
769c769
<   bz_stream *s_0;
---
>    *s_0
769c769
<   bz_stream *s_0;
---
>    s_0
769c769
<   bz_stream *s_0;
---
>    *
769c769
<   bz_stream *s_0;
---
>    
769c769
<   bz_stream *s_0;
---
>   bz_stream s_0;
769c769
<   bz_stream *s_0;
---
>   bz_stream ;
769c769
<   bz_stream *s_0;
---
>   bz_stream s_0
769c769
<   bz_stream *s_0;
---
>   bz_stream 
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0;
>    (strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream ;
>    (strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0
>    (strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream 
>    (strm == NULL)
769c769
<   bz_stream *s_0;
---
>   bz_stream *;
769c769
<   bz_stream *s_0;
---
>   bz_stream *
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    (strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    (strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>   if strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>   if strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    strm == NULL)
769c769
<   bz_stream *s_0;
---
>   bz_stream *s_0
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    (strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    strm == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if ( == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    ( == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if  == NULL)
769,770c769,770
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>     == NULL)
770c770
<   if (strm == NULL)
---
>    (strm == NULL)
770c770
<   if (strm == NULL)
---
>    strm == NULL)
770c770
<   if (strm == NULL)
---
>    ( == NULL)
770c770
<   if (strm == NULL)
---
>     == NULL)
770c770
<   if (strm == NULL)
---
>    (strm  NULL)
770c770
<   if (strm == NULL)
---
>    strm  NULL)
770c770
<   if (strm == NULL)
---
>    (  NULL)
770c770
<   if (strm == NULL)
---
>      NULL)
770c770
<   if (strm == NULL)
---
>   if strm == NULL)
770c770
<   if (strm == NULL)
---
>   if  == NULL)
770c770
<   if (strm == NULL)
---
>   if strm  NULL)
770c770
<   if (strm == NULL)
---
>   if   NULL)
770c770
<   if (strm == NULL)
---
>   if strm == )
770c770
<   if (strm == NULL)
---
>   if  == )
770c770
<   if (strm == NULL)
---
>   if strm  )
770c770
<   if (strm == NULL)
---
>   if   )
770c770
<   if (strm == NULL)
---
>   if ( == NULL)
770c770
<   if (strm == NULL)
---
>   if (  NULL)
770c770
<   if (strm == NULL)
---
>   if ( == )
770c770
<   if (strm == NULL)
---
>   if (  )
770c770
<   if (strm == NULL)
---
>   if ( == NULL
770c770
<   if (strm == NULL)
---
>   if (  NULL
770c770
<   if (strm == NULL)
---
>   if ( == 
770c770
<   if (strm == NULL)
---
>   if (  
770c770
<   if (strm == NULL)
---
>   if (strm  NULL)
770c770
<   if (strm == NULL)
---
>   if (strm  )
(92.4 %, 15652 bytes)
770c770
<   if (  NULL)
---
>   if (  
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
770c770
<   if (  NULL)
---
>   if (  NULL
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
770,771c770,771
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
771c771
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
771c771
<     return BZ_PARAM_ERROR;
---
>      ;
(92.4 %, 15646 bytes)
771c771
<      BZ_PARAM_ERROR;
---
>      ;
771c771
<      BZ_PARAM_ERROR;
---
>      
(92.4 %, 15632 bytes)
771c771
<      ;
---
>      
771,772c771,772
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
771,772c771,772
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
771,772c771,772
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(92.4 %, 15631 bytes)
772c772
<   s = strm->state;
---
>    = strm->state;
772c772
<   s = strm->state;
---
>     strm->state;
772c772
<   s = strm->state;
---
>    = ->state;
772c772
<   s = strm->state;
---
>     ->state;
772c772
<   s = strm->state;
---
>    = strmstate;
772c772
<   s = strm->state;
---
>     strmstate;
772c772
<   s = strm->state;
---
>    = state;
772c772
<   s = strm->state;
---
>     state;
772c772
<   s = strm->state;
---
>   s  strm->state;
772c772
<   s = strm->state;
---
>   s  ->state;
(92.4 %, 15629 bytes)
772c772
<     strm->state;
---
>     state;
772c772
<     strm->state;
---
>     ->;
772c772
<     strm->state;
---
>     ;
772c772
<     strm->state;
---
>     ->state
772c772
<     strm->state;
---
>     state
772c772
<     strm->state;
---
>     ->
772c772
<     strm->state;
---
>     
(92.4 %, 15618 bytes)
772,773c772,773
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
772,773c772,773
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
772,773c772,773
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
772,773c772,773
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
772,773c772,773
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
773c773
<   if (s == NULL)
---
>    (s == NULL)
773c773
<   if (s == NULL)
---
>    s == NULL)
773c773
<   if (s == NULL)
---
>    ( == NULL)
773c773
<   if (s == NULL)
---
>     == NULL)
773c773
<   if (s == NULL)
---
>    (s  NULL)
773c773
<   if (s == NULL)
---
>    s  NULL)
773c773
<   if (s == NULL)
---
>    (  NULL)
773c773
<   if (s == NULL)
---
>      NULL)
773c773
<   if (s == NULL)
---
>   if s == NULL)
773c773
<   if (s == NULL)
---
>   if  == NULL)
773c773
<   if (s == NULL)
---
>   if s  NULL)
773c773
<   if (s == NULL)
---
>   if   NULL)
773c773
<   if (s == NULL)
---
>   if s == )
773c773
<   if (s == NULL)
---
>   if  == )
773c773
<   if (s == NULL)
---
>   if s  )
773c773
<   if (s == NULL)
---
>   if   )
773c773
<   if (s == NULL)
---
>   if ( == NULL)
773c773
<   if (s == NULL)
---
>   if (  NULL)
773c773
<   if (s == NULL)
---
>   if ( == )
773c773
<   if (s == NULL)
---
>   if (  )
773c773
<   if (s == NULL)
---
>   if ( == NULL
773c773
<   if (s == NULL)
---
>   if (  NULL
773c773
<   if (s == NULL)
---
>   if ( == 
773c773
<   if (s == NULL)
---
>   if (  
773c773
<   if (s == NULL)
---
>   if (s  NULL)
773c773
<   if (s == NULL)
---
>   if (s  )
(92.4 %, 15615 bytes)
773c773
<   if (  NULL)
---
>   if (  
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
773c773
<   if (  NULL)
---
>   if (  NULL
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
773,774c773,774
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
774c774
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
774c774
<     return BZ_PARAM_ERROR;
---
>      ;
(92.4 %, 15609 bytes)
774c774
<      BZ_PARAM_ERROR;
---
>      ;
774c774
<      BZ_PARAM_ERROR;
---
>      
(92.4 %, 15595 bytes)
774c774
<      ;
---
>      
774,775c774,775
<      ;
<   s_0 != strm;
---
>      
>    != strm;
774,775c774,775
<      ;
<   s_0 != strm;
---
>      
>   s_0  strm;
774,775c774,775
<      ;
<   s_0 != strm;
---
>      
>     strm;
(92.4 %, 15594 bytes)
775c775
<   s_0 != strm;
---
>    != strm;
775c775
<   s_0 != strm;
---
>     strm;
775c775
<   s_0 != strm;
---
>    != ;
775c775
<   s_0 != strm;
---
>     ;
(92.4 %, 15589 bytes)
775c775
<     strm;
---
>     
775c775
<     strm;
---
>     ;
777c777
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
(92.4 %, 15584 bytes)
777c777
<   return BZ_PARAM_ERROR;
---
>    ;
777c777
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR
777c777
<   return BZ_PARAM_ERROR;
---
>    
(92.4 %, 15564 bytes)
777c777
<    ;
---
>    
779c779
<   while (True)
---
>    (True)
777c777
<    ;
---
>    
779c779
<   while (True)
---
>   while True)
777c777
<    ;
---
>    
779c779
<   while (True)
---
>    True)
777c777
<    ;
---
>    
779c779
<   while (True)
---
>   while ()
777c777
<    ;
---
>    
779c779
<   while (True)
---
>    ()
777c777
<    ;
---
>    
779c779
<   while (True)
---
>   while )
777c777
<    ;
---
>    
779c779
<   while (True)
---
>    )
779c779
<   while (True)
---
>    (True)
779c779
<   while (True)
---
>    True)
779c779
<   while (True)
---
>    ()
779c779
<   while (True)
---
>    )
779c779
<   while (True)
---
>    (True
779c779
<   while (True)
---
>    True
779c779
<   while (True)
---
>    (
779c779
<   while (True)
---
>    
779c779
<   while (True)
---
>   while True)
779c779
<   while (True)
---
>   while )
779c779
<   while (True)
---
>   while True
779c779
<   while (True)
---
>   while 
779c779
<   while (True)
---
>   while True)
781c781
<     0;
---
>     ;
779c779
<   while (True)
---
>   while )
781c781
<     0;
---
>     ;
779c779
<   while (True)
---
>   while True
781c781
<     0;
---
>     ;
779c779
<   while (True)
---
>   while 
781c781
<     0;
---
>     ;
779c779
<   while (True)
---
>   while ()
779c779
<   while (True)
---
>   while (
(92.4 %, 15553 bytes)
781c781
<     0;
---
>     
783c783
<   return 0;
---
>    ;
781c781
<     0;
---
>     0
781c781
<     0;
---
>     0
783c783
<   return 0;
---
>    0;
781c781
<     0;
---
>     0
783c783
<   return 0;
---
>   return ;
781c781
<     0;
---
>     0
783c783
<   return 0;
---
>    ;
(92.4 %, 15544 bytes)
783,784c783
<    ;
< }
---
>    
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
>  (void) {
784c784
< }
---
> 
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzDecompressEnd(void) {
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
> int (void) {
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
>  (void) {
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
> int BZ_APIBZ2_bzDecompressEndvoid) {
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
>  BZ_APIBZ2_bzDecompressEndvoid) {
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
> int void) {
784d783
< }
786c785,786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
> 
>  void) {
786c786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd(void) {
786c786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
>  (void) {
786c786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEndvoid) {
786c786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
>  void) {
786c786
< int BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd() {
(92.4 %, 15541 bytes)
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  (void) {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  void) {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  () {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  ) {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  (void {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  void {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  ( {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>   {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEndvoid) {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd) {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEndvoid {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEndvoid) 
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd) 
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEndvoid 
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd 
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd() {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd( {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd() 
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd( 
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() {
>    *strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( {
>    *strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>    *strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( 
>    *strm = 0;
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd(void {
786c786
<  BZ_APIBZ2_bzDecompressEnd(void) {
---
>  BZ_APIBZ2_bzDecompressEnd(void 
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd(void) {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd(void {
>    *strm = 0;
(92.4 %, 15537 bytes)
786c786
<  BZ_APIBZ2_bzDecompressEnd() {
---
>  BZ_APIBZ2_bzDecompressEnd( {
786c786
<  BZ_APIBZ2_bzDecompressEnd() {
---
>  BZ_APIBZ2_bzDecompressEnd( 
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( {
>    *strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( 
>    *strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( {
>   bz_stream strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( 
>   bz_stream strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( {
>    strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd( 
>    strm = 0;
786c786
<  BZ_APIBZ2_bzDecompressEnd() {
---
>  BZ_APIBZ2_bzDecompressEnd() 
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>    *strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>   bz_stream strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>    strm = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>   bz_stream * = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>    * = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>   bz_stream  = 0;
786,787c786,787
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm = 0;
---
>  BZ_APIBZ2_bzDecompressEnd() 
>     = 0;
787c787
<   bz_stream *strm = 0;
---
>    *strm = 0;
787c787
<   bz_stream *strm = 0;
---
>    strm = 0;
787c787
<   bz_stream *strm = 0;
---
>    * = 0;
787c787
<   bz_stream *strm = 0;
---
>     = 0;
787c787
<   bz_stream *strm = 0;
---
>    *strm  0;
787c787
<   bz_stream *strm = 0;
---
>    strm  0;
787c787
<   bz_stream *strm = 0;
---
>    *  0;
787c787
<   bz_stream *strm = 0;
---
>      0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream strm = 0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream  = 0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream strm  0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream   0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream strm = ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream  = ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream strm  ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream   ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream * = 0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *  0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream * = ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *  ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream * = 0
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *  0
787c787
<   bz_stream *strm = 0;
---
>   bz_stream * = 
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *  
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *strm  ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *strm  0
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *strm  
787,788c787,788
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  0;
>    *s;
787,788c787,788
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  ;
>    *s;
787,788c787,788
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  0
>    *s;
787,788c787,788
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm  
>    *s;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *strm = ;
787c787
<   bz_stream *strm = 0;
---
>   bz_stream *strm = 
787,788c787,788
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = ;
>    *s;
787,788c787,788
<   bz_stream *strm = 0;
<   DState *s;
---
>   bz_stream *strm = 
>    *s;
(92.4 %, 15535 bytes)
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    *s;
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState s;
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    s;
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState *;
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    *;
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>   DState ;
787,788c787,788
<   bz_stream *strm  ;
<   DState *s;
---
>   bz_stream *strm  
>    ;
788c788
<   DState *s;
---
>    *s;
788c788
<   DState *s;
---
>    s;
788c788
<   DState *s;
---
>    *;
788c788
<   DState *s;
---
>    ;
788c788
<   DState *s;
---
>    *s
788c788
<   DState *s;
---
>    s
788c788
<   DState *s;
---
>    *
788c788
<   DState *s;
---
>    
788c788
<   DState *s;
---
>   DState s;
788c788
<   DState *s;
---
>   DState ;
788c788
<   DState *s;
---
>   DState s
788c788
<   DState *s;
---
>   DState 
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState s;
>    *s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState ;
>    *s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState s
>    *s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState 
>    *s_0;
788c788
<   DState *s;
---
>   DState *;
788c788
<   DState *s;
---
>   DState *
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *;
>    *s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *
>    *s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *;
>   bz_stream s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *
>   bz_stream s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *;
>    s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *
>    s_0;
788c788
<   DState *s;
---
>   DState *s
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    *s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>   bz_stream s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    s_0;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>   bz_stream *;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    *;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>   bz_stream ;
788,789c788,789
<   DState *s;
<   bz_stream *s_0;
---
>   DState *s
>    ;
789c789
<   bz_stream *s_0;
---
>    *s_0;
789c789
<   bz_stream *s_0;
---
>    s_0;
789c789
<   bz_stream *s_0;
---
>    *;
789c789
<   bz_stream *s_0;
---
>    ;
789c789
<   bz_stream *s_0;
---
>    *s_0
789c789
<   bz_stream *s_0;
---
>    s_0
789c789
<   bz_stream *s_0;
---
>    *
789c789
<   bz_stream *s_0;
---
>    
789c789
<   bz_stream *s_0;
---
>   bz_stream s_0;
789c789
<   bz_stream *s_0;
---
>   bz_stream ;
789c789
<   bz_stream *s_0;
---
>   bz_stream s_0
789c789
<   bz_stream *s_0;
---
>   bz_stream 
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0;
>    (strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream ;
>    (strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream s_0
>    (strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream 
>    (strm == NULL)
789c789
<   bz_stream *s_0;
---
>   bz_stream *;
789c789
<   bz_stream *s_0;
---
>   bz_stream *
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    (strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    (strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>   if strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>   if strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *;
>    strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *
>    strm == NULL)
789c789
<   bz_stream *s_0;
---
>   bz_stream *s_0
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    (strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    strm == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if ( == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>    ( == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>   if  == NULL)
789,790c789,790
<   bz_stream *s_0;
<   if (strm == NULL)
---
>   bz_stream *s_0
>     == NULL)
790c790
<   if (strm == NULL)
---
>    (strm == NULL)
790c790
<   if (strm == NULL)
---
>    strm == NULL)
790c790
<   if (strm == NULL)
---
>    ( == NULL)
790c790
<   if (strm == NULL)
---
>     == NULL)
790c790
<   if (strm == NULL)
---
>    (strm  NULL)
790c790
<   if (strm == NULL)
---
>    strm  NULL)
790c790
<   if (strm == NULL)
---
>    (  NULL)
790c790
<   if (strm == NULL)
---
>      NULL)
790c790
<   if (strm == NULL)
---
>   if strm == NULL)
790c790
<   if (strm == NULL)
---
>   if  == NULL)
790c790
<   if (strm == NULL)
---
>   if strm  NULL)
790c790
<   if (strm == NULL)
---
>   if   NULL)
790c790
<   if (strm == NULL)
---
>   if strm == )
790c790
<   if (strm == NULL)
---
>   if  == )
790c790
<   if (strm == NULL)
---
>   if strm  )
790c790
<   if (strm == NULL)
---
>   if   )
790c790
<   if (strm == NULL)
---
>   if ( == NULL)
790c790
<   if (strm == NULL)
---
>   if (  NULL)
790c790
<   if (strm == NULL)
---
>   if ( == )
790c790
<   if (strm == NULL)
---
>   if (  )
790c790
<   if (strm == NULL)
---
>   if ( == NULL
790c790
<   if (strm == NULL)
---
>   if (  NULL
790c790
<   if (strm == NULL)
---
>   if ( == 
790c790
<   if (strm == NULL)
---
>   if (  
790c790
<   if (strm == NULL)
---
>   if (strm  NULL)
790c790
<   if (strm == NULL)
---
>   if (strm  )
(92.4 %, 15529 bytes)
790c790
<   if (  NULL)
---
>   if (  
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
790c790
<   if (  NULL)
---
>   if (  NULL
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
790,791c790,791
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
791c791
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
791c791
<     return BZ_PARAM_ERROR;
---
>      ;
(92.4 %, 15523 bytes)
791c791
<      BZ_PARAM_ERROR;
---
>      ;
791c791
<      BZ_PARAM_ERROR;
---
>      
(92.4 %, 15509 bytes)
791c791
<      ;
---
>      
791,792c791,792
<      ;
<   s = strm->state;
---
>      
>    = strm->state;
791,792c791,792
<      ;
<   s = strm->state;
---
>      
>   s  strm->state;
791,792c791,792
<      ;
<   s = strm->state;
---
>      
>     strm->state;
(92.4 %, 15508 bytes)
792c792
<   s = strm->state;
---
>    = strm->state;
792c792
<   s = strm->state;
---
>     strm->state;
792c792
<   s = strm->state;
---
>    = ->state;
792c792
<   s = strm->state;
---
>     ->state;
792c792
<   s = strm->state;
---
>    = strmstate;
792c792
<   s = strm->state;
---
>     strmstate;
792c792
<   s = strm->state;
---
>    = state;
792c792
<   s = strm->state;
---
>     state;
792c792
<   s = strm->state;
---
>   s  strm->state;
792c792
<   s = strm->state;
---
>   s  ->state;
792c792
<   s = strm->state;
---
>   s  strmstate;
792c792
<   s = strm->state;
---
>   s  state;
792c792
<   s = strm->state;
---
>   s  strm->;
792c792
<   s = strm->state;
---
>   s  ->;
(92.4 %, 15506 bytes)
792c792
<     strm->state;
---
>     state;
792c792
<     strm->state;
---
>     ->;
792c792
<     strm->state;
---
>     ;
792c792
<     strm->state;
---
>     ->state
792c792
<     strm->state;
---
>     state
792c792
<     strm->state;
---
>     ->
792c792
<     strm->state;
---
>     
(92.4 %, 15495 bytes)
792,793c792,793
<     ;
<   if (s == NULL)
---
>     
>    s == NULL)
792,793c792,793
<     ;
<   if (s == NULL)
---
>     
>   if ( == NULL)
792,793c792,793
<     ;
<   if (s == NULL)
---
>     
>    ( == NULL)
792,793c792,793
<     ;
<   if (s == NULL)
---
>     
>   if  == NULL)
792,793c792,793
<     ;
<   if (s == NULL)
---
>     
>     == NULL)
793c793
<   if (s == NULL)
---
>    (s == NULL)
793c793
<   if (s == NULL)
---
>    s == NULL)
793c793
<   if (s == NULL)
---
>    ( == NULL)
793c793
<   if (s == NULL)
---
>     == NULL)
793c793
<   if (s == NULL)
---
>    (s  NULL)
793c793
<   if (s == NULL)
---
>    s  NULL)
793c793
<   if (s == NULL)
---
>    (  NULL)
793c793
<   if (s == NULL)
---
>      NULL)
793c793
<   if (s == NULL)
---
>   if s == NULL)
793c793
<   if (s == NULL)
---
>   if  == NULL)
793c793
<   if (s == NULL)
---
>   if s  NULL)
793c793
<   if (s == NULL)
---
>   if   NULL)
793c793
<   if (s == NULL)
---
>   if s == )
793c793
<   if (s == NULL)
---
>   if  == )
793c793
<   if (s == NULL)
---
>   if s  )
793c793
<   if (s == NULL)
---
>   if   )
793c793
<   if (s == NULL)
---
>   if ( == NULL)
793c793
<   if (s == NULL)
---
>   if (  NULL)
793c793
<   if (s == NULL)
---
>   if ( == )
793c793
<   if (s == NULL)
---
>   if (  )
793c793
<   if (s == NULL)
---
>   if ( == NULL
793c793
<   if (s == NULL)
---
>   if (  NULL
793c793
<   if (s == NULL)
---
>   if ( == 
793c793
<   if (s == NULL)
---
>   if (  
793c793
<   if (s == NULL)
---
>   if (s  NULL)
793c793
<   if (s == NULL)
---
>   if (s  )
(92.4 %, 15492 bytes)
793c793
<   if (  NULL)
---
>   if (  
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      BZ_PARAM_ERROR;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      BZ_PARAM_ERROR;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>     return ;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>     return ;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  )
>      ;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  
>      ;
793c793
<   if (  NULL)
---
>   if (  NULL
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return ;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      ;
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return BZ_PARAM_ERROR
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      BZ_PARAM_ERROR
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>     return 
793,794c793,794
<   if (  NULL)
<     return BZ_PARAM_ERROR;
---
>   if (  NULL
>      
794c794
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
794c794
<     return BZ_PARAM_ERROR;
---
>      ;
(92.4 %, 15486 bytes)
794c794
<      BZ_PARAM_ERROR;
---
>      ;
794c794
<      BZ_PARAM_ERROR;
---
>      
794,795c794,795
<      BZ_PARAM_ERROR;
<   s_0 != strm;
---
>      ;
>    != strm;
(92.5 %, 15472 bytes)
794c794
<      ;
---
>      
794,795c794,795
<      ;
<   s_0 != strm;
---
>      
>    != strm;
794,795c794,795
<      ;
<   s_0 != strm;
---
>      
>   s_0  strm;
794,795c794,795
<      ;
<   s_0 != strm;
---
>      
>     strm;
(92.5 %, 15471 bytes)
795c795
<   s_0 != strm;
---
>    != strm;
795c795
<   s_0 != strm;
---
>     strm;
795c795
<   s_0 != strm;
---
>    != ;
795c795
<   s_0 != strm;
---
>     ;
(92.5 %, 15466 bytes)
795c795
<     strm;
---
>     
795c795
<     strm;
---
>     ;
797c797
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
795c795
<     strm;
---
>     
797c797
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
(92.5 %, 15461 bytes)
797c797
<   return BZ_PARAM_ERROR;
---
>    ;
797c797
<   return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR
797c797
<   return BZ_PARAM_ERROR;
---
>    
(92.5 %, 15441 bytes)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>    (s->tt != NULL)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>   if s->tt != NULL)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>    s->tt != NULL)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>   if (->tt != NULL)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>    (->tt != NULL)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>   if ->tt != NULL)
797c797
<    ;
---
>    
799c799
<   if (s->tt != NULL)
---
>    ->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>    (s->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>    s->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>    (->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>    ->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>    (stt != NULL)
799c799
<   if (s->tt != NULL)
---
>    stt != NULL)
799c799
<   if (s->tt != NULL)
---
>    (tt != NULL)
799c799
<   if (s->tt != NULL)
---
>    tt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if s->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if ->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if stt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if tt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if s-> != NULL)
799c799
<   if (s->tt != NULL)
---
>   if -> != NULL)
799c799
<   if (s->tt != NULL)
---
>   if s != NULL)
799c799
<   if (s->tt != NULL)
---
>   if  != NULL)
799c799
<   if (s->tt != NULL)
---
>   if (->tt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if (tt != NULL)
799c799
<   if (s->tt != NULL)
---
>   if (-> != NULL)
799c799
<   if (s->tt != NULL)
---
>   if ( != NULL)
799c799
<   if (s->tt != NULL)
---
>   if (->tt  NULL)
799c799
<   if (s->tt != NULL)
---
>   if (tt  NULL)
799c799
<   if (s->tt != NULL)
---
>   if (->  NULL)
799c799
<   if (s->tt != NULL)
---
>   if (  NULL)
(92.5 %, 15436 bytes)
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (  )
>     (s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (  NULL
>     (s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (  
>     (s->tt);
799c799
<   if (tt  NULL)
---
>   if (tt  )
799c799
<   if (tt  NULL)
---
>   if (tt  
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  )
>     (s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  
>     (s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  )
>     BZFREEs->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  
>     BZFREEs->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  )
>     s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  
>     s->tt);
799c799
<   if (tt  NULL)
---
>   if (tt  NULL
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     (s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     BZFREEs->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     s->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     BZFREE(->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     (->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     BZFREE->tt);
799,800c799,800
<   if (tt  NULL)
<     BZFREE(s->tt);
---
>   if (tt  NULL
>     ->tt);
800c800
<     BZFREE(s->tt);
---
>     (s->tt);
800c800
<     BZFREE(s->tt);
---
>     s->tt);
800c800
<     BZFREE(s->tt);
---
>     (->tt);
800c800
<     BZFREE(s->tt);
---
>     ->tt);
800c800
<     BZFREE(s->tt);
---
>     (stt);
800c800
<     BZFREE(s->tt);
---
>     stt);
800c800
<     BZFREE(s->tt);
---
>     (tt);
800c800
<     BZFREE(s->tt);
---
>     tt);
800c800
<     BZFREE(s->tt);
---
>     BZFREEs->tt);
800c800
<     BZFREE(s->tt);
---
>     BZFREE->tt);
800c800
<     BZFREE(s->tt);
---
>     BZFREEstt);
800c800
<     BZFREE(s->tt);
---
>     BZFREEtt);
800c800
<     BZFREE(s->tt);
---
>     BZFREEs->);
800c800
<     BZFREE(s->tt);
---
>     BZFREE->);
800c800
<     BZFREE(s->tt);
---
>     BZFREEs);
800c800
<     BZFREE(s->tt);
---
>     BZFREE);
800c800
<     BZFREE(s->tt);
---
>     BZFREE(->tt);
800c800
<     BZFREE(s->tt);
---
>     BZFREE(tt);
800c800
<     BZFREE(s->tt);
---
>     BZFREE(->);
800c800
<     BZFREE(s->tt);
---
>     BZFREE();
(92.5 %, 15433 bytes)
800c800
<     BZFREE(tt);
---
>     BZFREE(;
800c800
<     BZFREE(tt);
---
>     BZFREE()
800c800
<     BZFREE(tt);
---
>     BZFREE(
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE();
>    (s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(;
>    (s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE()
>    (s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(
>    (s->ll16 != NULL)
800c800
<     BZFREE(tt);
---
>     BZFREE(tt;
800c800
<     BZFREE(tt);
---
>     BZFREE(tt
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt;
>    (s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt
>    (s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt;
>   if s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt
>   if s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt;
>    s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt
>    s->ll16 != NULL)
800c800
<     BZFREE(tt);
---
>     BZFREE(tt)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>    (s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>   if s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>    s->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>   if (->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>    (->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>   if ->ll16 != NULL)
800,801c800,801
<     BZFREE(tt);
<   if (s->ll16 != NULL)
---
>     BZFREE(tt)
>    ->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    (s->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    s->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    (->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    ->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    (sll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    sll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    (ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>    ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if s->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if ->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if sll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if s-> != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if -> != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if s != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if  != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (->ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (ll16 != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (-> != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if ( != NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (->ll16  NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (ll16  NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (->  NULL)
801c801
<   if (s->ll16 != NULL)
---
>   if (  NULL)
(92.5 %, 15428 bytes)
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (  )
>     ;
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (  NULL
>     ;
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (  
>     ;
801c801
<   if (ll16  NULL)
---
>   if (ll16  )
801c801
<   if (ll16  NULL)
---
>   if (ll16  
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  )
>     ;
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  
>     ;
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  )
>     BZFREE
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  
>     BZFREE
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  )
>     
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  
>     
801c801
<   if (ll16  NULL)
---
>   if (ll16  NULL
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  NULL
>     ;
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  NULL
>     BZFREE
801,802c801,802
<   if (ll16  NULL)
<     BZFREE;
---
>   if (ll16  NULL
>     
801c801
<   if (ll16  NULL)
---
>   if (ll16  NULL
803c803
<   if (s->ll4 != NULL)
---
>    (s->ll4 != NULL)
801,803c801,803
<   if (ll16  NULL)
<     BZFREE;
<   if (s->ll4 != NULL)
---
>   if (ll16  NULL
>     ;
>    (s->ll4 != NULL)
801,803c801,803
<   if (ll16  NULL)
<     BZFREE;
<   if (s->ll4 != NULL)
---
>   if (ll16  NULL
>     BZFREE
>    (s->ll4 != NULL)
801,803c801,803
<   if (ll16  NULL)
<     BZFREE;
<   if (s->ll4 != NULL)
---
>   if (ll16  NULL
>     
>    (s->ll4 != NULL)
802c802
<     BZFREE;
---
>     ;
802c802
<     BZFREE;
---
>     
(92.5 %, 15422 bytes)
802c802
<     ;
---
>     
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>    (s->ll4 != NULL)
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>   if s->ll4 != NULL)
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>    s->ll4 != NULL)
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>   if (->ll4 != NULL)
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>    (->ll4 != NULL)
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>   if ->ll4 != NULL)
802,803c802,803
<     ;
<   if (s->ll4 != NULL)
---
>     
>    ->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    (s->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    s->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    (->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    ->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    (sll4 != NULL)
(92.5 %, 15421 bytes)
803c803
<   if (s->ll4 != NULL)
---
>    (s->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    s->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    (->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    ->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    (sll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    sll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    (ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>    ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if s->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if ->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if sll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if s-> != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if -> != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if s != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if  != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (->ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (ll4 != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (-> != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if ( != NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (->ll4  NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (ll4  NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (->  NULL)
803c803
<   if (s->ll4 != NULL)
---
>   if (  NULL)
(92.5 %, 15416 bytes)
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (  )
>     ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (  NULL
>     ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (  
>     ;
803c803
<   if (ll4  NULL)
---
>   if (ll4  )
803c803
<   if (ll4  NULL)
---
>   if (ll4  
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  )
>     ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  
>     ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  )
>     BZFREE
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  
>     BZFREE
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  )
>     
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  
>     
803c803
<   if (ll4  NULL)
---
>   if (ll4  NULL
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  NULL
>     ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  NULL
>     BZFREE
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  NULL
>     
803c803
<   if (ll4  NULL)
---
>   if (ll4  NULL
806c806
<   0;
---
>   ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  NULL
>     ;
806c806
<   0;
---
>   ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  NULL
>     BZFREE
806c806
<   0;
---
>   ;
803,804c803,804
<   if (ll4  NULL)
<     BZFREE;
---
>   if (ll4  NULL
>     
806c806
<   0;
---
>   ;
804c804
<     BZFREE;
---
>     ;
804c804
<     BZFREE;
---
>     
(92.5 %, 15410 bytes)
804c804
<     ;
---
>     
804c804
<     ;
---
>     
806c806
<   0;
---
>   ;
(92.5 %, 15409 bytes)
806c806
<   0;
---
>   ;
806c806
<   0;
---
>   
806,807c806,807
<   0;
<   strm->state = NULL;
---
>   ;
>   ->state = NULL;
(92.5 %, 15408 bytes)
806c806
<   ;
---
>   
806,807c806,807
<   ;
<   strm->state = NULL;
---
>   
>   ->state = NULL;
806,807c806,807
<   ;
<   strm->state = NULL;
---
>   
>   strmstate = NULL;
806,807c806,807
<   ;
<   strm->state = NULL;
---
>   
>   state = NULL;
806,807c806,807
<   ;
<   strm->state = NULL;
---
>   
>   strm-> = NULL;
806,807c806,807
<   ;
<   strm->state = NULL;
---
>   
>   -> = NULL;
806,807c806,807
<   ;
<   strm->state = NULL;
---
>   
>   strm = NULL;
(92.5 %, 15407 bytes)
807c807
<   strm->state = NULL;
---
>   ->state = NULL;
807c807
<   strm->state = NULL;
---
>   state = NULL;
807c807
<   strm->state = NULL;
---
>   -> = NULL;
807c807
<   strm->state = NULL;
---
>    = NULL;
807c807
<   strm->state = NULL;
---
>   ->state  NULL;
807c807
<   strm->state = NULL;
---
>   state  NULL;
807c807
<   strm->state = NULL;
---
>   ->  NULL;
807c807
<   strm->state = NULL;
---
>     NULL;
(92.5 %, 15400 bytes)
807c807
<   state  NULL;
---
>     ;
809c809
<   return BZ_OK;
---
>    BZ_OK;
807c807
<   state  NULL;
---
>     NULL
809c809
<   return BZ_OK;
---
>    BZ_OK;
807c807
<   state  NULL;
---
>     
809c809
<   return BZ_OK;
---
>    BZ_OK;
(92.5 %, 15385 bytes)
807c807,809
<     ;
---
>     
> 
>    ;
809,810d810
<    BZ_OK;
< }
807c807,809
<     ;
---
>     
> 
>    BZ_OK
809,810d810
<    BZ_OK;
< }
807c807,809
<     ;
---
>     
> 
>    
809,810d810
<    BZ_OK;
< }
809c809
<    BZ_OK;
---
>    ;
809c809
<    BZ_OK;
---
>    
(92.5 %, 15380 bytes)
809c809
<    ;
---
>    
809,810c809,810
<    ;
< }
---
>    
> 
809c809
<    ;
---
>    
812c812
< #define BZ_SETERRe
---
> define BZ_SETERRe
809,810c809
<    ;
< }
---
>    
812c811,812
< #define BZ_SETERRe
---
> 
> define BZ_SETERRe
809c809
<    ;
---
>    
812c812
< #define BZ_SETERRe
---
> # BZ_SETERRe
809,810c809
<    ;
< }
---
>    
812c811,812
< #define BZ_SETERRe
---
> 
> # BZ_SETERRe
809c809
<    ;
---
>    
812c812
< #define BZ_SETERRe
---
>  BZ_SETERRe
809,810c809
<    ;
< }
---
>    
812c811,812
< #define BZ_SETERRe
---
> 
>  BZ_SETERRe
810c810
< }
---
> 
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> define BZ_SETERRe
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> # BZ_SETERRe
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
>  BZ_SETERRe
(92.5 %, 15379 bytes)
810c810
< }
---
> 
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> define BZ_SETERRe
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> # BZ_SETERRe
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
>  BZ_SETERRe
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> #define 
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> define 
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
> # 
810d809
< }
812c811,812
< #define BZ_SETERRe
---
> 
>  
812c812
< #define BZ_SETERRe
---
> define BZ_SETERRe
812c812
< #define BZ_SETERRe
---
>  BZ_SETERRe
812c812
< #define BZ_SETERRe
---
> define 
812c812
< #define BZ_SETERRe
---
>  
812c812
< #define BZ_SETERRe
---
> define BZ_SETERRe
814c814
< typedef struct {
---
>  struct {
812c812
< #define BZ_SETERRe
---
>  BZ_SETERRe
814c814
< typedef struct {
---
>  struct {
812c812
< #define BZ_SETERRe
---
> define 
814c814
< typedef struct {
---
>  struct {
812c812
< #define BZ_SETERRe
---
>  
814c814
< typedef struct {
---
>  struct {
812c812
< #define BZ_SETERRe
---
> # BZ_SETERRe
812c812
< #define BZ_SETERRe
---
> # 
(92.5 %, 15362 bytes)
814c814
< typedef struct {
---
>   
814,815c814,815
< typedef struct {
<   FILE *handle;
---
>  struct {
>    *handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
>   {
>    *handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
>  struct 
>    *handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
>   
>    *handle;
814c814
< typedef struct {
---
> typedef  {
814c814
< typedef struct {
---
> typedef  
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef  {
>    *handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef  
>    *handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef  {
>   FILE handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef  
>   FILE handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef  {
>    handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef  
>    handle;
814c814
< typedef struct {
---
> typedef struct 
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    *handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>   FILE handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    handle;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>   FILE *;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    *;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>   FILE ;
814,815c814,815
< typedef struct {
<   FILE *handle;
---
> typedef struct 
>    ;
815c815
<   FILE *handle;
---
>    *handle;
815c815
<   FILE *handle;
---
>    handle;
815c815
<   FILE *handle;
---
>    *;
815c815
<   FILE *handle;
---
>    ;
815c815
<   FILE *handle;
---
>    *handle
815c815
<   FILE *handle;
---
>    handle
815c815
<   FILE *handle;
---
>    *
815c815
<   FILE *handle;
---
>    
815c815
<   FILE *handle;
---
>   FILE handle;
815c815
<   FILE *handle;
---
>   FILE ;
815c815
<   FILE *handle;
---
>   FILE handle
815c815
<   FILE *handle;
---
>   FILE 
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE handle;
>    buf[BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE ;
>    buf[BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE handle
>    buf[BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE 
>    buf[BZ_MAX_UNUSED];
815c815
<   FILE *handle;
---
>   FILE *;
815c815
<   FILE *handle;
---
>   FILE *
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *;
>    buf[BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *
>    buf[BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *;
>   Char [BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *
>   Char [BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *;
>    [BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *
>    [BZ_MAX_UNUSED];
815c815
<   FILE *handle;
---
>   FILE *handle
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    buf[BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>   Char [BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    [BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>   Char bufBZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    bufBZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>   Char BZ_MAX_UNUSED];
815,816c815,816
<   FILE *handle;
<   Char buf[BZ_MAX_UNUSED];
---
>   FILE *handle
>    BZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    buf[BZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    [BZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    bufBZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    BZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    buf[];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    [];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    buf];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>    ];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char [BZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char BZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char [];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char ];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char [BZ_MAX_UNUSED;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char BZ_MAX_UNUSED;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char [;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char ;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char bufBZ_MAX_UNUSED];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char bufBZ_MAX_UNUSED;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char bufBZ_MAX_UNUSED]
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf]
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char bufBZ_MAX_UNUSED
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf[];
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf[;
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf[]
816c816
<   Char buf[BZ_MAX_UNUSED];
---
>   Char buf[
816,817c816,817
<   Char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   Char buf[];
>    bufN;
816,817c816,817
<   Char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   Char buf[;
>    bufN;
816,817c816,817
<   Char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   Char buf[]
>    bufN;
816,817c816,817
<   Char buf[BZ_MAX_UNUSED];
<   Int32 bufN;
---
>   Char buf[
>    bufN;
(92.5 %, 15347 bytes)
816,817c816,817
<   Char buf;
<   Int32 bufN;
---
>   Char buf
>    ;
816,817c816,817
<   Char buf;
<   Int32 bufN;
---
>   Char buf
>   Int32 bufN
816,817c816,817
<   Char buf;
<   Int32 bufN;
---
>   Char buf
>    bufN
816,817c816,817
<   Char buf;
<   Int32 bufN;
---
>   Char buf
>   Int32 
816,817c816,817
<   Char buf;
<   Int32 bufN;
---
>   Char buf
>    
817c817
<   Int32 bufN;
---
>    bufN;
817c817
<   Int32 bufN;
---
>    ;
817c817
<   Int32 bufN;
---
>    bufN
817c817
<   Int32 bufN;
---
>    
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>    bufN;
>    writing;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>    ;
>    writing;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>    bufN
>    writing;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>    
>    writing;
817c817
<   Int32 bufN;
---
>   Int32 ;
817c817
<   Int32 bufN;
---
>   Int32 
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 ;
>    writing;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 
>    writing;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 ;
>   Bool ;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 
>   Bool ;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 ;
>    ;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 
>    ;
817c817
<   Int32 bufN;
---
>   Int32 bufN
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>    writing;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>   Bool ;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>    ;
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>   Bool writing
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>    writing
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>   Bool 
817,818c817,818
<   Int32 bufN;
<   Bool writing;
---
>   Int32 bufN
>    
818c818
<   Bool writing;
---
>    writing;
818c818
<   Bool writing;
---
>    ;
818c818
<   Bool writing;
---
>    writing
818c818
<   Bool writing;
---
>    
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>    writing;
>    strm;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>    ;
>    strm;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>    writing
>    strm;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>    
>    strm;
818c818
<   Bool writing;
---
>   Bool ;
818c818
<   Bool writing;
---
>   Bool 
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool ;
>    strm;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool 
>    strm;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool ;
>   bz_stream ;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool 
>   bz_stream ;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool ;
>    ;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool 
>    ;
818c818
<   Bool writing;
---
>   Bool writing
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>    strm;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>   bz_stream ;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>    ;
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>   bz_stream strm
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>    strm
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>   bz_stream 
818,819c818,819
<   Bool writing;
<   bz_stream strm;
---
>   Bool writing
>    
819c819
<   bz_stream strm;
---
>    strm;
819c819
<   bz_stream strm;
---
>    ;
819c819
<   bz_stream strm;
---
>    strm
819c819
<   bz_stream strm;
---
>    
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>    strm;
>    lastErr;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>    ;
>    lastErr;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>    strm
>    lastErr;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>    
>    lastErr;
819c819
<   bz_stream strm;
---
>   bz_stream ;
819c819
<   bz_stream strm;
---
>   bz_stream 
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream ;
>    lastErr;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream 
>    lastErr;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream ;
>   Int32 ;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream 
>   Int32 ;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream ;
>    ;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream 
>    ;
819c819
<   bz_stream strm;
---
>   bz_stream strm
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    lastErr;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>   Int32 ;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    ;
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>   Int32 lastErr
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    lastErr
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>   Int32 
819,820c819,820
<   bz_stream strm;
<   Int32 lastErr;
---
>   bz_stream strm
>    
820c820
<   Int32 lastErr;
---
>    lastErr;
820c820
<   Int32 lastErr;
---
>    ;
820c820
<   Int32 lastErr;
---
>    lastErr
820c820
<   Int32 lastErr;
---
>    
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>    lastErr;
>    initialisedOk;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>    ;
>    initialisedOk;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>    lastErr
>    initialisedOk;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>    
>    initialisedOk;
820c820
<   Int32 lastErr;
---
>   Int32 ;
820c820
<   Int32 lastErr;
---
>   Int32 
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 ;
>    initialisedOk;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 
>    initialisedOk;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 ;
>   Bool ;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 
>   Bool ;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 ;
>    ;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 
>    ;
820c820
<   Int32 lastErr;
---
>   Int32 lastErr
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>    initialisedOk;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>   Bool ;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>    ;
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>   Bool initialisedOk
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>    initialisedOk
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>   Bool 
820,821c820,821
<   Int32 lastErr;
<   Bool initialisedOk;
---
>   Int32 lastErr
>    
821c821
<   Bool initialisedOk;
---
>    initialisedOk;
821c821
<   Bool initialisedOk;
---
>    ;
821c821
<   Bool initialisedOk;
---
>    initialisedOk
821c821
<   Bool initialisedOk;
---
>    
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>    initialisedOk;
>  bzFile;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>    ;
>  bzFile;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>    initialisedOk
>  bzFile;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>    
>  bzFile;
821c821
<   Bool initialisedOk;
---
>   Bool ;
821c821
<   Bool initialisedOk;
---
>   Bool 
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool ;
>  bzFile;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool 
>  bzFile;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool ;
> } ;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool 
> } ;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool ;
>  ;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool 
>  ;
821c821
<   Bool initialisedOk;
---
>   Bool initialisedOk
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
>  bzFile;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
> } ;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
>  ;
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
> } bzFile
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
>  bzFile
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
> } 
821,822c821,822
<   Bool initialisedOk;
< } bzFile;
---
>   Bool initialisedOk
>  
822c822
< } bzFile;
---
>  bzFile;
822c822
< } bzFile;
---
>  ;
822c822
< } bzFile;
---
>  bzFile
822c822
< } bzFile;
---
>  
822c822
< } bzFile;
---
>  bzFile;
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
(92.5 %, 15346 bytes)
822c822
< } bzFile;
---
>  bzFile;
822c822
< } bzFile;
---
>  ;
822c822
< } bzFile;
---
>  bzFile
822c822
< } bzFile;
---
>  
822c822
< } bzFile;
---
>  bzFile;
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
>  ;
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
>  bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
>  
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } ;
822c822
< } bzFile;
---
> } 
822c822
< } bzFile;
---
> } ;
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } 
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } ;
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } 
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } ;
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } 
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE *(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE (int *bzerror, FILE *f, int blockSize100k,
822c822
< } bzFile;
---
> } bzFile
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  (int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  (int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE (int *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
824c824
< BZFILE *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
> BZFILE int *bzerror, FILE *f, int blockSize100k,
(92.5 %, 15340 bytes)
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  (int *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  int *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen( *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  ( *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  BZ_APIBZ2_bzWriteOpen *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>   *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *int *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *( *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  * *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *(int bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *int bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *( bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  * bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpenint *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpenint bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpenint *, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen *, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpenint , FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen , FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( *bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( *, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( , FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( *bzerror FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( bzerror FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen( * FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(  FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int bzerror, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int , FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int bzerror FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int  FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int bzerror,  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int ,  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int bzerror  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int   *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *, FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int * FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *,  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *, FILE f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int * FILE f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *,  f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *  f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror  f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE *, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror  *, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror FILE , int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror  , int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  *f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  *, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  , int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  *f int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  f int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,  * int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror,   int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE f, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE , int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE f int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE  int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE f,  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE ,  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE f  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE   blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *, int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE * int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *,  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *, int ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE * int ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *,  ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *  ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f int blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f int ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f  ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f int blockSize100k
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f  blockSize100k
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f int 
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f  
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k,
>                                verbosity, int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  ,
>                                verbosity, int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  blockSize100k
>                                verbosity, int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f,  
>                                verbosity, int workFactor) {
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int 
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
>                                verbosity, int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int 
>                                verbosity, int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
>                               int , int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int 
>                               int , int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int ,
>                                , int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int 
>                                , int workFactor) {
824c824
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                verbosity, int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                               int , int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                , int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                               int verbosity int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                verbosity int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                               int  int workFactor) {
824,825c824,825
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k
>                                 int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                verbosity, int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                , int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                verbosity int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                 int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                verbosity,  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                ,  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                verbosity  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                                  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int , int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int  int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int ,  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int   workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int , int ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int  int ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int ,  ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int   ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity int workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity int ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity  ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity int workFactor {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity  workFactor {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity int  {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity   {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,  workFactor) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,  ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,  workFactor {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,   {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,  workFactor) 
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,  ) 
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,  workFactor 
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity,   
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int ) {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int  {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int ) 
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int  
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int ) {
>    ret;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int  {
>    ret;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int ) 
>    ret;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int  
>    ret;
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int workFactor {
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int workFactor 
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor {
>    ret;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor 
>    ret;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor {
>   Int32 ;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor 
>   Int32 ;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor {
>    ;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor 
>    ;
825c825
<                               int verbosity, int workFactor) {
---
>                               int verbosity, int workFactor) 
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>    ret;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>   Int32 ;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>    ;
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>   Int32 ret
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>    ret
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>   Int32 
825,826c825,826
<                               int verbosity, int workFactor) {
<   Int32 ret;
---
>                               int verbosity, int workFactor) 
>    
826c826
<   Int32 ret;
---
>    ret;
826c826
<   Int32 ret;
---
>    ;
826c826
<   Int32 ret;
---
>    ret
826c826
<   Int32 ret;
---
>    
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    ret;
>    *bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    ;
>    *bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    ret
>    *bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>    
>    *bzf = NULL;
826c826
<   Int32 ret;
---
>   Int32 ;
826c826
<   Int32 ret;
---
>   Int32 
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ;
>    *bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 
>    *bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ;
>   bzFile bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 
>   bzFile bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ;
>    bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 
>    bzf = NULL;
826c826
<   Int32 ret;
---
>   Int32 ret
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>    *bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>   bzFile bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>    bzf = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>   bzFile * = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>    * = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>   bzFile  = NULL;
826,827c826,827
<   Int32 ret;
<   bzFile *bzf = NULL;
---
>   Int32 ret
>     = NULL;
827c827
<   bzFile *bzf = NULL;
---
>    *bzf = NULL;
827c827
<   bzFile *bzf = NULL;
---
>    bzf = NULL;
827c827
<   bzFile *bzf = NULL;
---
>    * = NULL;
827c827
<   bzFile *bzf = NULL;
---
>     = NULL;
827c827
<   bzFile *bzf = NULL;
---
>    *bzf  NULL;
827c827
<   bzFile *bzf = NULL;
---
>    bzf  NULL;
827c827
<   bzFile *bzf = NULL;
---
>    *  NULL;
827c827
<   bzFile *bzf = NULL;
---
>      NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile bzf = NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile  = NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile bzf  NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile   NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile bzf = ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile  = ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile bzf  ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile   ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile * = ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *  ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL
827c827
<   bzFile *bzf = NULL;
---
>   bzFile * = 
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *  
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL;
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  ;
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf = ;
827c827
<   bzFile *bzf = NULL;
---
>   bzFile *bzf = 
(92.5 %, 15335 bytes)
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK);
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK);
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR();
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   ();
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR);
827c827
<   bzFile *bzf  ;
---
>   bzFile *bzf  
829c829
<   BZ_SETERR(BZ_OK);
---
>   );
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK);
829c829
<   BZ_SETERR(BZ_OK);
---
>   ();
829c829
<   BZ_SETERR(BZ_OK);
---
>   );
829c829
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK;
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK;
829c829
<   BZ_SETERR(BZ_OK);
---
>   (;
829c829
<   BZ_SETERR(BZ_OK);
---
>   ;
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK);
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR);
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK;
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK)
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR)
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR();
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR(;
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR()
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR(
829c829
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR();
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
(92.5 %, 15330 bytes)
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(;
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(;
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(;
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>   if f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>   if f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(;
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR(
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>   if f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>   if ( == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    ( == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>   if  == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
829c829
<   BZ_SETERR();
---
>   BZ_SETERR()
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>     == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
831c831
<   if (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    (f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
(92.5 %, 15325 bytes)
831c831
<    f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>        blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
831c831
<    f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    f  NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
831c831
<    f == NULL || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>    f   || blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
(92.5 %, 15316 bytes)
831c831
<        blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>            blockSize100k > 9 || workFactor < 0 ||
831c831
<        blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>        blockSize100k  1 || blockSize100k > 9 || workFactor < 0 ||
831c831
<        blockSize100k < 1 || blockSize100k > 9 || workFactor < 0 ||
---
>        blockSize100k   || blockSize100k > 9 || workFactor < 0 ||
(92.5 %, 15299 bytes)
831c831
<            blockSize100k > 9 || workFactor < 0 ||
---
>                workFactor < 0 ||
831c831
<            blockSize100k > 9 || workFactor < 0 ||
---
>            blockSize100k  9 || workFactor < 0 ||
831c831
<            blockSize100k > 9 || workFactor < 0 ||
---
>            blockSize100k   || workFactor < 0 ||
(92.5 %, 15282 bytes)
831c831
<                workFactor < 0 ||
---
>                   
831c831
<                workFactor < 0 ||
---
>                workFactor  0 ||
831c831
<                workFactor < 0 ||
---
>                workFactor   ||
(92.5 %, 15268 bytes)
832c832
<       workFactor > 0 || verbosity < 0 || verbosity > 4)
---
>           verbosity < 0 || verbosity > 4)
832c832
<       workFactor > 0 || verbosity < 0 || verbosity > 4)
---
>       workFactor  0 || verbosity < 0 || verbosity > 4)
832c832
<       workFactor > 0 || verbosity < 0 || verbosity > 4)
---
>       workFactor   || verbosity < 0 || verbosity > 4)
(92.6 %, 15254 bytes)
832c832
<           verbosity < 0 || verbosity > 4)
---
>               verbosity > 4)
832c832
<           verbosity < 0 || verbosity > 4)
---
>           verbosity  0 || verbosity > 4)
832c832
<           verbosity < 0 || verbosity > 4)
---
>           verbosity   || verbosity > 4)
(92.6 %, 15241 bytes)
832c832
<               verbosity > 4)
---
>                 
832c832
<               verbosity > 4)
---
>               verbosity  4)
832c832
<               verbosity > 4)
---
>               verbosity  )
832c832
<               verbosity > 4)
---
>               verbosity  4
832c832
<               verbosity > 4)
---
>               verbosity  
832,833c832,833
<               verbosity > 4)
<     ;
---
>               verbosity  4)
>     
832,833c832,833
<               verbosity > 4)
<     ;
---
>               verbosity  )
>     
832,833c832,833
<               verbosity > 4)
<     ;
---
>               verbosity  4
>     
832,833c832,833
<               verbosity > 4)
<     ;
---
>               verbosity  
>     
832c832
<               verbosity > 4)
---
>               verbosity > )
832c832
<               verbosity > 4)
---
>               verbosity > 
832,833c832,833
<               verbosity > 4)
<     ;
---
>               verbosity > )
>     
832,833c832,833
<               verbosity > 4)
<     ;
---
>               verbosity > 
>     
832c832
<               verbosity > 4)
---
>               verbosity > )
835c835
<   if (ferror)
---
>    (ferror)
(92.6 %, 15239 bytes)
832,833c832,833
<               verbosity  )
<     ;
---
>               verbosity  
>     
832c832
<               verbosity  )
---
>               verbosity  
835c835
<   if (ferror)
---
>    (ferror)
832,833c832,833
<               verbosity  )
<     ;
---
>               verbosity  
>     
835c835
<   if (ferror)
---
>    (ferror)
832c832
<               verbosity  )
---
>               verbosity  
835c835
<   if (ferror)
---
>   if ferror)
832,833c832,833
<               verbosity  )
<     ;
---
>               verbosity  
>     
835c835
<   if (ferror)
---
>   if ferror)
832c832
<               verbosity  )
---
>               verbosity  
835c835
<   if (ferror)
---
>    ferror)
832,833c832,833
<               verbosity  )
<     ;
---
>               verbosity  
>     
835c835
<   if (ferror)
---
>    ferror)
833c833
<     ;
---
>     
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>    (ferror)
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>   if ferror)
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>    ferror)
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>   if ()
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>    ()
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>   if )
833c833
<     ;
---
>     
835c835
<   if (ferror)
---
>    )
835c835
<   if (ferror)
---
>    (ferror)
835c835
<   if (ferror)
---
>    ferror)
835c835
<   if (ferror)
---
>    ()
835c835
<   if (ferror)
---
>    )
835c835
<   if (ferror)
---
>    (ferror
835c835
<   if (ferror)
---
>    ferror
(92.6 %, 15237 bytes)
835c835
<    (ferror)
---
>    ferror)
835c835
<    (ferror)
---
>    )
835c835
<    (ferror)
---
>    ferror
835c835
<    (ferror)
---
>    
(92.6 %, 15235 bytes)
835c835
<    ferror
---
>    
838c838
<   bzf = malloc;
---
>    = malloc;
835,836c835,836
<    ferror
<     ;
---
>    
>     
838c838
<   bzf = malloc;
---
>    = malloc;
835c835
<    ferror
---
>    
838c838
<   bzf = malloc;
---
>   bzf  malloc;
835,836c835,836
<    ferror
<     ;
---
>    
>     
838c838
<   bzf = malloc;
---
>   bzf  malloc;
835c835
<    ferror
---
>    
838c838
<   bzf = malloc;
---
>     malloc;
835,836c835,836
<    ferror
<     ;
---
>    
>     
838c838
<   bzf = malloc;
---
>     malloc;
(92.6 %, 15225 bytes)
836c836
<     ;
---
>     
838,839c838,839
<     malloc;
<   if (bzf == NULL)
---
>     malloc
>    (bzf == NULL)
836c836
<     ;
---
>     
838,839c838,839
<     malloc;
<   if (bzf == NULL)
---
>     
>    (bzf == NULL)
838c838
<     malloc;
---
>     ;
(92.6 %, 15221 bytes)
838,839c838,839
<     malloc
<    (bzf == NULL)
---
>     
>    (  NULL)
838,839c838,839
<     malloc
<    (bzf == NULL)
---
>     
>      NULL)
839c839
<    (bzf == NULL)
---
>    bzf == NULL)
839c839
<    (bzf == NULL)
---
>     == NULL)
839c839
<    (bzf == NULL)
---
>    bzf  NULL)
839c839
<    (bzf == NULL)
---
>      NULL)
839c839
<    (bzf == NULL)
---
>    bzf == )
839c839
<    (bzf == NULL)
---
>     == )
839c839
<    (bzf == NULL)
---
>    bzf  )
839c839
<    (bzf == NULL)
---
>      )
839c839
<    (bzf == NULL)
---
>    ( == NULL)
839c839
<    (bzf == NULL)
---
>    (  NULL)
(92.6 %, 15210 bytes)
839,840c839,840
<    (  NULL)
<     ;
---
>      NULL
>     
839,840c839,840
<    (  NULL)
<     ;
---
>      
>     
839c839
<    (  NULL)
---
>    (  )
839c839
<    (  NULL)
---
>    (  
839,840c839,840
<    (  NULL)
<     ;
---
>    (  )
>     
839,840c839,840
<    (  NULL)
<     ;
---
>    (  
>     
839c839
<    (  NULL)
---
>    (  )
842c842
<   BZ_SETERR;
---
>   ;
839c839
<    (  NULL)
---
>    (  
842c842
<   BZ_SETERR;
---
>   ;
839,840c839,840
<    (  NULL)
<     ;
---
>    (  )
>     
842c842
<   BZ_SETERR;
---
>   ;
839,840c839,840
<    (  NULL)
<     ;
---
>    (  
>     
842c842
<   BZ_SETERR;
---
>   ;
839c839
<    (  NULL)
---
>    (  NULL
839,840c839,840
<    (  NULL)
<     ;
---
>    (  NULL
>     
839c839
<    (  NULL)
---
>    (  NULL
842c842
<   BZ_SETERR;
---
>   ;
(92.6 %, 15203 bytes)
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   
>   initialisedOk = False;
842c842
<   BZ_SETERR;
---
>   BZ_SETERR
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   ->initialisedOk = False;
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   bzfinitialisedOk = False;
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   initialisedOk = False;
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   bzf-> = False;
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   -> = False;
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>   bzf = False;
842,843c842,843
<   BZ_SETERR;
<   bzf->initialisedOk = False;
---
>   BZ_SETERR
>    = False;
843c843
<   bzf->initialisedOk = False;
---
>   ->initialisedOk = False;
843c843
<   bzf->initialisedOk = False;
---
>   initialisedOk = False;
843c843
<   bzf->initialisedOk = False;
---
>   -> = False;
843c843
<   bzf->initialisedOk = False;
---
>    = False;
843c843
<   bzf->initialisedOk = False;
---
>   ->initialisedOk  False;
843c843
<   bzf->initialisedOk = False;
---
>   initialisedOk  False;
843c843
<   bzf->initialisedOk = False;
---
>   ->  False;
843c843
<   bzf->initialisedOk = False;
---
>     False;
843c843
<   bzf->initialisedOk = False;
---
>   bzfinitialisedOk = False;
843c843
<   bzf->initialisedOk = False;
---
>   bzf = False;
(92.6 %, 15184 bytes)
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     
>   bufN = 0;
843c843
<     False;
---
>     False
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>   ->bufN = 0;
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>   bzfbufN = 0;
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>   bufN = 0;
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>   bzf-> = 0;
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>   -> = 0;
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>   bzf = 0;
843,844c843,844
<     False;
<   bzf->bufN = 0;
---
>     False
>    = 0;
844c844
<   bzf->bufN = 0;
---
>   ->bufN = 0;
844c844
<   bzf->bufN = 0;
---
>   bufN = 0;
844c844
<   bzf->bufN = 0;
---
>   -> = 0;
844c844
<   bzf->bufN = 0;
---
>    = 0;
844c844
<   bzf->bufN = 0;
---
>   ->bufN  0;
844c844
<   bzf->bufN = 0;
---
>   bufN  0;
844c844
<   bzf->bufN = 0;
---
>   ->  0;
844c844
<   bzf->bufN = 0;
---
>     0;
844c844
<   bzf->bufN = 0;
---
>   bzfbufN = 0;
844c844
<   bzf->bufN = 0;
---
>   bzf = 0;
(92.6 %, 15174 bytes)
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     
>   handle = f;
844c844
<     0;
---
>     0
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>   ->handle = f;
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>   bzfhandle = f;
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>   handle = f;
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>   bzf-> = f;
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>   -> = f;
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>   bzf = f;
844,845c844,845
<     0;
<   bzf->handle = f;
---
>     0
>    = f;
845c845
<   bzf->handle = f;
---
>   ->handle = f;
845c845
<   bzf->handle = f;
---
>   handle = f;
845c845
<   bzf->handle = f;
---
>   -> = f;
845c845
<   bzf->handle = f;
---
>    = f;
845c845
<   bzf->handle = f;
---
>   ->handle  f;
845c845
<   bzf->handle = f;
---
>   handle  f;
845c845
<   bzf->handle = f;
---
>   ->  f;
845c845
<   bzf->handle = f;
---
>     f;
845c845
<   bzf->handle = f;
---
>   bzfhandle = f;
845c845
<   bzf->handle = f;
---
>   bzf = f;
845c845
<   bzf->handle = f;
---
>   bzfhandle  f;
845c845
<   bzf->handle = f;
---
>   bzf  f;
845c845
<   bzf->handle = f;
---
>   bzfhandle = ;
(92.6 %, 15162 bytes)
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     
>   writing = True;
845c845
<     f;
---
>     f
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>   ->writing = True;
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>   bzfwriting = True;
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>   writing = True;
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>   bzf-> = True;
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>   -> = True;
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>   bzf = True;
845,846c845,846
<     f;
<   bzf->writing = True;
---
>     f
>    = True;
846c846
<   bzf->writing = True;
---
>   ->writing = True;
846c846
<   bzf->writing = True;
---
>   writing = True;
846c846
<   bzf->writing = True;
---
>   -> = True;
846c846
<   bzf->writing = True;
---
>    = True;
846c846
<   bzf->writing = True;
---
>   ->writing  True;
846c846
<   bzf->writing = True;
---
>   writing  True;
846c846
<   bzf->writing = True;
---
>   ->  True;
846c846
<   bzf->writing = True;
---
>     True;
(92.6 %, 15149 bytes)
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>     
>   ->strm.bzalloc = NULL;
846c846
<    = True;
---
>    = ;
846c846
<    = True;
---
>    = 
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = ;
>   ->strm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = 
>   ->strm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = ;
>   bzfstrm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = 
>   bzfstrm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = ;
>   strm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = 
>   strm.bzalloc = NULL;
846c846
<    = True;
---
>    = True
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   ->strm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   bzfstrm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   strm.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   bzf->.bzalloc = NULL;
846,847c846,847
<    = True;
<   bzf->strm.bzalloc = NULL;
---
>    = True
>   ->.bzalloc = NULL;
(92.6 %, 15144 bytes)
847c847
<   bzf->strm.bzalloc = NULL;
---
>   strm.bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   ->.bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   ->strmbzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   ->bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm.bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf.bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrmbzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzfbzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm. = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf. = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->. = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf-> = NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc  NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc  NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.  NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->  NULL;
847c847
<   bzf->strm.bzalloc = NULL;
---
>   bzf->strmbzalloc = NULL;
(92.6 %, 15130 bytes)
847,848c847,848
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf  
>   ->strm.bzfree = NULL;
847c847
<   bzf = NULL;
---
>   bzf = ;
847c847
<   bzf = NULL;
---
>   bzf = 
(92.6 %, 15121 bytes)
848c848
<   ->strm.bzfree = NULL;
---
>    = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->.bzfree = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->bzfree = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->. = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   -> = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->.bzfree  NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->bzfree  NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->.  NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->  NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->strmbzfree = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->strm = NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->strmbzfree  NULL;
848c848
<   ->strm.bzfree = NULL;
---
>   ->strm  NULL;
(92.6 %, 15108 bytes)
848,849c848,849
<    = NULL;
<   bzf->strm.opaque = NULL;
---
>     
>   ->strm.opaque = NULL;
848c848
<    = NULL;
---
>    = ;
848c848
<    = NULL;
---
>    = 
(92.6 %, 15099 bytes)
849c849
<   ->strm.opaque = NULL;
---
>    = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->.opaque = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->opaque = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->. = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   -> = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->.opaque  NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->opaque  NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->.  NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->  NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->strmopaque = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->strm = NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->strmopaque  NULL;
849c849
<   ->strm.opaque = NULL;
---
>   ->strm  NULL;
(92.6 %, 15086 bytes)
849c849
<    = NULL;
---
>     
851c851
<   workFactor == 0;
---
>    == 0;
849c849
<    = NULL;
---
>    = ;
849c849
<    = NULL;
---
>    = 
(92.6 %, 15070 bytes)
851c851
<    == 0;
---
>     
853c853
<   workFactor = 0;
---
>    = 0;
851c851
<    == 0;
---
>    == ;
851c851
<    == 0;
---
>    == 
851c851
<    == 0;
---
>    == ;
853c853
<   workFactor = 0;
---
>    = 0;
851c851
<    == 0;
---
>    == 
853c853
<   workFactor = 0;
---
>    = 0;
851c851
<    == 0;
---
>    == ;
853c853
<   workFactor = 0;
---
>   workFactor  0;
851c851
<    == 0;
---
>    == 
853c853
<   workFactor = 0;
---
>   workFactor  0;
851c851
<    == 0;
---
>    == ;
853c853
<   workFactor = 0;
---
>     0;
851c851
<    == 0;
---
>    == 
853c853
<   workFactor = 0;
---
>     0;
(92.7 %, 15056 bytes)
853,854c853,854
<    = 0;
<   ret = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>     
>    = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
853c853
<    = 0;
---
>    = ;
853c853
<    = 0;
---
>    = 
(92.7 %, 15050 bytes)
854c854
<    = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>     bzf->strm, blockSize100k, verbosity, workFactor);
854c854
<    = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (&bzf->strm, blockSize100k, verbosity, workFactor);
854c854
<    = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = &bzf->strm, blockSize100k, verbosity, workFactor);
854c854
<    = BZ2_bzCompressInit(&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzf->strm, blockSize100k, verbosity, workFactor);
(92.7 %, 15032 bytes)
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = &bzf->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = bzf->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = &->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = ->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = &bzfstrm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = bzfstrm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = &strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzf->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzfstrm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (strm, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzf->, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (->, blockSize100k, verbosity, workFactor);
854c854
<    = (&bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzf, blockSize100k, verbosity, workFactor);
(92.7 %, 15031 bytes)
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (->strm, blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (strm, blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (->, blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (, blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (->strm blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (strm blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (-> blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = ( blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzfstrm, blockSize100k, verbosity, workFactor);
854c854
<    = (bzf->strm, blockSize100k, verbosity, workFactor);
---
>    = (bzf, blockSize100k, verbosity, workFactor);
(92.7 %, 15021 bytes)
854c854
<    = ( blockSize100k, verbosity, workFactor);
---
>    = (   workFactor);
854c854
<    = ( blockSize100k, verbosity, workFactor);
---
>    = ( blockSize100k verbosity, workFactor);
854c854
<    = ( blockSize100k, verbosity, workFactor);
---
>    = ( blockSize100k , workFactor);
(92.7 %, 14997 bytes)
854,855c854,855
<    = (   workFactor);
<   ;
---
>    = (   
>   
854c854
<    = (   workFactor);
---
>    = (   workFactor;
854c854
<    = (   workFactor);
---
>    = (   workFactor
854,855c854,855
<    = (   workFactor);
<   ;
---
>    = (   workFactor;
>   
854,855c854,855
<    = (   workFactor);
<   ;
---
>    = (   workFactor
>   
854c854
<    = (   workFactor);
---
>    = (   workFactor;
857c857
<   ;
---
>   
854c854
<    = (   workFactor);
---
>    = (   workFactor
857c857
<   ;
---
>   
854,855c854,855
<    = (   workFactor);
<   ;
---
>    = (   workFactor;
>   
857c857
<   ;
---
>   
854,855c854,855
<    = (   workFactor);
<   ;
---
>    = (   workFactor
>   
857c857
<   ;
---
>   
854c854
<    = (   workFactor);
---
>    = (   workFactor)
854,855c854,855
<    = (   workFactor);
<   ;
---
>    = (   workFactor)
>   
(92.7 %, 14996 bytes)
855c855
<   ;
---
>   
855c855
<   ;
---
>   
857c857
<   ;
---
>   
855c855
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
855c855
<   ;
---
>   
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
855c855
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrm.avail_in = 0;
855c855
<   ;
---
>   
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrm.avail_in = 0;
855c855
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   strm.avail_in = 0;
855c855
<   ;
---
>   
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   strm.avail_in = 0;
857c857
<   ;
---
>   
(92.7 %, 14995 bytes)
857c857
<   ;
---
>   
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrm.avail_in = 0;
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   strm.avail_in = 0;
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->.avail_in = 0;
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   ->.avail_in = 0;
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf.avail_in = 0;
857c857
<   ;
---
>   
859c859
<   bzf->strm.avail_in = 0;
---
>   .avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   ->strm.avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   strm.avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   ->.avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   .avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   ->strmavail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   strmavail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   ->avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrm.avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf.avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrmavail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfavail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrm. = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf. = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzfstrm = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->.avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->avail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->. = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf-> = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->.avail_in  0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->avail_in  0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->.  0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->  0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->strmavail_in = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->strm = 0;
859c859
<   bzf->strm.avail_in = 0;
---
>   bzf->strmavail_in  0;
(92.7 %, 14980 bytes)
859,860c859,860
<   bzf = 0;
<   bzf->initialisedOk = True;
---
>   bzf  
>   ->initialisedOk = True;
859c859
<   bzf = 0;
---
>   bzf = ;
859c859
<   bzf = 0;
---
>   bzf = 
(92.7 %, 14974 bytes)
860c860
<   ->initialisedOk = True;
---
>     ;
860c860
<   ->initialisedOk = True;
---
>   -> = True;
860c860
<   ->initialisedOk = True;
---
>   ->  True;
860c860
<   ->initialisedOk = True;
---
>   -> = ;
860c860
<   ->initialisedOk = True;
---
>   ->  ;
860c860
<   ->initialisedOk = True;
---
>   -> = True
860c860
<   ->initialisedOk = True;
---
>   ->  True
860c860
<   ->initialisedOk = True;
---
>   -> = 
860c860
<   ->initialisedOk = True;
---
>   ->  
860c860
<   ->initialisedOk = True;
---
>   ->initialisedOk  True;
860c860
<   ->initialisedOk = True;
---
>   ->initialisedOk  ;
(92.7 %, 14954 bytes)
860,861c860,861
<     ;
<   return bzf;
---
>     
>    
861c861
<   return bzf;
---
>    bzf;
861c861
<   return bzf;
---
>    ;
(92.7 %, 14948 bytes)
861c861
<    bzf;
---
>    ;
861c861
<    bzf;
---
>    
861,862c861,862
<    bzf;
< }
---
>    ;
> 
(92.7 %, 14945 bytes)
861c861
<    ;
---
>    
861,862c861,862
<    ;
< }
---
>    
> 
861c861
<    ;
---
>    
864c864
< void BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite(
(92.7 %, 14944 bytes)
862c862
< }
---
> 
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
>  BZ_APIBZ2_bzWrite(
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
> void (
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
>  (
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
> void BZ_APIBZ2_bzWrite
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
>  BZ_APIBZ2_bzWrite
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
> void 
862d861
< }
864c863,864
< void BZ_APIBZ2_bzWrite(
---
> 
>  
864c864
< void BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite(
864c864
< void BZ_APIBZ2_bzWrite(
---
>  (
864c864
< void BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
864c864
< void BZ_APIBZ2_bzWrite(
---
>  
864c864
< void BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite(
866c866
<     void) {
---
>     ) {
(92.7 %, 14940 bytes)
864c864
<  BZ_APIBZ2_bzWrite(
---
>  (
864c864
<  BZ_APIBZ2_bzWrite(
---
>  
864c864
<  BZ_APIBZ2_bzWrite(
---
>  (
866c866
<     void) {
---
>     ) {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  
866c866
<     void) {
---
>     ) {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  (
866c866
<     void) {
---
>     void {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  
866c866
<     void) {
---
>     void {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  (
866c866
<     void) {
---
>      {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  
866c866
<     void) {
---
>      {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>     ) {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>     void {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>      {
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>     void) 
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>     ) 
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>     void 
864c864
<  BZ_APIBZ2_bzWrite(
---
>  BZ_APIBZ2_bzWrite
866c866
<     void) {
---
>      
866c866
<     void) {
---
>     ) {
866c866
<     void) {
---
>      {
866c866
<     void) {
---
>     ) 
866c866
<     void) {
---
>      
866,867c866,867
<     void) {
<   int len = 0;
---
>     ) {
>    len = 0;
866,867c866,867
<     void) {
<   int len = 0;
---
>      {
>    len = 0;
866,867c866,867
<     void) {
<   int len = 0;
---
>     ) 
>    len = 0;
866,867c866,867
<     void) {
<   int len = 0;
---
>      
>    len = 0;
866c866
<     void) {
---
>     void {
866c866
<     void) {
---
>     void 
866,867c866,867
<     void) {
<   int len = 0;
---
>     void {
>    len = 0;
866,867c866,867
<     void) {
<   int len = 0;
---
>     void 
>    len = 0;
866,867c866,867
<     void) {
<   int len = 0;
---
>     void {
>   int  = 0;
(92.7 %, 14936 bytes)
866c866
<     ) {
---
>      {
866c866
<     ) {
---
>      
866,867c866,867
<     ) {
<   int len = 0;
---
>      {
>    len = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>      
>    len = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>      {
>   int  = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>      
>   int  = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>      {
>     = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>      
>     = 0;
866c866
<     ) {
---
>     ) 
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>    len = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>   int  = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>     = 0;
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>   int len  0;
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>    len  0;
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>   int   0;
866,867c866,867
<     ) {
<   int len = 0;
---
>     ) 
>      0;
867c867
<   int len = 0;
---
>    len = 0;
867c867
<   int len = 0;
---
>     = 0;
867c867
<   int len = 0;
---
>    len  0;
867c867
<   int len = 0;
---
>      0;
867c867
<   int len = 0;
---
>    len = ;
867c867
<   int len = 0;
---
>     = ;
867c867
<   int len = 0;
---
>    len  ;
867c867
<   int len = 0;
---
>      ;
867c867
<   int len = 0;
---
>   int  = 0;
867c867
<   int len = 0;
---
>   int   0;
867c867
<   int len = 0;
---
>   int  = ;
867c867
<   int len = 0;
---
>   int   ;
867c867
<   int len = 0;
---
>   int  = 0
867c867
<   int len = 0;
---
>   int   0
867c867
<   int len = 0;
---
>   int  = 
867c867
<   int len = 0;
---
>   int   
867c867
<   int len = 0;
---
>   int len  0;
867c867
<   int len = 0;
---
>   int len  ;
867c867
<   int len = 0;
---
>   int len  0
867c867
<   int len = 0;
---
>   int len  
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len  0;
>    *buf = 0;
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len  ;
>    *buf = 0;
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len  0
>    *buf = 0;
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len  
>    *buf = 0;
867c867
<   int len = 0;
---
>   int len = ;
867c867
<   int len = 0;
---
>   int len = 
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len = ;
>    *buf = 0;
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len = 
>    *buf = 0;
867,868c867,868
<   int len = 0;
<   void *buf = 0;
---
>   int len = ;
>   void buf = 0;
(92.7 %, 14934 bytes)
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>    *buf = 0;
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>   void buf = 0;
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>    buf = 0;
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>   void * = 0;
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>    * = 0;
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>   void  = 0;
867,868c867,868
<   int len  ;
<   void *buf = 0;
---
>   int len  
>     = 0;
868c868
<   void *buf = 0;
---
>    *buf = 0;
868c868
<   void *buf = 0;
---
>    buf = 0;
868c868
<   void *buf = 0;
---
>    * = 0;
868c868
<   void *buf = 0;
---
>     = 0;
868c868
<   void *buf = 0;
---
>    *buf  0;
868c868
<   void *buf = 0;
---
>    buf  0;
868c868
<   void *buf = 0;
---
>    *  0;
868c868
<   void *buf = 0;
---
>      0;
868c868
<   void *buf = 0;
---
>   void buf = 0;
868c868
<   void *buf = 0;
---
>   void  = 0;
868c868
<   void *buf = 0;
---
>   void buf  0;
868c868
<   void *buf = 0;
---
>   void   0;
868c868
<   void *buf = 0;
---
>   void buf = ;
868c868
<   void *buf = 0;
---
>   void  = ;
868c868
<   void *buf = 0;
---
>   void buf  ;
868c868
<   void *buf = 0;
---
>   void   ;
868c868
<   void *buf = 0;
---
>   void * = 0;
868c868
<   void *buf = 0;
---
>   void *  0;
868c868
<   void *buf = 0;
---
>   void * = ;
868c868
<   void *buf = 0;
---
>   void *  ;
868c868
<   void *buf = 0;
---
>   void * = 0
868c868
<   void *buf = 0;
---
>   void *  0
868c868
<   void *buf = 0;
---
>   void * = 
868c868
<   void *buf = 0;
---
>   void *  
868c868
<   void *buf = 0;
---
>   void *buf  0;
868c868
<   void *buf = 0;
---
>   void *buf  ;
868c868
<   void *buf = 0;
---
>   void *buf  0
868c868
<   void *buf = 0;
---
>   void *buf  
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  0;
>    *b = 0;
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  ;
>    *b = 0;
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  0
>    *b = 0;
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  
>    *b = 0;
868c868
<   void *buf = 0;
---
>   void *buf = ;
868c868
<   void *buf = 0;
---
>   void *buf = 
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf = ;
>    *b = 0;
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf = 
>    *b = 0;
868,869c868,869
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf = ;
>   BZFILE b = 0;
(92.7 %, 14932 bytes)
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>    *b = 0;
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>   BZFILE b = 0;
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>    b = 0;
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>   BZFILE * = 0;
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>    * = 0;
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>   BZFILE  = 0;
868,869c868,869
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>     = 0;
869c869
<   BZFILE *b = 0;
---
>    *b = 0;
869c869
<   BZFILE *b = 0;
---
>    b = 0;
869c869
<   BZFILE *b = 0;
---
>    * = 0;
869c869
<   BZFILE *b = 0;
---
>     = 0;
869c869
<   BZFILE *b = 0;
---
>    *b  0;
869c869
<   BZFILE *b = 0;
---
>    b  0;
869c869
<   BZFILE *b = 0;
---
>    *  0;
869c869
<   BZFILE *b = 0;
---
>      0;
869c869
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
869c869
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
869c869
<   BZFILE *b = 0;
---
>   BZFILE b  0;
869c869
<   BZFILE *b = 0;
---
>   BZFILE   0;
869c869
<   BZFILE *b = 0;
---
>   BZFILE b = ;
869c869
<   BZFILE *b = 0;
---
>   BZFILE  = ;
869c869
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(92.7 %, 14931 bytes)
869c869
<   BZFILE b = 0;
---
>   BZFILE  = 0;
869c869
<   BZFILE b = 0;
---
>   BZFILE   0;
869c869
<   BZFILE b = 0;
---
>   BZFILE  = ;
869c869
<   BZFILE b = 0;
---
>   BZFILE   ;
869c869
<   BZFILE b = 0;
---
>   BZFILE  = 0
869c869
<   BZFILE b = 0;
---
>   BZFILE   0
869c869
<   BZFILE b = 0;
---
>   BZFILE  = 
869c869
<   BZFILE b = 0;
---
>   BZFILE   
869c869
<   BZFILE b = 0;
---
>   BZFILE b  0;
869c869
<   BZFILE b = 0;
---
>   BZFILE b  ;
869c869
<   BZFILE b = 0;
---
>   BZFILE b  0
869c869
<   BZFILE b = 0;
---
>   BZFILE b  
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  0;
>    *bzerror = 0;
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  ;
>    *bzerror = 0;
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  0
>    *bzerror = 0;
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  
>    *bzerror = 0;
869c869
<   BZFILE b = 0;
---
>   BZFILE b = ;
869c869
<   BZFILE b = 0;
---
>   BZFILE b = 
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b = ;
>    *bzerror = 0;
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b = 
>    *bzerror = 0;
869,870c869,870
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b = ;
>   int bzerror = 0;
(92.7 %, 14929 bytes)
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>    *bzerror = 0;
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>   int bzerror = 0;
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>    bzerror = 0;
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>   int * = 0;
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>    * = 0;
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>   int  = 0;
869,870c869,870
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>     = 0;
870c870
<   int *bzerror = 0;
---
>    *bzerror = 0;
870c870
<   int *bzerror = 0;
---
>    bzerror = 0;
870c870
<   int *bzerror = 0;
---
>    * = 0;
870c870
<   int *bzerror = 0;
---
>     = 0;
870c870
<   int *bzerror = 0;
---
>    *bzerror  0;
870c870
<   int *bzerror = 0;
---
>    bzerror  0;
870c870
<   int *bzerror = 0;
---
>    *  0;
870c870
<   int *bzerror = 0;
---
>      0;
(92.7 %, 14917 bytes)
870,871c870,871
<     = 0;
<   Int32 ret;
---
>      
>    ret;
870c870
<     = 0;
---
>     = ;
870c870
<     = 0;
---
>     = 
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = ;
>    ret;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 
>    ret;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = ;
>   Int32 ;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 
>   Int32 ;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = ;
>    ;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 
>    ;
870c870
<     = 0;
---
>     = 0
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>    ret;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>   Int32 ;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>    ;
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>   Int32 ret
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>    ret
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>   Int32 
870,871c870,871
<     = 0;
<   Int32 ret;
---
>     = 0
>    
871c871
<   Int32 ret;
---
>    ret;
871c871
<   Int32 ret;
---
>    ;
871c871
<   Int32 ret;
---
>    ret
871c871
<   Int32 ret;
---
>    
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>    ret;
>    *bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>    ;
>    *bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>    ret
>    *bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>    
>    *bzf = b;
871c871
<   Int32 ret;
---
>   Int32 ;
871c871
<   Int32 ret;
---
>   Int32 
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ;
>    *bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 
>    *bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ;
>   bzFile bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 
>   bzFile bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ;
>    bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 
>    bzf = b;
871c871
<   Int32 ret;
---
>   Int32 ret
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>    *bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>   bzFile bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>    bzf = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>   bzFile * = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>    * = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>   bzFile  = b;
871,872c871,872
<   Int32 ret;
<   bzFile *bzf = b;
---
>   Int32 ret
>     = b;
872c872
<   bzFile *bzf = b;
---
>    *bzf = b;
872c872
<   bzFile *bzf = b;
---
>    bzf = b;
872c872
<   bzFile *bzf = b;
---
>    * = b;
872c872
<   bzFile *bzf = b;
---
>     = b;
872c872
<   bzFile *bzf = b;
---
>    *bzf  b;
872c872
<   bzFile *bzf = b;
---
>    bzf  b;
872c872
<   bzFile *bzf = b;
---
>    *  b;
872c872
<   bzFile *bzf = b;
---
>      b;
872c872
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
872c872
<   bzFile *bzf = b;
---
>   bzFile  = b;
872c872
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
872c872
<   bzFile *bzf = b;
---
>   bzFile   b;
872c872
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
872c872
<   bzFile *bzf = b;
---
>   bzFile  = ;
872c872
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
872c872
<   bzFile *bzf = b;
---
>   bzFile   ;
872c872
<   bzFile *bzf = b;
---
>   bzFile * = b;
872c872
<   bzFile *bzf = b;
---
>   bzFile *  b;
872c872
<   bzFile *bzf = b;
---
>   bzFile * = ;
872c872
<   bzFile *bzf = b;
---
>   bzFile *  ;
872c872
<   bzFile *bzf = b;
---
>   bzFile * = b
872c872
<   bzFile *bzf = b;
---
>   bzFile *  b
872c872
<   bzFile *bzf = b;
---
>   bzFile * = 
872c872
<   bzFile *bzf = b;
---
>   bzFile *  
872c872
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
872c872
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
872c872
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
872c872
<   bzFile *bzf = b;
---
>   bzFile *bzf  
872,873c872,873
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  b;
>    *bzf_4_4;
872,873c872,873
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  ;
>    *bzf_4_4;
872,873c872,873
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  b
>    *bzf_4_4;
872,873c872,873
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    *bzf_4_4;
872c872
<   bzFile *bzf = b;
---
>   bzFile *bzf = ;
872c872
<   bzFile *bzf = b;
---
>   bzFile *bzf = 
872,873c872,873
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf = ;
>    *bzf_4_4;
872,873c872,873
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf = 
>    *bzf_4_4;
(92.7 %, 14915 bytes)
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    *bzf_4_4;
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>   char bzf_4_4;
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    bzf_4_4;
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>   char *;
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    *;
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>   char ;
872,873c872,873
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    ;
873c873
<   char *bzf_4_4;
---
>    *bzf_4_4;
873c873
<   char *bzf_4_4;
---
>    bzf_4_4;
873c873
<   char *bzf_4_4;
---
>    *;
873c873
<   char *bzf_4_4;
---
>    ;
873c873
<   char *bzf_4_4;
---
>    *bzf_4_4
873c873
<   char *bzf_4_4;
---
>    bzf_4_4
873c873
<   char *bzf_4_4;
---
>    *
873c873
<   char *bzf_4_4;
---
>    
873c873
<   char *bzf_4_4;
---
>   char bzf_4_4;
873c873
<   char *bzf_4_4;
---
>   char ;
873c873
<   char *bzf_4_4;
---
>   char bzf_4_4
873c873
<   char *bzf_4_4;
---
>   char 
873,874c873,874
<   char *bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4;
>    int bzf_4_5;
(92.7 %, 14914 bytes)
873c873
<   char bzf_4_4;
---
>   char ;
873c873
<   char bzf_4_4;
---
>   char 
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char ;
>    int bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char 
>    int bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char ;
>   unsigned  bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char 
>   unsigned  bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char ;
>     bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char 
>     bzf_4_5;
873c873
<   char bzf_4_4;
---
>   char bzf_4_4
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>    int bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>   unsigned  bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>     bzf_4_5;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>   unsigned int ;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>    int ;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>   unsigned  ;
873,874c873,874
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>     ;
874c874
<   unsigned int bzf_4_5;
---
>    int bzf_4_5;
874c874
<   unsigned int bzf_4_5;
---
>     bzf_4_5;
874c874
<   unsigned int bzf_4_5;
---
>    int ;
874c874
<   unsigned int bzf_4_5;
---
>     ;
874c874
<   unsigned int bzf_4_5;
---
>    int bzf_4_5
874c874
<   unsigned int bzf_4_5;
---
>     bzf_4_5
874c874
<   unsigned int bzf_4_5;
---
>    int 
874c874
<   unsigned int bzf_4_5;
---
>     
874c874
<   unsigned int bzf_4_5;
---
>   unsigned  bzf_4_5;
(92.7 %, 14906 bytes)
874c874
<    int bzf_4_5;
---
>     bzf_4_5;
874c874
<    int bzf_4_5;
---
>     ;
874c874
<    int bzf_4_5;
---
>     bzf_4_5
874c874
<    int bzf_4_5;
---
>     
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>     bzf_4_5;
>    *bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>     ;
>    *bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>     bzf_4_5
>    *bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>     
>    *bzf_4_0;
874c874
<    int bzf_4_5;
---
>    int ;
874c874
<    int bzf_4_5;
---
>    int 
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int ;
>    *bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int 
>    *bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int ;
>   char bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int 
>   char bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int ;
>    bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int 
>    bzf_4_0;
874c874
<    int bzf_4_5;
---
>    int bzf_4_5
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>    *bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>   char bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>    bzf_4_0;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>   char *;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>    *;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>   char ;
874,875c874,875
<    int bzf_4_5;
<   char *bzf_4_0;
---
>    int bzf_4_5
>    ;
875c875
<   char *bzf_4_0;
---
>    *bzf_4_0;
875c875
<   char *bzf_4_0;
---
>    bzf_4_0;
875c875
<   char *bzf_4_0;
---
>    *;
875c875
<   char *bzf_4_0;
---
>    ;
875c875
<   char *bzf_4_0;
---
>    *bzf_4_0
875c875
<   char *bzf_4_0;
---
>    bzf_4_0
875c875
<   char *bzf_4_0;
---
>    *
875c875
<   char *bzf_4_0;
---
>    
875c875
<   char *bzf_4_0;
---
>   char bzf_4_0;
875c875
<   char *bzf_4_0;
---
>   char ;
875c875
<   char *bzf_4_0;
---
>   char bzf_4_0
875c875
<   char *bzf_4_0;
---
>   char 
875,876c875,876
<   char *bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0;
>    int bzf_4_1;
(92.7 %, 14905 bytes)
875c875
<   char bzf_4_0;
---
>   char ;
875c875
<   char bzf_4_0;
---
>   char 
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>    int bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>    int bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>   unsigned  bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>   unsigned  bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>     bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>     bzf_4_1;
875c875
<   char bzf_4_0;
---
>   char bzf_4_0
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>    int bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned  bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>     bzf_4_1;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned int ;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>    int ;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned  ;
875,876c875,876
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>     ;
876c876
<   unsigned int bzf_4_1;
---
>    int bzf_4_1;
876c876
<   unsigned int bzf_4_1;
---
>     bzf_4_1;
876c876
<   unsigned int bzf_4_1;
---
>    int ;
876c876
<   unsigned int bzf_4_1;
---
>     ;
876c876
<   unsigned int bzf_4_1;
---
>    int bzf_4_1
876c876
<   unsigned int bzf_4_1;
---
>     bzf_4_1
876c876
<   unsigned int bzf_4_1;
---
>    int 
876c876
<   unsigned int bzf_4_1;
---
>     
876c876
<   unsigned int bzf_4_1;
---
>   unsigned  bzf_4_1;
(92.7 %, 14897 bytes)
876c876
<    int bzf_4_1;
---
>     bzf_4_1;
876c876
<    int bzf_4_1;
---
>     ;
876c876
<    int bzf_4_1;
---
>     bzf_4_1
876c876
<    int bzf_4_1;
---
>     
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>     bzf_4_1;
>    bzf_3;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>     ;
>    bzf_3;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>     bzf_4_1
>    bzf_3;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>     
>    bzf_3;
876c876
<    int bzf_4_1;
---
>    int ;
876c876
<    int bzf_4_1;
---
>    int 
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int ;
>    bzf_3;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int 
>    bzf_3;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int ;
>   Bool ;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int 
>   Bool ;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int ;
>    ;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int 
>    ;
876c876
<    int bzf_4_1;
---
>    int bzf_4_1
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    bzf_3;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>   Bool ;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    ;
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>   Bool bzf_3
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    bzf_3
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>   Bool 
876,877c876,877
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    
877c877
<   Bool bzf_3;
---
>    bzf_3;
877c877
<   Bool bzf_3;
---
>    ;
877c877
<   Bool bzf_3;
---
>    bzf_3
877c877
<   Bool bzf_3;
---
>    
877c877
<   Bool bzf_3;
---
>    bzf_3;
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>    ;
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>    bzf_3
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>    
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>   Bool ;
877c877
<   Bool bzf_3;
---
>   Bool 
877c877
<   Bool bzf_3;
---
>   Bool ;
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>   Bool 
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>   Bool ;
879c879
<   0;
---
>   0
877c877
<   Bool bzf_3;
---
>   Bool 
879c879
<   0;
---
>   0
877c877
<   Bool bzf_3;
---
>   Bool ;
879c879
<   0;
---
>   
877c877
<   Bool bzf_3;
---
>   Bool 
879c879
<   0;
---
>   
877c877
<   Bool bzf_3;
---
>   Bool bzf_3
877c877
<   Bool bzf_3;
---
>   Bool bzf_3
879c879
<   0;
---
>   ;
877c877
<   Bool bzf_3;
---
>   Bool bzf_3
879c879
<   0;
---
>   0
877c877
<   Bool bzf_3;
---
>   Bool bzf_3
879c879
<   0;
---
>   
877c877
<   Bool bzf_3;
---
>   Bool bzf_3
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
877c877
<   Bool bzf_3;
---
>   Bool bzf_3
879,880c879,880
<   0;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   ;
>    (bzf == NULL || buf == NULL || len < 0)
(92.7 %, 14895 bytes)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>    (bzf == NULL || buf == NULL || len < 0)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>   if bzf == NULL || buf == NULL || len < 0)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>    bzf == NULL || buf == NULL || len < 0)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>   if ( == NULL || buf == NULL || len < 0)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>    ( == NULL || buf == NULL || len < 0)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>   if  == NULL || buf == NULL || len < 0)
879,880c879,880
<   ;
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   
>     == NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf  NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
880c880
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
(92.7 %, 14893 bytes)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>      NULL || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf ==  || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>     ==  || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf   || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>       || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==  || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (   || buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL  buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL  buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==   buf == NULL || len < 0)
880c880
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
(92.7 %, 14888 bytes)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||  == NULL || len < 0)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (     == NULL || len < 0)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (   || buf  NULL || len < 0)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf  NULL || len < 0)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||   NULL || len < 0)
880c880
<    (  NULL || buf == NULL || len < 0)
---
>    (      NULL || len < 0)
(92.7 %, 14882 bytes)
880c880
<    (    buf == NULL || len < 0)
---
>    (      NULL || len < 0)
880c880
<    (    buf == NULL || len < 0)
---
>    (     ==  || len < 0)
880c880
<    (    buf == NULL || len < 0)
---
>    (       || len < 0)
880c880
<    (    buf == NULL || len < 0)
---
>    (     == NULL  len < 0)
880c880
<    (    buf == NULL || len < 0)
---
>    (      NULL  len < 0)
880c880
<    (    buf == NULL || len < 0)
---
>    (     ==   len < 0)
880c880
<    (    buf == NULL || len < 0)
---
>    (        len < 0)
(92.7 %, 14877 bytes)
880c880
<    (      NULL || len < 0)
---
>    (        len < 0)
880c880
<    (      NULL || len < 0)
---
>    (       ||  < 0)
880c880
<    (      NULL || len < 0)
---
>    (         < 0)
880c880
<    (      NULL || len < 0)
---
>    (       || len  0)
880c880
<    (      NULL || len < 0)
---
>    (        len  0)
880c880
<    (      NULL || len < 0)
---
>    (       ||   0)
880c880
<    (      NULL || len < 0)
---
>    (          0)
(92.7 %, 14871 bytes)
880c880
<    (        len < 0)
---
>    (          0)
880c880
<    (        len < 0)
---
>    (         < )
880c880
<    (        len < 0)
---
>    (          )
880c880
<    (        len < 0)
---
>    (         < 0
880c880
<    (        len < 0)
---
>    (          0
880c880
<    (        len < 0)
---
>    (         < 
880c880
<    (        len < 0)
---
>    (          
880c880
<    (        len < 0)
---
>    (        len  0)
880c880
<    (        len < 0)
---
>    (        len  )
(92.7 %, 14867 bytes)
880c880
<    (          0)
---
>    (          
880,881c880,881
<    (          0)
<     ;
---
>    (          )
>     
880,881c880,881
<    (          0)
<     ;
---
>    (          
>     
880c880
<    (          0)
---
>    (          )
882c882
<   !bzf_3;
---
>   bzf_3;
880c880
<    (          0)
---
>    (          
882c882
<   !bzf_3;
---
>   bzf_3;
880,882c880,882
<    (          0)
<     ;
<   !bzf_3;
---
>    (          )
>     
>   bzf_3;
880,882c880,882
<    (          0)
<     ;
<   !bzf_3;
---
>    (          
>     
>   bzf_3;
880c880
<    (          0)
---
>    (          0
880,881c880,881
<    (          0)
<     ;
---
>    (          0
>     
880c880
<    (          0)
---
>    (          0
882c882
<   !bzf_3;
---
>   bzf_3;
880,882c880,882
<    (          0)
<     ;
<   !bzf_3;
---
>    (          0
>     
>   bzf_3;
880c880
<    (          0)
---
>    (          0
882c882
<   !bzf_3;
---
>   !;
880,882c880,882
<    (          0)
<     ;
<   !bzf_3;
---
>    (          0
>     
>   !;
880c880
<    (          0)
---
>    (          0
882c882
<   !bzf_3;
---
>   ;
880,882c880,882
<    (          0)
<     ;
<   !bzf_3;
---
>    (          0
>     
>   ;
881c881
<     ;
---
>     
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   bzf_3;
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   !;
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   ;
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   !bzf_3
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   bzf_3
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   !
881,882c881,882
<     ;
<   !bzf_3;
---
>     
>   
(92.7 %, 14860 bytes)
882c882
<   ;
---
>   
884,885c884,885
<   ;
<   if (ferror)
---
>   
>    (ferror)
882c882
<   ;
---
>   
885c885
<   if (ferror)
---
>   if ferror)
882c882
<   ;
---
>   
884,885c884,885
<   ;
<   if (ferror)
---
>   
>   if ferror)
882c882
<   ;
---
>   
885c885
<   if (ferror)
---
>    ferror)
882c882
<   ;
---
>   
884,885c884,885
<   ;
<   if (ferror)
---
>   
>    ferror)
884c884
<   ;
---
>   
884,885c884,885
<   ;
<   if (ferror)
---
>   
>    (ferror)
(92.7 %, 14859 bytes)
885c885
<   if (ferror)
---
>    (ferror)
885c885
<   if (ferror)
---
>    ferror)
885c885
<   if (ferror)
---
>    ()
885c885
<   if (ferror)
---
>    )
885c885
<   if (ferror)
---
>    (ferror
885c885
<   if (ferror)
---
>    ferror
(92.8 %, 14857 bytes)
885c885
<    (ferror)
---
>    ferror)
885c885
<    (ferror)
---
>    )
885c885
<    (ferror)
---
>    ferror
885c885
<    (ferror)
---
>    
(92.8 %, 14855 bytes)
885c885
<    ferror
---
>    
888c888
<   len == 0;
---
>    == 0;
885,886c885,886
<    ferror
<     ;
---
>    
>     
888c888
<   len == 0;
---
>    == 0;
885c885
<    ferror
---
>    
888c888
<   len == 0;
---
>   len  0;
885,886c885,886
<    ferror
<     ;
---
>    
>     
888c888
<   len == 0;
---
>   len  0;
885c885
<    ferror
---
>    
888c888
<   len == 0;
---
>     0;
885,886c885,886
<    ferror
<     ;
---
>    
>     
888c888
<   len == 0;
---
>     0;
(92.8 %, 14844 bytes)
886c886
<     ;
---
>     
888c888
<     0;
---
>     0
890c890
<   ;
---
>   
886c886
<     ;
---
>     
888c888
<     0;
---
>     
890c890
<   ;
---
>   
888c888
<     0;
---
>     ;
888c888
<     0;
---
>     
(92.8 %, 14840 bytes)
892c892
<   bzf_4_1 = len;
---
>     
892c892
<   bzf_4_1 = len;
---
>   bzf_4_1  len;
892c892
<   bzf_4_1 = len;
---
>   bzf_4_1  ;
(92.8 %, 14828 bytes)
893c893
<   bzf_4_0 = buf;
---
>     
893c893
<   bzf_4_0 = buf;
---
>   bzf_4_0  buf;
893c893
<   bzf_4_0 = buf;
---
>   bzf_4_0  ;
(92.8 %, 14816 bytes)
895c895
<   while (True) {
---
>     {
895c895
<   while (True) {
---
>   while True) {
895c895
<   while (True) {
---
>   while ) {
895c895
<   while (True) {
---
>   while True {
895c895
<   while (True) {
---
>   while  {
895c895
<   while (True) {
---
>   while True) 
895c895
<   while (True) {
---
>   while ) 
895c895
<   while (True) {
---
>   while True 
(92.8 %, 14805 bytes)
895,896c895,896
<     {
<     bzf_4_5 = BZ_MAX_UNUSED;
---
>     
>       ;
896c896
<     bzf_4_5 = BZ_MAX_UNUSED;
---
>      = BZ_MAX_UNUSED;
896c896
<     bzf_4_5 = BZ_MAX_UNUSED;
---
>       BZ_MAX_UNUSED;
896c896
<     bzf_4_5 = BZ_MAX_UNUSED;
---
>      = ;
896c896
<     bzf_4_5 = BZ_MAX_UNUSED;
---
>       ;
(92.8 %, 14797 bytes)
896c896
<       BZ_MAX_UNUSED;
---
>       
896,897c896,897
<       BZ_MAX_UNUSED;
<     bzf_4_4 = bzf->buf;
---
>       ;
>      = bzf->buf;
896,897c896,897
<       BZ_MAX_UNUSED;
<     bzf_4_4 = bzf->buf;
---
>       
>      = bzf->buf;
896,897c896,897
<       BZ_MAX_UNUSED;
<     bzf_4_4 = bzf->buf;
---
>       ;
>     bzf_4_4  bzf->buf;
896,897c896,897
<       BZ_MAX_UNUSED;
<     bzf_4_4 = bzf->buf;
---
>       
>     bzf_4_4  bzf->buf;
896,897c896,897
<       BZ_MAX_UNUSED;
<     bzf_4_4 = bzf->buf;
---
>       ;
>       bzf->buf;
(92.8 %, 14783 bytes)
897c897
<     bzf_4_4 = bzf->buf;
---
>       bzf->buf;
897c897
<     bzf_4_4 = bzf->buf;
---
>      = ->buf;
897c897
<     bzf_4_4 = bzf->buf;
---
>       ->buf;
897c897
<     bzf_4_4 = bzf->buf;
---
>      = bzfbuf;
897c897
<     bzf_4_4 = bzf->buf;
---
>       bzfbuf;
897c897
<     bzf_4_4 = bzf->buf;
---
>      = buf;
897c897
<     bzf_4_4 = bzf->buf;
---
>       buf;
(92.8 %, 14775 bytes)
897c897
<       bzf->buf;
---
>       buf;
897c897
<       bzf->buf;
---
>       ->;
897c897
<       bzf->buf;
---
>       ;
(92.8 %, 14770 bytes)
897c897
<       buf;
---
>       
897,898c897,898
<       buf;
<     ret = 0;
---
>       ;
>      = 0;
897,898c897,898
<       buf;
<     ret = 0;
---
>       
>      = 0;
897,898c897,898
<       buf;
<     ret = 0;
---
>       ;
>     ret  0;
897,898c897,898
<       buf;
<     ret = 0;
---
>       
>     ret  0;
897,898c897,898
<       buf;
<     ret = 0;
---
>       ;
>       0;
(92.8 %, 14766 bytes)
898c898
<     ret = 0;
---
>       0;
898c898
<     ret = 0;
---
>      = ;
898c898
<     ret = 0;
---
>       ;
(92.8 %, 14762 bytes)
898c898
<       0;
---
>       
898,899c898,899
<       0;
<     ;
---
>       ;
>     
898,899c898,899
<       0;
<     ;
---
>       
>     
(92.8 %, 14760 bytes)
899c899
<     ;
---
>     
901c901
<     ;
---
>     
899c899
<     ;
---
>     
903c903
<     ;
---
>     
899c899
<     ;
---
>     
901c901
<     ;
---
>     
903c903
<     ;
---
>     
(92.8 %, 14758 bytes)
903c903
<     ;
---
>     
905c905
<     bzf_4_1 == 0;
---
>      == 0;
903c903
<     ;
---
>     
905c905
<     bzf_4_1 == 0;
---
>     bzf_4_1  0;
903c903
<     ;
---
>     
905c905
<     bzf_4_1 == 0;
---
>       0;
903c903
<     ;
---
>     
905c905
<     bzf_4_1 == 0;
---
>     bzf_4_1 == ;
903c903
<     ;
---
>     
905c905
<     bzf_4_1 == 0;
---
>      == ;
903c903
<     ;
---
>     
905c905
<     bzf_4_1 == 0;
---
>     bzf_4_1  ;
(92.8 %, 14748 bytes)
905c905
<       0;
---
>       
907c907
<     ;
---
>     
905c905
<       0;
---
>       ;
908c908
<   }
---
>   
905c905
<       0;
---
>       
908c908
<   }
---
>   
905c905
<       0;
---
>       ;
907,908c907,908
<     ;
<   }
---
>     
>   
905c905
<       0;
---
>       
907,908c907,908
<     ;
<   }
---
>     
>   
905c905
<       0;
---
>       0
(92.8 %, 14745 bytes)
908,909c908
<   }
< }
---
>   
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
>  BZ_APIBZ2_bzWriteClose(
908c908
<   }
---
>   
911c911
< void BZ_APIBZ2_bzWriteClose(
---
> void (
908,909c908
<   }
< }
---
>   
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
> void (
908c908
<   }
---
>   
911c911
< void BZ_APIBZ2_bzWriteClose(
---
>  (
908,909c908
<   }
< }
---
>   
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
>  (
909c909
< }
---
> 
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
>  BZ_APIBZ2_bzWriteClose(
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
> void (
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
>  (
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
> void BZ_APIBZ2_bzWriteClose
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
>  BZ_APIBZ2_bzWriteClose
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
> void 
909d908
< }
911c910,911
< void BZ_APIBZ2_bzWriteClose(
---
> 
>  
911c911
< void BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose(
911c911
< void BZ_APIBZ2_bzWriteClose(
---
>  (
911c911
< void BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
911c911
< void BZ_APIBZ2_bzWriteClose(
---
>  
911c911
< void BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose(
913c913
<     void) {
---
>     ) {
(92.8 %, 14741 bytes)
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  (
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  (
913c913
<     void) {
---
>     ) {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  
913c913
<     void) {
---
>     ) {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  (
913c913
<     void) {
---
>     void {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  
913c913
<     void) {
---
>     void {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  (
913c913
<     void) {
---
>      {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  
913c913
<     void) {
---
>      {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>     ) {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>     void {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>      {
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>     void) 
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>     ) 
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>     void 
911c911
<  BZ_APIBZ2_bzWriteClose(
---
>  BZ_APIBZ2_bzWriteClose
913c913
<     void) {
---
>      
913c913
<     void) {
---
>     ) {
913c913
<     void) {
---
>      {
913c913
<     void) {
---
>     ) 
913c913
<     void) {
---
>      
913c913
<     void) {
---
>     ) {
915c915
<   BZ2_bzWriteClose64;
---
>   ;
(92.8 %, 14737 bytes)
913c913
<     ) {
---
>      {
913c913
<     ) {
---
>      
913c913
<     ) {
---
>      {
915c915
<   BZ2_bzWriteClose64;
---
>   ;
913c913
<     ) {
---
>      
915c915
<   BZ2_bzWriteClose64;
---
>   ;
913c913
<     ) {
---
>      {
915c915
<   BZ2_bzWriteClose64;
---
>   BZ2_bzWriteClose64
913c913
<     ) {
---
>      
915c915
<   BZ2_bzWriteClose64;
---
>   BZ2_bzWriteClose64
913c913
<     ) {
---
>      {
915c915
<   BZ2_bzWriteClose64;
---
>   
913c913
<     ) {
---
>      
915c915
<   BZ2_bzWriteClose64;
---
>   
913c913
<     ) {
---
>     ) 
913c913
<     ) {
---
>     ) 
915c915
<   BZ2_bzWriteClose64;
---
>   ;
913c913
<     ) {
---
>     ) 
915c915
<   BZ2_bzWriteClose64;
---
>   BZ2_bzWriteClose64
913c913
<     ) {
---
>     ) 
915c915
<   BZ2_bzWriteClose64;
---
>   
913c913
<     ) {
---
>     ) 
916c916
< }
---
> 
913c913,915
<     ) {
---
>     ) 
> 
>   ;
915,916d916
<   BZ2_bzWriteClose64;
< }
913c913,915
<     ) {
---
>     ) 
> 
>   BZ2_bzWriteClose64
915,916d916
<   BZ2_bzWriteClose64;
< }
913c913,915
<     ) {
---
>     ) 
> 
>   
915,916d916
<   BZ2_bzWriteClose64;
< }
915c915
<   BZ2_bzWriteClose64;
---
>   ;
(92.8 %, 14717 bytes)
915c915
<   ;
---
>   
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
915c915
<   ;
---
>   
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
> void 
915c915
<   ;
---
>   
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64(
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  (
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  
918c918
< void BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64(
920c920
<     void) {
---
>     ) {
(92.8 %, 14713 bytes)
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  (
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  (
920c920
<     void) {
---
>     ) {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  
920c920
<     void) {
---
>     ) {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  (
920c920
<     void) {
---
>     void {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  
920c920
<     void) {
---
>     void {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  (
920c920
<     void) {
---
>      {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  
920c920
<     void) {
---
>      {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>     ) {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>     void {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>      {
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>     void) 
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>     ) 
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>     void 
918c918
<  BZ_APIBZ2_bzWriteClose64(
---
>  BZ_APIBZ2_bzWriteClose64
920c920
<     void) {
---
>      
920c920
<     void) {
---
>     ) {
920c920
<     void) {
---
>      {
920c920
<     void) {
---
>     ) 
920c920
<     void) {
---
>      
920,921c920,921
<     void) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) {
>    int *nbytes_out_hi32 = 0;
(92.8 %, 14709 bytes)
920c920
<     ) {
---
>      {
920c920
<     ) {
---
>      
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>      {
>    int *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>      
>    int *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>      {
>   unsigned  *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>      
>   unsigned  *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>      {
>     *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>      
>     *nbytes_out_hi32 = 0;
920c920
<     ) {
---
>     ) 
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>    int *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>   unsigned  *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>     *nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>   unsigned int nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>    int nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>   unsigned  nbytes_out_hi32 = 0;
920,921c920,921
<     ) {
<   unsigned int *nbytes_out_hi32 = 0;
---
>     ) 
>     nbytes_out_hi32 = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>    int *nbytes_out_hi32 = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>     *nbytes_out_hi32 = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>    int nbytes_out_hi32 = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32 = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>    int * = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>     * = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>    int  = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>      = 0;
921c921
<   unsigned int *nbytes_out_hi32 = 0;
---
>   unsigned  *nbytes_out_hi32 = 0;
(92.8 %, 14701 bytes)
921c921
<    int *nbytes_out_hi32 = 0;
---
>     *nbytes_out_hi32 = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32 = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>     * = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>      = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>     *nbytes_out_hi32  0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32  0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>     *  0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>       0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int nbytes_out_hi32 = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int  = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int nbytes_out_hi32  0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int   0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int nbytes_out_hi32 = ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int  = ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int nbytes_out_hi32  ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int   ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int * = 0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *  0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int * = ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *  ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int * = 0
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *  0
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int * = 
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *  
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *nbytes_out_hi32  0;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *nbytes_out_hi32  ;
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *nbytes_out_hi32  0
921c921
<    int *nbytes_out_hi32 = 0;
---
>    int *nbytes_out_hi32  
921,922c921,922
<    int *nbytes_out_hi32 = 0;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  0;
>    int *nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32 = 0;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  ;
>    int *nbytes_out_lo32 = 0;
(92.8 %, 14699 bytes)
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>    int *nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>   unsigned  *nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>     *nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>   unsigned int nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>    int nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>   unsigned  nbytes_out_lo32 = 0;
921,922c921,922
<    int *nbytes_out_hi32  ;
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_hi32  
>     nbytes_out_lo32 = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_lo32 = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>     *nbytes_out_lo32 = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int nbytes_out_lo32 = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32 = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int * = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>     * = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>    int  = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>      = 0;
922c922
<   unsigned int *nbytes_out_lo32 = 0;
---
>   unsigned  *nbytes_out_lo32 = 0;
(92.8 %, 14691 bytes)
922c922
<    int *nbytes_out_lo32 = 0;
---
>     *nbytes_out_lo32 = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32 = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>     * = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>      = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>     *nbytes_out_lo32  0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32  0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>     *  0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>       0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int nbytes_out_lo32 = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int  = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int nbytes_out_lo32  0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int   0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int nbytes_out_lo32 = ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int  = ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int nbytes_out_lo32  ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int   ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int * = 0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *  0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int * = ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *  ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int * = 0
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *  0
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int * = 
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *  
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_lo32  0;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_lo32  ;
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_lo32  0
922c922
<    int *nbytes_out_lo32 = 0;
---
>    int *nbytes_out_lo32  
922,923c922,923
<    int *nbytes_out_lo32 = 0;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  0;
>    int *nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32 = 0;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  ;
>    int *nbytes_in_hi32 = 0;
(92.8 %, 14689 bytes)
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>    int *nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>   unsigned  *nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>     *nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>   unsigned int nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>    int nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>   unsigned  nbytes_in_hi32 = 0;
922,923c922,923
<    int *nbytes_out_lo32  ;
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_out_lo32  
>     nbytes_in_hi32 = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int *nbytes_in_hi32 = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>     *nbytes_in_hi32 = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int nbytes_in_hi32 = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32 = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int * = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>     * = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>    int  = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>      = 0;
923c923
<   unsigned int *nbytes_in_hi32 = 0;
---
>   unsigned  *nbytes_in_hi32 = 0;
(92.8 %, 14681 bytes)
923c923
<    int *nbytes_in_hi32 = 0;
---
>     *nbytes_in_hi32 = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32 = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>     * = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>      = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>     *nbytes_in_hi32  0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32  0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>     *  0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>       0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int nbytes_in_hi32 = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int  = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int nbytes_in_hi32  0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int   0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int nbytes_in_hi32 = ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int  = ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int nbytes_in_hi32  ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int   ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int * = 0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *  0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int * = ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *  ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int * = 0
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *  0
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int * = 
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *  
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *nbytes_in_hi32  0;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *nbytes_in_hi32  ;
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *nbytes_in_hi32  0
923c923
<    int *nbytes_in_hi32 = 0;
---
>    int *nbytes_in_hi32  
923,924c923,924
<    int *nbytes_in_hi32 = 0;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  0;
>    int *nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32 = 0;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  ;
>    int *nbytes_in_lo32 = 0;
(92.8 %, 14679 bytes)
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>    int *nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>   unsigned  *nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>     *nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>   unsigned int nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>    int nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>   unsigned  nbytes_in_lo32 = 0;
923,924c923,924
<    int *nbytes_in_hi32  ;
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_hi32  
>     nbytes_in_lo32 = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32 = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>     *nbytes_in_lo32 = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int nbytes_in_lo32 = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int * = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>     * = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>    int  = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>      = 0;
924c924
<   unsigned int *nbytes_in_lo32 = 0;
---
>   unsigned  *nbytes_in_lo32 = 0;
(92.8 %, 14671 bytes)
924c924
<    int *nbytes_in_lo32 = 0;
---
>     *nbytes_in_lo32 = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>     * = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>      = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>     *nbytes_in_lo32  0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32  0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>     *  0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>       0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int nbytes_in_lo32 = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int  = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int nbytes_in_lo32  0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int   0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int nbytes_in_lo32 = ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int  = ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int nbytes_in_lo32  ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int   ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int * = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *  0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int * = ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *  ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int * = 0
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *  0
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int * = 
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *  
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32  0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32  ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32  0
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32  
924,925c924,925
<    int *nbytes_in_lo32 = 0;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  0;
>    abandon = 0;
924,925c924,925
<    int *nbytes_in_lo32 = 0;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  ;
>    abandon = 0;
924,925c924,925
<    int *nbytes_in_lo32 = 0;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  0
>    abandon = 0;
924,925c924,925
<    int *nbytes_in_lo32 = 0;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>    abandon = 0;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32 = ;
924c924
<    int *nbytes_in_lo32 = 0;
---
>    int *nbytes_in_lo32 = 
924,925c924,925
<    int *nbytes_in_lo32 = 0;
<   int abandon = 0;
---
>    int *nbytes_in_lo32 = ;
>    abandon = 0;
924,925c924,925
<    int *nbytes_in_lo32 = 0;
<   int abandon = 0;
---
>    int *nbytes_in_lo32 = 
>    abandon = 0;
(92.8 %, 14669 bytes)
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>    abandon = 0;
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>   int  = 0;
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>     = 0;
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>   int abandon  0;
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>    abandon  0;
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>   int   0;
924,925c924,925
<    int *nbytes_in_lo32  ;
<   int abandon = 0;
---
>    int *nbytes_in_lo32  
>      0;
925c925
<   int abandon = 0;
---
>    abandon = 0;
925c925
<   int abandon = 0;
---
>     = 0;
925c925
<   int abandon = 0;
---
>    abandon  0;
925c925
<   int abandon = 0;
---
>      0;
925c925
<   int abandon = 0;
---
>    abandon = ;
925c925
<   int abandon = 0;
---
>     = ;
925c925
<   int abandon = 0;
---
>    abandon  ;
925c925
<   int abandon = 0;
---
>      ;
925c925
<   int abandon = 0;
---
>   int  = 0;
925c925
<   int abandon = 0;
---
>   int   0;
925c925
<   int abandon = 0;
---
>   int  = ;
925c925
<   int abandon = 0;
---
>   int   ;
925c925
<   int abandon = 0;
---
>   int  = 0
925c925
<   int abandon = 0;
---
>   int   0
925c925
<   int abandon = 0;
---
>   int  = 
925c925
<   int abandon = 0;
---
>   int   
925c925
<   int abandon = 0;
---
>   int abandon  0;
925c925
<   int abandon = 0;
---
>   int abandon  ;
925c925
<   int abandon = 0;
---
>   int abandon  0
925c925
<   int abandon = 0;
---
>   int abandon  
925,926c925,926
<   int abandon = 0;
<   BZFILE *b = 0;
---
>   int abandon  0;
>    *b = 0;
925,926c925,926
<   int abandon = 0;
<   BZFILE *b = 0;
---
>   int abandon  ;
>    *b = 0;
925,926c925,926
<   int abandon = 0;
<   BZFILE *b = 0;
---
>   int abandon  0
>    *b = 0;
925,926c925,926
<   int abandon = 0;
<   BZFILE *b = 0;
---
>   int abandon  
>    *b = 0;
925c925
<   int abandon = 0;
---
>   int abandon = ;
925c925
<   int abandon = 0;
---
>   int abandon = 
925,926c925,926
<   int abandon = 0;
<   BZFILE *b = 0;
---
>   int abandon = ;
>    *b = 0;
(92.8 %, 14667 bytes)
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>    *b = 0;
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>   BZFILE b = 0;
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>    b = 0;
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>   BZFILE * = 0;
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>    * = 0;
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>   BZFILE  = 0;
925,926c925,926
<   int abandon  ;
<   BZFILE *b = 0;
---
>   int abandon  
>     = 0;
926c926
<   BZFILE *b = 0;
---
>    *b = 0;
926c926
<   BZFILE *b = 0;
---
>    b = 0;
926c926
<   BZFILE *b = 0;
---
>    * = 0;
926c926
<   BZFILE *b = 0;
---
>     = 0;
926c926
<   BZFILE *b = 0;
---
>    *b  0;
926c926
<   BZFILE *b = 0;
---
>    b  0;
926c926
<   BZFILE *b = 0;
---
>    *  0;
926c926
<   BZFILE *b = 0;
---
>      0;
926c926
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
926c926
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
926c926
<   BZFILE *b = 0;
---
>   BZFILE b  0;
926c926
<   BZFILE *b = 0;
---
>   BZFILE   0;
926c926
<   BZFILE *b = 0;
---
>   BZFILE b = ;
926c926
<   BZFILE *b = 0;
---
>   BZFILE  = ;
926c926
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(92.8 %, 14666 bytes)
926c926
<   BZFILE b = 0;
---
>   BZFILE  = 0;
926c926
<   BZFILE b = 0;
---
>   BZFILE   0;
926c926
<   BZFILE b = 0;
---
>   BZFILE  = ;
926c926
<   BZFILE b = 0;
---
>   BZFILE   ;
926c926
<   BZFILE b = 0;
---
>   BZFILE  = 0
926c926
<   BZFILE b = 0;
---
>   BZFILE   0
926c926
<   BZFILE b = 0;
---
>   BZFILE  = 
926c926
<   BZFILE b = 0;
---
>   BZFILE   
926c926
<   BZFILE b = 0;
---
>   BZFILE b  0;
926c926
<   BZFILE b = 0;
---
>   BZFILE b  ;
926c926
<   BZFILE b = 0;
---
>   BZFILE b  0
926c926
<   BZFILE b = 0;
---
>   BZFILE b  
926,927c926,927
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  0;
>    *bzerror = 0;
926,927c926,927
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  ;
>    *bzerror = 0;
926,927c926,927
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  0
>    *bzerror = 0;
926,927c926,927
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b  
>    *bzerror = 0;
926c926
<   BZFILE b = 0;
---
>   BZFILE b = ;
926c926
<   BZFILE b = 0;
---
>   BZFILE b = 
926,927c926,927
<   BZFILE b = 0;
<   int *bzerror = 0;
---
>   BZFILE b = ;
>    *bzerror = 0;
(92.8 %, 14664 bytes)
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>    *bzerror = 0;
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>   int bzerror = 0;
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>    bzerror = 0;
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>   int * = 0;
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>    * = 0;
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>   int  = 0;
926,927c926,927
<   BZFILE b  ;
<   int *bzerror = 0;
---
>   BZFILE b  
>     = 0;
927c927
<   int *bzerror = 0;
---
>    *bzerror = 0;
927c927
<   int *bzerror = 0;
---
>    bzerror = 0;
927c927
<   int *bzerror = 0;
---
>    * = 0;
927c927
<   int *bzerror = 0;
---
>     = 0;
927c927
<   int *bzerror = 0;
---
>    *bzerror  0;
927c927
<   int *bzerror = 0;
---
>    bzerror  0;
927c927
<   int *bzerror = 0;
---
>    *  0;
927c927
<   int *bzerror = 0;
---
>      0;
(92.9 %, 14652 bytes)
927c927
<     = 0;
---
>      
929c929
<   bzFile *bzf = b;
---
>    *bzf = b;
927c927
<     = 0;
---
>     = ;
927c927
<     = 0;
---
>     = 
927c927
<     = 0;
---
>     = ;
929c929
<   bzFile *bzf = b;
---
>    *bzf = b;
927c927
<     = 0;
---
>     = 
929c929
<   bzFile *bzf = b;
---
>    *bzf = b;
927c927
<     = 0;
---
>     = ;
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
927c927
<     = 0;
---
>     = 
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
927c927
<     = 0;
---
>     = ;
929c929
<   bzFile *bzf = b;
---
>    bzf = b;
927c927
<     = 0;
---
>     = 
929c929
<   bzFile *bzf = b;
---
>    bzf = b;
927c927
<     = 0;
---
>     = 0
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>    *bzf = b;
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>    bzf = b;
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>   bzFile * = b;
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>    * = b;
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>   bzFile  = b;
927c927
<     = 0;
---
>     = 0
929c929
<   bzFile *bzf = b;
---
>     = b;
929c929
<   bzFile *bzf = b;
---
>    *bzf = b;
929c929
<   bzFile *bzf = b;
---
>    bzf = b;
929c929
<   bzFile *bzf = b;
---
>    * = b;
929c929
<   bzFile *bzf = b;
---
>     = b;
929c929
<   bzFile *bzf = b;
---
>    *bzf  b;
929c929
<   bzFile *bzf = b;
---
>    bzf  b;
929c929
<   bzFile *bzf = b;
---
>    *  b;
929c929
<   bzFile *bzf = b;
---
>      b;
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
929c929
<   bzFile *bzf = b;
---
>   bzFile  = b;
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
929c929
<   bzFile *bzf = b;
---
>   bzFile   b;
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
929c929
<   bzFile *bzf = b;
---
>   bzFile  = ;
929c929
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
929c929
<   bzFile *bzf = b;
---
>   bzFile   ;
929c929
<   bzFile *bzf = b;
---
>   bzFile * = b;
929c929
<   bzFile *bzf = b;
---
>   bzFile *  b;
929c929
<   bzFile *bzf = b;
---
>   bzFile * = ;
929c929
<   bzFile *bzf = b;
---
>   bzFile *  ;
929c929
<   bzFile *bzf = b;
---
>   bzFile * = b
929c929
<   bzFile *bzf = b;
---
>   bzFile *  b
929c929
<   bzFile *bzf = b;
---
>   bzFile * = 
929c929
<   bzFile *bzf = b;
---
>   bzFile *  
929c929
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
929c929
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
929c929
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
929c929
<   bzFile *bzf = b;
---
>   bzFile *bzf  
929,930c929,930
<   bzFile *bzf = b;
<   Bool bzf_3;
---
>   bzFile *bzf  b;
>    bzf_3;
929,930c929,930
<   bzFile *bzf = b;
<   Bool bzf_3;
---
>   bzFile *bzf  ;
>    bzf_3;
929,930c929,930
<   bzFile *bzf = b;
<   Bool bzf_3;
---
>   bzFile *bzf  b
>    bzf_3;
929,930c929,930
<   bzFile *bzf = b;
<   Bool bzf_3;
---
>   bzFile *bzf  
>    bzf_3;
929c929
<   bzFile *bzf = b;
---
>   bzFile *bzf = ;
929c929
<   bzFile *bzf = b;
---
>   bzFile *bzf = 
929,930c929,930
<   bzFile *bzf = b;
<   Bool bzf_3;
---
>   bzFile *bzf = ;
>    bzf_3;
(92.9 %, 14650 bytes)
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>    bzf_3;
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>   Bool ;
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>    ;
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>   Bool bzf_3
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>    bzf_3
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>   Bool 
929,930c929,930
<   bzFile *bzf  ;
<   Bool bzf_3;
---
>   bzFile *bzf  
>    
930c930
<   Bool bzf_3;
---
>    bzf_3;
930c930
<   Bool bzf_3;
---
>    ;
930c930
<   Bool bzf_3;
---
>    bzf_3
930c930
<   Bool bzf_3;
---
>    
930c930
<   Bool bzf_3;
---
>    bzf_3;
932c932
<   if (bzf == NULL)
---
>    (bzf == NULL)
930c930
<   Bool bzf_3;
---
>    ;
932c932
<   if (bzf == NULL)
---
>    (bzf == NULL)
930c930
<   Bool bzf_3;
---
>    bzf_3
932c932
<   if (bzf == NULL)
---
>    (bzf == NULL)
930c930
<   Bool bzf_3;
---
>    
932c932
<   if (bzf == NULL)
---
>    (bzf == NULL)
930c930
<   Bool bzf_3;
---
>   Bool ;
930c930
<   Bool bzf_3;
---
>   Bool 
930c930
<   Bool bzf_3;
---
>   Bool ;
932c932
<   if (bzf == NULL)
---
>    (bzf == NULL)
930c930
<   Bool bzf_3;
---
>   Bool 
932c932
<   if (bzf == NULL)
---
>    (bzf == NULL)
930c930
<   Bool bzf_3;
---
>   Bool ;
932c932
<   if (bzf == NULL)
---
>   if bzf == NULL)
930c930
<   Bool bzf_3;
---
>   Bool 
932c932
<   if (bzf == NULL)
---
>   if bzf == NULL)
(92.9 %, 14643 bytes)
930c930
<    bzf_3
---
>    
932c932
<    (bzf == NULL)
---
>    (  NULL)
930c930
<    bzf_3
---
>    
932c932
<    (bzf == NULL)
---
>      NULL)
932c932
<    (bzf == NULL)
---
>    bzf == NULL)
932c932
<    (bzf == NULL)
---
>     == NULL)
932c932
<    (bzf == NULL)
---
>    bzf  NULL)
932c932
<    (bzf == NULL)
---
>      NULL)
932c932
<    (bzf == NULL)
---
>    bzf == )
932c932
<    (bzf == NULL)
---
>     == )
932c932
<    (bzf == NULL)
---
>    bzf  )
932c932
<    (bzf == NULL)
---
>      )
932c932
<    (bzf == NULL)
---
>    ( == NULL)
932c932
<    (bzf == NULL)
---
>    (  NULL)
932c932
<    (bzf == NULL)
---
>    ( == )
932c932
<    (bzf == NULL)
---
>    (  )
(92.9 %, 14638 bytes)
932c932
<    (  NULL)
---
>    (  
932,933c932,933
<    (  NULL)
<     ;
---
>    (  )
>     
932,933c932,933
<    (  NULL)
<     ;
---
>    (  
>     
932c932
<    (  NULL)
---
>    (  )
934c934
<   !bzf_3;
---
>   bzf_3;
932c932
<    (  NULL)
---
>    (  
934c934
<   !bzf_3;
---
>   bzf_3;
932,934c932,934
<    (  NULL)
<     ;
<   !bzf_3;
---
>    (  )
>     
>   bzf_3;
932,934c932,934
<    (  NULL)
<     ;
<   !bzf_3;
---
>    (  
>     
>   bzf_3;
932c932
<    (  NULL)
---
>    (  NULL
932,933c932,933
<    (  NULL)
<     ;
---
>    (  NULL
>     
932c932
<    (  NULL)
---
>    (  NULL
934c934
<   !bzf_3;
---
>   bzf_3;
932,934c932,934
<    (  NULL)
<     ;
<   !bzf_3;
---
>    (  NULL
>     
>   bzf_3;
932c932
<    (  NULL)
---
>    (  NULL
934c934
<   !bzf_3;
---
>   !;
932,934c932,934
<    (  NULL)
<     ;
<   !bzf_3;
---
>    (  NULL
>     
>   !;
(92.9 %, 14633 bytes)
932c932
<    (  )
---
>    (  
934c934
<   bzf_3;
---
>   bzf_3
932,934c932,934
<    (  )
<     ;
<   bzf_3;
---
>    (  
>     
>   bzf_3
932c932
<    (  )
---
>    (  
934c934
<   bzf_3;
---
>   
932,934c932,934
<    (  )
<     ;
<   bzf_3;
---
>    (  
>     
>   
933c933
<     ;
---
>     
933,934c933,934
<     ;
<   bzf_3;
---
>     
>   ;
933,934c933,934
<     ;
<   bzf_3;
---
>     
>   bzf_3
933,934c933,934
<     ;
<   bzf_3;
---
>     
>   
(92.9 %, 14627 bytes)
934c934
<   ;
---
>   
936c936
<   ;
---
>   
934c934
<   ;
---
>   
937c937
<   if (ferror)
---
>    (ferror)
934c934
<   ;
---
>   
936,937c936,937
<   ;
<   if (ferror)
---
>   
>    (ferror)
934c934
<   ;
---
>   
937c937
<   if (ferror)
---
>   if ferror)
934c934
<   ;
---
>   
936,937c936,937
<   ;
<   if (ferror)
---
>   
>   if ferror)
934c934
<   ;
---
>   
937c937
<   if (ferror)
---
>    ferror)
934c934
<   ;
---
>   
936,937c936,937
<   ;
<   if (ferror)
---
>   
>    ferror)
936c936
<   ;
---
>   
(92.9 %, 14624 bytes)
936,937c936,937
<   ;
<    (ferror)
---
>   
>    ()
936,937c936,937
<   ;
<    (ferror)
---
>   
>    )
936,937c936,937
<   ;
<    (ferror)
---
>   
>    (ferror
936,937c936,937
<   ;
<    (ferror)
---
>   
>    ferror
936,937c936,937
<   ;
<    (ferror)
---
>   
>    (
936,937c936,937
<   ;
<    (ferror)
---
>   
>    
937c937
<    (ferror)
---
>    ferror)
937c937
<    (ferror)
---
>    )
937c937
<    (ferror)
---
>    ferror
(92.9 %, 14615 bytes)
938c938
<     ;
---
>     
940c940
<   if (nbytes_in_lo32 != NULL)
---
>     != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32 != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>    ( != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>     != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>    (nbytes_in_lo32  NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32  NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>    (  NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>      NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if  != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32  NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if   NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32 != )
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if  != )
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if nbytes_in_lo32  )
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if   )
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if (  NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != )
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if (  )
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != NULL
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if (  NULL
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if ( != 
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if (  
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if (nbytes_in_lo32  NULL)
940c940
<   if (nbytes_in_lo32 != NULL)
---
>   if (nbytes_in_lo32  )
(92.9 %, 14599 bytes)
940c940
<   if (  NULL)
---
>   if (  
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  )
>     nbytes_in_lo32 = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  
>     nbytes_in_lo32 = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  )
>     * = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  
>     * = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  )
>      = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  
>      = 0;
940c940
<   if (  NULL)
---
>   if (  NULL
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     nbytes_in_lo32 = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     * = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>      = 0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     *nbytes_in_lo32  0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     nbytes_in_lo32  0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>     *  0;
940,941c940,941
<   if (  NULL)
<     *nbytes_in_lo32 = 0;
---
>   if (  NULL
>       0;
941c941
<     *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32 = 0;
941c941
<     *nbytes_in_lo32 = 0;
---
>      = 0;
941c941
<     *nbytes_in_lo32 = 0;
---
>     nbytes_in_lo32  0;
941c941
<     *nbytes_in_lo32 = 0;
---
>       0;
(92.9 %, 14598 bytes)
941c941
<     nbytes_in_lo32 = 0;
---
>      = 0;
941c941
<     nbytes_in_lo32 = 0;
---
>       0;
941c941
<     nbytes_in_lo32 = 0;
---
>      = ;
941c941
<     nbytes_in_lo32 = 0;
---
>       ;
(92.9 %, 14583 bytes)
941c941
<       0;
---
>       
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       ;
>    (nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       
>    (nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       ;
>   if nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       
>   if nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       ;
>    nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       
>    nbytes_in_hi32 != NULL)
941c941
<       0;
---
>       0
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>    (nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>   if nbytes_in_hi32 != NULL)
941,942c941,942
<       0;
<   if (nbytes_in_hi32 != NULL)
---
>       0
>    nbytes_in_hi32 != NULL)
(92.9 %, 14581 bytes)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32 != NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>    ( != NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>     != NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>    (nbytes_in_hi32  NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32  NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>    (  NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>      NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if  != NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if   NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != )
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if  != )
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  )
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if   )
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL)
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != )
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if (  )
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != 
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if (  
942c942
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  NULL)
(92.9 %, 14565 bytes)
942c942
<   if (  NULL)
---
>   if (  
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  )
>     nbytes_in_hi32 = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  
>     nbytes_in_hi32 = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  )
>     * = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  
>     * = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  )
>      = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  
>      = 0;
942c942
<   if (  NULL)
---
>   if (  NULL
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     nbytes_in_hi32 = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     * = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>      = 0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     *nbytes_in_hi32  0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     nbytes_in_hi32  0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>     *  0;
942,943c942,943
<   if (  NULL)
<     *nbytes_in_hi32 = 0;
---
>   if (  NULL
>       0;
943c943
<     *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32 = 0;
943c943
<     *nbytes_in_hi32 = 0;
---
>      = 0;
943c943
<     *nbytes_in_hi32 = 0;
---
>     nbytes_in_hi32  0;
943c943
<     *nbytes_in_hi32 = 0;
---
>       0;
(92.9 %, 14564 bytes)
943c943
<     nbytes_in_hi32 = 0;
---
>      = 0;
943c943
<     nbytes_in_hi32 = 0;
---
>       0;
943c943
<     nbytes_in_hi32 = 0;
---
>      = ;
943c943
<     nbytes_in_hi32 = 0;
---
>       ;
(92.9 %, 14549 bytes)
943c943
<       0;
---
>       
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       ;
>    (nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       
>    (nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       ;
>   if nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       
>   if nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       ;
>    nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       
>    nbytes_out_lo32 != NULL)
943c943
<       0;
---
>       0
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>    (nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>   if nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>    nbytes_out_lo32 != NULL)
943,944c943,944
<       0;
<   if (nbytes_out_lo32 != NULL)
---
>       0
>   if ( != NULL)
(92.9 %, 14547 bytes)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32 != NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>    ( != NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>     != NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>    (nbytes_out_lo32  NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32  NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>    (  NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>      NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if  != NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if   NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != )
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if  != )
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  )
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if   )
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != )
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if (  )
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != 
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if (  
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  NULL)
944c944
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  )
(92.9 %, 14530 bytes)
944c944
<   if (  NULL)
---
>   if (  
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  )
>     nbytes_out_lo32 = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  
>     nbytes_out_lo32 = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  )
>     * = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  
>     * = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  )
>      = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  
>      = 0;
944c944
<   if (  NULL)
---
>   if (  NULL
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     nbytes_out_lo32 = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     * = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>      = 0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     *nbytes_out_lo32  0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     nbytes_out_lo32  0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>     *  0;
944,945c944,945
<   if (  NULL)
<     *nbytes_out_lo32 = 0;
---
>   if (  NULL
>       0;
945c945
<     *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32 = 0;
945c945
<     *nbytes_out_lo32 = 0;
---
>      = 0;
945c945
<     *nbytes_out_lo32 = 0;
---
>     nbytes_out_lo32  0;
945c945
<     *nbytes_out_lo32 = 0;
---
>       0;
(92.9 %, 14529 bytes)
945c945
<     nbytes_out_lo32 = 0;
---
>      = 0;
945c945
<     nbytes_out_lo32 = 0;
---
>       0;
945c945
<     nbytes_out_lo32 = 0;
---
>      = ;
945c945
<     nbytes_out_lo32 = 0;
---
>       ;
(92.9 %, 14513 bytes)
945c945
<       0;
---
>       
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       ;
>    (nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       
>    (nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       ;
>   if nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       
>   if nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       ;
>    nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       
>    nbytes_out_hi32 != NULL)
945c945
<       0;
---
>       0
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       0
>    (nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       0
>   if nbytes_out_hi32 != NULL)
945,946c945,946
<       0;
<   if (nbytes_out_hi32 != NULL)
---
>       0
>    nbytes_out_hi32 != NULL)
(92.9 %, 14511 bytes)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32 != NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>    ( != NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>     != NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>    (nbytes_out_hi32  NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32  NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>    (  NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>      NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if  != NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if   NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != )
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if  != )
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  )
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if   )
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != )
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if (  )
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != 
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if (  
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  NULL)
946c946
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  )
(92.9 %, 14494 bytes)
946c946
<   if (  NULL)
---
>   if (  
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  )
>     nbytes_out_hi32 = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  
>     nbytes_out_hi32 = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  )
>     * = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  
>     * = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  )
>      = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  
>      = 0;
946c946
<   if (  NULL)
---
>   if (  NULL
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     nbytes_out_hi32 = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     * = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>      = 0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     *nbytes_out_hi32  0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     nbytes_out_hi32  0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>     *  0;
946,947c946,947
<   if (  NULL)
<     *nbytes_out_hi32 = 0;
---
>   if (  NULL
>       0;
947c947
<     *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32 = 0;
947c947
<     *nbytes_out_hi32 = 0;
---
>      = 0;
947c947
<     *nbytes_out_hi32 = 0;
---
>     nbytes_out_hi32  0;
947c947
<     *nbytes_out_hi32 = 0;
---
>       0;
(92.9 %, 14493 bytes)
947c947
<     nbytes_out_hi32 = 0;
---
>      = 0;
947c947
<     nbytes_out_hi32 = 0;
---
>       0;
947c947
<     nbytes_out_hi32 = 0;
---
>      = ;
947c947
<     nbytes_out_hi32 = 0;
---
>       ;
(92.9 %, 14477 bytes)
947c947
<       0;
---
>       
947c947
<       0;
---
>       ;
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    (!abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    (!abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       ;
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       ;
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    !abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    !abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       0
947c947
<       0;
---
>       0
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    (!abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       0
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !abandon && bzf->lastErr == BZ_OK)
947c947
<       0;
---
>       0
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    !abandon && bzf->lastErr == BZ_OK)
(92.9 %, 14475 bytes)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    !abandon && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    (abandon && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    abandon && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    (! && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    ! && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>    ( && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>     && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !abandon && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if abandon && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if ! && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if  && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !abandon  bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if abandon  bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if !  bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if   bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (abandon && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if ( && bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (abandon  bzf->lastErr == BZ_OK)
949c949
<   if (!abandon && bzf->lastErr == BZ_OK)
---
>   if (  bzf->lastErr == BZ_OK)
(92.9 %, 14474 bytes)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if ( && bzf->lastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if (  bzf->lastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if ( && ->lastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if (  ->lastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if ( && bzflastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if (  bzflastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if ( && lastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if (  lastErr == BZ_OK)
949c949
<   if (abandon && bzf->lastErr == BZ_OK)
---
>   if (abandon  bzf->lastErr == BZ_OK)
(92.9 %, 14465 bytes)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  lastErr == BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  -> == BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (   == BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  ->lastErr  BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  lastErr  BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  ->  BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (    BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  bzflastErr == BZ_OK)
949c949
<   if (  bzf->lastErr == BZ_OK)
---
>   if (  bzf == BZ_OK)
(92.9 %, 14451 bytes)
949c949
<   if (    BZ_OK)
---
>   if (    
951c951
<     if (!abandon && !ferror)
---
>      !abandon && !ferror)
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
951c951
<     if (!abandon && !ferror)
---
>      (!abandon && !ferror)
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
951c951
<     if (!abandon && !ferror)
---
>     if !abandon && !ferror)
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
951c951
<     if (!abandon && !ferror)
---
>      !abandon && !ferror)
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
951c951
<     if (!abandon && !ferror)
---
>     if (abandon && !ferror)
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
951c951
<     if (!abandon && !ferror)
---
>      (abandon && !ferror)
949c949
<   if (    BZ_OK)
---
>   if (    BZ_OK
951c951
<     if (!abandon && !ferror)
---
>     if abandon && !ferror)
(93.0 %, 14442 bytes)
951c951
<      !abandon && !ferror)
---
>        ferror)
951c951
<      !abandon && !ferror)
---
>      ! && !ferror)
951c951
<      !abandon && !ferror)
---
>      !  !ferror)
(93.0 %, 14431 bytes)
951c951
<        ferror)
---
>        
953c953
<       if (nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32 != NULL)
951c951
<        ferror)
---
>        ferror
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>        (nbytes_in_lo32 != NULL)
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>       if nbytes_in_lo32 != NULL)
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32 != NULL)
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>       if ( != NULL)
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>        ( != NULL)
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>       if  != NULL)
951c951
<        ferror)
---
>        ferror
953c953
<       if (nbytes_in_lo32 != NULL)
---
>         != NULL)
(93.0 %, 14421 bytes)
953c953
<        nbytes_in_lo32 != NULL)
---
>          
953c953
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  NULL)
953c953
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  )
953c953
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  NULL
953c953
<        nbytes_in_lo32 != NULL)
---
>        nbytes_in_lo32  
953,954c953,954
<        nbytes_in_lo32 != NULL)
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  NULL)
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32 != NULL)
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  )
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
(93.0 %, 14415 bytes)
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         * = bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>          = bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         *nbytes_in_lo32  bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         nbytes_in_lo32  bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>         *  bzf->strm.total_in_lo32;
953,954c953,954
<        nbytes_in_lo32  )
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>        nbytes_in_lo32  
>           bzf->strm.total_in_lo32;
954c954
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32 = bzf->strm.total_in_lo32;
954c954
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = bzf->strm.total_in_lo32;
954c954
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  bzf->strm.total_in_lo32;
954c954
<         *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           bzf->strm.total_in_lo32;
(93.0 %, 14414 bytes)
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = bzf->strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           bzf->strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = ->strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           ->strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = bzfstrm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           bzfstrm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>          = strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>           strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  bzf->strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  ->strm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  bzfstrm.total_in_lo32;
954c954
<         nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>         nbytes_in_lo32  strm.total_in_lo32;
(93.0 %, 14399 bytes)
954c954
<           bzf->strm.total_in_lo32;
---
>           strm.total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           ->.total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           .total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           ->strmtotal_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           strmtotal_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           ->total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzfstrm.total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf.total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzfstrmtotal_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzftotal_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzfstrm.;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf.;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzfstrm;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->.total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->total_in_lo32;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->.;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->;
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->.total_in_lo32
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->total_in_lo32
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->.
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->
954c954
<           bzf->strm.total_in_lo32;
---
>           bzf->strmtotal_in_lo32;
(93.0 %, 14379 bytes)
954,955c954,955
<           bzf;
<   if (nbytes_in_hi32 != NULL)
---
>           bzf
>     != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>    (nbytes_in_hi32 != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32 != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>    ( != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>     != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>    (nbytes_in_hi32  NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>    nbytes_in_hi32  NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>    (  NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>      NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if  != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if   NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32 != )
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if  != )
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if nbytes_in_hi32  )
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if   )
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != )
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if (  )
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != NULL
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if (  NULL
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if ( != 
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if (  
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  NULL)
955c955
<   if (nbytes_in_hi32 != NULL)
---
>   if (nbytes_in_hi32  )
(93.0 %, 14363 bytes)
955c955
<   if (  NULL)
---
>   if (  
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  )
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  )
>     * = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  
>     * = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  )
>      = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  
>      = bzf->strm.total_in_hi32;
955c955
<   if (  NULL)
---
>   if (  NULL
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     * = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>      = bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     *nbytes_in_hi32  bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     nbytes_in_hi32  bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>     *  bzf->strm.total_in_hi32;
955,956c955,956
<   if (  NULL)
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>   if (  NULL
>       bzf->strm.total_in_hi32;
956c956
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32 = bzf->strm.total_in_hi32;
956c956
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = bzf->strm.total_in_hi32;
956c956
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  bzf->strm.total_in_hi32;
956c956
<     *nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       bzf->strm.total_in_hi32;
(93.0 %, 14362 bytes)
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = bzf->strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       bzf->strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = ->strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       ->strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = bzfstrm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       bzfstrm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>      = strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>       strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  bzf->strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  ->strm.total_in_hi32;
956c956
<     nbytes_in_hi32 = bzf->strm.total_in_hi32;
---
>     nbytes_in_hi32  bzfstrm.total_in_hi32;
(93.0 %, 14347 bytes)
956c956
<       bzf->strm.total_in_hi32;
---
>       strm.total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       ->.total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       .total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       ->strmtotal_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       strmtotal_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       ->total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzfstrm.total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf.total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzfstrmtotal_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzftotal_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzfstrm.;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf.;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzfstrm;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->.total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->total_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->.;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->.total_in_hi32
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->total_in_hi32
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->.
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->strmtotal_in_hi32;
956c956
<       bzf->strm.total_in_hi32;
---
>       bzf->strm;
(93.0 %, 14327 bytes)
956,957c956,957
<       bzf;
<   if (nbytes_out_lo32 != NULL)
---
>       bzf
>     != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>    (nbytes_out_lo32 != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32 != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>    ( != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>     != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>    (nbytes_out_lo32  NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>    nbytes_out_lo32  NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>    (  NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>      NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if  != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if   NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32 != )
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if  != )
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if nbytes_out_lo32  )
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if   )
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != )
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if (  )
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != NULL
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if (  NULL
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if ( != 
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if (  
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  NULL)
957c957
<   if (nbytes_out_lo32 != NULL)
---
>   if (nbytes_out_lo32  )
(93.0 %, 14310 bytes)
957c957
<   if (  NULL)
---
>   if (  
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  )
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  )
>     * = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  
>     * = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  )
>      = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  
>      = bzf->strm.total_out_lo32;
957c957
<   if (  NULL)
---
>   if (  NULL
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     * = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>      = bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     *nbytes_out_lo32  bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     nbytes_out_lo32  bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>     *  bzf->strm.total_out_lo32;
957,958c957,958
<   if (  NULL)
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>   if (  NULL
>       bzf->strm.total_out_lo32;
958c958
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32 = bzf->strm.total_out_lo32;
958c958
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = bzf->strm.total_out_lo32;
958c958
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  bzf->strm.total_out_lo32;
958c958
<     *nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       bzf->strm.total_out_lo32;
(93.0 %, 14309 bytes)
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = bzf->strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       bzf->strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = ->strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       ->strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = bzfstrm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       bzfstrm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>      = strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>       strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  bzf->strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  ->strm.total_out_lo32;
958c958
<     nbytes_out_lo32 = bzf->strm.total_out_lo32;
---
>     nbytes_out_lo32  bzfstrm.total_out_lo32;
(93.0 %, 14293 bytes)
958c958
<       bzf->strm.total_out_lo32;
---
>       strm.total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       ->.total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       .total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       ->strmtotal_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       strmtotal_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       ->total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzfstrm.total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf.total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzfstrmtotal_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzftotal_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzfstrm.;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf.;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzfstrm;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->.total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->total_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->.;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->.total_out_lo32
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->total_out_lo32
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->.
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->strmtotal_out_lo32;
958c958
<       bzf->strm.total_out_lo32;
---
>       bzf->strm;
(93.0 %, 14272 bytes)
958,959c958,959
<       bzf;
<   if (nbytes_out_hi32 != NULL)
---
>       bzf
>     != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>    (nbytes_out_hi32 != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32 != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>    ( != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>     != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>    (nbytes_out_hi32  NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>    nbytes_out_hi32  NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>    (  NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>      NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if  != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if   NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32 != )
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if  != )
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if nbytes_out_hi32  )
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if   )
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != )
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if (  )
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != NULL
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if (  NULL
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if ( != 
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if (  
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  NULL)
959c959
<   if (nbytes_out_hi32 != NULL)
---
>   if (nbytes_out_hi32  )
(93.0 %, 14255 bytes)
959c959
<   if (  NULL)
---
>   if (  
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  )
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  )
>     * = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  
>     * = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  )
>      = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  
>      = bzf->strm.total_out_hi32;
959c959
<   if (  NULL)
---
>   if (  NULL
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     * = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>      = bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     *nbytes_out_hi32  bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     nbytes_out_hi32  bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>     *  bzf->strm.total_out_hi32;
959,960c959,960
<   if (  NULL)
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>   if (  NULL
>       bzf->strm.total_out_hi32;
960c960
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32 = bzf->strm.total_out_hi32;
960c960
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = bzf->strm.total_out_hi32;
960c960
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  bzf->strm.total_out_hi32;
960c960
<     *nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       bzf->strm.total_out_hi32;
(93.0 %, 14254 bytes)
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = bzf->strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       bzf->strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = ->strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       ->strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = bzfstrm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       bzfstrm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>      = strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>       strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  bzf->strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  ->strm.total_out_hi32;
960c960
<     nbytes_out_hi32 = bzf->strm.total_out_hi32;
---
>     nbytes_out_hi32  bzfstrm.total_out_hi32;
(93.1 %, 14238 bytes)
960c960
<       bzf->strm.total_out_hi32;
---
>       strm.total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       ->.total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       .total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       ->strmtotal_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       strmtotal_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       ->total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzfstrm.total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf.total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzfstrmtotal_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzftotal_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzfstrm.;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf.;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzfstrm;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->.total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->total_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->.;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->.total_out_hi32
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->total_out_hi32
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->.
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->strmtotal_out_hi32;
960c960
<       bzf->strm.total_out_hi32;
---
>       bzf->strm;
(93.1 %, 14217 bytes)
960c960
<       bzf;
---
>       bzf
962,963c962,963
<   0;
<   0;
---
>   
>   ;
962c962
<   0;
---
>   ;
(93.1 %, 14213 bytes)
963,965c963,965
<   ;
<   0;
< }
---
>   
>   
> 
964c964
<   0;
---
>   ;
964c964
<   0;
---
>   
964,965c964,965
<   0;
< }
---
>   ;
> 
964,965c964,965
<   0;
< }
---
>   
> 
(93.1 %, 14212 bytes)
964c964
<   ;
---
>   
964,965c964,965
<   ;
< }
---
>   
> 
964c964
<   ;
---
>   
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
(93.1 %, 14211 bytes)
965c965
< }
---
> 
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
> BZFILE BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
> BZFILE *(int *bzerror, FILE *f, int verbosity, int small,
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  *(int *bzerror, FILE *f, int verbosity, int small,
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
> BZFILE (int *bzerror, FILE *f, int verbosity, int small,
965d964
< }
967c966,967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> 
>  (int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  (int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE (int *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
967c967
< BZFILE *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
> BZFILE int *bzerror, FILE *f, int verbosity, int small,
(93.1 %, 14205 bytes)
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  (int *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  int *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpen( *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  ( *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  BZ_APIBZ2_bzReadOpen *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>   *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(int *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *int *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *( *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  * *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *(int bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *int bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *( bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  * bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpenint *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpenint bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpenint *, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen *, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpenint , FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen , FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( *bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( *, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( , FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( *bzerror FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( bzerror FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen( * FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(  FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int bzerror, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int , FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int bzerror FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int  FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int bzerror,  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int ,  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int bzerror  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int   *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *, FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int * FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *,  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *, FILE f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int * FILE f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *,  f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *  f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror FILE *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror FILE f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror  f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror FILE *, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror  *, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror FILE , int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror  , int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  *f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  *, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  , int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  *f int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  f int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,  * int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror,   int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE f, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE , int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE f int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE  int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE f,  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE ,  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE f  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE   verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *, int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE * int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *,  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *, int , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE * int , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *,  , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *  , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f int verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f int , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f  , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f int verbosity int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f  verbosity int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f int  int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f   int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity, int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,  , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,   int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity,  small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,  ,  small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,  verbosity  small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f,    small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int , int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int  int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int ,  small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int   small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int , int ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int  int ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int ,  ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int   ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int small
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  small
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity int 
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity  
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small,
>                               *unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  ,
>                               *unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  small
>                               *unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity,  
>                               *unused, int nUnused) {
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
>                               *unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
>                               *unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
>                              void unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
>                              void unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int ,
>                               unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int 
>                               unused, int nUnused) {
967c967
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                               *unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                              void unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                               unused, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                              void *, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                               *, int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                              void , int nUnused) {
967,968c967,968
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small
>                               , int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               *unused, int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               unused, int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               *, int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               , int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               *unused int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               unused int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                               * int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                                int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void unused, int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void , int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void unused int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void  int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void unused,  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void ,  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void unused  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void   nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *, int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void * int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *,  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *, int ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void * int ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *,  ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *  ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused int nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused int ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused  ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused int nUnused {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused  nUnused {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused int  {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused   {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,  nUnused) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,  ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,  nUnused {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,   {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,  nUnused) 
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,  ) 
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,  nUnused 
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused,   
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int ) {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int  {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int ) 
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int  
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int ) {
>    *bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int  {
>    *bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int ) 
>    *bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int  
>    *bzf = NULL;
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int nUnused {
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int nUnused 
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused {
>    *bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused 
>    *bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused {
>   bzFile bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused 
>   bzFile bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused {
>    bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused 
>    bzf = NULL;
968c968
<                              void *unused, int nUnused) {
---
>                              void *unused, int nUnused) 
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>    *bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>   bzFile bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>    bzf = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>   bzFile * = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>    * = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>   bzFile  = NULL;
968,969c968,969
<                              void *unused, int nUnused) {
<   bzFile *bzf = NULL;
---
>                              void *unused, int nUnused) 
>     = NULL;
969c969
<   bzFile *bzf = NULL;
---
>    *bzf = NULL;
969c969
<   bzFile *bzf = NULL;
---
>    bzf = NULL;
969c969
<   bzFile *bzf = NULL;
---
>    * = NULL;
969c969
<   bzFile *bzf = NULL;
---
>     = NULL;
969c969
<   bzFile *bzf = NULL;
---
>    *bzf  NULL;
969c969
<   bzFile *bzf = NULL;
---
>    bzf  NULL;
969c969
<   bzFile *bzf = NULL;
---
>    *  NULL;
969c969
<   bzFile *bzf = NULL;
---
>      NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile bzf = NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile  = NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile bzf  NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile   NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile bzf = ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile  = ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile bzf  ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile   ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile * = ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *  ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile * = NULL
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *  NULL
969c969
<   bzFile *bzf = NULL;
---
>   bzFile * = 
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *  
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  NULL
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *bzf  
969,970c969,970
<   bzFile *bzf = NULL;
<   char *bzf_4_0;
---
>   bzFile *bzf  NULL;
>    *bzf_4_0;
969,970c969,970
<   bzFile *bzf = NULL;
<   char *bzf_4_0;
---
>   bzFile *bzf  ;
>    *bzf_4_0;
969,970c969,970
<   bzFile *bzf = NULL;
<   char *bzf_4_0;
---
>   bzFile *bzf  NULL
>    *bzf_4_0;
969,970c969,970
<   bzFile *bzf = NULL;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    *bzf_4_0;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *bzf = ;
969c969
<   bzFile *bzf = NULL;
---
>   bzFile *bzf = 
969,970c969,970
<   bzFile *bzf = NULL;
<   char *bzf_4_0;
---
>   bzFile *bzf = ;
>    *bzf_4_0;
(93.1 %, 14200 bytes)
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    *bzf_4_0;
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>   char bzf_4_0;
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    bzf_4_0;
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>   char *;
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    *;
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>   char ;
969,970c969,970
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    ;
970c970
<   char *bzf_4_0;
---
>    *bzf_4_0;
970c970
<   char *bzf_4_0;
---
>    bzf_4_0;
970c970
<   char *bzf_4_0;
---
>    *;
970c970
<   char *bzf_4_0;
---
>    ;
970c970
<   char *bzf_4_0;
---
>    *bzf_4_0
970c970
<   char *bzf_4_0;
---
>    bzf_4_0
970c970
<   char *bzf_4_0;
---
>    *
970c970
<   char *bzf_4_0;
---
>    
970c970
<   char *bzf_4_0;
---
>   char bzf_4_0;
970c970
<   char *bzf_4_0;
---
>   char ;
970c970
<   char *bzf_4_0;
---
>   char bzf_4_0
970c970
<   char *bzf_4_0;
---
>   char 
970,971c970,971
<   char *bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0;
>    int bzf_4_1;
(93.1 %, 14199 bytes)
970c970
<   char bzf_4_0;
---
>   char ;
970c970
<   char bzf_4_0;
---
>   char 
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>    int bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>    int bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>   unsigned  bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>   unsigned  bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>     bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>     bzf_4_1;
970c970
<   char bzf_4_0;
---
>   char bzf_4_0
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>    int bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned  bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>     bzf_4_1;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned int ;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>    int ;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned  ;
970,971c970,971
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>     ;
971c971
<   unsigned int bzf_4_1;
---
>    int bzf_4_1;
971c971
<   unsigned int bzf_4_1;
---
>     bzf_4_1;
971c971
<   unsigned int bzf_4_1;
---
>    int ;
971c971
<   unsigned int bzf_4_1;
---
>     ;
971c971
<   unsigned int bzf_4_1;
---
>    int bzf_4_1
971c971
<   unsigned int bzf_4_1;
---
>     bzf_4_1
971c971
<   unsigned int bzf_4_1;
---
>    int 
971c971
<   unsigned int bzf_4_1;
---
>     
971c971
<   unsigned int bzf_4_1;
---
>   unsigned  bzf_4_1;
(93.1 %, 14191 bytes)
971c971
<    int bzf_4_1;
---
>     bzf_4_1;
971c971
<    int bzf_4_1;
---
>     ;
971c971
<    int bzf_4_1;
---
>     bzf_4_1
971c971
<    int bzf_4_1;
---
>     
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>     bzf_4_1;
>    bzf_3;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>     ;
>    bzf_3;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>     bzf_4_1
>    bzf_3;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>     
>    bzf_3;
971c971
<    int bzf_4_1;
---
>    int ;
971c971
<    int bzf_4_1;
---
>    int 
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int ;
>    bzf_3;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int 
>    bzf_3;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int ;
>   Bool ;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int 
>   Bool ;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int ;
>    ;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int 
>    ;
971c971
<    int bzf_4_1;
---
>    int bzf_4_1
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    bzf_3;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>   Bool ;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    ;
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>   Bool bzf_3
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    bzf_3
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>   Bool 
971,972c971,972
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1
>    
972c972
<   Bool bzf_3;
---
>    bzf_3;
972c972
<   Bool bzf_3;
---
>    ;
972c972
<   Bool bzf_3;
---
>    bzf_3
972c972
<   Bool bzf_3;
---
>    
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>    bzf_3;
>    bzf_2;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>    ;
>    bzf_2;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>    bzf_3
>    bzf_2;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>    
>    bzf_2;
972c972
<   Bool bzf_3;
---
>   Bool ;
972c972
<   Bool bzf_3;
---
>   Bool 
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool ;
>    bzf_2;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool 
>    bzf_2;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool ;
>   Int32 ;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool 
>   Int32 ;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool ;
>    ;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool 
>    ;
972c972
<   Bool bzf_3;
---
>   Bool bzf_3
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>    bzf_2;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>   Int32 ;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>    ;
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>   Int32 bzf_2
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>    bzf_2
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>   Int32 
972,973c972,973
<   Bool bzf_3;
<   Int32 bzf_2;
---
>   Bool bzf_3
>    
973c973
<   Int32 bzf_2;
---
>    bzf_2;
973c973
<   Int32 bzf_2;
---
>    ;
973c973
<   Int32 bzf_2;
---
>    bzf_2
973c973
<   Int32 bzf_2;
---
>    
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>    bzf_2;
>    bzf_6;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>    ;
>    bzf_6;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>    bzf_2
>    bzf_6;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>    
>    bzf_6;
973c973
<   Int32 bzf_2;
---
>   Int32 ;
973c973
<   Int32 bzf_2;
---
>   Int32 
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 ;
>    bzf_6;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 
>    bzf_6;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 ;
>   Bool ;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 
>   Bool ;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 ;
>    ;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 
>    ;
973c973
<   Int32 bzf_2;
---
>   Int32 bzf_2
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>    bzf_6;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>   Bool ;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>    ;
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>   Bool bzf_6
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>    bzf_6
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>   Bool 
973,974c973,974
<   Int32 bzf_2;
<   Bool bzf_6;
---
>   Int32 bzf_2
>    
974c974
<   Bool bzf_6;
---
>    bzf_6;
974c974
<   Bool bzf_6;
---
>    ;
974c974
<   Bool bzf_6;
---
>    bzf_6
974c974
<   Bool bzf_6;
---
>    
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>    bzf_6;
>    ret;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>    ;
>    ret;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>    bzf_6
>    ret;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>    
>    ret;
974c974
<   Bool bzf_6;
---
>   Bool ;
974c974
<   Bool bzf_6;
---
>   Bool 
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool ;
>    ret;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool 
>    ret;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool ;
>   int ;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool 
>   int ;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool ;
>    ;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool 
>    ;
974c974
<   Bool bzf_6;
---
>   Bool bzf_6
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>    ret;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>   int ;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>    ;
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>   int ret
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>    ret
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>   int 
974,975c974,975
<   Bool bzf_6;
<   int ret;
---
>   Bool bzf_6
>    
975c975
<   int ret;
---
>    ret;
975c975
<   int ret;
---
>    ;
975c975
<   int ret;
---
>    ret
975c975
<   int ret;
---
>    
975c975
<   int ret;
---
>    ret;
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>    ;
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>    ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>    
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>   int ;
975c975
<   int ret;
---
>   int 
975c975
<   int ret;
---
>   int ;
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>   int 
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>   int ;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK);
975c975
<   int ret;
---
>   int 
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK);
975c975
<   int ret;
---
>   int ;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK);
975c975
<   int ret;
---
>   int 
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK);
975c975
<   int ret;
---
>   int ret
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK);
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK);
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR();
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   ();
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR);
975c975
<   int ret;
---
>   int ret
977c977
<   BZ_SETERR(BZ_OK);
---
>   );
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK);
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK);
977c977
<   BZ_SETERR(BZ_OK);
---
>   ();
977c977
<   BZ_SETERR(BZ_OK);
---
>   );
977c977
<   BZ_SETERR(BZ_OK);
---
>   (BZ_OK;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_OK;
977c977
<   BZ_SETERR(BZ_OK);
---
>   (;
977c977
<   BZ_SETERR(BZ_OK);
---
>   ;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK);
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR);
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK)
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR)
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERRBZ_OK
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR();
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR(;
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR()
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR(
977c977
<   BZ_SETERR(BZ_OK);
---
>   BZ_SETERR();
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
(93.1 %, 14186 bytes)
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(;
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(;
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(;
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>   if f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>   if f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(;
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR(
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>   if f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>   if ( == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    ( == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>   if  == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
977c977
<   BZ_SETERR();
---
>   BZ_SETERR()
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>     == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
979c979
<   if (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    (f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
(93.1 %, 14181 bytes)
979c979
<    f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>        small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
979c979
<    f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    f  NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
979c979
<    f == NULL || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>    f   || small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
(93.1 %, 14172 bytes)
979c979
<        small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>            small != 1 || verbosity < 0 || verbosity > 4 ||
979c979
<        small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>        small  0 && small != 1 || verbosity < 0 || verbosity > 4 ||
979c979
<        small != 0 && small != 1 || verbosity < 0 || verbosity > 4 ||
---
>        small   && small != 1 || verbosity < 0 || verbosity > 4 ||
(93.1 %, 14162 bytes)
979c979
<            small != 1 || verbosity < 0 || verbosity > 4 ||
---
>                verbosity < 0 || verbosity > 4 ||
979c979
<            small != 1 || verbosity < 0 || verbosity > 4 ||
---
>            small  1 || verbosity < 0 || verbosity > 4 ||
979c979
<            small != 1 || verbosity < 0 || verbosity > 4 ||
---
>            small   || verbosity < 0 || verbosity > 4 ||
(93.1 %, 14152 bytes)
979c979
<                verbosity < 0 || verbosity > 4 ||
---
>                    verbosity > 4 ||
979c979
<                verbosity < 0 || verbosity > 4 ||
---
>                verbosity  0 || verbosity > 4 ||
979c979
<                verbosity < 0 || verbosity > 4 ||
---
>                verbosity   || verbosity > 4 ||
(93.1 %, 14139 bytes)
979c979
<                    verbosity > 4 ||
---
>                       
979c979
<                    verbosity > 4 ||
---
>                    verbosity  4 ||
979c979
<                    verbosity > 4 ||
---
>                    verbosity   ||
(93.1 %, 14126 bytes)
980c980
<       unused == NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
---
>           nUnused != 0 || unused != NULL && nUnused < 0 ||
980c980
<       unused == NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
---
>       unused  NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
980c980
<       unused == NULL && nUnused != 0 || unused != NULL && nUnused < 0 ||
---
>       unused   && nUnused != 0 || unused != NULL && nUnused < 0 ||
(93.1 %, 14112 bytes)
980c980
<           nUnused != 0 || unused != NULL && nUnused < 0 ||
---
>               unused != NULL && nUnused < 0 ||
980c980
<           nUnused != 0 || unused != NULL && nUnused < 0 ||
---
>           nUnused  0 || unused != NULL && nUnused < 0 ||
980c980
<           nUnused != 0 || unused != NULL && nUnused < 0 ||
---
>           nUnused   || unused != NULL && nUnused < 0 ||
(93.1 %, 14100 bytes)
980c980
<               unused != NULL && nUnused < 0 ||
---
>                   nUnused < 0 ||
980c980
<               unused != NULL && nUnused < 0 ||
---
>               unused  NULL && nUnused < 0 ||
980c980
<               unused != NULL && nUnused < 0 ||
---
>               unused   && nUnused < 0 ||
(93.1 %, 14086 bytes)
980c980
<                   nUnused < 0 ||
---
>                      
980c980
<                   nUnused < 0 ||
---
>                   nUnused  0 ||
980c980
<                   nUnused < 0 ||
---
>                   nUnused   ||
(93.1 %, 14075 bytes)
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>         
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused  BZ_MAX_UNUSED)
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused  )
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused  BZ_MAX_UNUSED
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused  
981,982c981,982
<       nUnused > BZ_MAX_UNUSED)
<     ;
---
>       nUnused  BZ_MAX_UNUSED)
>     
981,982c981,982
<       nUnused > BZ_MAX_UNUSED)
<     ;
---
>       nUnused  )
>     
981,982c981,982
<       nUnused > BZ_MAX_UNUSED)
<     ;
---
>       nUnused  BZ_MAX_UNUSED
>     
981,982c981,982
<       nUnused > BZ_MAX_UNUSED)
<     ;
---
>       nUnused  
>     
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused > )
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused > 
981,982c981,982
<       nUnused > BZ_MAX_UNUSED)
<     ;
---
>       nUnused > )
>     
981,982c981,982
<       nUnused > BZ_MAX_UNUSED)
<     ;
---
>       nUnused > 
>     
981c981
<       nUnused > BZ_MAX_UNUSED)
---
>       nUnused > )
984c984
<   if (ferror)
---
>    (ferror)
(93.1 %, 14061 bytes)
981,982c981,982
<       nUnused  )
<     ;
---
>       nUnused  
>     
981c981
<       nUnused  )
---
>       nUnused  
984c984
<   if (ferror)
---
>    (ferror)
981,982c981,982
<       nUnused  )
<     ;
---
>       nUnused  
>     
984c984
<   if (ferror)
---
>    (ferror)
981c981
<       nUnused  )
---
>       nUnused  
984c984
<   if (ferror)
---
>   if ferror)
981,982c981,982
<       nUnused  )
<     ;
---
>       nUnused  
>     
984c984
<   if (ferror)
---
>   if ferror)
981c981
<       nUnused  )
---
>       nUnused  
984c984
<   if (ferror)
---
>    ferror)
981,982c981,982
<       nUnused  )
<     ;
---
>       nUnused  
>     
984c984
<   if (ferror)
---
>    ferror)
982c982
<     ;
---
>     
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>    (ferror)
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>   if ferror)
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>    ferror)
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>   if ()
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>    ()
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>   if )
982c982
<     ;
---
>     
984c984
<   if (ferror)
---
>    )
984c984
<   if (ferror)
---
>    (ferror)
984c984
<   if (ferror)
---
>    ferror)
984c984
<   if (ferror)
---
>    ()
984c984
<   if (ferror)
---
>    )
984c984
<   if (ferror)
---
>    (ferror
984c984
<   if (ferror)
---
>    ferror
(93.1 %, 14059 bytes)
984c984
<    (ferror)
---
>    ferror)
984c984
<    (ferror)
---
>    )
984c984
<    (ferror)
---
>    ferror
984c984
<    (ferror)
---
>    
(93.1 %, 14057 bytes)
984c984
<    ferror
---
>    
987c987
<   bzf = malloc;
---
>    = malloc;
984,985c984,985
<    ferror
<     ;
---
>    
>     
987c987
<   bzf = malloc;
---
>    = malloc;
984c984
<    ferror
---
>    
987c987
<   bzf = malloc;
---
>   bzf  malloc;
984,985c984,985
<    ferror
<     ;
---
>    
>     
987c987
<   bzf = malloc;
---
>   bzf  malloc;
984c984
<    ferror
---
>    
987c987
<   bzf = malloc;
---
>     malloc;
984,985c984,985
<    ferror
<     ;
---
>    
>     
987c987
<   bzf = malloc;
---
>     malloc;
(93.1 %, 14047 bytes)
985c985
<     ;
---
>     
987,988c987,988
<     malloc;
<   if (bzf == NULL)
---
>     malloc
>    (bzf == NULL)
985c985
<     ;
---
>     
987,988c987,988
<     malloc;
<   if (bzf == NULL)
---
>     
>    (bzf == NULL)
987c987
<     malloc;
---
>     ;
(93.1 %, 14043 bytes)
987,988c987,988
<     malloc
<    (bzf == NULL)
---
>     
>    (  NULL)
987,988c987,988
<     malloc
<    (bzf == NULL)
---
>     
>      NULL)
988c988
<    (bzf == NULL)
---
>    bzf == NULL)
988c988
<    (bzf == NULL)
---
>     == NULL)
988c988
<    (bzf == NULL)
---
>    bzf  NULL)
988c988
<    (bzf == NULL)
---
>      NULL)
988c988
<    (bzf == NULL)
---
>    bzf == )
988c988
<    (bzf == NULL)
---
>     == )
988c988
<    (bzf == NULL)
---
>    bzf  )
(93.2 %, 14032 bytes)
988,989c988,989
<    (  NULL)
<     ;
---
>      NULL
>     
988,989c988,989
<    (  NULL)
<     ;
---
>      
>     
988c988
<    (  NULL)
---
>    (  )
988c988
<    (  NULL)
---
>    (  
988,989c988,989
<    (  NULL)
<     ;
---
>    (  )
>     
988,989c988,989
<    (  NULL)
<     ;
---
>    (  
>     
988c988
<    (  NULL)
---
>    (  )
991c991
<   BZ_SETERR;
---
>   ;
988c988
<    (  NULL)
---
>    (  
991c991
<   BZ_SETERR;
---
>   ;
988,989c988,989
<    (  NULL)
<     ;
---
>    (  )
>     
991c991
<   BZ_SETERR;
---
>   ;
988,989c988,989
<    (  NULL)
<     ;
---
>    (  
>     
991c991
<   BZ_SETERR;
---
>   ;
988c988
<    (  NULL)
---
>    (  NULL
(93.2 %, 14025 bytes)
991c991
<   BZ_SETERR;
---
>   
993c993
<   bzf_6 = False;
---
>     False;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>    = False;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>   bzf_6  False;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>     False;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>   bzf_6 = ;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>    = ;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>   bzf_6  ;
991c991
<   BZ_SETERR;
---
>   BZ_SETERR
993c993
<   bzf_6 = False;
---
>     ;
(93.2 %, 14009 bytes)
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     
>   handle = f;
993c993
<     False;
---
>     False
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>   ->handle = f;
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>   bzfhandle = f;
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>   handle = f;
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>   bzf-> = f;
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>   -> = f;
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>   bzf = f;
993,994c993,994
<     False;
<   bzf->handle = f;
---
>     False
>    = f;
994c994
<   bzf->handle = f;
---
>   ->handle = f;
994c994
<   bzf->handle = f;
---
>   handle = f;
994c994
<   bzf->handle = f;
---
>   -> = f;
994c994
<   bzf->handle = f;
---
>    = f;
994c994
<   bzf->handle = f;
---
>   ->handle  f;
994c994
<   bzf->handle = f;
---
>   handle  f;
994c994
<   bzf->handle = f;
---
>   ->  f;
994c994
<   bzf->handle = f;
---
>     f;
994c994
<   bzf->handle = f;
---
>   bzfhandle = f;
994c994
<   bzf->handle = f;
---
>   bzf = f;
(93.2 %, 13997 bytes)
994,995c994,995
<     f;
<   bzf_2 = 0;
---
>     
>     0;
994c994
<     f;
---
>     f
994,995c994,995
<     f;
<   bzf_2 = 0;
---
>     f
>    = 0;
(93.2 %, 13989 bytes)
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     
>     False;
995c995
<     0;
---
>     0
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>    = False;
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>   bzf_3  False;
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>     False;
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>   bzf_3 = ;
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>    = ;
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>   bzf_3  ;
995,996c995,996
<     0;
<   bzf_3 = False;
---
>     0
>     ;
(93.2 %, 13981 bytes)
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     
>   strm.bzalloc = NULL;
996c996
<     False;
---
>     False
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   ->strm.bzalloc = NULL;
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   bzfstrm.bzalloc = NULL;
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   strm.bzalloc = NULL;
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   bzf->.bzalloc = NULL;
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   ->.bzalloc = NULL;
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   bzf.bzalloc = NULL;
996,997c996,997
<     False;
<   bzf->strm.bzalloc = NULL;
---
>     False
>   .bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   ->strm.bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   strm.bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   ->.bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   ->strmbzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   ->bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm.bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf.bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrmbzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzfbzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm. = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf. = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzfstrm = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->. = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf-> = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.bzalloc  NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->bzalloc  NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->.  NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->  NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->strmbzalloc = NULL;
997c997
<   bzf->strm.bzalloc = NULL;
---
>   bzf->strm = NULL;
(93.2 %, 13967 bytes)
997,998c997,998
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf  
>   ->strm.bzfree = NULL;
997c997
<   bzf = NULL;
---
>   bzf = ;
997c997
<   bzf = NULL;
---
>   bzf = 
997,998c997,998
<   bzf = NULL;
<   bzf->strm.bzfree = NULL;
---
>   bzf = ;
>   ->strm.bzfree = NULL;
(93.2 %, 13958 bytes)
998c998
<   ->strm.bzfree = NULL;
---
>    = NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->.bzfree = NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->bzfree = NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->. = NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   -> = NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->.bzfree  NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->bzfree  NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->.  NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->  NULL;
998c998
<   ->strm.bzfree = NULL;
---
>   ->strmbzfree = NULL;
(93.2 %, 13945 bytes)
998,999c998,999
<    = NULL;
<   bzf->strm.opaque = NULL;
---
>     
>   ->strm.opaque = NULL;
998c998
<    = NULL;
---
>    = ;
998c998
<    = NULL;
---
>    = 
998,999c998,999
<    = NULL;
<   bzf->strm.opaque = NULL;
---
>    = ;
>   ->strm.opaque = NULL;
(93.2 %, 13936 bytes)
999c999
<   ->strm.opaque = NULL;
---
>    = NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->.opaque = NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->opaque = NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->. = NULL;
999c999
<   ->strm.opaque = NULL;
---
>   -> = NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->.opaque  NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->opaque  NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->.  NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->  NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->strmopaque = NULL;
999c999
<   ->strm.opaque = NULL;
---
>   ->strm = NULL;
(93.2 %, 13923 bytes)
999c999
<    = NULL;
---
>     
1001c1001
<   while (nUnused > 0)
---
>    (nUnused > 0)
999c999
<    = NULL;
---
>    = ;
999c999
<    = NULL;
---
>    = 
999c999
<    = NULL;
---
>    = ;
1001c1001
<   while (nUnused > 0)
---
>    (nUnused > 0)
999c999
<    = NULL;
---
>    = 
1001c1001
<   while (nUnused > 0)
---
>    (nUnused > 0)
999c999
<    = NULL;
---
>    = ;
1001c1001
<   while (nUnused > 0)
---
>   while nUnused > 0)
999c999
<    = NULL;
---
>    = 
1001c1001
<   while (nUnused > 0)
---
>   while nUnused > 0)
999c999
<    = NULL;
---
>    = ;
1001c1001
<   while (nUnused > 0)
---
>    nUnused > 0)
999c999
<    = NULL;
---
>    = 
1001c1001
<   while (nUnused > 0)
---
>    nUnused > 0)
999c999
<    = NULL;
---
>    = NULL
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>    (nUnused > 0)
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>   while nUnused > 0)
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>    nUnused > 0)
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>   while ( > 0)
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>    ( > 0)
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>   while  > 0)
999c999
<    = NULL;
---
>    = NULL
1001c1001
<   while (nUnused > 0)
---
>     > 0)
1001c1001
<   while (nUnused > 0)
---
>    (nUnused > 0)
1001c1001
<   while (nUnused > 0)
---
>    nUnused > 0)
1001c1001
<   while (nUnused > 0)
---
>    ( > 0)
1001c1001
<   while (nUnused > 0)
---
>     > 0)
1001c1001
<   while (nUnused > 0)
---
>    (nUnused  0)
1001c1001
<   while (nUnused > 0)
---
>    nUnused  0)
1001c1001
<   while (nUnused > 0)
---
>    (  0)
1001c1001
<   while (nUnused > 0)
---
>      0)
1001c1001
<   while (nUnused > 0)
---
>   while nUnused > 0)
1001c1001
<   while (nUnused > 0)
---
>   while  > 0)
1001c1001
<   while (nUnused > 0)
---
>   while nUnused  0)
1001c1001
<   while (nUnused > 0)
---
>   while   0)
1001c1001
<   while (nUnused > 0)
---
>   while nUnused > )
1001c1001
<   while (nUnused > 0)
---
>   while  > )
1001c1001
<   while (nUnused > 0)
---
>   while nUnused  )
1001c1001
<   while (nUnused > 0)
---
>   while   )
1001c1001
<   while (nUnused > 0)
---
>   while ( > 0)
1001c1001
<   while (nUnused > 0)
---
>   while (  0)
1001c1001
<   while (nUnused > 0)
---
>   while ( > )
1001c1001
<   while (nUnused > 0)
---
>   while (  )
1001c1001
<   while (nUnused > 0)
---
>   while ( > 0
1001c1001
<   while (nUnused > 0)
---
>   while (  0
1001c1001
<   while (nUnused > 0)
---
>   while ( > 
1001c1001
<   while (nUnused > 0)
---
>   while (  
1001c1001
<   while (nUnused > 0)
---
>   while (nUnused  0)
1001c1001
<   while (nUnused > 0)
---
>   while (nUnused  )
(93.2 %, 13915 bytes)
1001c1001
<   while (  0)
---
>   while (  
1001c1001
<   while (  0)
---
>   while (  )
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>      = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>      = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  )
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret  BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret  BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  )
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>      = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret  BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret = (bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>      = (bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>     ret  (bzf->strm, verbosity, small);
1001c1001
<   while (  0)
---
>   while (  0
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       (bzf->strm, verbosity, small);
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>      = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>      = (bzf->strm, verbosity, small);
1003c1003
<     ret = BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       (bzf->strm, verbosity, small);
(93.2 %, 13911 bytes)
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       bzf->strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       (->strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       ->strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       (bzfstrm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       bzfstrm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       (strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInitbzf->strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit->strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInitbzfstrm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInitstrm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInitbzf->, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit->, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInitbzf, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(->strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(strm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(->, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(->strm verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(strm verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(-> verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(bzfstrm, verbosity, small);
1003c1003
<       BZ2_bzDecompressInit(bzf->strm, verbosity, small);
---
>       BZ2_bzDecompressInit(bzf, verbosity, small);
(93.2 %, 13901 bytes)
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit(  ;
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity small);
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity );
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity small;
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity ;
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity small)
1003c1003
<       BZ2_bzDecompressInit( verbosity, small);
---
>       BZ2_bzDecompressInit( verbosity )
(93.2 %, 13895 bytes)
1003c1003
<       BZ2_bzDecompressInit( verbosity );
---
>       BZ2_bzDecompressInit( verbosity 
1003,1004c1003,1004
<       BZ2_bzDecompressInit( verbosity );
<   ;
---
>       BZ2_bzDecompressInit( verbosity ;
>   
1003,1004c1003,1004
<       BZ2_bzDecompressInit( verbosity );
<   ;
---
>       BZ2_bzDecompressInit( verbosity 
>   
1003c1003
<       BZ2_bzDecompressInit( verbosity );
---
>       BZ2_bzDecompressInit( verbosity ;
1006c1006
<   ;
---
>   
1003c1003
<       BZ2_bzDecompressInit( verbosity );
---
>       BZ2_bzDecompressInit( verbosity 
1006c1006
<   ;
---
>   
1003,1004c1003,1004
<       BZ2_bzDecompressInit( verbosity );
<   ;
---
>       BZ2_bzDecompressInit( verbosity ;
>   
1006c1006
<   ;
---
>   
1003,1004c1003,1004
<       BZ2_bzDecompressInit( verbosity );
<   ;
---
>       BZ2_bzDecompressInit( verbosity 
>   
1006c1006
<   ;
---
>   
1003c1003
<       BZ2_bzDecompressInit( verbosity );
---
>       BZ2_bzDecompressInit( verbosity )
1003,1004c1003,1004
<       BZ2_bzDecompressInit( verbosity );
<   ;
---
>       BZ2_bzDecompressInit( verbosity )
>   
(93.2 %, 13894 bytes)
1004c1004
<   ;
---
>   
1004c1004
<   ;
---
>   
1006c1006
<   ;
---
>   
1004c1004
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>    = bzf_2;
1004c1004
<   ;
---
>   
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>    = bzf_2;
1004c1004
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>   bzf_4_1  bzf_2;
1004c1004
<   ;
---
>   
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>   bzf_4_1  bzf_2;
1004c1004
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>     bzf_2;
(93.2 %, 13893 bytes)
1006c1006
<   ;
---
>   
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>    = bzf_2;
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>   bzf_4_1  bzf_2;
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>     bzf_2;
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>   bzf_4_1 = ;
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>    = ;
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>   bzf_4_1  ;
1006c1006
<   ;
---
>   
1008c1008
<   bzf_4_1 = bzf_2;
---
>     ;
1008c1008
<   bzf_4_1 = bzf_2;
---
>    = bzf_2;
1008c1008
<   bzf_4_1 = bzf_2;
---
>     bzf_2;
(93.2 %, 13879 bytes)
1008,1009c1008,1009
<     ;
<   bzf_4_0 = bzf->buf;
---
>     
>     ->buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>    = bzf->buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>     bzf->buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>    = ->buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>     ->buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>    = bzfbuf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>     bzfbuf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>    = buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>     buf;
1009c1009
<   bzf_4_0 = bzf->buf;
---
>   bzf_4_0  bzf->buf;
(93.2 %, 13871 bytes)
1009c1009
<     bzf->buf;
---
>     buf;
1009c1009
<     bzf->buf;
---
>     ->;
1009c1009
<     bzf->buf;
---
>     ;
1009c1009
<     bzf->buf;
---
>     ->buf
1009c1009
<     bzf->buf;
---
>     buf
1009c1009
<     bzf->buf;
---
>     ->
1009c1009
<     bzf->buf;
---
>     
(93.2 %, 13863 bytes)
1009c1009
<     ;
---
>     
1011c1011
<   bzf_6 = True;
---
>     True;
1009c1009
<     ;
---
>     
1011c1011
<   bzf_6 = True;
---
>   bzf_6 = ;
1009c1009
<     ;
---
>     
1011c1011
<   bzf_6 = True;
---
>    = ;
1009c1009
<     ;
---
>     
1011c1011
<   bzf_6 = True;
---
>   bzf_6  ;
(93.2 %, 13856 bytes)
1011,1012c1011,1012
<     True;
<   return bzf;
---
>     
>    bzf;
1011,1012c1011,1012
<     True;
<   return bzf;
---
>     ;
>   return ;
1011,1012c1011,1012
<     True;
<   return bzf;
---
>     
>   return ;
(93.2 %, 13845 bytes)
1012,1013c1012,1013
<    bzf;
< }
---
>    
> 
1012c1012
<    bzf;
---
>    ;
1015c1015
< void BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose(void) {
1012c1012
<    bzf;
---
>    
1015c1015
< void BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose(void) {
(93.2 %, 13838 bytes)
1012c1012
<    ;
---
>    
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClosevoid) {
1012,1013c1012
<    ;
< }
---
>    
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  BZ_APIBZ2_bzReadClosevoid) {
1012c1012
<    ;
---
>    
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  void) {
1012,1013c1012
<    ;
< }
---
>    
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  void) {
1013c1013
< }
---
> 
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  (void) {
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  BZ_APIBZ2_bzReadClosevoid) {
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  void) {
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  BZ_APIBZ2_bzReadClose() {
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  () {
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  BZ_APIBZ2_bzReadClose) {
1013d1012
< }
1015c1014,1015
<  BZ_APIBZ2_bzReadClose(void) {
---
> 
>  ) {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  (void) {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  void) {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  () {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  ) {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  (void {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  void {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  ( {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>   {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClosevoid) {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose) {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClosevoid {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClosevoid) 
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose) 
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClosevoid 
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose 
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose() {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose( {
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose() 
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose( 
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() {
>    *b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( {
>    *b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>    *b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( 
>    *b = 0;
1015c1015
<  BZ_APIBZ2_bzReadClose(void) {
---
>  BZ_APIBZ2_bzReadClose(void {
(93.2 %, 13834 bytes)
1015c1015
<  BZ_APIBZ2_bzReadClose() {
---
>  BZ_APIBZ2_bzReadClose( {
1015c1015
<  BZ_APIBZ2_bzReadClose() {
---
>  BZ_APIBZ2_bzReadClose( 
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( {
>    *b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( 
>    *b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( {
>   BZFILE b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( 
>   BZFILE b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( {
>    b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose( 
>    b = 0;
1015c1015
<  BZ_APIBZ2_bzReadClose() {
---
>  BZ_APIBZ2_bzReadClose() 
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>    *b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>   BZFILE b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>    b = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>   BZFILE * = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>    * = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>   BZFILE  = 0;
1015,1016c1015,1016
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzReadClose() 
>     = 0;
1016c1016
<   BZFILE *b = 0;
---
>    *b = 0;
1016c1016
<   BZFILE *b = 0;
---
>    b = 0;
1016c1016
<   BZFILE *b = 0;
---
>    * = 0;
1016c1016
<   BZFILE *b = 0;
---
>     = 0;
1016c1016
<   BZFILE *b = 0;
---
>    *b  0;
1016c1016
<   BZFILE *b = 0;
---
>    b  0;
1016c1016
<   BZFILE *b = 0;
---
>    *  0;
1016c1016
<   BZFILE *b = 0;
---
>      0;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE b  0;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE   0;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE b = ;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE  = ;
1016c1016
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(93.3 %, 13833 bytes)
1016c1016
<   BZFILE b = 0;
---
>   BZFILE  = 0;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE   0;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE  = ;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE   ;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE  = 0
1016c1016
<   BZFILE b = 0;
---
>   BZFILE   0
1016c1016
<   BZFILE b = 0;
---
>   BZFILE  = 
1016c1016
<   BZFILE b = 0;
---
>   BZFILE   
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  0;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  ;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  0
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  0;
1018c1018
<   bzFile *bzf = b;
---
>    *bzf = b;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  ;
1018c1018
<   bzFile *bzf = b;
---
>    *bzf = b;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  0
1018c1018
<   bzFile *bzf = b;
---
>    *bzf = b;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>    *bzf = b;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b = ;
1016c1016
<   BZFILE b = 0;
---
>   BZFILE b = 
(93.3 %, 13831 bytes)
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>    *bzf = b;
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>    bzf = b;
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>   bzFile * = b;
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>    * = b;
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>   bzFile  = b;
1016c1016
<   BZFILE b  ;
---
>   BZFILE b  
1018c1018
<   bzFile *bzf = b;
---
>     = b;
1018c1018
<   bzFile *bzf = b;
---
>    *bzf = b;
1018c1018
<   bzFile *bzf = b;
---
>    bzf = b;
1018c1018
<   bzFile *bzf = b;
---
>    * = b;
1018c1018
<   bzFile *bzf = b;
---
>     = b;
1018c1018
<   bzFile *bzf = b;
---
>    *bzf  b;
1018c1018
<   bzFile *bzf = b;
---
>    bzf  b;
1018c1018
<   bzFile *bzf = b;
---
>    *  b;
1018c1018
<   bzFile *bzf = b;
---
>      b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile  = b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile   b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile  = ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile   ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile * = b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *  b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile * = ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *  ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile * = b
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *  b
1018c1018
<   bzFile *bzf = b;
---
>   bzFile * = 
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *  
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *bzf  
1018,1019c1018,1019
<   bzFile *bzf = b;
<   Bool bzf_6;
---
>   bzFile *bzf  b;
>    bzf_6;
1018,1019c1018,1019
<   bzFile *bzf = b;
<   Bool bzf_6;
---
>   bzFile *bzf  ;
>    bzf_6;
1018,1019c1018,1019
<   bzFile *bzf = b;
<   Bool bzf_6;
---
>   bzFile *bzf  b
>    bzf_6;
1018,1019c1018,1019
<   bzFile *bzf = b;
<   Bool bzf_6;
---
>   bzFile *bzf  
>    bzf_6;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *bzf = ;
1018c1018
<   bzFile *bzf = b;
---
>   bzFile *bzf = 
1018,1019c1018,1019
<   bzFile *bzf = b;
<   Bool bzf_6;
---
>   bzFile *bzf = ;
>    bzf_6;
(93.3 %, 13829 bytes)
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>    bzf_6;
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>   Bool ;
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>    ;
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>   Bool bzf_6
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>    bzf_6
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>   Bool 
1018,1019c1018,1019
<   bzFile *bzf  ;
<   Bool bzf_6;
---
>   bzFile *bzf  
>    
1019c1019
<   Bool bzf_6;
---
>    bzf_6;
1019c1019
<   Bool bzf_6;
---
>    ;
1019c1019
<   Bool bzf_6;
---
>    bzf_6
1019c1019
<   Bool bzf_6;
---
>    
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>    bzf_6;
>    bzf_3;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>    ;
>    bzf_3;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>    bzf_6
>    bzf_3;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>    
>    bzf_3;
1019c1019
<   Bool bzf_6;
---
>   Bool ;
1019c1019
<   Bool bzf_6;
---
>   Bool 
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool ;
>    bzf_3;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool 
>    bzf_3;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool ;
>   Bool ;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool 
>   Bool ;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool ;
>    ;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool 
>    ;
1019c1019
<   Bool bzf_6;
---
>   Bool bzf_6
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>    bzf_3;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>   Bool ;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>    ;
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>   Bool bzf_3
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>    bzf_3
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>   Bool 
1019,1020c1019,1020
<   Bool bzf_6;
<   Bool bzf_3;
---
>   Bool bzf_6
>    
1020c1020
<   Bool bzf_3;
---
>    bzf_3;
1020c1020
<   Bool bzf_3;
---
>    ;
1020c1020
<   Bool bzf_3;
---
>    bzf_3
1020c1020
<   Bool bzf_3;
---
>    
1020c1020
<   Bool bzf_3;
---
>    bzf_3;
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>    ;
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>    bzf_3
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>    
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>   Bool ;
1020c1020
<   Bool bzf_3;
---
>   Bool 
1020c1020
<   Bool bzf_3;
---
>   Bool ;
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>   Bool 
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>   Bool ;
1022c1022
<   0;
---
>   0
1020c1020
<   Bool bzf_3;
---
>   Bool 
1022c1022
<   0;
---
>   0
1020c1020
<   Bool bzf_3;
---
>   Bool ;
1022c1022
<   0;
---
>   
1020c1020
<   Bool bzf_3;
---
>   Bool 
1022c1022
<   0;
---
>   
1020c1020
<   Bool bzf_3;
---
>   Bool bzf_3
1020c1020
<   Bool bzf_3;
---
>   Bool bzf_3
1022c1022
<   0;
---
>   ;
1020c1020
<   Bool bzf_3;
---
>   Bool bzf_3
1022c1022
<   0;
---
>   0
1020c1020
<   Bool bzf_3;
---
>   Bool bzf_3
1022c1022
<   0;
---
>   
1020c1020
<   Bool bzf_3;
---
>   Bool bzf_3
1023c1023
<   if (bzf == NULL)
---
>    (bzf == NULL)
1020c1020
<   Bool bzf_3;
---
>   Bool bzf_3
1022,1023c1022,1023
<   0;
<   if (bzf == NULL)
---
>   ;
>    (bzf == NULL)
(93.3 %, 13827 bytes)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>    (bzf == NULL)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>   if bzf == NULL)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>    bzf == NULL)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>   if ( == NULL)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>    ( == NULL)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>   if  == NULL)
1022,1023c1022,1023
<   ;
<   if (bzf == NULL)
---
>   
>     == NULL)
1023c1023
<   if (bzf == NULL)
---
>    (bzf == NULL)
1023c1023
<   if (bzf == NULL)
---
>    bzf == NULL)
1023c1023
<   if (bzf == NULL)
---
>    ( == NULL)
1023c1023
<   if (bzf == NULL)
---
>     == NULL)
1023c1023
<   if (bzf == NULL)
---
>    (bzf  NULL)
1023c1023
<   if (bzf == NULL)
---
>    bzf  NULL)
1023c1023
<   if (bzf == NULL)
---
>    (  NULL)
(93.3 %, 13825 bytes)
1023c1023
<    (bzf == NULL)
---
>    bzf == NULL)
1023c1023
<    (bzf == NULL)
---
>     == NULL)
1023c1023
<    (bzf == NULL)
---
>    bzf  NULL)
1023c1023
<    (bzf == NULL)
---
>      NULL)
1023c1023
<    (bzf == NULL)
---
>    bzf == )
1023c1023
<    (bzf == NULL)
---
>     == )
1023c1023
<    (bzf == NULL)
---
>    bzf  )
1023c1023
<    (bzf == NULL)
---
>      )
1023c1023
<    (bzf == NULL)
---
>    ( == NULL)
1023c1023
<    (bzf == NULL)
---
>    (  NULL)
1023c1023
<    (bzf == NULL)
---
>    ( == )
1023c1023
<    (bzf == NULL)
---
>    (  )
1023c1023
<    (bzf == NULL)
---
>    ( == NULL
1023c1023
<    (bzf == NULL)
---
>    (  NULL
1023c1023
<    (bzf == NULL)
---
>    ( == 
1023c1023
<    (bzf == NULL)
---
>    (  
1023c1023
<    (bzf == NULL)
---
>    (bzf  NULL)
1023c1023
<    (bzf == NULL)
---
>    (bzf  )
(93.3 %, 13820 bytes)
1023c1023
<    (  NULL)
---
>    (  
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  )
>     
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  
>     
1023c1023
<    (  NULL)
---
>    (  )
1026c1026
<   bzf_3;
---
>   ;
1023c1023
<    (  NULL)
---
>    (  
1026c1026
<   bzf_3;
---
>   ;
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  )
>     
1026c1026
<   bzf_3;
---
>   ;
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  
>     
1026c1026
<   bzf_3;
---
>   ;
1023c1023
<    (  NULL)
---
>    (  NULL
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  NULL
>     
1023c1023
<    (  NULL)
---
>    (  NULL
1026c1026
<   bzf_3;
---
>   ;
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  NULL
>     
1026c1026
<   bzf_3;
---
>   ;
1023c1023
<    (  NULL)
---
>    (  NULL
1026c1026
<   bzf_3;
---
>   bzf_3
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  NULL
>     
1026c1026
<   bzf_3;
---
>   bzf_3
1023c1023
<    (  NULL)
---
>    (  NULL
1026c1026
<   bzf_3;
---
>   
1023,1024c1023,1024
<    (  NULL)
<     ;
---
>    (  NULL
>     
1026c1026
<   bzf_3;
---
>   
1024c1024
<     ;
---
>     
1024c1024
<     ;
---
>     
1026c1026
<   bzf_3;
---
>   ;
1024c1024
<     ;
---
>     
1026c1026
<   bzf_3;
---
>   bzf_3
1024c1024
<     ;
---
>     
1026c1026
<   bzf_3;
---
>   
(93.3 %, 13814 bytes)
1026c1026
<   ;
---
>   
1028c1028
<   ;
---
>   
1026c1026
<   ;
---
>   
1030c1030
<   bzf_6;
---
>   ;
1026c1026
<   ;
---
>   
1028c1028
<   ;
---
>   
1030c1030
<   bzf_6;
---
>   ;
1026c1026
<   ;
---
>   
1030c1030
<   bzf_6;
---
>   bzf_6
(93.3 %, 13808 bytes)
1028c1028
<   ;
---
>   
1032c1032
<   0;
---
>   ;
1028c1028
<   ;
---
>   
1030c1030
<   ;
---
>   
1032c1032
<   0;
---
>   ;
(93.3 %, 13806 bytes)
1030c1030
<   ;
---
>   
1033c1033
<   0;
---
>   ;
1030c1030
<   ;
---
>   
1031a1032
>   
1033d1033
<   0;
(93.3 %, 13804 bytes)
1031a1032
>   
1033,1034c1034
<   ;
< }
---
> 
1032,1034c1032,1034
<   ;
<   ;
< }
---
>   
>   
> 
1032c1032
<   ;
---
>   
1036c1036
< int BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead(
1032,1033c1032,1033
<   ;
<   ;
---
>   
>   
1036c1036
< int BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead(
1031a1032
>   
1033,1034d1033
<   ;
< }
1036c1035,1036
< int BZ_APIBZ2_bzRead(
---
> 
>  BZ_APIBZ2_bzRead(
1032,1034c1032,1033
<   ;
<   ;
< }
---
>   
>   
1036c1035,1036
< int BZ_APIBZ2_bzRead(
---
> 
>  BZ_APIBZ2_bzRead(
1033c1033
<   ;
---
>   
(93.3 %, 13800 bytes)
1033c1033
<   ;
---
>   
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1033,1034c1033
<   ;
< }
---
>   
1036c1035,1036
<  BZ_APIBZ2_bzRead(
---
> 
>  BZ_APIBZ2_bzRead
1033c1033
<   ;
---
>   
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  
1033,1034c1033
<   ;
< }
---
>   
1036c1035,1036
<  BZ_APIBZ2_bzRead(
---
> 
>  
1034c1034
< }
---
> 
1034d1033
< }
1036c1035,1036
<  BZ_APIBZ2_bzRead(
---
> 
>  (
1034d1033
< }
1036c1035,1036
<  BZ_APIBZ2_bzRead(
---
> 
>  BZ_APIBZ2_bzRead
1034d1033
< }
1036c1035,1036
<  BZ_APIBZ2_bzRead(
---
> 
>  
1034c1034
< }
---
> 
1038c1038
<     void) {
---
>     ) {
1034d1033
< }
1036d1034
<  BZ_APIBZ2_bzRead(
1038c1036,1038
<     void) {
---
>  (
> 
>     ) {
1034d1033
< }
1036d1034
<  BZ_APIBZ2_bzRead(
1038c1036,1038
<     void) {
---
>  BZ_APIBZ2_bzRead
> 
>     ) {
1034d1033
< }
1036d1034
<  BZ_APIBZ2_bzRead(
1038c1036,1038
<     void) {
---
>  
> 
>     ) {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  (
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  (
1038c1038
<     void) {
---
>     ) {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  
1038c1038
<     void) {
---
>     ) {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  (
1038c1038
<     void) {
---
>     void {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  
1038c1038
<     void) {
---
>     void {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  (
1038c1038
<     void) {
---
>      {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  
1038c1038
<     void) {
---
>      {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>     ) {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>     void {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>      {
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>     void) 
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>     ) 
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>     void 
1036c1036
<  BZ_APIBZ2_bzRead(
---
>  BZ_APIBZ2_bzRead
1038c1038
<     void) {
---
>      
1038c1038
<     void) {
---
>     ) {
1038c1038
<     void) {
---
>      {
1038c1038
<     void) {
---
>     ) 
1038c1038
<     void) {
---
>      
1038,1039c1038,1039
<     void) {
<   int len = 0;
---
>     ) {
>    len = 0;
1038,1039c1038,1039
<     void) {
<   int len = 0;
---
>      {
>    len = 0;
1038,1039c1038,1039
<     void) {
<   int len = 0;
---
>     ) 
>    len = 0;
1038,1039c1038,1039
<     void) {
<   int len = 0;
---
>      
>    len = 0;
1038c1038
<     void) {
---
>     void {
(93.3 %, 13796 bytes)
1038c1038
<     ) {
---
>      {
1038c1038
<     ) {
---
>      
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>      {
>    len = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>      
>    len = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>      {
>   int  = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>      
>   int  = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>      {
>     = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>      
>     = 0;
1038c1038
<     ) {
---
>     ) 
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>    len = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>   int  = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>     = 0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>   int len  0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>    len  0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>   int   0;
1038,1039c1038,1039
<     ) {
<   int len = 0;
---
>     ) 
>      0;
1039c1039
<   int len = 0;
---
>    len = 0;
1039c1039
<   int len = 0;
---
>     = 0;
1039c1039
<   int len = 0;
---
>    len  0;
1039c1039
<   int len = 0;
---
>      0;
1039c1039
<   int len = 0;
---
>    len = ;
1039c1039
<   int len = 0;
---
>     = ;
1039c1039
<   int len = 0;
---
>    len  ;
1039c1039
<   int len = 0;
---
>      ;
1039c1039
<   int len = 0;
---
>   int  = 0;
1039c1039
<   int len = 0;
---
>   int   0;
1039c1039
<   int len = 0;
---
>   int  = ;
1039c1039
<   int len = 0;
---
>   int   ;
1039c1039
<   int len = 0;
---
>   int  = 0
1039c1039
<   int len = 0;
---
>   int   0
1039c1039
<   int len = 0;
---
>   int  = 
1039c1039
<   int len = 0;
---
>   int   
1039c1039
<   int len = 0;
---
>   int len  0;
1039c1039
<   int len = 0;
---
>   int len  ;
1039c1039
<   int len = 0;
---
>   int len  0
1039c1039
<   int len = 0;
---
>   int len  
1039,1040c1039,1040
<   int len = 0;
<   void *buf = 0;
---
>   int len  0;
>    *buf = 0;
1039,1040c1039,1040
<   int len = 0;
<   void *buf = 0;
---
>   int len  ;
>    *buf = 0;
1039,1040c1039,1040
<   int len = 0;
<   void *buf = 0;
---
>   int len  0
>    *buf = 0;
1039,1040c1039,1040
<   int len = 0;
<   void *buf = 0;
---
>   int len  
>    *buf = 0;
1039c1039
<   int len = 0;
---
>   int len = ;
1039c1039
<   int len = 0;
---
>   int len = 
1039,1040c1039,1040
<   int len = 0;
<   void *buf = 0;
---
>   int len = ;
>    *buf = 0;
(93.3 %, 13794 bytes)
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>    *buf = 0;
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>   void buf = 0;
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>    buf = 0;
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>   void * = 0;
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>    * = 0;
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>   void  = 0;
1039,1040c1039,1040
<   int len  ;
<   void *buf = 0;
---
>   int len  
>     = 0;
1040c1040
<   void *buf = 0;
---
>    *buf = 0;
1040c1040
<   void *buf = 0;
---
>    buf = 0;
1040c1040
<   void *buf = 0;
---
>    * = 0;
1040c1040
<   void *buf = 0;
---
>     = 0;
1040c1040
<   void *buf = 0;
---
>    *buf  0;
1040c1040
<   void *buf = 0;
---
>    buf  0;
1040c1040
<   void *buf = 0;
---
>    *  0;
1040c1040
<   void *buf = 0;
---
>      0;
1040c1040
<   void *buf = 0;
---
>   void buf = 0;
1040c1040
<   void *buf = 0;
---
>   void  = 0;
1040c1040
<   void *buf = 0;
---
>   void buf  0;
1040c1040
<   void *buf = 0;
---
>   void   0;
1040c1040
<   void *buf = 0;
---
>   void buf = ;
1040c1040
<   void *buf = 0;
---
>   void  = ;
1040c1040
<   void *buf = 0;
---
>   void buf  ;
1040c1040
<   void *buf = 0;
---
>   void   ;
1040c1040
<   void *buf = 0;
---
>   void * = 0;
1040c1040
<   void *buf = 0;
---
>   void *  0;
1040c1040
<   void *buf = 0;
---
>   void * = ;
1040c1040
<   void *buf = 0;
---
>   void *  ;
1040c1040
<   void *buf = 0;
---
>   void * = 0
1040c1040
<   void *buf = 0;
---
>   void *  0
1040c1040
<   void *buf = 0;
---
>   void * = 
1040c1040
<   void *buf = 0;
---
>   void *  
1040c1040
<   void *buf = 0;
---
>   void *buf  0;
1040c1040
<   void *buf = 0;
---
>   void *buf  ;
1040c1040
<   void *buf = 0;
---
>   void *buf  0
1040c1040
<   void *buf = 0;
---
>   void *buf  
1040,1041c1040,1041
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  0;
>    *b = 0;
1040,1041c1040,1041
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  ;
>    *b = 0;
1040,1041c1040,1041
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  0
>    *b = 0;
1040,1041c1040,1041
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf  
>    *b = 0;
1040c1040
<   void *buf = 0;
---
>   void *buf = ;
1040c1040
<   void *buf = 0;
---
>   void *buf = 
1040,1041c1040,1041
<   void *buf = 0;
<   BZFILE *b = 0;
---
>   void *buf = ;
>    *b = 0;
(93.3 %, 13792 bytes)
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>    *b = 0;
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>   BZFILE b = 0;
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>    b = 0;
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>   BZFILE * = 0;
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>    * = 0;
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>   BZFILE  = 0;
1040,1041c1040,1041
<   void *buf  ;
<   BZFILE *b = 0;
---
>   void *buf  
>     = 0;
1041c1041
<   BZFILE *b = 0;
---
>    *b = 0;
1041c1041
<   BZFILE *b = 0;
---
>    b = 0;
1041c1041
<   BZFILE *b = 0;
---
>    * = 0;
1041c1041
<   BZFILE *b = 0;
---
>     = 0;
1041c1041
<   BZFILE *b = 0;
---
>    *b  0;
1041c1041
<   BZFILE *b = 0;
---
>    b  0;
1041c1041
<   BZFILE *b = 0;
---
>    *  0;
1041c1041
<   BZFILE *b = 0;
---
>      0;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE b  0;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE   0;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE b = ;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE  = ;
1041c1041
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(93.3 %, 13791 bytes)
1041c1041
<   BZFILE b = 0;
---
>   BZFILE  = 0;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE   0;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE  = ;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE   ;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE  = 0
1041c1041
<   BZFILE b = 0;
---
>   BZFILE   0
1041c1041
<   BZFILE b = 0;
---
>   BZFILE  = 
1041c1041
<   BZFILE b = 0;
---
>   BZFILE   
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  0;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  ;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  0
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  0;
1043c1043
<   bzFile *bzf = b;
---
>    *bzf = b;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  ;
1043c1043
<   bzFile *bzf = b;
---
>    *bzf = b;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  0
1043c1043
<   bzFile *bzf = b;
---
>    *bzf = b;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>    *bzf = b;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b = ;
1041c1041
<   BZFILE b = 0;
---
>   BZFILE b = 
(93.3 %, 13789 bytes)
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>    *bzf = b;
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>    bzf = b;
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>   bzFile * = b;
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>    * = b;
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>   bzFile  = b;
1041c1041
<   BZFILE b  ;
---
>   BZFILE b  
1043c1043
<   bzFile *bzf = b;
---
>     = b;
1043c1043
<   bzFile *bzf = b;
---
>    *bzf = b;
1043c1043
<   bzFile *bzf = b;
---
>    bzf = b;
1043c1043
<   bzFile *bzf = b;
---
>    * = b;
1043c1043
<   bzFile *bzf = b;
---
>     = b;
1043c1043
<   bzFile *bzf = b;
---
>    *bzf  b;
1043c1043
<   bzFile *bzf = b;
---
>    bzf  b;
1043c1043
<   bzFile *bzf = b;
---
>    *  b;
1043c1043
<   bzFile *bzf = b;
---
>      b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile  = b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile   b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile  = ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile   ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile * = b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *  b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile * = ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *  ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile * = b
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *  b
1043c1043
<   bzFile *bzf = b;
---
>   bzFile * = 
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *  
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *bzf  
1043,1044c1043,1044
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  b;
>    *bzf_4_4;
1043,1044c1043,1044
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  ;
>    *bzf_4_4;
1043,1044c1043,1044
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  b
>    *bzf_4_4;
1043,1044c1043,1044
<   bzFile *bzf = b;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    *bzf_4_4;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *bzf = ;
1043c1043
<   bzFile *bzf = b;
---
>   bzFile *bzf = 
(93.3 %, 13787 bytes)
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    *bzf_4_4;
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>   char bzf_4_4;
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    bzf_4_4;
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>   char *;
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    *;
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>   char ;
1043,1044c1043,1044
<   bzFile *bzf  ;
<   char *bzf_4_4;
---
>   bzFile *bzf  
>    ;
1044c1044
<   char *bzf_4_4;
---
>    *bzf_4_4;
1044c1044
<   char *bzf_4_4;
---
>    bzf_4_4;
1044c1044
<   char *bzf_4_4;
---
>    *;
1044c1044
<   char *bzf_4_4;
---
>    ;
1044c1044
<   char *bzf_4_4;
---
>    *bzf_4_4
1044c1044
<   char *bzf_4_4;
---
>    bzf_4_4
1044c1044
<   char *bzf_4_4;
---
>    *
1044c1044
<   char *bzf_4_4;
---
>    
1044c1044
<   char *bzf_4_4;
---
>   char bzf_4_4;
1044c1044
<   char *bzf_4_4;
---
>   char ;
1044c1044
<   char *bzf_4_4;
---
>   char bzf_4_4
1044c1044
<   char *bzf_4_4;
---
>   char 
1044,1045c1044,1045
<   char *bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4;
>    int bzf_4_5;
(93.3 %, 13786 bytes)
1044c1044
<   char bzf_4_4;
---
>   char ;
1044c1044
<   char bzf_4_4;
---
>   char 
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char ;
>    int bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char 
>    int bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char ;
>   unsigned  bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char 
>   unsigned  bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char ;
>     bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char 
>     bzf_4_5;
1044c1044
<   char bzf_4_4;
---
>   char bzf_4_4
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>    int bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>   unsigned  bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>     bzf_4_5;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>   unsigned int ;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>    int ;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>   unsigned  ;
1044,1045c1044,1045
<   char bzf_4_4;
<   unsigned int bzf_4_5;
---
>   char bzf_4_4
>     ;
1045c1045
<   unsigned int bzf_4_5;
---
>    int bzf_4_5;
1045c1045
<   unsigned int bzf_4_5;
---
>     bzf_4_5;
1045c1045
<   unsigned int bzf_4_5;
---
>    int ;
1045c1045
<   unsigned int bzf_4_5;
---
>     ;
1045c1045
<   unsigned int bzf_4_5;
---
>    int bzf_4_5
1045c1045
<   unsigned int bzf_4_5;
---
>     bzf_4_5
1045c1045
<   unsigned int bzf_4_5;
---
>    int 
1045c1045
<   unsigned int bzf_4_5;
---
>     
1045c1045
<   unsigned int bzf_4_5;
---
>   unsigned  bzf_4_5;
(93.3 %, 13778 bytes)
1045c1045
<    int bzf_4_5;
---
>     bzf_4_5;
1045c1045
<    int bzf_4_5;
---
>     ;
1045c1045
<    int bzf_4_5;
---
>     bzf_4_5
1045c1045
<    int bzf_4_5;
---
>     
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>     bzf_4_5;
>    bzf_3;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>     ;
>    bzf_3;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>     bzf_4_5
>    bzf_3;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>     
>    bzf_3;
1045c1045
<    int bzf_4_5;
---
>    int ;
1045c1045
<    int bzf_4_5;
---
>    int 
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int ;
>    bzf_3;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int 
>    bzf_3;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int ;
>   Bool ;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int 
>   Bool ;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int ;
>    ;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int 
>    ;
1045c1045
<    int bzf_4_5;
---
>    int bzf_4_5
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>    bzf_3;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>   Bool ;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>    ;
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>   Bool bzf_3
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>    bzf_3
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>   Bool 
1045,1046c1045,1046
<    int bzf_4_5;
<   Bool bzf_3;
---
>    int bzf_4_5
>    
1046c1046
<   Bool bzf_3;
---
>    bzf_3;
1046c1046
<   Bool bzf_3;
---
>    ;
1046c1046
<   Bool bzf_3;
---
>    bzf_3
1046c1046
<   Bool bzf_3;
---
>    
1046c1046
<   Bool bzf_3;
---
>    bzf_3;
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>    ;
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>    bzf_3
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>    
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>   Bool ;
1046c1046
<   Bool bzf_3;
---
>   Bool 
1046c1046
<   Bool bzf_3;
---
>   Bool ;
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>   Bool 
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>   Bool ;
1048c1048
<   0;
---
>   0
1046c1046
<   Bool bzf_3;
---
>   Bool 
1048c1048
<   0;
---
>   0
1046c1046
<   Bool bzf_3;
---
>   Bool ;
1048c1048
<   0;
---
>   
1046c1046
<   Bool bzf_3;
---
>   Bool 
1048c1048
<   0;
---
>   
1046c1046
<   Bool bzf_3;
---
>   Bool bzf_3
1046c1046
<   Bool bzf_3;
---
>   Bool bzf_3
1048c1048
<   0;
---
>   ;
1046c1046
<   Bool bzf_3;
---
>   Bool bzf_3
1048c1048
<   0;
---
>   0
1046c1046
<   Bool bzf_3;
---
>   Bool bzf_3
1048c1048
<   0;
---
>   
1046c1046
<   Bool bzf_3;
---
>   Bool bzf_3
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
1046c1046
<   Bool bzf_3;
---
>   Bool bzf_3
1048c1048
<   0;
---
>   ;
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
(93.3 %, 13776 bytes)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if bzf == NULL || buf == NULL || len < 0)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if ( == NULL || buf == NULL || len < 0)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>   if  == NULL || buf == NULL || len < 0)
1048c1048
<   ;
---
>   
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf == NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (bzf  NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
1050c1050
<   if (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
(93.3 %, 13774 bytes)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf == NULL || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>     == NULL || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf  NULL || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>      NULL || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf ==  || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>     ==  || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    bzf   || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>       || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==  || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (   || buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( == NULL  buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (  NULL  buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    ( ==   buf == NULL || len < 0)
1050c1050
<    (bzf == NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
(93.3 %, 13769 bytes)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf == NULL || len < 0)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||  == NULL || len < 0)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (     == NULL || len < 0)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (   || buf  NULL || len < 0)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (    buf  NULL || len < 0)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (   ||   NULL || len < 0)
1050c1050
<    (  NULL || buf == NULL || len < 0)
---
>    (      NULL || len < 0)
(93.3 %, 13763 bytes)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (      NULL || len < 0)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (     ==  || len < 0)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (       || len < 0)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (     == NULL  len < 0)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (      NULL  len < 0)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (     ==   len < 0)
1050c1050
<    (    buf == NULL || len < 0)
---
>    (        len < 0)
(93.3 %, 13758 bytes)
1050c1050
<    (      NULL || len < 0)
---
>    (        len < 0)
1050c1050
<    (      NULL || len < 0)
---
>    (       ||  < 0)
1050c1050
<    (      NULL || len < 0)
---
>    (         < 0)
1050c1050
<    (      NULL || len < 0)
---
>    (       || len  0)
1050c1050
<    (      NULL || len < 0)
---
>    (        len  0)
1050c1050
<    (      NULL || len < 0)
---
>    (       ||   0)
1050c1050
<    (      NULL || len < 0)
---
>    (          0)
(93.3 %, 13752 bytes)
1050c1050
<    (        len < 0)
---
>    (          0)
1050c1050
<    (        len < 0)
---
>    (         < )
1050c1050
<    (        len < 0)
---
>    (          )
1050c1050
<    (        len < 0)
---
>    (         < 0
1050c1050
<    (        len < 0)
---
>    (          0
1050c1050
<    (        len < 0)
---
>    (         < 
1050c1050
<    (        len < 0)
---
>    (          
1050c1050
<    (        len < 0)
---
>    (        len  0)
1050c1050
<    (        len < 0)
---
>    (        len  )
(93.3 %, 13748 bytes)
1050c1050
<    (          0)
---
>    (          
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          )
>     
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          
>     
1050c1050
<    (          0)
---
>    (          )
1053c1053
<   bzf_3;
---
>   ;
1050c1050
<    (          0)
---
>    (          
1053c1053
<   bzf_3;
---
>   ;
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          )
>     
1053c1053
<   bzf_3;
---
>   ;
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          
>     
1053c1053
<   bzf_3;
---
>   ;
1050c1050
<    (          0)
---
>    (          0
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          0
>     
1050c1050
<    (          0)
---
>    (          0
1053c1053
<   bzf_3;
---
>   ;
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          0
>     
1053c1053
<   bzf_3;
---
>   ;
1050c1050
<    (          0)
---
>    (          0
1053c1053
<   bzf_3;
---
>   bzf_3
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          0
>     
1053c1053
<   bzf_3;
---
>   bzf_3
1050c1050
<    (          0)
---
>    (          0
1053c1053
<   bzf_3;
---
>   
1050,1051c1050,1051
<    (          0)
<     ;
---
>    (          0
>     
1053c1053
<   bzf_3;
---
>   
1051c1051
<     ;
---
>     
1051c1051
<     ;
---
>     
1053c1053
<   bzf_3;
---
>   ;
1051c1051
<     ;
---
>     
1053c1053
<   bzf_3;
---
>   bzf_3
1051c1051
<     ;
---
>     
1053c1053
<   bzf_3;
---
>   
(93.3 %, 13742 bytes)
1053c1053
<   ;
---
>   
1055c1055
<   ;
---
>   
1053c1053
<   ;
---
>   
1057c1057
<   len == 0;
---
>    == 0;
1053c1053
<   ;
---
>   
1055c1055
<   ;
---
>   
1057c1057
<   len == 0;
---
>    == 0;
1053c1053
<   ;
---
>   
1057c1057
<   len == 0;
---
>   len  0;
1053c1053
<   ;
---
>   
1055c1055
<   ;
---
>   
1057c1057
<   len == 0;
---
>   len  0;
1053c1053
<   ;
---
>   
1057c1057
<   len == 0;
---
>     0;
(93.3 %, 13737 bytes)
1057c1057
<    == 0;
---
>     
1057c1057
<    == 0;
---
>     0;
1059c1059
<   ;
---
>   
1057c1057
<    == 0;
---
>     ;
1059c1059
<   ;
---
>   
(93.3 %, 13733 bytes)
1059c1059
<   ;
---
>   
1061c1061
<   bzf_4_5 = len;
---
>     len;
1059c1059
<   ;
---
>   
1061c1061
<   bzf_4_5 = len;
---
>   bzf_4_5 = ;
1059c1059
<   ;
---
>   
1061c1061
<   bzf_4_5 = len;
---
>    = ;
1059c1059
<   ;
---
>   
1061c1061
<   bzf_4_5 = len;
---
>   bzf_4_5  ;
1059c1059
<   ;
---
>   
1061c1061
<   bzf_4_5 = len;
---
>     ;
1061c1061
<   bzf_4_5 = len;
---
>    = len;
1061c1061
<   bzf_4_5 = len;
---
>     len;
1061c1061
<   bzf_4_5 = len;
---
>    = ;
(93.3 %, 13721 bytes)
1060a1061
>     
1062d1062
<   bzf_4_4 = buf;
1062c1062
<   bzf_4_4 = buf;
---
>    = buf;
1062c1062
<   bzf_4_4 = buf;
---
>     buf;
(93.3 %, 13709 bytes)
1062c1062
<     ;
---
>     
1064c1064
<   while (True)
---
>    )
1064c1064
<   while (True)
---
>    (True)
1064c1064
<   while (True)
---
>    True)
1064c1064
<   while (True)
---
>    ()
1064c1064
<   while (True)
---
>    )
1064c1064
<   while (True)
---
>    (True
1064c1064
<   while (True)
---
>    True
1064c1064
<   while (True)
---
>    (
1064c1064
<   while (True)
---
>    
1064c1064
<   while (True)
---
>   while True)
1064c1064
<   while (True)
---
>   while )
1064c1064
<   while (True)
---
>   while True
1064c1064
<   while (True)
---
>   while 
1064c1064
<   while (True)
---
>   while True)
1066c1066
<     return 0;
---
>      0;
1064c1064
<   while (True)
---
>   while )
1066c1066
<     return 0;
---
>      0;
1064c1064
<   while (True)
---
>   while True
1066c1066
<     return 0;
---
>      0;
1064c1064
<   while (True)
---
>   while 
1066c1066
<     return 0;
---
>      0;
1064c1064
<   while (True)
---
>   while ()
(93.3 %, 13698 bytes)
1066,1067c1066,1067
<     return 0;
< }
---
>      
> 
1066c1066
<     return 0;
---
>     return ;
1066c1066
<     return 0;
---
>     return 
1066,1067c1066,1067
<     return 0;
< }
---
>     return ;
> 
1066,1067c1066,1067
<     return 0;
< }
---
>     return 
> 
1066c1066
<     return 0;
---
>     return ;
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused(
1066c1066
<     return 0;
---
>     return 
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused(
1066,1067c1066
<     return 0;
< }
---
>     return ;
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  BZ_APIBZ2_bzReadGetUnused(
1066,1067c1066
<     return 0;
< }
---
>     return 
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  BZ_APIBZ2_bzReadGetUnused(
1066c1066
<     return 0;
---
>     return 0
1066,1067c1066,1067
<     return 0;
< }
---
>     return 0
> 
1066c1066
<     return 0;
---
>     return 0
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused(
1066,1067c1066
<     return 0;
< }
---
>     return 0
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  BZ_APIBZ2_bzReadGetUnused(
1066c1066
<     return 0;
---
>     return 0
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> void (
1066,1067c1066
<     return 0;
< }
---
>     return 0
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
> void (
1066c1066
<     return 0;
---
>     return 0
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  (
1066,1067c1066
<     return 0;
< }
---
>     return 0
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  (
1067c1067
< }
---
> 
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  BZ_APIBZ2_bzReadGetUnused(
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
> void (
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  (
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
> void BZ_APIBZ2_bzReadGetUnused
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  BZ_APIBZ2_bzReadGetUnused
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
> void 
1067d1066
< }
1069c1068,1069
< void BZ_APIBZ2_bzReadGetUnused(
---
> 
>  
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused(
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  (
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  
1069c1069
< void BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused(
1071c1071
<     void) {
---
>     ) {
(93.3 %, 13694 bytes)
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  (
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  (
1071c1071
<     void) {
---
>     ) {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  
1071c1071
<     void) {
---
>     ) {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  (
1071c1071
<     void) {
---
>     void {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  
1071c1071
<     void) {
---
>     void {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  (
1071c1071
<     void) {
---
>      {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  
1071c1071
<     void) {
---
>      {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>     ) {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>     void {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>      {
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>     void) 
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>     ) 
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>     void 
1069c1069
<  BZ_APIBZ2_bzReadGetUnused(
---
>  BZ_APIBZ2_bzReadGetUnused
1071c1071
<     void) {
---
>      
1071c1071
<     void) {
---
>     ) {
1071c1071
<     void) {
---
>      {
1071c1071
<     void) {
---
>     ) 
1071c1071
<     void) {
---
>      
1071,1072c1071,1072
<     void) {
<   int *nUnused = 0;
---
>     ) {
>    *nUnused = 0;
1071,1072c1071,1072
<     void) {
<   int *nUnused = 0;
---
>      {
>    *nUnused = 0;
1071,1072c1071,1072
<     void) {
<   int *nUnused = 0;
---
>     ) 
>    *nUnused = 0;
1071,1072c1071,1072
<     void) {
<   int *nUnused = 0;
---
>      
>    *nUnused = 0;
(93.3 %, 13690 bytes)
1071c1071
<     ) {
---
>      {
1071c1071
<     ) {
---
>      
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>      {
>    *nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>      
>    *nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>      {
>   int nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>      
>   int nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>      {
>    nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>      
>    nUnused = 0;
1071c1071
<     ) {
---
>     ) 
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>    *nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>   int nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>    nUnused = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>   int * = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>    * = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>   int  = 0;
1071,1072c1071,1072
<     ) {
<   int *nUnused = 0;
---
>     ) 
>     = 0;
1072c1072
<   int *nUnused = 0;
---
>    *nUnused = 0;
1072c1072
<   int *nUnused = 0;
---
>    nUnused = 0;
1072c1072
<   int *nUnused = 0;
---
>    * = 0;
1072c1072
<   int *nUnused = 0;
---
>     = 0;
1072c1072
<   int *nUnused = 0;
---
>    *nUnused  0;
1072c1072
<   int *nUnused = 0;
---
>    nUnused  0;
1072c1072
<   int *nUnused = 0;
---
>    *  0;
1072c1072
<   int *nUnused = 0;
---
>      0;
1072c1072
<   int *nUnused = 0;
---
>   int nUnused = 0;
1072c1072
<   int *nUnused = 0;
---
>   int  = 0;
1072c1072
<   int *nUnused = 0;
---
>   int nUnused  0;
1072c1072
<   int *nUnused = 0;
---
>   int   0;
1072c1072
<   int *nUnused = 0;
---
>   int nUnused = ;
1072c1072
<   int *nUnused = 0;
---
>   int  = ;
1072c1072
<   int *nUnused = 0;
---
>   int nUnused  ;
1072c1072
<   int *nUnused = 0;
---
>   int   ;
1072c1072
<   int *nUnused = 0;
---
>   int * = 0;
1072c1072
<   int *nUnused = 0;
---
>   int *  0;
1072c1072
<   int *nUnused = 0;
---
>   int * = ;
1072c1072
<   int *nUnused = 0;
---
>   int *  ;
1072c1072
<   int *nUnused = 0;
---
>   int * = 0
1072c1072
<   int *nUnused = 0;
---
>   int *  0
1072c1072
<   int *nUnused = 0;
---
>   int * = 
1072c1072
<   int *nUnused = 0;
---
>   int *  
1072c1072
<   int *nUnused = 0;
---
>   int *nUnused  0;
1072c1072
<   int *nUnused = 0;
---
>   int *nUnused  ;
1072c1072
<   int *nUnused = 0;
---
>   int *nUnused  0
1072c1072
<   int *nUnused = 0;
---
>   int *nUnused  
1072,1073c1072,1073
<   int *nUnused = 0;
<   void **unused = 0;
---
>   int *nUnused  0;
>    **unused = 0;
1072,1073c1072,1073
<   int *nUnused = 0;
<   void **unused = 0;
---
>   int *nUnused  ;
>    **unused = 0;
1072,1073c1072,1073
<   int *nUnused = 0;
<   void **unused = 0;
---
>   int *nUnused  0
>    **unused = 0;
1072,1073c1072,1073
<   int *nUnused = 0;
<   void **unused = 0;
---
>   int *nUnused  
>    **unused = 0;
1072c1072
<   int *nUnused = 0;
---
>   int *nUnused = ;
1072c1072
<   int *nUnused = 0;
---
>   int *nUnused = 
(93.3 %, 13688 bytes)
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>    **unused = 0;
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>   void *unused = 0;
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>    *unused = 0;
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>   void *unused = 0;
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>    *unused = 0;
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>   void unused = 0;
1072,1073c1072,1073
<   int *nUnused  ;
<   void **unused = 0;
---
>   int *nUnused  
>    unused = 0;
1073c1073
<   void **unused = 0;
---
>    **unused = 0;
1073c1073
<   void **unused = 0;
---
>    *unused = 0;
1073c1073
<   void **unused = 0;
---
>    *unused = 0;
1073c1073
<   void **unused = 0;
---
>    unused = 0;
1073c1073
<   void **unused = 0;
---
>    ** = 0;
1073c1073
<   void **unused = 0;
---
>    * = 0;
1073c1073
<   void **unused = 0;
---
>    * = 0;
1073c1073
<   void **unused = 0;
---
>     = 0;
1073c1073
<   void **unused = 0;
---
>   void *unused = 0;
1073c1073
<   void **unused = 0;
---
>   void unused = 0;
1073c1073
<   void **unused = 0;
---
>   void * = 0;
1073c1073
<   void **unused = 0;
---
>   void  = 0;
1073c1073
<   void **unused = 0;
---
>   void *unused  0;
1073c1073
<   void **unused = 0;
---
>   void unused  0;
1073c1073
<   void **unused = 0;
---
>   void *  0;
1073c1073
<   void **unused = 0;
---
>   void   0;
1073c1073
<   void **unused = 0;
---
>   void *unused = 0;
1073c1073
<   void **unused = 0;
---
>   void * = 0;
1073c1073
<   void **unused = 0;
---
>   void *unused  0;
1073c1073
<   void **unused = 0;
---
>   void *  0;
1073c1073
<   void **unused = 0;
---
>   void *unused = ;
1073c1073
<   void **unused = 0;
---
>   void * = ;
1073c1073
<   void **unused = 0;
---
>   void *unused  ;
1073c1073
<   void **unused = 0;
---
>   void *  ;
1073c1073
<   void **unused = 0;
---
>   void ** = 0;
1073c1073
<   void **unused = 0;
---
>   void **  0;
1073c1073
<   void **unused = 0;
---
>   void ** = ;
1073c1073
<   void **unused = 0;
---
>   void **  ;
1073c1073
<   void **unused = 0;
---
>   void ** = 0
1073c1073
<   void **unused = 0;
---
>   void **  0
1073c1073
<   void **unused = 0;
---
>   void ** = 
1073c1073
<   void **unused = 0;
---
>   void **  
1073c1073
<   void **unused = 0;
---
>   void **unused  0;
1073c1073
<   void **unused = 0;
---
>   void **unused  ;
1073c1073
<   void **unused = 0;
---
>   void **unused  0
1073c1073
<   void **unused = 0;
---
>   void **unused  
1073,1074c1073,1074
<   void **unused = 0;
<   BZFILE *b = 0;
---
>   void **unused  0;
>    *b = 0;
1073,1074c1073,1074
<   void **unused = 0;
<   BZFILE *b = 0;
---
>   void **unused  ;
>    *b = 0;
1073,1074c1073,1074
<   void **unused = 0;
<   BZFILE *b = 0;
---
>   void **unused  0
>    *b = 0;
1073,1074c1073,1074
<   void **unused = 0;
<   BZFILE *b = 0;
---
>   void **unused  
>    *b = 0;
1073c1073
<   void **unused = 0;
---
>   void **unused = ;
(93.3 %, 13686 bytes)
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>    *b = 0;
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>   BZFILE b = 0;
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>    b = 0;
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>   BZFILE * = 0;
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>    * = 0;
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>   BZFILE  = 0;
1073,1074c1073,1074
<   void **unused  ;
<   BZFILE *b = 0;
---
>   void **unused  
>     = 0;
1074c1074
<   BZFILE *b = 0;
---
>    *b = 0;
1074c1074
<   BZFILE *b = 0;
---
>    b = 0;
1074c1074
<   BZFILE *b = 0;
---
>    * = 0;
1074c1074
<   BZFILE *b = 0;
---
>     = 0;
1074c1074
<   BZFILE *b = 0;
---
>    *b  0;
1074c1074
<   BZFILE *b = 0;
---
>    b  0;
1074c1074
<   BZFILE *b = 0;
---
>    *  0;
1074c1074
<   BZFILE *b = 0;
---
>      0;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE b  0;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE   0;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE b = ;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE  = ;
1074c1074
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(93.3 %, 13685 bytes)
1074c1074
<   BZFILE b = 0;
---
>   BZFILE  = 0;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE   0;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE  = ;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE   ;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE  = 0
1074c1074
<   BZFILE b = 0;
---
>   BZFILE   0
1074c1074
<   BZFILE b = 0;
---
>   BZFILE  = 
1074c1074
<   BZFILE b = 0;
---
>   BZFILE   
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  0;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  ;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  0
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  0;
1076c1076
<   bzFile *bzf = b;
---
>    *bzf = b;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  ;
1076c1076
<   bzFile *bzf = b;
---
>    *bzf = b;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  0
1076c1076
<   bzFile *bzf = b;
---
>    *bzf = b;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>    *bzf = b;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b = ;
1074c1074
<   BZFILE b = 0;
---
>   BZFILE b = 
(93.3 %, 13683 bytes)
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>    *bzf = b;
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>    bzf = b;
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>   bzFile * = b;
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>    * = b;
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>   bzFile  = b;
1074c1074
<   BZFILE b  ;
---
>   BZFILE b  
1076c1076
<   bzFile *bzf = b;
---
>     = b;
1076c1076
<   bzFile *bzf = b;
---
>    *bzf = b;
1076c1076
<   bzFile *bzf = b;
---
>    bzf = b;
1076c1076
<   bzFile *bzf = b;
---
>    * = b;
1076c1076
<   bzFile *bzf = b;
---
>     = b;
1076c1076
<   bzFile *bzf = b;
---
>    *bzf  b;
1076c1076
<   bzFile *bzf = b;
---
>    bzf  b;
1076c1076
<   bzFile *bzf = b;
---
>    *  b;
1076c1076
<   bzFile *bzf = b;
---
>      b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile bzf = b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile  = b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile bzf  b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile   b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile bzf = ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile  = ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile bzf  ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile   ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile * = b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *  b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile * = ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *  ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile * = b
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *  b
1076c1076
<   bzFile *bzf = b;
---
>   bzFile * = 
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *  
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *bzf  b;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *bzf  ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *bzf  b
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *bzf  
1076,1077c1076,1077
<   bzFile *bzf = b;
<   char *bzf_4_0;
---
>   bzFile *bzf  b;
>    *bzf_4_0;
1076,1077c1076,1077
<   bzFile *bzf = b;
<   char *bzf_4_0;
---
>   bzFile *bzf  ;
>    *bzf_4_0;
1076,1077c1076,1077
<   bzFile *bzf = b;
<   char *bzf_4_0;
---
>   bzFile *bzf  b
>    *bzf_4_0;
1076,1077c1076,1077
<   bzFile *bzf = b;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    *bzf_4_0;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *bzf = ;
1076c1076
<   bzFile *bzf = b;
---
>   bzFile *bzf = 
(93.3 %, 13681 bytes)
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    *bzf_4_0;
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>   char bzf_4_0;
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    bzf_4_0;
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>   char *;
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    *;
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>   char ;
1076,1077c1076,1077
<   bzFile *bzf  ;
<   char *bzf_4_0;
---
>   bzFile *bzf  
>    ;
1077c1077
<   char *bzf_4_0;
---
>    *bzf_4_0;
1077c1077
<   char *bzf_4_0;
---
>    bzf_4_0;
1077c1077
<   char *bzf_4_0;
---
>    *;
1077c1077
<   char *bzf_4_0;
---
>    ;
1077c1077
<   char *bzf_4_0;
---
>    *bzf_4_0
1077c1077
<   char *bzf_4_0;
---
>    bzf_4_0
1077c1077
<   char *bzf_4_0;
---
>    *
1077c1077
<   char *bzf_4_0;
---
>    
1077c1077
<   char *bzf_4_0;
---
>   char bzf_4_0;
1077c1077
<   char *bzf_4_0;
---
>   char ;
1077c1077
<   char *bzf_4_0;
---
>   char bzf_4_0
1077c1077
<   char *bzf_4_0;
---
>   char 
1077,1078c1077,1078
<   char *bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0;
>    int bzf_4_1;
(93.3 %, 13680 bytes)
1077c1077
<   char bzf_4_0;
---
>   char ;
1077c1077
<   char bzf_4_0;
---
>   char 
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>    int bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>    int bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>   unsigned  bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>   unsigned  bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char ;
>     bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char 
>     bzf_4_1;
1077c1077
<   char bzf_4_0;
---
>   char bzf_4_0
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>    int bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned  bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>     bzf_4_1;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned int ;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>    int ;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>   unsigned  ;
1077,1078c1077,1078
<   char bzf_4_0;
<   unsigned int bzf_4_1;
---
>   char bzf_4_0
>     ;
1078c1078
<   unsigned int bzf_4_1;
---
>    int bzf_4_1;
1078c1078
<   unsigned int bzf_4_1;
---
>     bzf_4_1;
1078c1078
<   unsigned int bzf_4_1;
---
>    int ;
1078c1078
<   unsigned int bzf_4_1;
---
>     ;
1078c1078
<   unsigned int bzf_4_1;
---
>    int bzf_4_1
1078c1078
<   unsigned int bzf_4_1;
---
>     bzf_4_1
1078c1078
<   unsigned int bzf_4_1;
---
>    int 
1078c1078
<   unsigned int bzf_4_1;
---
>     
1078c1078
<   unsigned int bzf_4_1;
---
>   unsigned  bzf_4_1;
(93.3 %, 13672 bytes)
1078c1078
<    int bzf_4_1;
---
>     bzf_4_1;
1078c1078
<    int bzf_4_1;
---
>     ;
1078c1078
<    int bzf_4_1;
---
>     bzf_4_1
1078c1078
<    int bzf_4_1;
---
>     
1078c1078
<    int bzf_4_1;
---
>     bzf_4_1;
1080c1080
<   if (bzf == NULL)
---
>    (bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>     ;
1080c1080
<   if (bzf == NULL)
---
>    (bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>     bzf_4_1
1080c1080
<   if (bzf == NULL)
---
>    (bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>     
1080c1080
<   if (bzf == NULL)
---
>    (bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>    int ;
1078c1078
<    int bzf_4_1;
---
>    int 
1078c1078
<    int bzf_4_1;
---
>    int ;
1080c1080
<   if (bzf == NULL)
---
>    (bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>    int 
1080c1080
<   if (bzf == NULL)
---
>    (bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>    int ;
1080c1080
<   if (bzf == NULL)
---
>   if bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>    int 
1080c1080
<   if (bzf == NULL)
---
>   if bzf == NULL)
1078c1078
<    int bzf_4_1;
---
>    int ;
1080c1080
<   if (bzf == NULL)
---
>    bzf == NULL)
(93.3 %, 13666 bytes)
1078c1078
<     bzf_4_1
---
>     
1080c1080
<    (bzf == NULL)
---
>    (  NULL)
1078c1078
<     bzf_4_1
---
>     
1080c1080
<    (bzf == NULL)
---
>      NULL)
1080c1080
<    (bzf == NULL)
---
>    bzf == NULL)
1080c1080
<    (bzf == NULL)
---
>     == NULL)
1080c1080
<    (bzf == NULL)
---
>    bzf  NULL)
1080c1080
<    (bzf == NULL)
---
>      NULL)
1080c1080
<    (bzf == NULL)
---
>    bzf == )
1080c1080
<    (bzf == NULL)
---
>     == )
1080c1080
<    (bzf == NULL)
---
>    bzf  )
1080c1080
<    (bzf == NULL)
---
>      )
1080c1080
<    (bzf == NULL)
---
>    ( == NULL)
1080c1080
<    (bzf == NULL)
---
>    (  NULL)
1080c1080
<    (bzf == NULL)
---
>    ( == )
1080c1080
<    (bzf == NULL)
---
>    (  )
(93.3 %, 13661 bytes)
1080c1080
<    (  NULL)
---
>    (  
1080,1081c1080,1081
<    (  NULL)
<     ;
---
>    (  )
>     
1080,1081c1080,1081
<    (  NULL)
<     ;
---
>    (  
>     
1080c1080
<    (  NULL)
---
>    (  )
1082c1082
<   ;
---
>   
(93.3 %, 13656 bytes)
1080c1080
<    (  )
---
>    (  
1084c1084
<   ;
---
>   
1080c1080
<    (  )
---
>    (  
1082c1082
<   ;
---
>   
1084c1084
<   ;
---
>   
1080c1080
<    (  )
---
>    (  
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    (unused == NULL || nUnused == NULL)
1080c1080
<    (  )
---
>    (  
1082c1082
<   ;
---
>   
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    (unused == NULL || nUnused == NULL)
1080c1080
<    (  )
---
>    (  
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>    (unused == NULL || nUnused == NULL)
1080c1080
<    (  )
---
>    (  
1082c1082
<   ;
---
>   
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>    (unused == NULL || nUnused == NULL)
1082c1082
<   ;
---
>   
1082c1082
<   ;
---
>   
1084c1084
<   ;
---
>   
1082c1082
<   ;
---
>   
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    (unused == NULL || nUnused == NULL)
(93.3 %, 13655 bytes)
1084c1084
<   ;
---
>   
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>    (unused == NULL || nUnused == NULL)
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>   if unused == NULL || nUnused == NULL)
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>    unused == NULL || nUnused == NULL)
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>   if ( == NULL || nUnused == NULL)
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>    ( == NULL || nUnused == NULL)
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>   if  == NULL || nUnused == NULL)
1084,1085c1084,1085
<   ;
<   if (unused == NULL || nUnused == NULL)
---
>   
>     == NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    (unused == NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    unused == NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    ( == NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>     == NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    (unused  NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    unused  NULL || nUnused == NULL)
1085c1085
<   if (unused == NULL || nUnused == NULL)
---
>    (  NULL || nUnused == NULL)
(93.3 %, 13653 bytes)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    unused == NULL || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>     == NULL || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    unused  NULL || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>      NULL || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    unused ==  || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>     ==  || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    unused   || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>       || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    ( == NULL || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    (  NULL || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    ( ==  || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    (   || nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    ( == NULL  nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    (  NULL  nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    ( ==   nUnused == NULL)
1085c1085
<    (unused == NULL || nUnused == NULL)
---
>    (    nUnused == NULL)
(93.3 %, 13645 bytes)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (    nUnused == NULL)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (   ||  == NULL)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (     == NULL)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (   || nUnused  NULL)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (    nUnused  NULL)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (   ||   NULL)
1085c1085
<    (  NULL || nUnused == NULL)
---
>    (      NULL)
(93.3 %, 13639 bytes)
1085c1085
<    (    nUnused == NULL)
---
>    (      NULL)
1085c1085
<    (    nUnused == NULL)
---
>    (     == )
1085c1085
<    (    nUnused == NULL)
---
>    (      )
1085c1085
<    (    nUnused == NULL)
---
>    (     == NULL
1085c1085
<    (    nUnused == NULL)
---
>    (      NULL
1085c1085
<    (    nUnused == NULL)
---
>    (     == 
1085c1085
<    (    nUnused == NULL)
---
>    (      
1085c1085
<    (    nUnused == NULL)
---
>    (    nUnused  NULL)
1085c1085
<    (    nUnused == NULL)
---
>    (    nUnused  )
(93.3 %, 13630 bytes)
1085c1085
<    (      NULL)
---
>    (      
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      )
>     
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      
>     
1085c1085
<    (      NULL)
---
>    (      )
1088c1088
<   0;
---
>   ;
1085c1085
<    (      NULL)
---
>    (      
1088c1088
<   0;
---
>   ;
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      )
>     
1088c1088
<   0;
---
>   ;
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      
>     
1088c1088
<   0;
---
>   ;
1085c1085
<    (      NULL)
---
>    (      NULL
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      NULL
>     
1085c1085
<    (      NULL)
---
>    (      NULL
1088c1088
<   0;
---
>   ;
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      NULL
>     
1088c1088
<   0;
---
>   ;
1085c1085
<    (      NULL)
---
>    (      NULL
1088c1088
<   0;
---
>   0
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      NULL
>     
1088c1088
<   0;
---
>   0
1085c1085
<    (      NULL)
---
>    (      NULL
1088c1088
<   0;
---
>   
1085,1086c1085,1086
<    (      NULL)
<     ;
---
>    (      NULL
>     
1088c1088
<   0;
---
>   
1086c1086
<     ;
---
>     
1086c1086
<     ;
---
>     
1088c1088
<   0;
---
>   ;
1086c1086
<     ;
---
>     
1088c1088
<   0;
---
>   0
1086c1086
<     ;
---
>     
1088c1088
<   0;
---
>   
1086c1086
<     ;
---
>     
1089c1089
<   *nUnused = bzf_4_1;
---
>   nUnused = bzf_4_1;
1086c1086
<     ;
---
>     
1088,1089c1088,1089
<   0;
<   *nUnused = bzf_4_1;
---
>   ;
>   nUnused = bzf_4_1;
(93.4 %, 13628 bytes)
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>   nUnused = bzf_4_1;
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>   * = bzf_4_1;
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>    = bzf_4_1;
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>   *nUnused  bzf_4_1;
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>   nUnused  bzf_4_1;
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>   *  bzf_4_1;
1088,1089c1088,1089
<   ;
<   *nUnused = bzf_4_1;
---
>   
>     bzf_4_1;
1089c1089
<   *nUnused = bzf_4_1;
---
>   nUnused = bzf_4_1;
1089c1089
<   *nUnused = bzf_4_1;
---
>    = bzf_4_1;
1089c1089
<   *nUnused = bzf_4_1;
---
>   nUnused  bzf_4_1;
1089c1089
<   *nUnused = bzf_4_1;
---
>     bzf_4_1;
(93.4 %, 13627 bytes)
1089c1089
<   nUnused = bzf_4_1;
---
>    = bzf_4_1;
1089c1089
<   nUnused = bzf_4_1;
---
>     bzf_4_1;
1089c1089
<   nUnused = bzf_4_1;
---
>    = ;
1089c1089
<   nUnused = bzf_4_1;
---
>     ;
(93.4 %, 13619 bytes)
1089c1089
<     bzf_4_1;
---
>     
1089,1090c1089,1090
<     bzf_4_1;
<   *unused = bzf_4_0;
---
>     ;
>   unused = bzf_4_0;
1089,1090c1089,1090
<     bzf_4_1;
<   *unused = bzf_4_0;
---
>     
>   unused = bzf_4_0;
(93.4 %, 13611 bytes)
1090c1090
<   *unused = bzf_4_0;
---
>    = bzf_4_0;
1090c1090
<   *unused = bzf_4_0;
---
>   unused  bzf_4_0;
1090c1090
<   *unused = bzf_4_0;
---
>     bzf_4_0;
1090c1090
<   *unused = bzf_4_0;
---
>   unused = ;
1090c1090
<   *unused = bzf_4_0;
---
>    = ;
1090c1090
<   *unused = bzf_4_0;
---
>   unused  ;
(93.4 %, 13603 bytes)
1090,1091c1090,1091
<     bzf_4_0;
< }
---
>     
> 
1090c1090
<     bzf_4_0;
---
>     ;
1093c1093
< int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress(
1090c1090
<     bzf_4_0;
---
>     
1093c1093
< int BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress(
(93.4 %, 13593 bytes)
1090c1090
<     ;
---
>     
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1090,1091c1090
<     ;
< }
---
>     
1093c1092,1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress
1090c1090
<     ;
---
>     
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  
1090,1091c1090
<     ;
< }
---
>     
1093c1092,1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
> 
>  
1091c1091
< }
---
> 
1091d1090
< }
1093c1092,1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
> 
>  (
1091d1090
< }
1093c1092,1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
> 
>  BZ_APIBZ2_bzBuffToBuffCompress
1091d1090
< }
1093c1092,1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
> 
>  
1091c1091
< }
---
> 
1095c1095
<     void) {
---
>     ) {
1091d1090
< }
1093d1091
<  BZ_APIBZ2_bzBuffToBuffCompress(
1095c1093,1095
<     void) {
---
>  (
> 
>     ) {
1091d1090
< }
1093d1091
<  BZ_APIBZ2_bzBuffToBuffCompress(
1095c1093,1095
<     void) {
---
>  BZ_APIBZ2_bzBuffToBuffCompress
> 
>     ) {
1091d1090
< }
1093d1091
<  BZ_APIBZ2_bzBuffToBuffCompress(
1095c1093,1095
<     void) {
---
>  
> 
>     ) {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  (
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  (
1095c1095
<     void) {
---
>     ) {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  
1095c1095
<     void) {
---
>     ) {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  (
1095c1095
<     void) {
---
>     void {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  
1095c1095
<     void) {
---
>     void {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  (
1095c1095
<     void) {
---
>      {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  
1095c1095
<     void) {
---
>      {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>     ) {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>     void {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>      {
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>     void) 
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>     ) 
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>     void 
1093c1093
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  BZ_APIBZ2_bzBuffToBuffCompress
1095c1095
<     void) {
---
>      
1095c1095
<     void) {
---
>     ) {
1095c1095
<     void) {
---
>      {
1095c1095
<     void) {
---
>     ) 
1095c1095
<     void) {
---
>      
1095,1096c1095,1096
<     void) {
<   int workFactor = 0;
---
>     ) {
>    workFactor = 0;
1095,1096c1095,1096
<     void) {
<   int workFactor = 0;
---
>      {
>    workFactor = 0;
1095,1096c1095,1096
<     void) {
<   int workFactor = 0;
---
>     ) 
>    workFactor = 0;
1095,1096c1095,1096
<     void) {
<   int workFactor = 0;
---
>      
>    workFactor = 0;
(93.4 %, 13589 bytes)
1095c1095
<     ) {
---
>      {
1095c1095
<     ) {
---
>      
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>      {
>    workFactor = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>      
>    workFactor = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>      {
>   int  = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>      
>   int  = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>      {
>     = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>      
>     = 0;
1095c1095
<     ) {
---
>     ) 
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>    workFactor = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>   int  = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>     = 0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>   int workFactor  0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>    workFactor  0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>   int   0;
1095,1096c1095,1096
<     ) {
<   int workFactor = 0;
---
>     ) 
>      0;
1096c1096
<   int workFactor = 0;
---
>    workFactor = 0;
1096c1096
<   int workFactor = 0;
---
>     = 0;
1096c1096
<   int workFactor = 0;
---
>    workFactor  0;
1096c1096
<   int workFactor = 0;
---
>      0;
1096c1096
<   int workFactor = 0;
---
>    workFactor = ;
1096c1096
<   int workFactor = 0;
---
>     = ;
1096c1096
<   int workFactor = 0;
---
>    workFactor  ;
1096c1096
<   int workFactor = 0;
---
>      ;
1096c1096
<   int workFactor = 0;
---
>   int  = 0;
1096c1096
<   int workFactor = 0;
---
>   int   0;
1096c1096
<   int workFactor = 0;
---
>   int  = ;
1096c1096
<   int workFactor = 0;
---
>   int   ;
1096c1096
<   int workFactor = 0;
---
>   int  = 0
1096c1096
<   int workFactor = 0;
---
>   int   0
1096c1096
<   int workFactor = 0;
---
>   int  = 
1096c1096
<   int workFactor = 0;
---
>   int   
1096c1096
<   int workFactor = 0;
---
>   int workFactor  0;
1096c1096
<   int workFactor = 0;
---
>   int workFactor  ;
1096c1096
<   int workFactor = 0;
---
>   int workFactor  0
1096c1096
<   int workFactor = 0;
---
>   int workFactor  
1096,1097c1096,1097
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  0;
>    verbosity = 0;
1096,1097c1096,1097
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  ;
>    verbosity = 0;
1096,1097c1096,1097
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  0
>    verbosity = 0;
1096,1097c1096,1097
<   int workFactor = 0;
<   int verbosity = 0;
---
>   int workFactor  
>    verbosity = 0;
1096c1096
<   int workFactor = 0;
---
>   int workFactor = ;
1096c1096
<   int workFactor = 0;
---
>   int workFactor = 
(93.4 %, 13587 bytes)
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>    verbosity = 0;
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>   int  = 0;
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>     = 0;
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>   int verbosity  0;
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>    verbosity  0;
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>   int   0;
1096,1097c1096,1097
<   int workFactor  ;
<   int verbosity = 0;
---
>   int workFactor  
>      0;
1097c1097
<   int verbosity = 0;
---
>    verbosity = 0;
1097c1097
<   int verbosity = 0;
---
>     = 0;
1097c1097
<   int verbosity = 0;
---
>    verbosity  0;
1097c1097
<   int verbosity = 0;
---
>      0;
1097c1097
<   int verbosity = 0;
---
>    verbosity = ;
1097c1097
<   int verbosity = 0;
---
>     = ;
1097c1097
<   int verbosity = 0;
---
>    verbosity  ;
1097c1097
<   int verbosity = 0;
---
>      ;
1097c1097
<   int verbosity = 0;
---
>   int  = 0;
1097c1097
<   int verbosity = 0;
---
>   int   0;
1097c1097
<   int verbosity = 0;
---
>   int  = ;
1097c1097
<   int verbosity = 0;
---
>   int   ;
1097c1097
<   int verbosity = 0;
---
>   int  = 0
1097c1097
<   int verbosity = 0;
---
>   int   0
1097c1097
<   int verbosity = 0;
---
>   int  = 
1097c1097
<   int verbosity = 0;
---
>   int   
1097c1097
<   int verbosity = 0;
---
>   int verbosity  0;
1097c1097
<   int verbosity = 0;
---
>   int verbosity  ;
1097c1097
<   int verbosity = 0;
---
>   int verbosity  0
1097c1097
<   int verbosity = 0;
---
>   int verbosity  
1097,1098c1097,1098
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  0;
>    blockSize100k = 0;
1097,1098c1097,1098
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  ;
>    blockSize100k = 0;
1097,1098c1097,1098
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  0
>    blockSize100k = 0;
1097,1098c1097,1098
<   int verbosity = 0;
<   int blockSize100k = 0;
---
>   int verbosity  
>    blockSize100k = 0;
1097c1097
<   int verbosity = 0;
---
>   int verbosity = ;
1097c1097
<   int verbosity = 0;
---
>   int verbosity = 
(93.4 %, 13585 bytes)
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>    blockSize100k = 0;
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>   int  = 0;
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>     = 0;
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>   int blockSize100k  0;
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>    blockSize100k  0;
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>   int   0;
1097,1098c1097,1098
<   int verbosity  ;
<   int blockSize100k = 0;
---
>   int verbosity  
>      0;
1098c1098
<   int blockSize100k = 0;
---
>    blockSize100k = 0;
1098c1098
<   int blockSize100k = 0;
---
>     = 0;
1098c1098
<   int blockSize100k = 0;
---
>    blockSize100k  0;
1098c1098
<   int blockSize100k = 0;
---
>      0;
1098c1098
<   int blockSize100k = 0;
---
>    blockSize100k = ;
1098c1098
<   int blockSize100k = 0;
---
>     = ;
1098c1098
<   int blockSize100k = 0;
---
>    blockSize100k  ;
1098c1098
<   int blockSize100k = 0;
---
>      ;
1098c1098
<   int blockSize100k = 0;
---
>   int  = 0;
1098c1098
<   int blockSize100k = 0;
---
>   int   0;
1098c1098
<   int blockSize100k = 0;
---
>   int  = ;
1098c1098
<   int blockSize100k = 0;
---
>   int   ;
1098c1098
<   int blockSize100k = 0;
---
>   int  = 0
1098c1098
<   int blockSize100k = 0;
---
>   int   0
1098c1098
<   int blockSize100k = 0;
---
>   int  = 
1098c1098
<   int blockSize100k = 0;
---
>   int   
1098c1098
<   int blockSize100k = 0;
---
>   int blockSize100k  0;
1098c1098
<   int blockSize100k = 0;
---
>   int blockSize100k  ;
1098c1098
<   int blockSize100k = 0;
---
>   int blockSize100k  0
1098c1098
<   int blockSize100k = 0;
---
>   int blockSize100k  
1098,1099c1098,1099
<   int blockSize100k = 0;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  0;
>    int sourceLen = 0;
1098,1099c1098,1099
<   int blockSize100k = 0;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  ;
>    int sourceLen = 0;
(93.4 %, 13583 bytes)
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>    int sourceLen = 0;
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>   unsigned  sourceLen = 0;
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>     sourceLen = 0;
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>   unsigned int  = 0;
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>    int  = 0;
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>   unsigned   = 0;
1098,1099c1098,1099
<   int blockSize100k  ;
<   unsigned int sourceLen = 0;
---
>   int blockSize100k  
>      = 0;
1099c1099
<   unsigned int sourceLen = 0;
---
>    int sourceLen = 0;
1099c1099
<   unsigned int sourceLen = 0;
---
>     sourceLen = 0;
1099c1099
<   unsigned int sourceLen = 0;
---
>    int  = 0;
1099c1099
<   unsigned int sourceLen = 0;
---
>      = 0;
1099c1099
<   unsigned int sourceLen = 0;
---
>    int sourceLen  0;
1099c1099
<   unsigned int sourceLen = 0;
---
>     sourceLen  0;
1099c1099
<   unsigned int sourceLen = 0;
---
>    int   0;
1099c1099
<   unsigned int sourceLen = 0;
---
>       0;
1099c1099
<   unsigned int sourceLen = 0;
---
>   unsigned  sourceLen = 0;
(93.4 %, 13575 bytes)
1099c1099
<    int sourceLen = 0;
---
>     sourceLen = 0;
1099c1099
<    int sourceLen = 0;
---
>      = 0;
1099c1099
<    int sourceLen = 0;
---
>     sourceLen  0;
1099c1099
<    int sourceLen = 0;
---
>       0;
1099c1099
<    int sourceLen = 0;
---
>     sourceLen = ;
1099c1099
<    int sourceLen = 0;
---
>      = ;
1099c1099
<    int sourceLen = 0;
---
>     sourceLen  ;
1099c1099
<    int sourceLen = 0;
---
>       ;
1099c1099
<    int sourceLen = 0;
---
>    int  = 0;
1099c1099
<    int sourceLen = 0;
---
>    int   0;
1099c1099
<    int sourceLen = 0;
---
>    int  = ;
1099c1099
<    int sourceLen = 0;
---
>    int   ;
1099c1099
<    int sourceLen = 0;
---
>    int  = 0
1099c1099
<    int sourceLen = 0;
---
>    int   0
1099c1099
<    int sourceLen = 0;
---
>    int  = 
1099c1099
<    int sourceLen = 0;
---
>    int   
1099c1099
<    int sourceLen = 0;
---
>    int sourceLen  0;
1099c1099
<    int sourceLen = 0;
---
>    int sourceLen  ;
1099c1099
<    int sourceLen = 0;
---
>    int sourceLen  0
1099c1099
<    int sourceLen = 0;
---
>    int sourceLen  
1099,1100c1099,1100
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  0;
>    *source = 0;
1099,1100c1099,1100
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  ;
>    *source = 0;
1099,1100c1099,1100
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  0
>    *source = 0;
1099,1100c1099,1100
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  
>    *source = 0;
1099c1099
<    int sourceLen = 0;
---
>    int sourceLen = ;
1099c1099
<    int sourceLen = 0;
---
>    int sourceLen = 
(93.4 %, 13573 bytes)
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>    *source = 0;
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>   char source = 0;
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>    source = 0;
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>   char * = 0;
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>    * = 0;
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>   char  = 0;
1099,1100c1099,1100
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>     = 0;
1100c1100
<   char *source = 0;
---
>    *source = 0;
1100c1100
<   char *source = 0;
---
>    source = 0;
1100c1100
<   char *source = 0;
---
>    * = 0;
1100c1100
<   char *source = 0;
---
>     = 0;
1100c1100
<   char *source = 0;
---
>    *source  0;
1100c1100
<   char *source = 0;
---
>    source  0;
1100c1100
<   char *source = 0;
---
>    *  0;
1100c1100
<   char *source = 0;
---
>      0;
1100c1100
<   char *source = 0;
---
>   char source = 0;
1100c1100
<   char *source = 0;
---
>   char  = 0;
1100c1100
<   char *source = 0;
---
>   char source  0;
1100c1100
<   char *source = 0;
---
>   char   0;
1100c1100
<   char *source = 0;
---
>   char source = ;
1100c1100
<   char *source = 0;
---
>   char  = ;
1100c1100
<   char *source = 0;
---
>   char source  ;
(93.4 %, 13572 bytes)
1100c1100
<   char source = 0;
---
>   char  = 0;
1100c1100
<   char source = 0;
---
>   char   0;
1100c1100
<   char source = 0;
---
>   char  = ;
1100c1100
<   char source = 0;
---
>   char   ;
1100c1100
<   char source = 0;
---
>   char  = 0
1100c1100
<   char source = 0;
---
>   char   0
1100c1100
<   char source = 0;
---
>   char  = 
1100c1100
<   char source = 0;
---
>   char   
1100c1100
<   char source = 0;
---
>   char source  0;
1100c1100
<   char source = 0;
---
>   char source  ;
1100c1100
<   char source = 0;
---
>   char source  0
1100c1100
<   char source = 0;
---
>   char source  
1100,1101c1100,1101
<   char source = 0;
<   unsigned int *destLen = 0;
---
>   char source  0;
>    int *destLen = 0;
1100,1101c1100,1101
<   char source = 0;
<   unsigned int *destLen = 0;
---
>   char source  ;
>    int *destLen = 0;
(93.4 %, 13570 bytes)
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>    int *destLen = 0;
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>   unsigned  *destLen = 0;
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>     *destLen = 0;
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>   unsigned int destLen = 0;
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>    int destLen = 0;
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>   unsigned  destLen = 0;
1100,1101c1100,1101
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>     destLen = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>    int *destLen = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>     *destLen = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>    int destLen = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>     destLen = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>    int * = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>     * = 0;
1101c1101
<   unsigned int *destLen = 0;
---
>    int  = 0;
(93.4 %, 13562 bytes)
1101c1101
<    int *destLen = 0;
---
>     *destLen = 0;
1101c1101
<    int *destLen = 0;
---
>     destLen = 0;
1101c1101
<    int *destLen = 0;
---
>     * = 0;
1101c1101
<    int *destLen = 0;
---
>      = 0;
1101c1101
<    int *destLen = 0;
---
>     *destLen  0;
1101c1101
<    int *destLen = 0;
---
>     destLen  0;
1101c1101
<    int *destLen = 0;
---
>     *  0;
1101c1101
<    int *destLen = 0;
---
>       0;
1101c1101
<    int *destLen = 0;
---
>    int destLen = 0;
1101c1101
<    int *destLen = 0;
---
>    int  = 0;
1101c1101
<    int *destLen = 0;
---
>    int destLen  0;
1101c1101
<    int *destLen = 0;
---
>    int   0;
1101c1101
<    int *destLen = 0;
---
>    int destLen = ;
1101c1101
<    int *destLen = 0;
---
>    int  = ;
1101c1101
<    int *destLen = 0;
---
>    int destLen  ;
1101c1101
<    int *destLen = 0;
---
>    int   ;
1101c1101
<    int *destLen = 0;
---
>    int * = 0;
1101c1101
<    int *destLen = 0;
---
>    int *  0;
1101c1101
<    int *destLen = 0;
---
>    int * = ;
1101c1101
<    int *destLen = 0;
---
>    int *  ;
1101c1101
<    int *destLen = 0;
---
>    int * = 0
1101c1101
<    int *destLen = 0;
---
>    int *  0
1101c1101
<    int *destLen = 0;
---
>    int * = 
1101c1101
<    int *destLen = 0;
---
>    int *  
1101c1101
<    int *destLen = 0;
---
>    int *destLen  0;
1101c1101
<    int *destLen = 0;
---
>    int *destLen  ;
1101c1101
<    int *destLen = 0;
---
>    int *destLen  0
1101c1101
<    int *destLen = 0;
---
>    int *destLen  
1101,1102c1101,1102
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  0;
>    *dest = 0;
1101,1102c1101,1102
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  ;
>    *dest = 0;
1101,1102c1101,1102
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  0
>    *dest = 0;
(93.4 %, 13560 bytes)
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>    *dest = 0;
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>   char dest = 0;
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>    dest = 0;
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>   char * = 0;
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>    * = 0;
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>   char  = 0;
1101,1102c1101,1102
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>     = 0;
1102c1102
<   char *dest = 0;
---
>    *dest = 0;
1102c1102
<   char *dest = 0;
---
>    dest = 0;
1102c1102
<   char *dest = 0;
---
>    * = 0;
1102c1102
<   char *dest = 0;
---
>     = 0;
1102c1102
<   char *dest = 0;
---
>    *dest  0;
1102c1102
<   char *dest = 0;
---
>    dest  0;
1102c1102
<   char *dest = 0;
---
>    *  0;
1102c1102
<   char *dest = 0;
---
>      0;
1102c1102
<   char *dest = 0;
---
>   char dest = 0;
1102c1102
<   char *dest = 0;
---
>   char  = 0;
1102c1102
<   char *dest = 0;
---
>   char dest  0;
1102c1102
<   char *dest = 0;
---
>   char   0;
1102c1102
<   char *dest = 0;
---
>   char dest = ;
1102c1102
<   char *dest = 0;
---
>   char  = ;
1102c1102
<   char *dest = 0;
---
>   char dest  ;
(93.4 %, 13559 bytes)
1102c1102
<   char dest = 0;
---
>   char  = 0;
1102c1102
<   char dest = 0;
---
>   char   0;
1102c1102
<   char dest = 0;
---
>   char  = ;
1102c1102
<   char dest = 0;
---
>   char   ;
1102c1102
<   char dest = 0;
---
>   char  = 0
1102c1102
<   char dest = 0;
---
>   char   0
1102c1102
<   char dest = 0;
---
>   char  = 
1102c1102
<   char dest = 0;
---
>   char   
1102c1102
<   char dest = 0;
---
>   char dest  0;
1102c1102
<   char dest = 0;
---
>   char dest  ;
1102c1102
<   char dest = 0;
---
>   char dest  0
1102c1102
<   char dest = 0;
---
>   char dest  
1102,1103c1102,1103
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  0;
>    strm;
1102,1103c1102,1103
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  ;
>    strm;
1102,1103c1102,1103
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  0
>    strm;
1102,1103c1102,1103
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  
>    strm;
1102c1102
<   char dest = 0;
---
>   char dest = ;
1102c1102
<   char dest = 0;
---
>   char dest = 
(93.4 %, 13557 bytes)
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    strm;
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>   bz_stream ;
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    ;
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>   bz_stream strm
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    strm
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>   bz_stream 
1102,1103c1102,1103
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    
1103c1103
<   bz_stream strm;
---
>    strm;
1103c1103
<   bz_stream strm;
---
>    ;
1103c1103
<   bz_stream strm;
---
>    strm
1103c1103
<   bz_stream strm;
---
>    
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>    strm;
>    int strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>    ;
>    int strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>    strm
>    int strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>    
>    int strm_5;
1103c1103
<   bz_stream strm;
---
>   bz_stream ;
1103c1103
<   bz_stream strm;
---
>   bz_stream 
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream ;
>    int strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream 
>    int strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream ;
>   unsigned  strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream 
>   unsigned  strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream ;
>     strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream 
>     strm_5;
1103c1103
<   bz_stream strm;
---
>   bz_stream strm
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>    int strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>   unsigned  strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>     strm_5;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>   unsigned int ;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>    int ;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>   unsigned  ;
1103,1104c1103,1104
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>     ;
1104c1104
<   unsigned int strm_5;
---
>    int strm_5;
1104c1104
<   unsigned int strm_5;
---
>     strm_5;
1104c1104
<   unsigned int strm_5;
---
>    int ;
1104c1104
<   unsigned int strm_5;
---
>     ;
1104c1104
<   unsigned int strm_5;
---
>    int strm_5
1104c1104
<   unsigned int strm_5;
---
>     strm_5
1104c1104
<   unsigned int strm_5;
---
>    int 
1104c1104
<   unsigned int strm_5;
---
>     
(93.4 %, 13549 bytes)
1104c1104
<    int strm_5;
---
>     strm_5;
1104c1104
<    int strm_5;
---
>     ;
1104c1104
<    int strm_5;
---
>     strm_5
1104c1104
<    int strm_5;
---
>     
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>     strm_5;
>    int strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>     ;
>    int strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>     strm_5
>    int strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>     
>    int strm_1;
1104c1104
<    int strm_5;
---
>    int ;
1104c1104
<    int strm_5;
---
>    int 
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int ;
>    int strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int 
>    int strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int ;
>   unsigned  strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int 
>   unsigned  strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int ;
>     strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int 
>     strm_1;
1104c1104
<    int strm_5;
---
>    int strm_5
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>    int strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>   unsigned  strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>     strm_1;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>   unsigned int ;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>    int ;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>   unsigned  ;
1104,1105c1104,1105
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>     ;
1105c1105
<   unsigned int strm_1;
---
>    int strm_1;
1105c1105
<   unsigned int strm_1;
---
>     strm_1;
1105c1105
<   unsigned int strm_1;
---
>    int ;
1105c1105
<   unsigned int strm_1;
---
>     ;
1105c1105
<   unsigned int strm_1;
---
>    int strm_1
1105c1105
<   unsigned int strm_1;
---
>     strm_1
1105c1105
<   unsigned int strm_1;
---
>    int 
1105c1105
<   unsigned int strm_1;
---
>     
1105c1105
<   unsigned int strm_1;
---
>   unsigned  strm_1;
(93.4 %, 13541 bytes)
1105c1105
<    int strm_1;
---
>     strm_1;
1105c1105
<    int strm_1;
---
>     ;
1105c1105
<    int strm_1;
---
>     strm_1
1105c1105
<    int strm_1;
---
>     
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>     strm_1;
>    *strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>     ;
>    *strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>     strm_1
>    *strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>     
>    *strm_4;
1105c1105
<    int strm_1;
---
>    int ;
1105c1105
<    int strm_1;
---
>    int 
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int ;
>    *strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int 
>    *strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int ;
>   char strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int 
>   char strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int ;
>    strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int 
>    strm_4;
1105c1105
<    int strm_1;
---
>    int strm_1
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    *strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>   char strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    strm_4;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>   char *;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    *;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>   char ;
1105,1106c1105,1106
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    ;
1106c1106
<   char *strm_4;
---
>    *strm_4;
1106c1106
<   char *strm_4;
---
>    strm_4;
1106c1106
<   char *strm_4;
---
>    *;
1106c1106
<   char *strm_4;
---
>    ;
1106c1106
<   char *strm_4;
---
>    *strm_4
1106c1106
<   char *strm_4;
---
>    strm_4
1106c1106
<   char *strm_4;
---
>    *
1106c1106
<   char *strm_4;
---
>    
1106c1106
<   char *strm_4;
---
>   char strm_4;
1106c1106
<   char *strm_4;
---
>   char ;
1106c1106
<   char *strm_4;
---
>   char strm_4
1106c1106
<   char *strm_4;
---
>   char 
1106,1107c1106,1107
<   char *strm_4;
<   char *strm_0;
---
>   char strm_4;
>    *strm_0;
1106,1107c1106,1107
<   char *strm_4;
<   char *strm_0;
---
>   char ;
>    *strm_0;
1106,1107c1106,1107
<   char *strm_4;
<   char *strm_0;
---
>   char strm_4
>    *strm_0;
1106,1107c1106,1107
<   char *strm_4;
<   char *strm_0;
---
>   char 
>    *strm_0;
(93.4 %, 13540 bytes)
1106c1106
<   char strm_4;
---
>   char ;
1106c1106
<   char strm_4;
---
>   char 
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char ;
>    *strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char 
>    *strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char ;
>   char strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char 
>   char strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char ;
>    strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char 
>    strm_0;
1106c1106
<   char strm_4;
---
>   char strm_4
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    *strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>   char strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    strm_0;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>   char *;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    *;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>   char ;
1106,1107c1106,1107
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    ;
1107c1107
<   char *strm_0;
---
>    *strm_0;
1107c1107
<   char *strm_0;
---
>    strm_0;
1107c1107
<   char *strm_0;
---
>    *;
1107c1107
<   char *strm_0;
---
>    ;
1107c1107
<   char *strm_0;
---
>    *strm_0
1107c1107
<   char *strm_0;
---
>    strm_0
1107c1107
<   char *strm_0;
---
>    *
1107c1107
<   char *strm_0;
---
>    
1107c1107
<   char *strm_0;
---
>   char strm_0;
1107c1107
<   char *strm_0;
---
>   char ;
1107c1107
<   char *strm_0;
---
>   char strm_0
1107c1107
<   char *strm_0;
---
>   char 
1107,1108c1107,1108
<   char *strm_0;
<   int ret;
---
>   char strm_0;
>    ret;
1107,1108c1107,1108
<   char *strm_0;
<   int ret;
---
>   char ;
>    ret;
1107,1108c1107,1108
<   char *strm_0;
<   int ret;
---
>   char strm_0
>    ret;
1107,1108c1107,1108
<   char *strm_0;
<   int ret;
---
>   char 
>    ret;
1107c1107
<   char *strm_0;
---
>   char *;
(93.4 %, 13539 bytes)
1107c1107
<   char strm_0;
---
>   char ;
1107c1107
<   char strm_0;
---
>   char 
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char ;
>    ret;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char 
>    ret;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char ;
>   int ;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char 
>   int ;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char ;
>    ;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char 
>    ;
1107c1107
<   char strm_0;
---
>   char strm_0
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>    ret;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>   int ;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>    ;
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>   int ret
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>    ret
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>   int 
1107,1108c1107,1108
<   char strm_0;
<   int ret;
---
>   char strm_0
>    
1108c1108
<   int ret;
---
>    ret;
1108c1108
<   int ret;
---
>    ;
1108c1108
<   int ret;
---
>    ret
1108c1108
<   int ret;
---
>    
1108c1108
<   int ret;
---
>    ret;
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>    ;
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>    ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>    
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ;
1108c1108
<   int ret;
---
>   int 
1108c1108
<   int ret;
---
>   int ;
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int 
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ;
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int 
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ;
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int 
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if  == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1108c1108
<   int ret;
---
>   int ret
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>     == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>     == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (dest  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    dest  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>    (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>      NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if  == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if   NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest ==  || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if  ==  || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if dest   || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if    || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( ==  || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   || destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( == NULL  destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (  NULL  destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if ( ==   destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (dest == NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
(93.4 %, 13533 bytes)
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   ||  == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     == NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   || destLen  NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (    destLen  NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (   ||   NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (  NULL || destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (      NULL || source == NULL || blockSize100k < 1 ||
(93.4 %, 13527 bytes)
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (      NULL || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     ==  || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       || source == NULL || blockSize100k < 1 ||
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     == NULL  source == NULL || blockSize100k < 1 ||
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (      NULL  source == NULL || blockSize100k < 1 ||
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (     ==   source == NULL || blockSize100k < 1 ||
1110c1110
<   if (    destLen == NULL || source == NULL || blockSize100k < 1 ||
---
>   if (        source == NULL || blockSize100k < 1 ||
(93.4 %, 13518 bytes)
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (        source == NULL || blockSize100k < 1 ||
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       ||  == NULL || blockSize100k < 1 ||
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (         == NULL || blockSize100k < 1 ||
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       || source  NULL || blockSize100k < 1 ||
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (        source  NULL || blockSize100k < 1 ||
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (       ||   NULL || blockSize100k < 1 ||
1110c1110
<   if (      NULL || source == NULL || blockSize100k < 1 ||
---
>   if (          NULL || blockSize100k < 1 ||
(93.4 %, 13512 bytes)
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (          NULL || blockSize100k < 1 ||
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (         ==  || blockSize100k < 1 ||
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (           || blockSize100k < 1 ||
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (         == NULL  blockSize100k < 1 ||
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (          NULL  blockSize100k < 1 ||
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (         ==   blockSize100k < 1 ||
1110c1110
<   if (        source == NULL || blockSize100k < 1 ||
---
>   if (            blockSize100k < 1 ||
(93.4 %, 13504 bytes)
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (            blockSize100k < 1 ||
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (           ||  < 1 ||
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (             < 1 ||
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (           || blockSize100k  1 ||
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (            blockSize100k  1 ||
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (           ||   1 ||
1110c1110
<   if (          NULL || blockSize100k < 1 ||
---
>   if (              1 ||
(93.4 %, 13498 bytes)
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (              1 ||
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (             <  ||
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (               ||
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (             < 1 
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (              1 
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (             <  
1110c1110
<   if (            blockSize100k < 1 ||
---
>   if (               
(93.4 %, 13484 bytes)
1110c1110
<   if (              1 ||
---
>   if (               
1110,1111c1110,1111
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               ||
>        > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1110,1111c1110,1111
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               
>        > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1110,1111c1110,1111
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               ||
>       blockSize100k  9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1110,1111c1110,1111
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               
>       blockSize100k  9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1110,1111c1110,1111
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               ||
>         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1110,1111c1110,1111
<   if (              1 ||
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>   if (               
>         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
(93.4 %, 13481 bytes)
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>        >  || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>        > 9  verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>         9  verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>        >   verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<       blockSize100k > 9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
(93.4 %, 13467 bytes)
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          ||  < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            < 0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          || verbosity  0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>           verbosity  0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>          ||   0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<         9 || verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>             0 || verbosity > 4 || workFactor < 0 ||
(93.4 %, 13464 bytes)
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>             0 || verbosity > 4 || workFactor < 0 ||
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            <  || verbosity > 4 || workFactor < 0 ||
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>              || verbosity > 4 || workFactor < 0 ||
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            < 0  verbosity > 4 || workFactor < 0 ||
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>             0  verbosity > 4 || workFactor < 0 ||
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>            <   verbosity > 4 || workFactor < 0 ||
1111c1111
<           verbosity < 0 || verbosity > 4 || workFactor < 0 ||
---
>               verbosity > 4 || workFactor < 0 ||
(93.4 %, 13454 bytes)
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>               verbosity > 4 || workFactor < 0 ||
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>              ||  > 4 || workFactor < 0 ||
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>                > 4 || workFactor < 0 ||
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>              || verbosity  4 || workFactor < 0 ||
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>               verbosity  4 || workFactor < 0 ||
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>              ||   4 || workFactor < 0 ||
1111c1111
<             0 || verbosity > 4 || workFactor < 0 ||
---
>                 4 || workFactor < 0 ||
(93.4 %, 13451 bytes)
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                 4 || workFactor < 0 ||
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                >  || workFactor < 0 ||
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                  || workFactor < 0 ||
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                > 4  workFactor < 0 ||
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                 4  workFactor < 0 ||
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                >   workFactor < 0 ||
1111c1111
<               verbosity > 4 || workFactor < 0 ||
---
>                   workFactor < 0 ||
(93.4 %, 13441 bytes)
1111c1111
<                 4 || workFactor < 0 ||
---
>                   workFactor < 0 ||
1111c1111
<                 4 || workFactor < 0 ||
---
>                  ||  < 0 ||
1111c1111
<                 4 || workFactor < 0 ||
---
>                    < 0 ||
1111c1111
<                 4 || workFactor < 0 ||
---
>                  || workFactor  0 ||
1111c1111
<                 4 || workFactor < 0 ||
---
>                   workFactor  0 ||
1111c1111
<                 4 || workFactor < 0 ||
---
>                  ||   0 ||
1111c1111
<                 4 || workFactor < 0 ||
---
>                     0 ||
(93.4 %, 13438 bytes)
1111c1111
<                   workFactor < 0 ||
---
>                     0 ||
1111c1111
<                   workFactor < 0 ||
---
>                    <  ||
1111c1111
<                   workFactor < 0 ||
---
>                      ||
1111c1111
<                   workFactor < 0 ||
---
>                    < 0 
1111c1111
<                   workFactor < 0 ||
---
>                     0 
1111c1111
<                   workFactor < 0 ||
---
>                    <  
1111c1111
<                   workFactor < 0 ||
---
>                      
(93.4 %, 13427 bytes)
1111c1111
<                     0 ||
---
>                      
1111,1112c1111,1112
<                     0 ||
<       workFactor > 0)
---
>                      ||
>        > 0)
1111,1112c1111,1112
<                     0 ||
<       workFactor > 0)
---
>                      
>        > 0)
1111,1112c1111,1112
<                     0 ||
<       workFactor > 0)
---
>                      ||
>       workFactor  0)
1111,1112c1111,1112
<                     0 ||
<       workFactor > 0)
---
>                      
>       workFactor  0)
1111,1112c1111,1112
<                     0 ||
<       workFactor > 0)
---
>                      ||
>         0)
1111,1112c1111,1112
<                     0 ||
<       workFactor > 0)
---
>                      
>         0)
(93.4 %, 13424 bytes)
1112c1112
<       workFactor > 0)
---
>         0)
1112c1112
<       workFactor > 0)
---
>        > )
1112c1112
<       workFactor > 0)
---
>         )
1112c1112
<       workFactor > 0)
---
>        > 0
1112c1112
<       workFactor > 0)
---
>         0
1112c1112
<       workFactor > 0)
---
>        > 
1112c1112
<       workFactor > 0)
---
>         
1112c1112
<       workFactor > 0)
---
>       workFactor  0)
1112c1112
<       workFactor > 0)
---
>       workFactor  )
(93.5 %, 13413 bytes)
1112c1112
<         0)
---
>         
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         )
>      BZ_PARAM_ERROR;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         
>      BZ_PARAM_ERROR;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         )
>     return ;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         
>     return ;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         )
>      ;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         
>      ;
1112c1112
<         0)
---
>         0
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>      BZ_PARAM_ERROR;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>     return ;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>      ;
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>     return BZ_PARAM_ERROR
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>      BZ_PARAM_ERROR
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>     return 
1112,1113c1112,1113
<         0)
<     return BZ_PARAM_ERROR;
---
>         0
>      
1113c1113
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
1113c1113
<     return BZ_PARAM_ERROR;
---
>      ;
(93.5 %, 13407 bytes)
1113c1113
<      BZ_PARAM_ERROR;
---
>      ;
1113c1113
<      BZ_PARAM_ERROR;
---
>      
1113c1113
<      BZ_PARAM_ERROR;
---
>      ;
1115c1115
<   workFactor == 0;
---
>    == 0;
(93.5 %, 13393 bytes)
1113c1113
<      ;
---
>      
1113c1113
<      ;
---
>      
1115c1115
<   workFactor == 0;
---
>    == 0;
1113c1113
<      ;
---
>      
1115c1115
<   workFactor == 0;
---
>   workFactor  0;
1113c1113
<      ;
---
>      
1115c1115
<   workFactor == 0;
---
>     0;
(93.5 %, 13392 bytes)
1115c1115
<   workFactor == 0;
---
>    == 0;
1115c1115
<   workFactor == 0;
---
>     0;
1115c1115
<   workFactor == 0;
---
>    == ;
1115c1115
<   workFactor == 0;
---
>     ;
(93.5 %, 13380 bytes)
1115c1115
<     0;
---
>     
1115c1115
<     0;
---
>     ;
1117c1117
<   workFactor = 0;
---
>    = 0;
1115c1115
<     0;
---
>     
1117c1117
<   workFactor = 0;
---
>    = 0;
1115c1115
<     0;
---
>     ;
1117c1117
<   workFactor = 0;
---
>   workFactor  0;
1115c1115
<     0;
---
>     
1117c1117
<   workFactor = 0;
---
>   workFactor  0;
1115c1115
<     0;
---
>     ;
1117c1117
<   workFactor = 0;
---
>     0;
(93.5 %, 13378 bytes)
1117c1117
<   workFactor = 0;
---
>     0;
1117c1117
<   workFactor = 0;
---
>    = ;
1117c1117
<   workFactor = 0;
---
>     ;
(93.5 %, 13367 bytes)
1117c1117
<     0;
---
>     
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     ;
>   .bzalloc = NULL;
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     
>   .bzalloc = NULL;
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     ;
>   strmbzalloc = NULL;
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     
>   strmbzalloc = NULL;
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     ;
>   bzalloc = NULL;
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     
>   bzalloc = NULL;
1117c1117
<     0;
---
>     0
1117,1118c1117,1118
<     0;
<   strm.bzalloc = NULL;
---
>     0
>   .bzalloc = NULL;
(93.5 %, 13365 bytes)
1118c1118
<   strm.bzalloc = NULL;
---
>   bzalloc = NULL;
1118c1118
<   strm.bzalloc = NULL;
---
>   . = NULL;
1118c1118
<   strm.bzalloc = NULL;
---
>    = NULL;
1118c1118
<   strm.bzalloc = NULL;
---
>   .bzalloc  NULL;
1118c1118
<   strm.bzalloc = NULL;
---
>   bzalloc  NULL;
1118c1118
<   strm.bzalloc = NULL;
---
>   .  NULL;
1118c1118
<   strm.bzalloc = NULL;
---
>     NULL;
(93.5 %, 13359 bytes)
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     ;
>   .bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     NULL
>   .bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     
>   .bzfree = NULL;
1118c1118
<   bzalloc  NULL;
---
>   bzalloc  ;
1118c1118
<   bzalloc  NULL;
---
>   bzalloc  
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   .bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   .bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   strmbzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   strmbzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   bzfree = NULL;
1118c1118
<   bzalloc  NULL;
---
>   bzalloc  NULL
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   .bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strmbzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   bzfree = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm. = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   . = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm = NULL;
1118,1119c1118,1119
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>    = NULL;
1119c1119
<   strm.bzfree = NULL;
---
>   .bzfree = NULL;
1119c1119
<   strm.bzfree = NULL;
---
>   bzfree = NULL;
1119c1119
<   strm.bzfree = NULL;
---
>   . = NULL;
1119c1119
<   strm.bzfree = NULL;
---
>    = NULL;
1119c1119
<   strm.bzfree = NULL;
---
>   .bzfree  NULL;
1119c1119
<   strm.bzfree = NULL;
---
>   bzfree  NULL;
1119c1119
<   strm.bzfree = NULL;
---
>   .  NULL;
1119c1119
<   strm.bzfree = NULL;
---
>     NULL;
(93.5 %, 13353 bytes)
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     ;
>   .opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     NULL
>   .opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     
>   .opaque = NULL;
1119c1119
<   bzfree  NULL;
---
>   bzfree  ;
1119c1119
<   bzfree  NULL;
---
>   bzfree  
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   .opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   .opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   strmopaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   strmopaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   opaque = NULL;
1119c1119
<   bzfree  NULL;
---
>   bzfree  NULL
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   .opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strmopaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   opaque = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm. = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   . = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm = NULL;
1119,1120c1119,1120
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>    = NULL;
1120c1120
<   strm.opaque = NULL;
---
>   .opaque = NULL;
1120c1120
<   strm.opaque = NULL;
---
>   opaque = NULL;
1120c1120
<   strm.opaque = NULL;
---
>   . = NULL;
1120c1120
<   strm.opaque = NULL;
---
>    = NULL;
1120c1120
<   strm.opaque = NULL;
---
>   .opaque  NULL;
1120c1120
<   strm.opaque = NULL;
---
>   opaque  NULL;
1120c1120
<   strm.opaque = NULL;
---
>   .  NULL;
1120c1120
<   strm.opaque = NULL;
---
>     NULL;
(93.5 %, 13347 bytes)
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>     ;
>    = 0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>     NULL
>    = 0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>     
>    = 0;
1120c1120
<   opaque  NULL;
---
>   opaque  ;
1120c1120
<   opaque  NULL;
---
>   opaque  
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>    = 0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>    = 0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>   ret  0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>   ret  0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>     0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>     0;
1120c1120
<   opaque  NULL;
---
>   opaque  NULL
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = 0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     0;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret = ;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = ;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  ;
1120,1121c1120,1121
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     ;
1121c1121
<   ret = 0;
---
>    = 0;
1121c1121
<   ret = 0;
---
>     0;
(93.5 %, 13341 bytes)
1121,1122c1121,1122
<     ;
<   ;
---
>     
>   
1124c1124
<   return ret;
---
>    ;
1122c1122
<   ;
---
>   
1122c1122
<   ;
---
>   
1124c1124
<   return ret;
---
>    ret;
(93.5 %, 13330 bytes)
1124c1124
<    ;
---
>    
1126c1126
<   strm_0 = source;
---
>     ;
1126c1126
<   strm_0 = source;
---
>    = source;
1126c1126
<   strm_0 = source;
---
>     source;
(93.5 %, 13316 bytes)
1125a1126
>     
1127d1127
<   strm_4 = dest;
1127c1127
<   strm_4 = dest;
---
>    = dest;
1127c1127
<   strm_4 = dest;
---
>     dest;
(93.5 %, 13304 bytes)
1126a1127
>     
1128d1128
<   strm_1 = sourceLen;
1128c1128
<   strm_1 = sourceLen;
---
>    = sourceLen;
1128c1128
<   strm_1 = sourceLen;
---
>     sourceLen;
(93.5 %, 13287 bytes)
1128,1129c1128,1129
<     ;
<   strm_5 = *destLen;
---
>     
>     destLen;
1129c1129
<   strm_5 = *destLen;
---
>    = *destLen;
1129c1129
<   strm_5 = *destLen;
---
>     *destLen;
1129c1129
<   strm_5 = *destLen;
---
>    = destLen;
1129c1129
<   strm_5 = *destLen;
---
>     destLen;
(93.5 %, 13280 bytes)
1129c1129
<     *destLen;
---
>     ;
1129c1129
<     *destLen;
---
>     destLen
1129c1129
<     *destLen;
---
>     
(93.5 %, 13272 bytes)
1129c1129
<     ;
---
>     
1131c1131
<   ret = 0;
---
>    = 0;
1129c1129
<     ;
---
>     
1131c1131
<   ret = 0;
---
>   ret  0;
1129c1129
<     ;
---
>     
1131c1131
<   ret = 0;
---
>     0;
1129c1129
<     ;
---
>     
1131c1131
<   ret = 0;
---
>   ret = ;
1129c1129
<     ;
---
>     
1131c1131
<   ret = 0;
---
>    = ;
1129c1129
<     ;
---
>     
1131c1131
<   ret = 0;
---
>   ret  ;
(93.5 %, 13267 bytes)
1131,1132c1131,1132
<     0;
<   ;
---
>     
>   
1131c1131
<     0;
---
>     ;
1134c1134
<   goto output_overflow;
---
>    output_overflow;
1131c1131
<     0;
---
>     
1134c1134
<   goto output_overflow;
---
>    output_overflow;
1131,1132c1131,1132
<     0;
<   ;
---
>     ;
>   
1134c1134
<   goto output_overflow;
---
>    output_overflow;
1131,1132c1131,1132
<     0;
<   ;
---
>     
>   
1134c1134
<   goto output_overflow;
---
>    output_overflow;
1131c1131
<     0;
---
>     0
(93.5 %, 13264 bytes)
1134c1134
<   goto output_overflow;
---
>    
1134,1135c1134,1135
<   goto output_overflow;
<   ;
---
>    output_overflow;
>   
1134,1135c1134,1135
<   goto output_overflow;
<   ;
---
>    ;
>   
(93.5 %, 13244 bytes)
1135c1135
<   ;
---
>   
1137c1137
<   goto errhandler;
---
>    ;
1135c1135
<   ;
---
>   
1137c1137
<   goto errhandler;
---
>   goto errhandler
1135c1135
<   ;
---
>   
1137c1137
<   goto errhandler;
---
>    errhandler
1135c1135
<   ;
---
>   
1137c1137
<   goto errhandler;
---
>   goto 
(93.5 %, 13229 bytes)
1137c1137
<    ;
---
>    
1139c1139
<   *destLen -= strm_5;
---
>    -= strm_5;
1137c1137
<    ;
---
>    
1139c1139
<   *destLen -= strm_5;
---
>   *destLen  strm_5;
1137c1137
<    ;
---
>    
1139c1139
<   *destLen -= strm_5;
---
>   destLen  strm_5;
1137c1137
<    ;
---
>    
1139c1139
<   *destLen -= strm_5;
---
>   *  strm_5;
1137c1137
<    ;
---
>    
1139c1139
<   *destLen -= strm_5;
---
>     strm_5;
1139c1139
<   *destLen -= strm_5;
---
>   destLen -= strm_5;
(93.6 %, 13218 bytes)
1139,1140c1139,1140
<     strm_5;
<   0;
---
>     
>   
1139c1139
<     strm_5;
---
>     strm_5
1139,1140c1139,1140
<     strm_5;
<   0;
---
>     strm_5
>   ;
(93.6 %, 13209 bytes)
1141c1141
<   return BZ_OK;
---
>    
1143c1143
< output_overflow:
---
> :
1141c1141
<   return BZ_OK;
---
>   return ;
1141c1141
<   return BZ_OK;
---
>   return 
1141c1141
<   return BZ_OK;
---
>   return ;
1143c1143
< output_overflow:
---
> :
1141c1141
<   return BZ_OK;
---
>   return 
1143c1143
< output_overflow:
---
> :
1141c1141
<   return BZ_OK;
---
>   return ;
1143c1143
< output_overflow:
---
> output_overflow
1141c1141
<   return BZ_OK;
---
>   return 
1143c1143
< output_overflow:
---
> output_overflow
1141c1141,1142
<   return BZ_OK;
---
>   return ;
> 
1143d1143
< output_overflow:
1141c1141,1142
<   return BZ_OK;
---
>   return 
> 
1143d1143
< output_overflow:
1141c1141
<   return BZ_OK;
---
>   return BZ_OK
(93.6 %, 13187 bytes)
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   
>    ;
1144c1144
<   0;
---
>   0
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>    BZ_OUTBUFF_FULL;
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>   return ;
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>    ;
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>   return BZ_OUTBUFF_FULL
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>    BZ_OUTBUFF_FULL
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>   return 
1144,1145c1144,1145
<   0;
<   return BZ_OUTBUFF_FULL;
---
>   0
>    
(93.6 %, 13165 bytes)
1145c1145,1146
<    ;
---
>    
> 
1147d1147
< errhandler:
1145c1145
<    ;
---
>    
1148c1148
<   0;
---
>   ;
1145c1145
<    ;
---
>    
1147,1148c1147,1148
< errhandler:
<   0;
---
> :
>   ;
1145c1145
<    ;
---
>    
1147,1148c1147,1148
< errhandler:
<   0;
---
> errhandler
>   ;
1145c1145
<    ;
---
>    
1147,1148c1147,1148
< errhandler:
<   0;
---
> 
>   ;
1147c1147
< errhandler:
---
> :
1147c1147
< errhandler:
---
> 
(93.6 %, 13152 bytes)
1148,1149c1148,1149
<   ;
<   return ret;
---
>   
>    
1149c1149
<   return ret;
---
>    ret;
1149c1149
<   return ret;
---
>    ;
1149c1149
<   return ret;
---
>    ret
(93.6 %, 13146 bytes)
1149c1149
<    ret;
---
>    ;
1149c1149
<    ret;
---
>    
(93.6 %, 13143 bytes)
1149c1149
<    ;
---
>    
1149,1150c1149,1150
<    ;
< }
---
>    
> 
1149c1149
<    ;
---
>    
1152c1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(
(93.6 %, 13142 bytes)
1150c1150
< }
---
> 
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress(
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
> int (
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
>  (
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
> int BZ_APIBZ2_bzBuffToBuffDecompress
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
> int 
1150d1149
< }
1152c1151,1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
> 
>  
1152c1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(
1152c1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  (
1152c1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1152c1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  
1152c1152
< int BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress(
1154c1154
<     void) {
---
>     ) {
(93.6 %, 13139 bytes)
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  (
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  (
1154c1154
<     void) {
---
>     ) {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  
1154c1154
<     void) {
---
>     ) {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  (
1154c1154
<     void) {
---
>     void {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  
1154c1154
<     void) {
---
>     void {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  (
1154c1154
<     void) {
---
>      {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  
1154c1154
<     void) {
---
>      {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>     ) {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>     void {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>      {
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>     void) 
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>     ) 
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>     void 
1152c1152
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  BZ_APIBZ2_bzBuffToBuffDecompress
1154c1154
<     void) {
---
>      
1154c1154
<     void) {
---
>     ) {
1154c1154
<     void) {
---
>      {
1154c1154
<     void) {
---
>     ) 
1154c1154
<     void) {
---
>      
1154,1155c1154,1155
<     void) {
<   int verbosity = 0;
---
>     ) {
>    verbosity = 0;
1154,1155c1154,1155
<     void) {
<   int verbosity = 0;
---
>      {
>    verbosity = 0;
1154,1155c1154,1155
<     void) {
<   int verbosity = 0;
---
>     ) 
>    verbosity = 0;
1154,1155c1154,1155
<     void) {
<   int verbosity = 0;
---
>      
>    verbosity = 0;
(93.6 %, 13135 bytes)
1154c1154
<     ) {
---
>      {
1154c1154
<     ) {
---
>      
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>      {
>    verbosity = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>      
>    verbosity = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>      {
>   int  = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>      
>   int  = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>      {
>     = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>      
>     = 0;
1154c1154
<     ) {
---
>     ) 
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>    verbosity = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>   int  = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>     = 0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>   int verbosity  0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>    verbosity  0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>   int   0;
1154,1155c1154,1155
<     ) {
<   int verbosity = 0;
---
>     ) 
>      0;
1155c1155
<   int verbosity = 0;
---
>    verbosity = 0;
1155c1155
<   int verbosity = 0;
---
>     = 0;
1155c1155
<   int verbosity = 0;
---
>    verbosity  0;
1155c1155
<   int verbosity = 0;
---
>      0;
1155c1155
<   int verbosity = 0;
---
>    verbosity = ;
1155c1155
<   int verbosity = 0;
---
>     = ;
1155c1155
<   int verbosity = 0;
---
>    verbosity  ;
1155c1155
<   int verbosity = 0;
---
>      ;
1155c1155
<   int verbosity = 0;
---
>   int  = 0;
1155c1155
<   int verbosity = 0;
---
>   int   0;
1155c1155
<   int verbosity = 0;
---
>   int  = ;
1155c1155
<   int verbosity = 0;
---
>   int   ;
1155c1155
<   int verbosity = 0;
---
>   int  = 0
1155c1155
<   int verbosity = 0;
---
>   int   0
1155c1155
<   int verbosity = 0;
---
>   int  = 
1155c1155
<   int verbosity = 0;
---
>   int   
1155c1155
<   int verbosity = 0;
---
>   int verbosity  0;
1155c1155
<   int verbosity = 0;
---
>   int verbosity  ;
1155c1155
<   int verbosity = 0;
---
>   int verbosity  0
1155c1155
<   int verbosity = 0;
---
>   int verbosity  
1155,1156c1155,1156
<   int verbosity = 0;
<   int small = 0;
---
>   int verbosity  0;
>    small = 0;
1155,1156c1155,1156
<   int verbosity = 0;
<   int small = 0;
---
>   int verbosity  ;
>    small = 0;
1155,1156c1155,1156
<   int verbosity = 0;
<   int small = 0;
---
>   int verbosity  0
>    small = 0;
1155,1156c1155,1156
<   int verbosity = 0;
<   int small = 0;
---
>   int verbosity  
>    small = 0;
1155c1155
<   int verbosity = 0;
---
>   int verbosity = ;
1155c1155
<   int verbosity = 0;
---
>   int verbosity = 
(93.6 %, 13133 bytes)
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>    small = 0;
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>   int  = 0;
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>     = 0;
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>   int small  0;
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>    small  0;
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>   int   0;
1155,1156c1155,1156
<   int verbosity  ;
<   int small = 0;
---
>   int verbosity  
>      0;
1156c1156
<   int small = 0;
---
>    small = 0;
1156c1156
<   int small = 0;
---
>     = 0;
1156c1156
<   int small = 0;
---
>    small  0;
1156c1156
<   int small = 0;
---
>      0;
1156c1156
<   int small = 0;
---
>    small = ;
1156c1156
<   int small = 0;
---
>     = ;
1156c1156
<   int small = 0;
---
>    small  ;
1156c1156
<   int small = 0;
---
>      ;
1156c1156
<   int small = 0;
---
>   int  = 0;
1156c1156
<   int small = 0;
---
>   int   0;
1156c1156
<   int small = 0;
---
>   int  = ;
1156c1156
<   int small = 0;
---
>   int   ;
1156c1156
<   int small = 0;
---
>   int  = 0
1156c1156
<   int small = 0;
---
>   int   0
1156c1156
<   int small = 0;
---
>   int  = 
1156c1156
<   int small = 0;
---
>   int   
1156c1156
<   int small = 0;
---
>   int small  0;
1156c1156
<   int small = 0;
---
>   int small  ;
1156c1156
<   int small = 0;
---
>   int small  0
1156c1156
<   int small = 0;
---
>   int small  
1156,1157c1156,1157
<   int small = 0;
<   unsigned int sourceLen = 0;
---
>   int small  0;
>    int sourceLen = 0;
1156,1157c1156,1157
<   int small = 0;
<   unsigned int sourceLen = 0;
---
>   int small  ;
>    int sourceLen = 0;
(93.6 %, 13131 bytes)
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>    int sourceLen = 0;
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>   unsigned  sourceLen = 0;
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>     sourceLen = 0;
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>   unsigned int  = 0;
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>    int  = 0;
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>   unsigned   = 0;
1156,1157c1156,1157
<   int small  ;
<   unsigned int sourceLen = 0;
---
>   int small  
>      = 0;
1157c1157
<   unsigned int sourceLen = 0;
---
>    int sourceLen = 0;
1157c1157
<   unsigned int sourceLen = 0;
---
>     sourceLen = 0;
1157c1157
<   unsigned int sourceLen = 0;
---
>    int  = 0;
1157c1157
<   unsigned int sourceLen = 0;
---
>      = 0;
1157c1157
<   unsigned int sourceLen = 0;
---
>    int sourceLen  0;
1157c1157
<   unsigned int sourceLen = 0;
---
>     sourceLen  0;
1157c1157
<   unsigned int sourceLen = 0;
---
>    int   0;
1157c1157
<   unsigned int sourceLen = 0;
---
>       0;
1157c1157
<   unsigned int sourceLen = 0;
---
>   unsigned  sourceLen = 0;
(93.6 %, 13123 bytes)
1157c1157
<    int sourceLen = 0;
---
>     sourceLen = 0;
1157c1157
<    int sourceLen = 0;
---
>      = 0;
1157c1157
<    int sourceLen = 0;
---
>     sourceLen  0;
1157c1157
<    int sourceLen = 0;
---
>       0;
1157c1157
<    int sourceLen = 0;
---
>     sourceLen = ;
1157c1157
<    int sourceLen = 0;
---
>      = ;
1157c1157
<    int sourceLen = 0;
---
>     sourceLen  ;
1157c1157
<    int sourceLen = 0;
---
>       ;
1157c1157
<    int sourceLen = 0;
---
>    int  = 0;
1157c1157
<    int sourceLen = 0;
---
>    int   0;
1157c1157
<    int sourceLen = 0;
---
>    int  = ;
1157c1157
<    int sourceLen = 0;
---
>    int   ;
1157c1157
<    int sourceLen = 0;
---
>    int  = 0
1157c1157
<    int sourceLen = 0;
---
>    int   0
1157c1157
<    int sourceLen = 0;
---
>    int  = 
1157c1157
<    int sourceLen = 0;
---
>    int   
1157c1157
<    int sourceLen = 0;
---
>    int sourceLen  0;
1157c1157
<    int sourceLen = 0;
---
>    int sourceLen  ;
1157c1157
<    int sourceLen = 0;
---
>    int sourceLen  0
1157c1157
<    int sourceLen = 0;
---
>    int sourceLen  
1157,1158c1157,1158
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  0;
>    *source = 0;
1157,1158c1157,1158
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  ;
>    *source = 0;
1157,1158c1157,1158
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  0
>    *source = 0;
1157,1158c1157,1158
<    int sourceLen = 0;
<   char *source = 0;
---
>    int sourceLen  
>    *source = 0;
1157c1157
<    int sourceLen = 0;
---
>    int sourceLen = ;
1157c1157
<    int sourceLen = 0;
---
>    int sourceLen = 
(93.6 %, 13121 bytes)
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>    *source = 0;
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>   char source = 0;
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>    source = 0;
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>   char * = 0;
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>    * = 0;
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>   char  = 0;
1157,1158c1157,1158
<    int sourceLen  ;
<   char *source = 0;
---
>    int sourceLen  
>     = 0;
1158c1158
<   char *source = 0;
---
>    *source = 0;
1158c1158
<   char *source = 0;
---
>    source = 0;
1158c1158
<   char *source = 0;
---
>    * = 0;
1158c1158
<   char *source = 0;
---
>     = 0;
1158c1158
<   char *source = 0;
---
>    *source  0;
1158c1158
<   char *source = 0;
---
>    source  0;
1158c1158
<   char *source = 0;
---
>    *  0;
1158c1158
<   char *source = 0;
---
>      0;
1158c1158
<   char *source = 0;
---
>   char source = 0;
1158c1158
<   char *source = 0;
---
>   char  = 0;
1158c1158
<   char *source = 0;
---
>   char source  0;
1158c1158
<   char *source = 0;
---
>   char   0;
1158c1158
<   char *source = 0;
---
>   char source = ;
1158c1158
<   char *source = 0;
---
>   char  = ;
(93.6 %, 13120 bytes)
1158c1158
<   char source = 0;
---
>   char  = 0;
1158c1158
<   char source = 0;
---
>   char   0;
1158c1158
<   char source = 0;
---
>   char  = ;
1158c1158
<   char source = 0;
---
>   char   ;
1158c1158
<   char source = 0;
---
>   char  = 0
1158c1158
<   char source = 0;
---
>   char   0
1158c1158
<   char source = 0;
---
>   char  = 
1158c1158
<   char source = 0;
---
>   char   
1158c1158
<   char source = 0;
---
>   char source  0;
1158c1158
<   char source = 0;
---
>   char source  ;
1158c1158
<   char source = 0;
---
>   char source  0
1158c1158
<   char source = 0;
---
>   char source  
(93.6 %, 13118 bytes)
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>    int *destLen = 0;
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>   unsigned  *destLen = 0;
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>     *destLen = 0;
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>   unsigned int destLen = 0;
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>    int destLen = 0;
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>   unsigned  destLen = 0;
1158,1159c1158,1159
<   char source  ;
<   unsigned int *destLen = 0;
---
>   char source  
>     destLen = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>    int *destLen = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>     *destLen = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>    int destLen = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>     destLen = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>    int * = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>     * = 0;
1159c1159
<   unsigned int *destLen = 0;
---
>    int  = 0;
(93.6 %, 13110 bytes)
1159c1159
<    int *destLen = 0;
---
>     *destLen = 0;
1159c1159
<    int *destLen = 0;
---
>     destLen = 0;
1159c1159
<    int *destLen = 0;
---
>     * = 0;
1159c1159
<    int *destLen = 0;
---
>      = 0;
1159c1159
<    int *destLen = 0;
---
>     *destLen  0;
1159c1159
<    int *destLen = 0;
---
>     destLen  0;
1159c1159
<    int *destLen = 0;
---
>     *  0;
1159c1159
<    int *destLen = 0;
---
>       0;
1159c1159
<    int *destLen = 0;
---
>    int destLen = 0;
1159c1159
<    int *destLen = 0;
---
>    int  = 0;
1159c1159
<    int *destLen = 0;
---
>    int destLen  0;
1159c1159
<    int *destLen = 0;
---
>    int   0;
1159c1159
<    int *destLen = 0;
---
>    int destLen = ;
1159c1159
<    int *destLen = 0;
---
>    int  = ;
1159c1159
<    int *destLen = 0;
---
>    int destLen  ;
1159c1159
<    int *destLen = 0;
---
>    int   ;
1159c1159
<    int *destLen = 0;
---
>    int * = 0;
1159c1159
<    int *destLen = 0;
---
>    int *  0;
1159c1159
<    int *destLen = 0;
---
>    int * = ;
1159c1159
<    int *destLen = 0;
---
>    int *  ;
1159c1159
<    int *destLen = 0;
---
>    int * = 0
1159c1159
<    int *destLen = 0;
---
>    int *  0
1159c1159
<    int *destLen = 0;
---
>    int * = 
1159c1159
<    int *destLen = 0;
---
>    int *  
1159c1159
<    int *destLen = 0;
---
>    int *destLen  0;
1159c1159
<    int *destLen = 0;
---
>    int *destLen  ;
1159c1159
<    int *destLen = 0;
---
>    int *destLen  0
1159c1159
<    int *destLen = 0;
---
>    int *destLen  
1159,1160c1159,1160
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  0;
>    *dest = 0;
1159,1160c1159,1160
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  ;
>    *dest = 0;
1159,1160c1159,1160
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  0
>    *dest = 0;
1159,1160c1159,1160
<    int *destLen = 0;
<   char *dest = 0;
---
>    int *destLen  
>    *dest = 0;
1159c1159
<    int *destLen = 0;
---
>    int *destLen = ;
(93.6 %, 13108 bytes)
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>    *dest = 0;
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>   char dest = 0;
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>    dest = 0;
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>   char * = 0;
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>    * = 0;
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>   char  = 0;
1159,1160c1159,1160
<    int *destLen  ;
<   char *dest = 0;
---
>    int *destLen  
>     = 0;
1160c1160
<   char *dest = 0;
---
>    *dest = 0;
1160c1160
<   char *dest = 0;
---
>    dest = 0;
1160c1160
<   char *dest = 0;
---
>    * = 0;
1160c1160
<   char *dest = 0;
---
>     = 0;
1160c1160
<   char *dest = 0;
---
>    *dest  0;
1160c1160
<   char *dest = 0;
---
>    dest  0;
1160c1160
<   char *dest = 0;
---
>    *  0;
1160c1160
<   char *dest = 0;
---
>      0;
1160c1160
<   char *dest = 0;
---
>   char dest = 0;
1160c1160
<   char *dest = 0;
---
>   char  = 0;
1160c1160
<   char *dest = 0;
---
>   char dest  0;
1160c1160
<   char *dest = 0;
---
>   char   0;
1160c1160
<   char *dest = 0;
---
>   char dest = ;
1160c1160
<   char *dest = 0;
---
>   char  = ;
1160c1160
<   char *dest = 0;
---
>   char dest  ;
(93.6 %, 13107 bytes)
1160c1160
<   char dest = 0;
---
>   char  = 0;
1160c1160
<   char dest = 0;
---
>   char   0;
1160c1160
<   char dest = 0;
---
>   char  = ;
1160c1160
<   char dest = 0;
---
>   char   ;
1160c1160
<   char dest = 0;
---
>   char  = 0
1160c1160
<   char dest = 0;
---
>   char   0
1160c1160
<   char dest = 0;
---
>   char  = 
1160c1160
<   char dest = 0;
---
>   char   
1160c1160
<   char dest = 0;
---
>   char dest  0;
1160c1160
<   char dest = 0;
---
>   char dest  ;
1160c1160
<   char dest = 0;
---
>   char dest  0
1160c1160
<   char dest = 0;
---
>   char dest  
1160,1161c1160,1161
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  0;
>    strm;
1160,1161c1160,1161
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  ;
>    strm;
1160,1161c1160,1161
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  0
>    strm;
1160,1161c1160,1161
<   char dest = 0;
<   bz_stream strm;
---
>   char dest  
>    strm;
1160c1160
<   char dest = 0;
---
>   char dest = ;
1160c1160
<   char dest = 0;
---
>   char dest = 
(93.6 %, 13105 bytes)
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    strm;
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>   bz_stream ;
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    ;
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>   bz_stream strm
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    strm
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>   bz_stream 
1160,1161c1160,1161
<   char dest  ;
<   bz_stream strm;
---
>   char dest  
>    
1161c1161
<   bz_stream strm;
---
>    strm;
1161c1161
<   bz_stream strm;
---
>    ;
1161c1161
<   bz_stream strm;
---
>    strm
1161c1161
<   bz_stream strm;
---
>    
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>    strm;
>    int strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>    ;
>    int strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>    strm
>    int strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>    
>    int strm_5;
1161c1161
<   bz_stream strm;
---
>   bz_stream ;
1161c1161
<   bz_stream strm;
---
>   bz_stream 
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream ;
>    int strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream 
>    int strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream ;
>   unsigned  strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream 
>   unsigned  strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream ;
>     strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream 
>     strm_5;
1161c1161
<   bz_stream strm;
---
>   bz_stream strm
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>    int strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>   unsigned  strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>     strm_5;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>   unsigned int ;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>    int ;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>   unsigned  ;
1161,1162c1161,1162
<   bz_stream strm;
<   unsigned int strm_5;
---
>   bz_stream strm
>     ;
1162c1162
<   unsigned int strm_5;
---
>    int strm_5;
1162c1162
<   unsigned int strm_5;
---
>     strm_5;
1162c1162
<   unsigned int strm_5;
---
>    int ;
1162c1162
<   unsigned int strm_5;
---
>     ;
1162c1162
<   unsigned int strm_5;
---
>    int strm_5
1162c1162
<   unsigned int strm_5;
---
>     strm_5
1162c1162
<   unsigned int strm_5;
---
>    int 
1162c1162
<   unsigned int strm_5;
---
>     
(93.6 %, 13097 bytes)
1162c1162
<    int strm_5;
---
>     strm_5;
1162c1162
<    int strm_5;
---
>     ;
1162c1162
<    int strm_5;
---
>     strm_5
1162c1162
<    int strm_5;
---
>     
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>     strm_5;
>    int strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>     ;
>    int strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>     strm_5
>    int strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>     
>    int strm_1;
1162c1162
<    int strm_5;
---
>    int ;
1162c1162
<    int strm_5;
---
>    int 
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int ;
>    int strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int 
>    int strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int ;
>   unsigned  strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int 
>   unsigned  strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int ;
>     strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int 
>     strm_1;
1162c1162
<    int strm_5;
---
>    int strm_5
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>    int strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>   unsigned  strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>     strm_1;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>   unsigned int ;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>    int ;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>   unsigned  ;
1162,1163c1162,1163
<    int strm_5;
<   unsigned int strm_1;
---
>    int strm_5
>     ;
1163c1163
<   unsigned int strm_1;
---
>    int strm_1;
1163c1163
<   unsigned int strm_1;
---
>     strm_1;
1163c1163
<   unsigned int strm_1;
---
>    int ;
1163c1163
<   unsigned int strm_1;
---
>     ;
1163c1163
<   unsigned int strm_1;
---
>    int strm_1
1163c1163
<   unsigned int strm_1;
---
>     strm_1
1163c1163
<   unsigned int strm_1;
---
>    int 
1163c1163
<   unsigned int strm_1;
---
>     
1163c1163
<   unsigned int strm_1;
---
>   unsigned  strm_1;
(93.6 %, 13089 bytes)
1163c1163
<    int strm_1;
---
>     strm_1;
1163c1163
<    int strm_1;
---
>     ;
1163c1163
<    int strm_1;
---
>     strm_1
1163c1163
<    int strm_1;
---
>     
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>     strm_1;
>    *strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>     ;
>    *strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>     strm_1
>    *strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>     
>    *strm_4;
1163c1163
<    int strm_1;
---
>    int ;
1163c1163
<    int strm_1;
---
>    int 
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int ;
>    *strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int 
>    *strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int ;
>   char strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int 
>   char strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int ;
>    strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int 
>    strm_4;
1163c1163
<    int strm_1;
---
>    int strm_1
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    *strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>   char strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    strm_4;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>   char *;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    *;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>   char ;
1163,1164c1163,1164
<    int strm_1;
<   char *strm_4;
---
>    int strm_1
>    ;
1164c1164
<   char *strm_4;
---
>    *strm_4;
1164c1164
<   char *strm_4;
---
>    strm_4;
1164c1164
<   char *strm_4;
---
>    *;
1164c1164
<   char *strm_4;
---
>    ;
1164c1164
<   char *strm_4;
---
>    *strm_4
1164c1164
<   char *strm_4;
---
>    strm_4
1164c1164
<   char *strm_4;
---
>    *
1164c1164
<   char *strm_4;
---
>    
1164c1164
<   char *strm_4;
---
>   char strm_4;
1164c1164
<   char *strm_4;
---
>   char ;
1164c1164
<   char *strm_4;
---
>   char strm_4
1164c1164
<   char *strm_4;
---
>   char 
1164,1165c1164,1165
<   char *strm_4;
<   char *strm_0;
---
>   char strm_4;
>    *strm_0;
1164,1165c1164,1165
<   char *strm_4;
<   char *strm_0;
---
>   char ;
>    *strm_0;
1164,1165c1164,1165
<   char *strm_4;
<   char *strm_0;
---
>   char strm_4
>    *strm_0;
1164,1165c1164,1165
<   char *strm_4;
<   char *strm_0;
---
>   char 
>    *strm_0;
1164c1164
<   char *strm_4;
---
>   char *;
(93.6 %, 13088 bytes)
1164c1164
<   char strm_4;
---
>   char ;
1164c1164
<   char strm_4;
---
>   char 
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char ;
>    *strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char 
>    *strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char ;
>   char strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char 
>   char strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char ;
>    strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char 
>    strm_0;
1164c1164
<   char strm_4;
---
>   char strm_4
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    *strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>   char strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    strm_0;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>   char *;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    *;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>   char ;
1164,1165c1164,1165
<   char strm_4;
<   char *strm_0;
---
>   char strm_4
>    ;
1165c1165
<   char *strm_0;
---
>    *strm_0;
1165c1165
<   char *strm_0;
---
>    strm_0;
1165c1165
<   char *strm_0;
---
>    *;
1165c1165
<   char *strm_0;
---
>    ;
1165c1165
<   char *strm_0;
---
>    *strm_0
1165c1165
<   char *strm_0;
---
>    strm_0
1165c1165
<   char *strm_0;
---
>    *
1165c1165
<   char *strm_0;
---
>    
1165c1165
<   char *strm_0;
---
>   char strm_0;
1165c1165
<   char *strm_0;
---
>   char ;
1165c1165
<   char *strm_0;
---
>   char strm_0
1165c1165
<   char *strm_0;
---
>   char 
1165,1166c1165,1166
<   char *strm_0;
<   int ret;
---
>   char strm_0;
>    ret;
1165,1166c1165,1166
<   char *strm_0;
<   int ret;
---
>   char ;
>    ret;
1165,1166c1165,1166
<   char *strm_0;
<   int ret;
---
>   char strm_0
>    ret;
1165,1166c1165,1166
<   char *strm_0;
<   int ret;
---
>   char 
>    ret;
(93.6 %, 13087 bytes)
1165c1165
<   char strm_0;
---
>   char ;
1165c1165
<   char strm_0;
---
>   char 
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char ;
>    ret;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char 
>    ret;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char ;
>   int ;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char 
>   int ;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char ;
>    ;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char 
>    ;
1165c1165
<   char strm_0;
---
>   char strm_0
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>    ret;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>   int ;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>    ;
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>   int ret
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>    ret
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>   int 
1165,1166c1165,1166
<   char strm_0;
<   int ret;
---
>   char strm_0
>    
1166c1166
<   int ret;
---
>    ret;
1166c1166
<   int ret;
---
>    ;
1166c1166
<   int ret;
---
>    ret
1166c1166
<   int ret;
---
>    
1166c1166
<   int ret;
---
>    ret;
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>    ;
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>    ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>    
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ;
1166c1166
<   int ret;
---
>   int 
1166c1166
<   int ret;
---
>   int ;
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int 
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ;
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int 
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ;
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int 
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    ( == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if  == NULL || destLen == NULL || source == NULL ||
1166c1166
<   int ret;
---
>   int ret
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>     == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    ( == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>     == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (dest  NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    dest  NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>    (  NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>      NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if  == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest  NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if   NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest ==  || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if  ==  || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if dest   || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if    || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( == NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (  NULL || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( ==  || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (   || destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( == NULL  destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (  NULL  destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if ( ==   destLen == NULL || source == NULL ||
1168c1168
<   if (dest == NULL || destLen == NULL || source == NULL ||
---
>   if (    destLen == NULL || source == NULL ||
(93.6 %, 13081 bytes)
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (    destLen == NULL || source == NULL ||
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (   ||  == NULL || source == NULL ||
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (     == NULL || source == NULL ||
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (   || destLen  NULL || source == NULL ||
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (    destLen  NULL || source == NULL ||
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (   ||   NULL || source == NULL ||
1168c1168
<   if (  NULL || destLen == NULL || source == NULL ||
---
>   if (      NULL || source == NULL ||
(93.6 %, 13075 bytes)
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (      NULL || source == NULL ||
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (     ==  || source == NULL ||
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (       || source == NULL ||
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (     == NULL  source == NULL ||
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (      NULL  source == NULL ||
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (     ==   source == NULL ||
1168c1168
<   if (    destLen == NULL || source == NULL ||
---
>   if (        source == NULL ||
(93.6 %, 13066 bytes)
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (        source == NULL ||
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (       ||  == NULL ||
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (         == NULL ||
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (       || source  NULL ||
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (        source  NULL ||
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (       ||   NULL ||
1168c1168
<   if (      NULL || source == NULL ||
---
>   if (          NULL ||
(93.6 %, 13060 bytes)
1168c1168
<   if (        source == NULL ||
---
>   if (          NULL ||
1168c1168
<   if (        source == NULL ||
---
>   if (         ==  ||
1168c1168
<   if (        source == NULL ||
---
>   if (           ||
1168c1168
<   if (        source == NULL ||
---
>   if (         == NULL 
1168c1168
<   if (        source == NULL ||
---
>   if (          NULL 
1168c1168
<   if (        source == NULL ||
---
>   if (         ==  
1168c1168
<   if (        source == NULL ||
---
>   if (           
(93.6 %, 13052 bytes)
1168c1168
<   if (          NULL ||
---
>   if (           
1168,1169c1168,1169
<   if (          NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if (           ||
>        != 0 && small != 1 || verbosity < 0 || verbosity > 4)
1168,1169c1168,1169
<   if (          NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if (           
>        != 0 && small != 1 || verbosity < 0 || verbosity > 4)
1168,1169c1168,1169
<   if (          NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if (           ||
>       small  0 && small != 1 || verbosity < 0 || verbosity > 4)
1168,1169c1168,1169
<   if (          NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if (           
>       small  0 && small != 1 || verbosity < 0 || verbosity > 4)
1168,1169c1168,1169
<   if (          NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if (           ||
>         0 && small != 1 || verbosity < 0 || verbosity > 4)
1168,1169c1168,1169
<   if (          NULL ||
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>   if (           
>         0 && small != 1 || verbosity < 0 || verbosity > 4)
(93.6 %, 13046 bytes)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>         0 && small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>        !=  && small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>          && small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>        != 0  small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>         0  small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>        !=   small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<       small != 0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>           small != 1 || verbosity < 0 || verbosity > 4)
(93.6 %, 13039 bytes)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>           small != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>          &&  != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>            != 1 || verbosity < 0 || verbosity > 4)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>          && small  1 || verbosity < 0 || verbosity > 4)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>           small  1 || verbosity < 0 || verbosity > 4)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>          &&   1 || verbosity < 0 || verbosity > 4)
1169c1169
<         0 && small != 1 || verbosity < 0 || verbosity > 4)
---
>             1 || verbosity < 0 || verbosity > 4)
(93.6 %, 13036 bytes)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>             1 || verbosity < 0 || verbosity > 4)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>            !=  || verbosity < 0 || verbosity > 4)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>              || verbosity < 0 || verbosity > 4)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>            != 1  verbosity < 0 || verbosity > 4)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>             1  verbosity < 0 || verbosity > 4)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>            !=   verbosity < 0 || verbosity > 4)
1169c1169
<           small != 1 || verbosity < 0 || verbosity > 4)
---
>               verbosity < 0 || verbosity > 4)
(93.6 %, 13029 bytes)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>               verbosity < 0 || verbosity > 4)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>              ||  < 0 || verbosity > 4)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>                < 0 || verbosity > 4)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>              || verbosity  0 || verbosity > 4)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>               verbosity  0 || verbosity > 4)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>              ||   0 || verbosity > 4)
1169c1169
<             1 || verbosity < 0 || verbosity > 4)
---
>                 0 || verbosity > 4)
(93.6 %, 13026 bytes)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                 0 || verbosity > 4)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                <  || verbosity > 4)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                  || verbosity > 4)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                < 0  verbosity > 4)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                 0  verbosity > 4)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                <   verbosity > 4)
1169c1169
<               verbosity < 0 || verbosity > 4)
---
>                   verbosity > 4)
(93.6 %, 13016 bytes)
1169c1169
<                 0 || verbosity > 4)
---
>                   verbosity > 4)
1169c1169
<                 0 || verbosity > 4)
---
>                  ||  > 4)
1169c1169
<                 0 || verbosity > 4)
---
>                    > 4)
1169c1169
<                 0 || verbosity > 4)
---
>                  || verbosity  4)
1169c1169
<                 0 || verbosity > 4)
---
>                   verbosity  4)
1169c1169
<                 0 || verbosity > 4)
---
>                  ||   4)
1169c1169
<                 0 || verbosity > 4)
---
>                     4)
(93.7 %, 13013 bytes)
1169c1169
<                   verbosity > 4)
---
>                     4)
1169c1169
<                   verbosity > 4)
---
>                    > )
1169c1169
<                   verbosity > 4)
---
>                     )
1169c1169
<                   verbosity > 4)
---
>                    > 4
1169c1169
<                   verbosity > 4)
---
>                     4
1169c1169
<                   verbosity > 4)
---
>                    > 
1169c1169
<                   verbosity > 4)
---
>                     
1169c1169
<                   verbosity > 4)
---
>                   verbosity  4)
(93.7 %, 13003 bytes)
1169c1169
<                     4)
---
>                     
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     )
>      BZ_PARAM_ERROR;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     
>      BZ_PARAM_ERROR;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     )
>     return ;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     
>     return ;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     )
>      ;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     
>      ;
1169c1169
<                     4)
---
>                     4
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>      BZ_PARAM_ERROR;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>     return ;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>      ;
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>     return BZ_PARAM_ERROR
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>      BZ_PARAM_ERROR
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>     return 
1169,1170c1169,1170
<                     4)
<     return BZ_PARAM_ERROR;
---
>                     4
>      
1170c1170
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR;
1170c1170
<     return BZ_PARAM_ERROR;
---
>      ;
1170c1170
<     return BZ_PARAM_ERROR;
---
>      BZ_PARAM_ERROR
(93.7 %, 12997 bytes)
1170c1170
<      BZ_PARAM_ERROR;
---
>      ;
1170c1170
<      BZ_PARAM_ERROR;
---
>      
1170c1170
<      BZ_PARAM_ERROR;
---
>      ;
1172c1172
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
1170c1170
<      BZ_PARAM_ERROR;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
1170c1170
<      BZ_PARAM_ERROR;
---
>      ;
1172c1172
<   strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
1170c1170
<      BZ_PARAM_ERROR;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
(93.7 %, 12983 bytes)
1170c1170
<      ;
---
>      
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   strmbzalloc = NULL;
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   bzalloc = NULL;
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   strm. = NULL;
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   . = NULL;
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>   strm = NULL;
1170c1170
<      ;
---
>      
1172c1172
<   strm.bzalloc = NULL;
---
>    = NULL;
(93.7 %, 12982 bytes)
1172c1172
<   strm.bzalloc = NULL;
---
>   .bzalloc = NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>   bzalloc = NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>   . = NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>    = NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>   .bzalloc  NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>   bzalloc  NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>   .  NULL;
1172c1172
<   strm.bzalloc = NULL;
---
>     NULL;
(93.7 %, 12976 bytes)
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     ;
>   .bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     NULL
>   .bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>     
>   .bzfree = NULL;
1172c1172
<   bzalloc  NULL;
---
>   bzalloc  ;
1172c1172
<   bzalloc  NULL;
---
>   bzalloc  
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   .bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   .bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   strmbzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   strmbzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  ;
>   bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  
>   bzfree = NULL;
1172c1172
<   bzalloc  NULL;
---
>   bzalloc  NULL
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   .bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strmbzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   bzfree = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm. = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   . = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>   strm = NULL;
1172,1173c1172,1173
<   bzalloc  NULL;
<   strm.bzfree = NULL;
---
>   bzalloc  NULL
>    = NULL;
1173c1173
<   strm.bzfree = NULL;
---
>   .bzfree = NULL;
1173c1173
<   strm.bzfree = NULL;
---
>   bzfree = NULL;
1173c1173
<   strm.bzfree = NULL;
---
>   . = NULL;
1173c1173
<   strm.bzfree = NULL;
---
>    = NULL;
1173c1173
<   strm.bzfree = NULL;
---
>   .bzfree  NULL;
1173c1173
<   strm.bzfree = NULL;
---
>   bzfree  NULL;
1173c1173
<   strm.bzfree = NULL;
---
>   .  NULL;
1173c1173
<   strm.bzfree = NULL;
---
>     NULL;
(93.7 %, 12970 bytes)
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     ;
>   .opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     NULL
>   .opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>     
>   .opaque = NULL;
1173c1173
<   bzfree  NULL;
---
>   bzfree  ;
1173c1173
<   bzfree  NULL;
---
>   bzfree  
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   .opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   .opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   strmopaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   strmopaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  ;
>   opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  
>   opaque = NULL;
1173c1173
<   bzfree  NULL;
---
>   bzfree  NULL
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   .opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strmopaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   opaque = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm. = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   . = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>   strm = NULL;
1173,1174c1173,1174
<   bzfree  NULL;
<   strm.opaque = NULL;
---
>   bzfree  NULL
>    = NULL;
1174c1174
<   strm.opaque = NULL;
---
>   .opaque = NULL;
1174c1174
<   strm.opaque = NULL;
---
>   opaque = NULL;
1174c1174
<   strm.opaque = NULL;
---
>   . = NULL;
1174c1174
<   strm.opaque = NULL;
---
>    = NULL;
1174c1174
<   strm.opaque = NULL;
---
>   .opaque  NULL;
1174c1174
<   strm.opaque = NULL;
---
>   opaque  NULL;
1174c1174
<   strm.opaque = NULL;
---
>   .  NULL;
1174c1174
<   strm.opaque = NULL;
---
>     NULL;
(93.7 %, 12964 bytes)
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>     ;
>    = 0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>     NULL
>    = 0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>     
>    = 0;
1174c1174
<   opaque  NULL;
---
>   opaque  ;
1174c1174
<   opaque  NULL;
---
>   opaque  
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>    = 0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>    = 0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>   ret  0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>   ret  0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  ;
>     0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  
>     0;
1174c1174
<   opaque  NULL;
---
>   opaque  NULL
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = 0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     0;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret = ;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>    = ;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>   ret  ;
1174,1175c1174,1175
<   opaque  NULL;
<   ret = 0;
---
>   opaque  NULL
>     ;
1175c1175
<   ret = 0;
---
>    = 0;
1175c1175
<   ret = 0;
---
>     0;
(93.7 %, 12958 bytes)
1175,1176c1175,1176
<     ;
<   ;
---
>     
>   
1178c1178
<   return ret;
---
>    ;
1176c1176
<   ;
---
>   
1176c1176
<   ;
---
>   
1178c1178
<   return ret;
---
>    ret;
(93.7 %, 12947 bytes)
1178c1178
<    ;
---
>    
1180c1180
<   strm_0 = source;
---
>     ;
1180c1180
<   strm_0 = source;
---
>    = source;
1180c1180
<   strm_0 = source;
---
>     source;
(93.7 %, 12933 bytes)
1179a1180
>     
1181d1181
<   strm_4 = dest;
1181c1181
<   strm_4 = dest;
---
>    = dest;
1181c1181
<   strm_4 = dest;
---
>     dest;
(93.7 %, 12921 bytes)
1180a1181
>     
1182d1182
<   strm_1 = sourceLen;
1182c1182
<   strm_1 = sourceLen;
---
>    = sourceLen;
1182c1182
<   strm_1 = sourceLen;
---
>     sourceLen;
(93.7 %, 12904 bytes)
1182,1183c1182,1183
<     ;
<   strm_5 = *destLen;
---
>     
>     destLen;
1183c1183
<   strm_5 = *destLen;
---
>    = *destLen;
1183c1183
<   strm_5 = *destLen;
---
>     *destLen;
1183c1183
<   strm_5 = *destLen;
---
>    = destLen;
1183c1183
<   strm_5 = *destLen;
---
>     destLen;
(93.7 %, 12897 bytes)
1183c1183
<     *destLen;
---
>     ;
1183c1183
<     *destLen;
---
>     destLen
1183c1183
<     *destLen;
---
>     
(93.7 %, 12889 bytes)
1183c1183
<     ;
---
>     
1185c1185
<   ret = 0;
---
>    = 0;
1183c1183
<     ;
---
>     
1185c1185
<   ret = 0;
---
>   ret  0;
1183c1183
<     ;
---
>     
1185c1185
<   ret = 0;
---
>     0;
1183c1183
<     ;
---
>     
1185c1185
<   ret = 0;
---
>   ret = ;
1183c1183
<     ;
---
>     
1185c1185
<   ret = 0;
---
>    = ;
1183c1183
<     ;
---
>     
1185c1185
<   ret = 0;
---
>   ret  ;
(93.7 %, 12884 bytes)
1185,1186c1185,1186
<     0;
<   ;
---
>     
>   
1185c1185
<     0;
---
>     ;
1188c1188
<   goto output_overflow_or_eof;
---
>    output_overflow_or_eof;
1185c1185
<     0;
---
>     
1188c1188
<   goto output_overflow_or_eof;
---
>    output_overflow_or_eof;
1185,1186c1185,1186
<     0;
<   ;
---
>     ;
>   
1188c1188
<   goto output_overflow_or_eof;
---
>    output_overflow_or_eof;
1185,1186c1185,1186
<     0;
<   ;
---
>     
>   
1188c1188
<   goto output_overflow_or_eof;
---
>    output_overflow_or_eof;
1185c1185
<     0;
---
>     0
(93.7 %, 12881 bytes)
1188c1188
<   goto output_overflow_or_eof;
---
>    
1188,1189c1188,1189
<   goto output_overflow_or_eof;
<   ;
---
>    output_overflow_or_eof;
>   
1188,1189c1188,1189
<   goto output_overflow_or_eof;
<   ;
---
>    ;
>   
(93.7 %, 12854 bytes)
1189c1189
<   ;
---
>   
1191c1191
<   goto errhandler;
---
>    ;
1189c1189
<   ;
---
>   
1191c1191
<   goto errhandler;
---
>   goto errhandler
1189c1189
<   ;
---
>   
1191c1191
<   goto errhandler;
---
>    errhandler
1189c1189
<   ;
---
>   
1191c1191
<   goto errhandler;
---
>   goto 
(93.7 %, 12839 bytes)
1191c1191
<    ;
---
>    
1193c1193
<   *destLen -= strm_5;
---
>    -= strm_5;
1191c1191
<    ;
---
>    
1193c1193
<   *destLen -= strm_5;
---
>   *destLen  strm_5;
1191c1191
<    ;
---
>    
1193c1193
<   *destLen -= strm_5;
---
>   destLen  strm_5;
1191c1191
<    ;
---
>    
1193c1193
<   *destLen -= strm_5;
---
>   *  strm_5;
1191c1191
<    ;
---
>    
1193c1193
<   *destLen -= strm_5;
---
>     strm_5;
1193c1193
<   *destLen -= strm_5;
---
>   destLen -= strm_5;
(93.7 %, 12828 bytes)
1193,1194c1193,1194
<     strm_5;
<   0;
---
>     
>   
1193c1193
<     strm_5;
---
>     strm_5
1193,1194c1193,1194
<     strm_5;
<   0;
---
>     strm_5
>   ;
(93.7 %, 12819 bytes)
1195c1195
<   return BZ_OK;
---
>    
1197c1197
< output_overflow_or_eof:
---
> :
1195c1195
<   return BZ_OK;
---
>   return ;
1195c1195
<   return BZ_OK;
---
>   return 
1195c1195
<   return BZ_OK;
---
>   return ;
1197c1197
< output_overflow_or_eof:
---
> :
1195c1195
<   return BZ_OK;
---
>   return 
1197c1197
< output_overflow_or_eof:
---
> :
1195c1195
<   return BZ_OK;
---
>   return ;
1197c1197
< output_overflow_or_eof:
---
> output_overflow_or_eof
1195c1195
<   return BZ_OK;
---
>   return 
1197c1197
< output_overflow_or_eof:
---
> output_overflow_or_eof
1195c1195,1196
<   return BZ_OK;
---
>   return ;
> 
1197d1197
< output_overflow_or_eof:
1195c1195,1196
<   return BZ_OK;
---
>   return 
> 
1197d1197
< output_overflow_or_eof:
1195c1195
<   return BZ_OK;
---
>   return BZ_OK
1195c1195
<   return BZ_OK;
---
>   return BZ_OK
1197c1197
< output_overflow_or_eof:
---
> :
(93.8 %, 12790 bytes)
1198c1198
<   strm_5 > 0;
---
>     
1198c1198
<   strm_5 > 0;
---
>   strm_5  0;
1198c1198
<   strm_5 > 0;
---
>   strm_5  ;
1198c1198
<   strm_5 > 0;
---
>   strm_5  0
1198c1198
<   strm_5 > 0;
---
>   strm_5  
1198c1198
<   strm_5 > 0;
---
>   strm_5  0;
1200c1200
<   {
---
>   
1198c1198
<   strm_5 > 0;
---
>   strm_5  ;
1200c1200
<   {
---
>   
1198c1198
<   strm_5 > 0;
---
>   strm_5  0
1200c1200
<   {
---
>   
1198c1198
<   strm_5 > 0;
---
>   strm_5  
1200c1200
<   {
---
>   
1198c1198
<   strm_5 > 0;
---
>   strm_5 > ;
(93.8 %, 12788 bytes)
1198c1198
<   strm_5  ;
---
>   strm_5  
1200c1200
<   {
---
>   
1198c1198
<   strm_5  ;
---
>   strm_5  
1201c1201
<     0;
---
>     ;
1198c1198
<   strm_5  ;
---
>   strm_5  
1200,1201c1200,1201
<   {
<     0;
---
>   
>     ;
1198c1198
<   strm_5  ;
---
>   strm_5  
1201c1201
<     0;
---
>     0
1198c1198
<   strm_5  ;
---
>   strm_5  
1200,1201c1200,1201
<   {
<     0;
---
>   
>     0
1198c1198
<   strm_5  ;
---
>   strm_5  
1201c1201
<     0;
---
>     
1198c1198
<   strm_5  ;
---
>   strm_5  
1200,1201c1200,1201
<   {
<     0;
---
>   
>     
1200c1200
<   {
---
>   
1200,1201c1200,1201
<   {
<     0;
---
>   
>     ;
1200,1201c1200,1201
<   {
<     0;
---
>   
>     0
1200,1201c1200,1201
<   {
<     0;
---
>   
>     
1200c1200
<   {
---
>   
1202c1202
<     return BZ_UNEXPECTED_EOF;
---
>      BZ_UNEXPECTED_EOF;
1200,1202c1200,1202
<   {
<     0;
<     return BZ_UNEXPECTED_EOF;
---
>   
>     ;
>      BZ_UNEXPECTED_EOF;
1200,1202c1200,1202
<   {
<     0;
<     return BZ_UNEXPECTED_EOF;
---
>   
>     0
>      BZ_UNEXPECTED_EOF;
1200,1202c1200,1202
<   {
<     0;
<     return BZ_UNEXPECTED_EOF;
---
>   
>     
>      BZ_UNEXPECTED_EOF;
1201c1201
<     0;
---
>     ;
1201c1201
<     0;
---
>     
(93.8 %, 12787 bytes)
1201c1201
<     ;
---
>     
1201,1202c1201,1202
<     ;
<     return BZ_UNEXPECTED_EOF;
---
>     
>      BZ_UNEXPECTED_EOF;
(93.8 %, 12786 bytes)
1202c1202
<     return BZ_UNEXPECTED_EOF;
---
>      BZ_UNEXPECTED_EOF;
1202c1202
<     return BZ_UNEXPECTED_EOF;
---
>      ;
(93.8 %, 12780 bytes)
1202c1202
<      BZ_UNEXPECTED_EOF;
---
>      ;
1202c1202
<      BZ_UNEXPECTED_EOF;
---
>      
1202,1203c1202,1203
<      BZ_UNEXPECTED_EOF;
<   };
---
>      ;
>   ;
(93.8 %, 12763 bytes)
1202c1202
<      ;
---
>      
1202,1203c1202,1203
<      ;
<   };
---
>      
>   ;
1202,1203c1202,1203
<      ;
<   };
---
>      
>   }
(93.8 %, 12762 bytes)
1203c1203
<   };
---
>   ;
1203c1203
<   };
---
>   
1203c1203
<   };
---
>   ;
1205c1205
< errhandler:
---
> :
1203c1203
<   };
---
>   
1205c1205
< errhandler:
---
> :
1203c1203
<   };
---
>   ;
1205c1205
< errhandler:
---
> errhandler
1203c1203
<   };
---
>   
1205c1205
< errhandler:
---
> errhandler
1203c1203,1204
<   };
---
>   ;
> 
1205d1205
< errhandler:
1203c1203,1204
<   };
---
>   
> 
1205d1205
< errhandler:
1203c1203
<   };
---
>   }
1203c1203
<   };
---
>   }
1205c1205
< errhandler:
---
> :
1203c1203
<   };
---
>   }
1205c1205
< errhandler:
---
> errhandler
1203c1203,1204
<   };
---
>   }
> 
1205d1205
< errhandler:
(93.8 %, 12761 bytes)
1205c1205
< errhandler:
---
> :
1205c1205
< errhandler:
---
> 
1205,1206c1205,1206
< errhandler:
<   0;
---
> :
>   ;
1205,1206c1205,1206
< errhandler:
<   0;
---
> 
>   ;
(93.8 %, 12750 bytes)
1206c1206
<   0;
---
>   
1206,1207c1206,1207
<   0;
<   return ret;
---
>   ;
>    ret;
1206,1207c1206,1207
<   0;
<   return ret;
---
>   
>    ret;
(93.8 %, 12748 bytes)
1207c1207
<   return ret;
---
>    ;
1207c1207
<   return ret;
---
>    ret
1207c1207
<   return ret;
---
>    
(93.8 %, 12739 bytes)
1207,1208c1207,1208
<    ;
< }
---
>    
> 
1207c1207
<    ;
---
>    
1210c1210
< const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1207,1208c1207
<    ;
< }
---
>    
1210c1209,1210
< const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1207c1207
<    ;
---
>    
1210c1210
< const char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> const  *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
(93.8 %, 12733 bytes)
1208d1207
< }
1210c1209,1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>  char BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1208d1207
< }
1210c1209,1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1208d1207
< }
1210c1209,1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>  char *(void) { return BZ_VERSION; }
1208d1207
< }
1210c1209,1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>   *(void) { return BZ_VERSION; }
1208d1207
< }
1210c1209,1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>  char (void) { return BZ_VERSION; }
1208d1207
< }
1210c1209,1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
> 
>   (void) { return BZ_VERSION; }
1210c1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1210c1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1210c1210
<  char *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   *(void) { return BZ_VERSION; }
(93.8 %, 12729 bytes)
1210c1210
<   *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
1210c1210
<   *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   (void) { return BZ_VERSION; }
1210c1210
<   *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersionvoid) { return BZ_VERSION; }
1210c1210
<   *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   void) { return BZ_VERSION; }
1210c1210
<   *BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
(93.8 %, 12728 bytes)
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   (void) { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   void) { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   () { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   ) { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   (void { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   void { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   ( { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>    { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersionvoid) { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion) { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersionvoid { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersionvoid)  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion)  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersionvoid  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion( { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion(void) { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() {  BZ_VERSION; }
(93.8 %, 12724 bytes)
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion( { return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion( {  BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(   BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion( { return ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(  return ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion( {  ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion(   ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()  return BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()   BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()  return ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()   ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()  return BZ_VERSION }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()   BZ_VERSION }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()  return  }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion()    }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() {  BZ_VERSION; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() { return BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() {  ; }
(93.8 %, 12718 bytes)
1210c1210
<   BZ_APIBZ2_bzlibVersion() {  BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() {  ; }
1210c1210
<   BZ_APIBZ2_bzlibVersion() {  BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() {   }
1210c1210
<   BZ_APIBZ2_bzlibVersion() {  BZ_VERSION; }
---
>   BZ_APIBZ2_bzlibVersion() {  ; 
(93.8 %, 12708 bytes)
1210c1210
<   BZ_APIBZ2_bzlibVersion() {  ; }
---
>   BZ_APIBZ2_bzlibVersion() {   }
1210c1210
<   BZ_APIBZ2_bzlibVersion() {  ; }
---
>   BZ_APIBZ2_bzlibVersion() {   
1210c1210
<   BZ_APIBZ2_bzlibVersion() {  ; }
---
>   BZ_APIBZ2_bzlibVersion() {   }
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>  BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
(93.8 %, 12707 bytes)
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>  BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
> static  *bzopen_or_bzdopen(const char *path, int d, const char *mode,
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
> static BZFILE bzopen_or_bzdopen(const char *path, int d, const char *mode,
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>  BZFILE bzopen_or_bzdopen(const char *path, int d, const char *mode,
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
> static  bzopen_or_bzdopen(const char *path, int d, const char *mode,
1210c1210
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() {   
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(const char *path, int d, const char *mode,
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>  BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
1212c1212
< static BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
(93.8 %, 12701 bytes)
1212c1212
<  BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
1212c1212
<  BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(const char *path, int d, const char *mode,
1212c1212
<  BZFILE *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   *(const char *path, int d, const char *mode,
(93.8 %, 12695 bytes)
1212c1212
<   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(const char *path, int d, const char *mode,
1212c1212
<   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   (const char *path, int d, const char *mode,
1212c1212
<   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopenconst char *path, int d, const char *mode,
1212c1212
<   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   const char *path, int d, const char *mode,
1212c1212
<   *bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen( char *path, int d, const char *mode,
(93.8 %, 12694 bytes)
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   (const char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   const char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   ( char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>    char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   (const  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   const  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   (  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>     *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopenconst char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopenconst  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopenconst char path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen char path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopenconst  path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen  path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen( char *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen(const char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen( char path, int d, const char *mode,
(93.8 %, 12689 bytes)
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  *path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  path, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  *, int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  , int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  *path int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  path int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(  * int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen(   int d, const char *mode,
1212c1212
<   bzopen_or_bzdopen( char *path, int d, const char *mode,
---
>   bzopen_or_bzdopen( char path, int d, const char *mode,
(93.8 %, 12679 bytes)
1212c1212
<   bzopen_or_bzdopen(   int d, const char *mode,
---
>   bzopen_or_bzdopen(      char *mode,
1212c1212
<   bzopen_or_bzdopen(   int d, const char *mode,
---
>   bzopen_or_bzdopen(   int , const char *mode,
(93.8 %, 12669 bytes)
1212c1212
<   bzopen_or_bzdopen(      char *mode,
---
>   bzopen_or_bzdopen(       
1212c1212
<   bzopen_or_bzdopen(      char *mode,
---
>   bzopen_or_bzdopen(      char mode,
(93.8 %, 12659 bytes)
1213c1213
<                                  int open_mode);
---
>                                   
1213c1213
<                                  int open_mode);
---
>                                  int );
1213c1213
<                                  int open_mode);
---
>                                  int ;
1213c1213
<                                  int open_mode);
---
>                                  int )
1213c1213
<                                  int open_mode);
---
>                                  int 
1213c1213
<                                  int open_mode);
---
>                                  int );
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen(void) { return 0; }
(93.8 %, 12650 bytes)
1213c1213
<                                  int );
---
>                                  int ;
1213c1213
<                                  int );
---
>                                  int 
1213c1213
<                                  int );
---
>                                  int ;
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int 
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int ;
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
> BZFILE BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int 
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
> BZFILE BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int ;
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int 
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
> BZFILE BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
> BZFILE *(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *(void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
> BZFILE (void) { return 0; }
1213c1213
<                                  int );
---
>                                  int )
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  (void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen(void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen(void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *(void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  (void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopenvoid) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopenvoid) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  void) { return 0; }
1215c1215
< BZFILE *BZ_APIBZ2_bzopen(void) { return 0; }
---
> BZFILE BZ_APIBZ2_bzopen(void) { return 0; }
(93.8 %, 12644 bytes)
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen(void) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  (void) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopenvoid) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  void) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen() { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  () { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  BZ_APIBZ2_bzopen) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  ) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *(void) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *void) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *() { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *(void { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *void { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *( { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  * { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopenvoid) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen) { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopenvoid { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopenvoid)  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen)  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopenvoid  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen() { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen( { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen()  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen(  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen(void) { return 0; }
---
>  *BZ_APIBZ2_bzopen() {  0; }
(93.8 %, 12640 bytes)
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen( { return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen(  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen( {  0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen(   0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen( { return ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen(  return ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen( {  ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen(   ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()  return 0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()   0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()  return ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()   ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()  return 0 }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()   0 }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()  return  }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen()    }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen() {  0; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen() {  ; }
1215c1215
<  *BZ_APIBZ2_bzopen() { return 0; }
---
>  *BZ_APIBZ2_bzopen() {  0 }
(93.8 %, 12634 bytes)
1215c1215
<  *BZ_APIBZ2_bzopen() {  0; }
---
>  *BZ_APIBZ2_bzopen() {  ; }
1215c1215
<  *BZ_APIBZ2_bzopen() {  0; }
---
>  *BZ_APIBZ2_bzopen() {   }
1215c1215
<  *BZ_APIBZ2_bzopen() {  0; }
---
>  *BZ_APIBZ2_bzopen() {  ; 
(93.8 %, 12633 bytes)
1215c1215
<  *BZ_APIBZ2_bzopen() {  ; }
---
>  *BZ_APIBZ2_bzopen() {   }
1215c1215
<  *BZ_APIBZ2_bzopen() {  ; }
---
>  *BZ_APIBZ2_bzopen() {   
1215c1215
<  *BZ_APIBZ2_bzopen() {  ; }
---
>  *BZ_APIBZ2_bzopen() {   }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
(93.8 %, 12632 bytes)
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
> BZFILE BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
> BZFILE *(void) { return bzopen_or_bzdopen; }
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *(void) { return bzopen_or_bzdopen; }
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
> BZFILE (void) { return bzopen_or_bzdopen; }
1215c1215
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() {   
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  (void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *(void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  (void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopenvoid) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopenvoid) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  void) { return bzopen_or_bzdopen; }
1217c1217
< BZFILE *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
> BZFILE BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
(93.8 %, 12626 bytes)
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  (void) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopenvoid) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  void) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  () { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  BZ_APIBZ2_bzdopen) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  ) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *(void) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *void) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *() { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *(void { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *void { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *( { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  * { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopenvoid) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen) { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopenvoid { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopenvoid)  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen)  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopenvoid  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen( { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen(void) { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() {  bzopen_or_bzdopen; }
(93.8 %, 12622 bytes)
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen( { return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen( {  bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(   bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen( { return ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(  return ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen( {  ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen(   ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()  return bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()   bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()  return ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()   ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()  return bzopen_or_bzdopen }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()   bzopen_or_bzdopen }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()  return  }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen()    }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() {  bzopen_or_bzdopen; }
1217c1217
<  *BZ_APIBZ2_bzdopen() { return bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() {  ; }
(93.8 %, 12616 bytes)
1217c1217
<  *BZ_APIBZ2_bzdopen() {  bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() {  ; }
1217c1217
<  *BZ_APIBZ2_bzdopen() {  bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() {   }
1217c1217
<  *BZ_APIBZ2_bzdopen() {  bzopen_or_bzdopen; }
---
>  *BZ_APIBZ2_bzdopen() {  ; 
(93.9 %, 12599 bytes)
1217c1217
<  *BZ_APIBZ2_bzdopen() {  ; }
---
>  *BZ_APIBZ2_bzdopen() {   }
1217c1217
<  *BZ_APIBZ2_bzdopen() {  ; }
---
>  *BZ_APIBZ2_bzdopen() {   
1217c1217
<  *BZ_APIBZ2_bzdopen() {  ; }
---
>  *BZ_APIBZ2_bzdopen() {   }
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread(void) {
(93.9 %, 12598 bytes)
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread(void) {
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
> int (void) {
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  (void) {
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
> int BZ_APIBZ2_bzreadvoid) {
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzreadvoid) {
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
> int void) {
1217c1217
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() {   
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  void) {
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread(void) {
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  (void) {
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzreadvoid) {
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  void) {
1219c1219
< int BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread() {
(93.9 %, 12595 bytes)
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  (void) {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  void) {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  () {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  ) {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  (void {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  void {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  ( {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>   {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzreadvoid) {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread) {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzreadvoid {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzreadvoid) 
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread) 
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzreadvoid 
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread 
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread() {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread( {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread() 
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread( 
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread() {
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread( {
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread( 
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread(void {
1219c1219
<  BZ_APIBZ2_bzread(void) {
---
>  BZ_APIBZ2_bzread(void 
(93.9 %, 12591 bytes)
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( {
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( 
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( {
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( 
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( {
1221c1221
<   int nread;
---
>   int ;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( 
1221c1221
<   int nread;
---
>   int ;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( {
1221c1221
<   int nread;
---
>    ;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread( 
1221c1221
<   int nread;
---
>    ;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>    nread;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>   int ;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>    ;
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>   int nread
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>    nread
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>   int 
1219c1219
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread() 
1221c1221
<   int nread;
---
>    
1221c1221
<   int nread;
---
>    nread;
1221c1221
<   int nread;
---
>    ;
1221c1221
<   int nread;
---
>    nread
1221c1221
<   int nread;
---
>    
1221,1222c1221,1222
<   int nread;
<   ;
---
>    nread;
>   
1221,1222c1221,1222
<   int nread;
<   ;
---
>    ;
>   
1221,1222c1221,1222
<   int nread;
<   ;
---
>    nread
>   
1221,1222c1221,1222
<   int nread;
<   ;
---
>    
>   
1221c1221
<   int nread;
---
>   int ;
1221c1221
<   int nread;
---
>   int 
1221,1222c1221,1222
<   int nread;
<   ;
---
>   int ;
>   
1221,1222c1221,1222
<   int nread;
<   ;
---
>   int 
>   
1221c1221
<   int nread;
---
>   int ;
1224c1224
<   return 0;
---
>    0;
1221c1221
<   int nread;
---
>   int 
1224c1224
<   return 0;
---
>    0;
1221,1222c1221,1222
<   int nread;
<   ;
---
>   int ;
>   
1224c1224
<   return 0;
---
>    0;
1221,1222c1221,1222
<   int nread;
<   ;
---
>   int 
>   
1224c1224
<   return 0;
---
>    0;
1221c1221
<   int nread;
---
>   int nread
1221,1222c1221,1222
<   int nread;
<   ;
---
>   int nread
>   
1221c1221
<   int nread;
---
>   int nread
1224c1224
<   return 0;
---
>    0;
(93.9 %, 12590 bytes)
1222c1222
<   ;
---
>   
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>    0;
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>   return ;
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>    ;
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>   return 0
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>    0
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>   return 
1222c1222
<   ;
---
>   
1224c1224
<   return 0;
---
>    
1224c1224
<   return 0;
---
>    0;
(93.9 %, 12582 bytes)
1224,1225c1224,1225
<    ;
<   nread = 0;
---
>    
>     0;
1224,1225c1224,1225
<    ;
<   nread = 0;
---
>    
>   nread = ;
1224,1225c1224,1225
<    ;
<   nread = 0;
---
>    
>    = ;
1224,1225c1224,1225
<    ;
<   nread = 0;
---
>    
>   nread  ;
1224,1225c1224,1225
<    ;
<   nread = 0;
---
>    
>     ;
1225c1225
<   nread = 0;
---
>    = 0;
1225c1225
<   nread = 0;
---
>     0;
(93.9 %, 12574 bytes)
1225,1226c1225,1226
<     ;
<   ;
---
>     
>   
1228c1228
<   { return nread; }
---
>     nread; }
1226c1226
<   ;
---
>   
1226c1226
<   ;
---
>   
1228c1228
<   { return nread; }
---
>    return nread; }
1226c1226
<   ;
---
>   
1228c1228
<   { return nread; }
---
>   {  nread; }
(93.9 %, 12573 bytes)
1228c1228
<   { return nread; }
---
>    return nread; }
1228c1228
<   { return nread; }
---
>     nread; }
1228c1228
<   { return nread; }
---
>    return ; }
1228c1228
<   { return nread; }
---
>     ; }
1228c1228
<   { return nread; }
---
>    return nread }
1228c1228
<   { return nread; }
---
>     nread }
1228c1228
<   { return nread; }
---
>    return  }
1228c1228
<   { return nread; }
---
>      }
1228c1228
<   { return nread; }
---
>   {  nread; }
1228c1228
<   { return nread; }
---
>   {  ; }
1228c1228
<   { return nread; }
---
>   {  nread }
1228c1228
<   { return nread; }
---
>   {   }
(93.9 %, 12567 bytes)
1228c1228
<   {  nread; }
---
>   {  ; }
1228c1228
<   {  nread; }
---
>   {   }
(93.9 %, 12562 bytes)
1228c1228
<   {  ; }
---
>   {   }
1228c1228
<   {  ; }
---
>   {   
1228,1229c1228,1229
<   {  ; }
<   { return -1; }
---
>   {   }
>    return -1; }
1228,1229c1228,1229
<   {  ; }
<   { return -1; }
---
>   {   
>    return -1; }
(93.9 %, 12561 bytes)
1228c1228
<   {   }
---
>   {   
1228,1229c1228,1229
<   {   }
<   { return -1; }
---
>   {   
>    return -1; }
1228,1229c1228,1229
<   {   }
<   { return -1; }
---
>   {   
>   {  -1; }
1228,1229c1228,1229
<   {   }
<   { return -1; }
---
>   {   
>     -1; }
(93.9 %, 12559 bytes)
1229c1229
<    return -1; }
---
>     1; }
1229c1229
<    return -1; }
---
>     -; }
1229c1229
<    return -1; }
---
>     ; }
(93.9 %, 12552 bytes)
1229c1229
<     1; }
---
>      }
1229c1229
<     1; }
---
>     ; 
1229c1229
<     1; }
---
>      
1229,1230c1229,1230
<     1; }
< }
---
>     ; }
> 
1229,1230c1229,1230
<     1; }
< }
---
>      }
> 
1229,1230c1229,1230
<     1; }
< }
---
>     ; 
> 
1229,1230c1229,1230
<     1; }
< }
---
>      
> 
1229c1229
<     1; }
---
>     1 }
1229c1229
<     1; }
---
>     1 
1229,1230c1229,1230
<     1; }
< }
---
>     1 }
> 
(93.9 %, 12550 bytes)
1229,1230c1229,1230
<      }
< }
---
>      
> 
1229c1229
<      }
---
>      
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite(void) {
1229,1230c1229
<      }
< }
---
>      
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
>  BZ_APIBZ2_bzwrite(void) {
1229c1229
<      }
---
>      
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
> int (void) {
1229,1230c1229
<      }
< }
---
>      
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
> int (void) {
1229c1229
<      }
---
>      
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  (void) {
1229,1230c1229
<      }
< }
---
>      
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
>  (void) {
1230c1230
< }
---
> 
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
>  BZ_APIBZ2_bzwrite(void) {
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
> int (void) {
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
>  (void) {
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
> int BZ_APIBZ2_bzwritevoid) {
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
>  BZ_APIBZ2_bzwritevoid) {
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
> int void) {
1230d1229
< }
1232c1231,1232
< int BZ_APIBZ2_bzwrite(void) {
---
> 
>  void) {
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite(void) {
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  (void) {
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwritevoid) {
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  void) {
1232c1232
< int BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite() {
(93.9 %, 12547 bytes)
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  (void) {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  void) {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  () {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  ) {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  (void {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  void {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  ( {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>   {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwritevoid) {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite) {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwritevoid {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwritevoid) 
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite) 
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwritevoid 
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite 
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite() {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite( {
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite() 
1232c1232
<  BZ_APIBZ2_bzwrite(void) {
---
>  BZ_APIBZ2_bzwrite( 
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite(void) {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() {
>    len = 0;
(93.9 %, 12543 bytes)
1232c1232
<  BZ_APIBZ2_bzwrite() {
---
>  BZ_APIBZ2_bzwrite( {
1232c1232
<  BZ_APIBZ2_bzwrite() {
---
>  BZ_APIBZ2_bzwrite( 
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite( {
>    len = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite( 
>    len = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite( {
>   int  = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite( 
>   int  = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite( {
>     = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite( 
>     = 0;
1232c1232
<  BZ_APIBZ2_bzwrite() {
---
>  BZ_APIBZ2_bzwrite() 
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>    len = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>   int  = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>     = 0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>   int len  0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>    len  0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>   int   0;
1232,1233c1232,1233
<  BZ_APIBZ2_bzwrite() {
<   int len = 0;
---
>  BZ_APIBZ2_bzwrite() 
>      0;
1233c1233
<   int len = 0;
---
>    len = 0;
1233c1233
<   int len = 0;
---
>     = 0;
1233c1233
<   int len = 0;
---
>    len  0;
1233c1233
<   int len = 0;
---
>      0;
1233c1233
<   int len = 0;
---
>    len = ;
1233c1233
<   int len = 0;
---
>     = ;
1233c1233
<   int len = 0;
---
>    len  ;
1233c1233
<   int len = 0;
---
>      ;
1233c1233
<   int len = 0;
---
>   int  = 0;
1233c1233
<   int len = 0;
---
>   int   0;
1233c1233
<   int len = 0;
---
>   int  = ;
1233c1233
<   int len = 0;
---
>   int   ;
1233c1233
<   int len = 0;
---
>   int  = 0
1233c1233
<   int len = 0;
---
>   int   0
1233c1233
<   int len = 0;
---
>   int  = 
1233c1233
<   int len = 0;
---
>   int   
1233c1233
<   int len = 0;
---
>   int len  0;
1233c1233
<   int len = 0;
---
>   int len  ;
1233c1233
<   int len = 0;
---
>   int len  0
1233c1233
<   int len = 0;
---
>   int len  
1233c1233
<   int len = 0;
---
>   int len  0;
1235c1235
<   int bzerr;
---
>    bzerr;
1233c1233
<   int len = 0;
---
>   int len  ;
1235c1235
<   int bzerr;
---
>    bzerr;
1233c1233
<   int len = 0;
---
>   int len  0
1235c1235
<   int bzerr;
---
>    bzerr;
1233c1233
<   int len = 0;
---
>   int len  
1235c1235
<   int bzerr;
---
>    bzerr;
1233c1233
<   int len = 0;
---
>   int len = ;
1233c1233
<   int len = 0;
---
>   int len = 
(93.9 %, 12541 bytes)
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>    bzerr;
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>   int ;
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>    ;
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>   int bzerr
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>    bzerr
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>   int 
1233c1233
<   int len  ;
---
>   int len  
1235c1235
<   int bzerr;
---
>    
1235c1235
<   int bzerr;
---
>    bzerr;
1235c1235
<   int bzerr;
---
>    ;
1235c1235
<   int bzerr;
---
>    bzerr
1235c1235
<   int bzerr;
---
>    
1235c1235
<   int bzerr;
---
>    bzerr;
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>    ;
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>    bzerr
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>    
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>   int ;
1235c1235
<   int bzerr;
---
>   int 
1235c1235
<   int bzerr;
---
>   int ;
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>   int 
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>   int ;
1238c1238
<   if (bzerr == BZ_OK) {
---
>    (bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int 
1238c1238
<   if (bzerr == BZ_OK) {
---
>    (bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int ;
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    (bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int 
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    (bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int bzerr
1235c1235
<   int bzerr;
---
>   int bzerr
1237c1237
<   ;
---
>   
1235c1235
<   int bzerr;
---
>   int bzerr
1238c1238
<   if (bzerr == BZ_OK) {
---
>    (bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int bzerr
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    (bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int bzerr
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int bzerr
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>   if bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int bzerr
1238c1238
<   if (bzerr == BZ_OK) {
---
>    bzerr == BZ_OK) {
1235c1235
<   int bzerr;
---
>   int bzerr
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    bzerr == BZ_OK) {
1237c1237
<   ;
---
>   
(93.9 %, 12540 bytes)
1237c1237
<   ;
---
>   
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    (bzerr == BZ_OK) {
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>   if bzerr == BZ_OK) {
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    bzerr == BZ_OK) {
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>   if ( == BZ_OK) {
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>    ( == BZ_OK) {
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>   if  == BZ_OK) {
1237,1238c1237,1238
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>     == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>    (bzerr == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>    bzerr == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>    ( == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>     == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>    (bzerr  BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>    bzerr  BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>    (  BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>      BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if bzerr == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if  == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if bzerr  BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if   BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if bzerr == ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if  == ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if bzerr  ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if   ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if ( == BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (  BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if ( == ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (  ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if ( == BZ_OK {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (  BZ_OK {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if ( ==  {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (   {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr  BZ_OK) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr  ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr  BZ_OK {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr   {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr  BZ_OK) 
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr  ) 
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr  BZ_OK 
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr   
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr == ) {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr ==  {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr == ) 
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr ==  
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == ) {
>      len;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr ==  {
>      len;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == ) 
>      len;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr ==  
>      len;
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr == BZ_OK {
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr == BZ_OK 
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK {
>      len;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK 
>      len;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK {
>     return ;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK 
>     return ;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK {
>      ;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK 
>      ;
1238c1238
<   if (bzerr == BZ_OK) {
---
>   if (bzerr == BZ_OK) 
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>      len;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>     return ;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>      ;
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>     return len
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>      len
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>     return 
1238,1239c1238,1239
<   if (bzerr == BZ_OK) {
<     return len;
---
>   if (bzerr == BZ_OK) 
>      
1239c1239
<     return len;
---
>      len;
1239c1239
<     return len;
---
>      ;
(93.9 %, 12534 bytes)
1239c1239
<      len;
---
>      ;
1239c1239
<      len;
---
>      
1239,1240c1239,1240
<      len;
<   } else {
---
>      ;
>    else {
(93.9 %, 12531 bytes)
1239c1239
<      ;
---
>      
1239,1240c1239,1240
<      ;
<   } else {
---
>      
>    else {
1239,1240c1239,1240
<      ;
<   } else {
---
>      
>   }  {
1239,1240c1239,1240
<      ;
<   } else {
---
>      
>     {
(93.9 %, 12530 bytes)
1240c1240
<   } else {
---
>    else {
1240c1240
<   } else {
---
>     {
1240c1240
<   } else {
---
>    else 
1240c1240
<   } else {
---
>     
1240,1241c1240,1241
<   } else {
<     return -1;
---
>    else {
>      -1;
1240,1241c1240,1241
<   } else {
<     return -1;
---
>     {
>      -1;
1240,1241c1240,1241
<   } else {
<     return -1;
---
>    else 
>      -1;
1240,1241c1240,1241
<   } else {
<     return -1;
---
>     
>      -1;
(93.9 %, 12524 bytes)
1241c1241
<     return -1;
---
>      ;
1241c1241
<     return -1;
---
>      -1
1241c1241
<     return -1;
---
>      1
1241c1241
<     return -1;
---
>      -
1241c1241
<     return -1;
---
>      
(93.9 %, 12516 bytes)
1241,1243c1241,1243
<      ;
<   }
< }
---
>      
>   
> 
1241c1241
<      ;
---
>      
1245c1245
< int BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush(void) { return 0; }
1241,1242c1241,1242
<      ;
<   }
---
>      
>   
1245c1245
< int BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush(void) { return 0; }
1241c1241
<      ;
---
>      
1243d1242
< }
1245c1244,1245
< int BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  BZ_APIBZ2_bzflush(void) { return 0; }
1241,1243c1241,1242
<      ;
<   }
< }
---
>      
>   
1245c1244,1245
< int BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  BZ_APIBZ2_bzflush(void) { return 0; }
1242c1242
<   }
---
>   
1242,1243c1242,1243
<   }
< }
---
>   
> 
(93.9 %, 12512 bytes)
1242c1242
<   }
---
>   
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflushvoid) { return 0; }
1242,1243c1242
<   }
< }
---
>   
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  BZ_APIBZ2_bzflushvoid) { return 0; }
1242c1242
<   }
---
>   
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  void) { return 0; }
1242,1243c1242
<   }
< }
---
>   
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  void) { return 0; }
1243c1243
< }
---
> 
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  (void) { return 0; }
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  BZ_APIBZ2_bzflushvoid) { return 0; }
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  void) { return 0; }
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  BZ_APIBZ2_bzflush() { return 0; }
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  () { return 0; }
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  BZ_APIBZ2_bzflush) { return 0; }
1243d1242
< }
1245c1244,1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
> 
>  ) { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  (void) { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  void) { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  () { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  ) { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  (void { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  void { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  ( { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>   { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflushvoid) { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush) { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflushvoid { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflushvoid)  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush)  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflushvoid  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush() { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush( { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush()  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush(  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush(void) { return 0; }
---
>  BZ_APIBZ2_bzflush() {  0; }
(93.9 %, 12508 bytes)
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush( { return 0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush(  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush( {  0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush(   0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush( { return ; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush(  return ; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush( {  ; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush(   ; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()  return 0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()   0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()  return ; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()   ; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()  return 0 }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()   0 }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()  return  }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush()    }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush() {  0; }
1245c1245
<  BZ_APIBZ2_bzflush() { return 0; }
---
>  BZ_APIBZ2_bzflush() {  ; }
(93.9 %, 12502 bytes)
1245c1245
<  BZ_APIBZ2_bzflush() {  0; }
---
>  BZ_APIBZ2_bzflush() {  ; }
1245c1245
<  BZ_APIBZ2_bzflush() {  0; }
---
>  BZ_APIBZ2_bzflush() {   }
(93.9 %, 12501 bytes)
1245c1245
<  BZ_APIBZ2_bzflush() {  ; }
---
>  BZ_APIBZ2_bzflush() {   }
1245c1245
<  BZ_APIBZ2_bzflush() {  ; }
---
>  BZ_APIBZ2_bzflush() {   
1245c1245
<  BZ_APIBZ2_bzflush() {  ; }
---
>  BZ_APIBZ2_bzflush() {   }
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose(void) {
(93.9 %, 12500 bytes)
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose(void) {
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
> void (void) {
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  (void) {
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
> void BZ_APIBZ2_bzclosevoid) {
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclosevoid) {
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
> void void) {
1245c1245
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() {   
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  void) {
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose(void) {
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  (void) {
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclosevoid) {
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  void) {
1247c1247
< void BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose() {
(93.9 %, 12496 bytes)
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  (void) {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  void) {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  () {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  ) {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  (void {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  void {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  ( {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>   {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclosevoid) {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose) {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclosevoid {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclosevoid) 
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose) 
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclosevoid 
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose 
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose() {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose( {
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose() 
1247c1247
<  BZ_APIBZ2_bzclose(void) {
---
>  BZ_APIBZ2_bzclose( 
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() {
>    *b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( {
>    *b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>    *b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose(void) {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( 
>    *b = 0;
(93.9 %, 12492 bytes)
1247c1247
<  BZ_APIBZ2_bzclose() {
---
>  BZ_APIBZ2_bzclose( {
1247c1247
<  BZ_APIBZ2_bzclose() {
---
>  BZ_APIBZ2_bzclose( 
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( {
>    *b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( 
>    *b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( {
>   BZFILE b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( 
>   BZFILE b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( {
>    b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose( 
>    b = 0;
1247c1247
<  BZ_APIBZ2_bzclose() {
---
>  BZ_APIBZ2_bzclose() 
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>    *b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>   BZFILE b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>    b = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>   BZFILE * = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>    * = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>   BZFILE  = 0;
1247,1248c1247,1248
<  BZ_APIBZ2_bzclose() {
<   BZFILE *b = 0;
---
>  BZ_APIBZ2_bzclose() 
>     = 0;
1248c1248
<   BZFILE *b = 0;
---
>    *b = 0;
1248c1248
<   BZFILE *b = 0;
---
>    b = 0;
1248c1248
<   BZFILE *b = 0;
---
>    * = 0;
1248c1248
<   BZFILE *b = 0;
---
>     = 0;
1248c1248
<   BZFILE *b = 0;
---
>    *b  0;
1248c1248
<   BZFILE *b = 0;
---
>    b  0;
1248c1248
<   BZFILE *b = 0;
---
>    *  0;
1248c1248
<   BZFILE *b = 0;
---
>      0;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE b  0;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE   0;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE b = ;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE  = ;
1248c1248
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(93.9 %, 12491 bytes)
1248c1248
<   BZFILE b = 0;
---
>   BZFILE  = 0;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE   0;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE  = ;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE   ;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE  = 0
1248c1248
<   BZFILE b = 0;
---
>   BZFILE   0
1248c1248
<   BZFILE b = 0;
---
>   BZFILE  = 
1248c1248
<   BZFILE b = 0;
---
>   BZFILE   
1248c1248
<   BZFILE b = 0;
---
>   BZFILE b  0;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE b  ;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE b  0
1248c1248
<   BZFILE b = 0;
---
>   BZFILE b  
1248,1249c1248,1249
<   BZFILE b = 0;
<   int bzerr;
---
>   BZFILE b  0;
>    bzerr;
1248,1249c1248,1249
<   BZFILE b = 0;
<   int bzerr;
---
>   BZFILE b  ;
>    bzerr;
1248,1249c1248,1249
<   BZFILE b = 0;
<   int bzerr;
---
>   BZFILE b  0
>    bzerr;
1248,1249c1248,1249
<   BZFILE b = 0;
<   int bzerr;
---
>   BZFILE b  
>    bzerr;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE b = ;
1248c1248
<   BZFILE b = 0;
---
>   BZFILE b = 
(93.9 %, 12489 bytes)
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>    bzerr;
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>   int ;
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>    ;
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>   int bzerr
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>    bzerr
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>   int 
1248,1249c1248,1249
<   BZFILE b  ;
<   int bzerr;
---
>   BZFILE b  
>    
1249c1249
<   int bzerr;
---
>    bzerr;
1249c1249
<   int bzerr;
---
>    ;
1249c1249
<   int bzerr;
---
>    bzerr
1249c1249
<   int bzerr;
---
>    
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    bzerr;
>    *fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    ;
>    *fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    bzerr
>    *fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>    
>    *fp = ((bzFile *)b)->handle;
1249c1249
<   int bzerr;
---
>   int ;
1249c1249
<   int bzerr;
---
>   int 
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int ;
>    *fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int 
>    *fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int ;
>   FILE fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int 
>   FILE fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int ;
>    fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int 
>    fp = ((bzFile *)b)->handle;
1249c1249
<   int bzerr;
---
>   int bzerr
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>    *fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>   FILE fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>    fp = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>   FILE * = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>    * = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>   FILE  = ((bzFile *)b)->handle;
1249,1250c1249,1250
<   int bzerr;
<   FILE *fp = ((bzFile *)b)->handle;
---
>   int bzerr
>     = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>    *fp = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>    fp = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>    * = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>     = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>    *fp  ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>    fp  ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>    *  ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>      ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE  = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp  ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE   ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp = (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE  = (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE fp  (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE   (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE * = bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *  bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  ((bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  (( *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  ( *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp  ( *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp   *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp =  *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = bzFile )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp =  )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile *b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( *b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (bzFile b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ( b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *)b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *))->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( ))->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( *)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = (( )->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile ))->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )b->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile b->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile )->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile ->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *b)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *b->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *b)handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *bhandle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *))->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *))handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *))->;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)->;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *));
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *);
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)bhandle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->handle
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)bhandle
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b->
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b);
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle;
1252c1252
<   if (b == NULL)
---
>    (b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b);
1252c1252
<   if (b == NULL)
---
>    (b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)handle
1252c1252
<   if (b == NULL)
---
>    (b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>    (b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)->;
1250c1250
<   FILE *fp = ((bzFile *)b)->handle;
---
>   FILE *fp = ((bzFile *)b)->
(93.9 %, 12481 bytes)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>    (b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>   if b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>    b == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>   if ( == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>    ( == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>   if  == NULL)
1250c1250
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ((bzFile *)b)
1252c1252
<   if (b == NULL)
---
>     == NULL)
1252c1252
<   if (b == NULL)
---
>    (b == NULL)
1252c1252
<   if (b == NULL)
---
>    b == NULL)
1252c1252
<   if (b == NULL)
---
>    ( == NULL)
1252c1252
<   if (b == NULL)
---
>     == NULL)
1252c1252
<   if (b == NULL)
---
>    (b  NULL)
1252c1252
<   if (b == NULL)
---
>    b  NULL)
1252c1252
<   if (b == NULL)
---
>    (  NULL)
1252c1252
<   if (b == NULL)
---
>      NULL)
1252c1252
<   if (b == NULL)
---
>   if b == NULL)
1252c1252
<   if (b == NULL)
---
>   if  == NULL)
1252c1252
<   if (b == NULL)
---
>   if b  NULL)
1252c1252
<   if (b == NULL)
---
>   if   NULL)
1252c1252
<   if (b == NULL)
---
>   if b == )
1252c1252
<   if (b == NULL)
---
>   if  == )
1252c1252
<   if (b == NULL)
---
>   if b  )
1252c1252
<   if (b == NULL)
---
>   if   )
1252c1252
<   if (b == NULL)
---
>   if ( == NULL)
1252c1252
<   if (b == NULL)
---
>   if (  NULL)
1252c1252
<   if (b == NULL)
---
>   if ( == )
1252c1252
<   if (b == NULL)
---
>   if (  )
1252c1252
<   if (b == NULL)
---
>   if ( == NULL
1252c1252
<   if (b == NULL)
---
>   if (  NULL
1252c1252
<   if (b == NULL)
---
>   if ( == 
1252c1252
<   if (b == NULL)
---
>   if (  
1252c1252
<   if (b == NULL)
---
>   if (b  NULL)
1252c1252
<   if (b == NULL)
---
>   if (b  )
(93.9 %, 12478 bytes)
1252c1252
<   if (  NULL)
---
>   if (  
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  )
>      (((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  
>      (((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  )
>     if ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  
>     if ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  )
>      ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  
>      ((bzFile *)b)->writing) {
1252c1252
<   if (  NULL)
---
>   if (  NULL
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>      (((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>     if ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>      ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>     if ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>      ((bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>     if (bzFile *)b)->writing) {
1252,1253c1252,1253
<   if (  NULL)
<     if (((bzFile *)b)->writing) {
---
>   if (  NULL
>      (bzFile *)b)->writing) {
1253c1253
<     if (((bzFile *)b)->writing) {
---
>      (((bzFile *)b)->writing) {
(93.9 %, 12470 bytes)
1253c1253
<      ((bzFile *)b)->writing) {
---
>       )b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (bzFile *)b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ( *)b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (bzFile )b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ( )b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (bzFile *b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ( *b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (bzFile b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ( b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( *)b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( )b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( *b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( *))->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( ))->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( *)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      (( )->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile )b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile ))->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile )->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile )b->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile b->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile )->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile ->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *b)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *b->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *b)writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *bwriting) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *))->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *))writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *))->) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)->) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *))) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b->writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)bwriting) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b->) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b->writing {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)bwriting {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b-> {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)writing) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)writing {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)writing) 
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)) 
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)writing 
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b) 
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)->) {
1253c1253
<      ((bzFile *)b)->writing) {
---
>      ((bzFile *)b)-> {
(93.9 %, 12461 bytes)
1253c1253
<      ((bzFile *)b)) {
---
>      ((bzFile *)b) 
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b) {
>       (&bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b) 
>       (&bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b) {
>       BZ2_bzWriteClose&bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b) 
>       BZ2_bzWriteClose&bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b) {
>       &bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b) 
>       &bzerr, b, 0, NULL, NULL);
1253c1253
<      ((bzFile *)b)) {
---
>      ((bzFile *)b)) 
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       (&bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       BZ2_bzWriteClose&bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       &bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       (bzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       BZ2_bzWriteClosebzerr, b, 0, NULL, NULL);
1253,1254c1253,1254
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>      ((bzFile *)b)) 
>       bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       (&bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       &bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       (bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       (&, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       &, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       (, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       , b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose&bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClosebzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose&, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose&bzerr b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClosebzerr b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose& b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(bzerr b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(&bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( b, 0, NULL, NULL);
(93.9 %, 12460 bytes)
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(, b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( b, 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(, , 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( , 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(, b 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( b 0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(,  0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(bzerr, b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(  0, NULL, NULL);
(93.9 %, 12454 bytes)
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(  0, NULL, NULL);
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( , , NULL, NULL);
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(  , NULL, NULL);
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( , 0 NULL, NULL);
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(  0 NULL, NULL);
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose( ,  NULL, NULL);
1254c1254
<       BZ2_bzWriteClose( b, 0, NULL, NULL);
---
>       BZ2_bzWriteClose(   NULL, NULL);
(93.9 %, 12452 bytes)
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(   NULL, NULL);
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(  , , NULL);
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(   , NULL);
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(  , NULL NULL);
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(   NULL NULL);
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(  ,  NULL);
1254c1254
<       BZ2_bzWriteClose(  0, NULL, NULL);
---
>       BZ2_bzWriteClose(    NULL);
(93.9 %, 12450 bytes)
1254c1254
<       BZ2_bzWriteClose(   NULL, NULL);
---
>       BZ2_bzWriteClose(    NULL);
1254c1254
<       BZ2_bzWriteClose(   NULL, NULL);
---
>       BZ2_bzWriteClose(   , );
1254c1254
<       BZ2_bzWriteClose(   NULL, NULL);
---
>       BZ2_bzWriteClose(    );
(93.9 %, 12445 bytes)
1254c1254
<       BZ2_bzWriteClose(    NULL);
---
>       BZ2_bzWriteClose(    ;
1254c1254
<       BZ2_bzWriteClose(    NULL);
---
>       BZ2_bzWriteClose(    )
1254c1254
<       BZ2_bzWriteClose(    NULL);
---
>       BZ2_bzWriteClose(    
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    );
>        (bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    ;
>        (bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    )
>        (bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    
>        (bzerr != BZ_OK) {
1254c1254
<       BZ2_bzWriteClose(    NULL);
---
>       BZ2_bzWriteClose(    NULL;
1254c1254
<       BZ2_bzWriteClose(    NULL);
---
>       BZ2_bzWriteClose(    NULL
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL;
>        (bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL
>        (bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL;
>       if bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL
>       if bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL;
>        bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL
>        bzerr != BZ_OK) {
1254c1254
<       BZ2_bzWriteClose(    NULL);
---
>       BZ2_bzWriteClose(    NULL)
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>        (bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>       if bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>        bzerr != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>       if ( != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>        ( != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>       if  != BZ_OK) {
1254,1255c1254,1255
<       BZ2_bzWriteClose(    NULL);
<       if (bzerr != BZ_OK) {
---
>       BZ2_bzWriteClose(    NULL)
>         != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>        (bzerr != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>        bzerr != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>        ( != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>         != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>        (bzerr  BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>        bzerr  BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>        (  BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>          BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if bzerr != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if  != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if bzerr  BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if   BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if bzerr != ) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if  != ) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if bzerr  ) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if   ) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if ( != BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if (  BZ_OK) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if ( != ) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if (  ) {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if ( != BZ_OK {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if (  BZ_OK {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if ( !=  {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if (   {
1255c1255
<       if (bzerr != BZ_OK) {
---
>       if (bzerr  BZ_OK) {
(93.9 %, 12438 bytes)
1255c1255
<       if (  BZ_OK) {
---
>       if (   {
1255c1255
<       if (  BZ_OK) {
---
>       if (  ) 
1255c1255
<       if (  BZ_OK) {
---
>       if (   
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  ) {
>         ;
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (   {
>         ;
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  ) 
>         ;
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (   
>         ;
1255c1255
<       if (  BZ_OK) {
---
>       if (  BZ_OK {
1255c1255
<       if (  BZ_OK) {
---
>       if (  BZ_OK 
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK {
>         ;
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK 
>         ;
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK {
>         BZ2_bzWriteClose
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK 
>         BZ2_bzWriteClose
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK {
>         
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK 
>         
1255c1255
<       if (  BZ_OK) {
---
>       if (  BZ_OK) 
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK) 
>         ;
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK) 
>         BZ2_bzWriteClose
1255,1256c1255,1256
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
---
>       if (  BZ_OK) 
>         
1255c1255
<       if (  BZ_OK) {
---
>       if (  BZ_OK) 
1257c1257
<       }
---
>       
1255,1257c1255,1257
<       if (  BZ_OK) {
<         BZ2_bzWriteClose;
<       }
---
>       if (  BZ_OK) 
>         ;
>       
(93.9 %, 12436 bytes)
1256c1256
<         BZ2_bzWriteClose;
---
>         ;
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>     }  if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>     }  if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         ;
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>       if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>       if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         BZ2_bzWriteClose
1256c1256
<         BZ2_bzWriteClose;
---
>         BZ2_bzWriteClose
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>      else if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         BZ2_bzWriteClose
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>     }  if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         BZ2_bzWriteClose
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>       if (fp != stdin && fp != stdout) {
1256c1256
<         BZ2_bzWriteClose;
---
>         BZ2_bzWriteClose
1258c1258
<     } else if (fp != stdin && fp != stdout) {
---
>     } else  (fp != stdin && fp != stdout) {
(93.9 %, 12416 bytes)
1256c1256
<         ;
---
>         
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if fp != stdin && fp != stdout) {
1256c1256
<         ;
---
>         
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>       if fp != stdin && fp != stdout) {
1256c1256
<         ;
---
>         
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   fp != stdin && fp != stdout) {
1256c1256
<         ;
---
>         
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>        fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>       if (fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>        (fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>       if fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>        fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>       if ( != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>        ( != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>       if  != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>         != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   (fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   ( != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }    != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   (fp  stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   fp  stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }   (  stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }     stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if fp != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if  != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if fp  stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if   stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if fp !=  && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if  !=  && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if fp   && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if    && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if ( != stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if (  stdin && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if ( !=  && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if (   && fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if ( != stdin  fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if (  stdin  fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if ( !=   fp != stdout) {
1258c1258
<     }  if (fp != stdin && fp != stdout) {
---
>     }  if (    fp != stdout) {
(93.9 %, 12412 bytes)
1258c1258
<     }  if (  stdin && fp != stdout) {
---
>     }  if (    fp != stdout) {
1258c1258
<     }  if (  stdin && fp != stdout) {
---
>     }  if (   &&  != stdout) {
1258c1258
<     }  if (  stdin && fp != stdout) {
---
>     }  if (     != stdout) {
1258c1258
<     }  if (  stdin && fp != stdout) {
---
>     }  if (   && fp  stdout) {
1258c1258
<     }  if (  stdin && fp != stdout) {
---
>     }  if (    fp  stdout) {
1258c1258
<     }  if (  stdin && fp != stdout) {
---
>     }  if (   &&   stdout) {
(93.9 %, 12405 bytes)
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (      stdout) {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (     != ) {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (      ) {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (     != stdout {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (      stdout {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (     !=  {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (       {
1258c1258
<     }  if (    fp != stdout) {
---
>     }  if (    fp  stdout) {
(93.9 %, 12401 bytes)
1258c1258
<     }  if (      stdout) {
---
>     }  if (       {
1258c1258
<     }  if (      stdout) {
---
>     }  if (      ) 
1258c1258
<     }  if (      stdout) {
---
>     }  if (       
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      ) {
>       ;
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (       {
>       ;
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      ) 
>       ;
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (       
>       ;
1258c1258
<     }  if (      stdout) {
---
>     }  if (      stdout {
1258c1258
<     }  if (      stdout) {
---
>     }  if (      stdout 
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout {
>       ;
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout 
>       ;
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout {
>       fclose
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout 
>       fclose
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout {
>       
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout 
>       
1258c1258
<     }  if (      stdout) {
---
>     }  if (      stdout) 
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout) 
>       ;
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout) 
>       fclose
1258,1259c1258,1259
<     }  if (      stdout) {
<       fclose;
---
>     }  if (      stdout) 
>       
1258c1258
<     }  if (      stdout) {
---
>     }  if (      stdout) 
1260c1260
<     }
---
>     
1258,1260c1258,1260
<     }  if (      stdout) {
<       fclose;
<     }
---
>     }  if (      stdout) 
>       ;
>     
(93.9 %, 12399 bytes)
1259c1259
<       fclose;
---
>       ;
1263c1263
< static char *bzerrorstrings_0 = "OK";
---
>  char *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       
1263c1263
< static char *bzerrorstrings_0 = "OK";
---
>  char *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       ;
1261d1260
< }
1263c1262,1263
< static char *bzerrorstrings_0 = "OK";
---
> 
>  char *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       
1261d1260
< }
1263c1262,1263
< static char *bzerrorstrings_0 = "OK";
---
> 
>  char *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       fclose
1259c1259
<       fclose;
---
>       fclose
1261c1261
< }
---
> 
1259c1259
<       fclose;
---
>       fclose
1263c1263
< static char *bzerrorstrings_0 = "OK";
---
>  char *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       fclose
1261d1260
< }
1263c1262,1263
< static char *bzerrorstrings_0 = "OK";
---
> 
>  char *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       fclose
1263c1263
< static char *bzerrorstrings_0 = "OK";
---
> static  *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       fclose
1261d1260
< }
1263c1262,1263
< static char *bzerrorstrings_0 = "OK";
---
> 
> static  *bzerrorstrings_0 = "OK";
1259c1259
<       fclose;
---
>       fclose
1263c1263
< static char *bzerrorstrings_0 = "OK";
---
>   *bzerrorstrings_0 = "OK";
(94.0 %, 12387 bytes)
1259c1259
<       ;
---
>       
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>  char bzerrorstrings_0 = "OK";
1259c1259
<       ;
---
>       
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>  char bzerrorstrings_0 = "OK";
1259c1259
<       ;
---
>       
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = "OK";
1259c1259
<       ;
---
>       
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>   bzerrorstrings_0 = "OK";
1261c1261
< }
---
> 
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>   *bzerrorstrings_0 = "OK";
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>  char bzerrorstrings_0 = "OK";
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>   bzerrorstrings_0 = "OK";
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>  char * = "OK";
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>   * = "OK";
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>  char  = "OK";
1261d1260
< }
1263c1262,1263
<  char *bzerrorstrings_0 = "OK";
---
> 
>    = "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   *bzerrorstrings_0 = "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   * = "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>    = "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   *bzerrorstrings_0  "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0  "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>   *  "OK";
1263c1263
<  char *bzerrorstrings_0 = "OK";
---
>     "OK";
(94.0 %, 12383 bytes)
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = "OK";
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>    = "OK";
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0  "OK";
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>     "OK";
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0 = ;
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>    = ;
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   bzerrorstrings_0  ;
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>     ;
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   * = "OK";
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   *  "OK";
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   * = ;
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   *  ;
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   * = "OK"
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   *  "OK"
1263c1263
<   *bzerrorstrings_0 = "OK";
---
>   * = 
(94.0 %, 12377 bytes)
1263c1263
<   bzerrorstrings_0  ;
---
>     ;
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   *BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>     
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   *BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>  char *BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  *BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   *BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>  char BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  BZ_APIBZ2_bzerror(void) {
1263c1263
<   bzerrorstrings_0  ;
---
>   bzerrorstrings_0  
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>  char *BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   *BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>  char BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>  char *(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   *(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>  char (void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
>   (void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  *BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  *(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  (void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  *BZ_APIBZ2_bzerrorvoid) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  BZ_APIBZ2_bzerrorvoid) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  *void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const  void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char BZ_APIBZ2_bzerror(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char (void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char BZ_APIBZ2_bzerrorvoid) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char BZ_APIBZ2_bzerror() {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char () {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char BZ_APIBZ2_bzerror) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char ) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *(void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *void) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *() {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *(void {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *void {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *( {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char * {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerrorvoid) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror) {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerrorvoid {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerrorvoid) 
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror) 
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerrorvoid 
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror 
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror() {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror( {
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror() 
1265c1265
< const char *BZ_APIBZ2_bzerror(void) {
---
> const char *BZ_APIBZ2_bzerror( 
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror(void) {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() {
>    *errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror(void) {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( {
>    *errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror(void) {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>    *errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror(void) {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( 
>    *errnum = 0;
(94.0 %, 12373 bytes)
1265c1265
< const char *BZ_APIBZ2_bzerror() {
---
> const char *BZ_APIBZ2_bzerror( {
1265c1265
< const char *BZ_APIBZ2_bzerror() {
---
> const char *BZ_APIBZ2_bzerror( 
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( {
>    *errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( 
>    *errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( {
>   int errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( 
>   int errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( {
>    errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror( 
>    errnum = 0;
1265c1265
< const char *BZ_APIBZ2_bzerror() {
---
> const char *BZ_APIBZ2_bzerror() 
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>    *errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>   int errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>    errnum = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>   int * = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>    * = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>   int  = 0;
1265,1266c1265,1266
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum = 0;
---
> const char *BZ_APIBZ2_bzerror() 
>     = 0;
1266c1266
<   int *errnum = 0;
---
>    *errnum = 0;
1266c1266
<   int *errnum = 0;
---
>    errnum = 0;
1266c1266
<   int *errnum = 0;
---
>    * = 0;
1266c1266
<   int *errnum = 0;
---
>     = 0;
1266c1266
<   int *errnum = 0;
---
>    *errnum  0;
1266c1266
<   int *errnum = 0;
---
>    errnum  0;
1266c1266
<   int *errnum = 0;
---
>    *  0;
1266c1266
<   int *errnum = 0;
---
>      0;
1266c1266
<   int *errnum = 0;
---
>   int errnum = 0;
1266c1266
<   int *errnum = 0;
---
>   int  = 0;
1266c1266
<   int *errnum = 0;
---
>   int errnum  0;
1266c1266
<   int *errnum = 0;
---
>   int   0;
1266c1266
<   int *errnum = 0;
---
>   int errnum = ;
1266c1266
<   int *errnum = 0;
---
>   int  = ;
1266c1266
<   int *errnum = 0;
---
>   int errnum  ;
1266c1266
<   int *errnum = 0;
---
>   int   ;
1266c1266
<   int *errnum = 0;
---
>   int * = 0;
1266c1266
<   int *errnum = 0;
---
>   int *  0;
1266c1266
<   int *errnum = 0;
---
>   int * = ;
1266c1266
<   int *errnum = 0;
---
>   int *  ;
1266c1266
<   int *errnum = 0;
---
>   int * = 0
1266c1266
<   int *errnum = 0;
---
>   int *  0
1266c1266
<   int *errnum = 0;
---
>   int * = 
1266c1266
<   int *errnum = 0;
---
>   int *  
1266c1266
<   int *errnum = 0;
---
>   int *errnum  0;
1266c1266
<   int *errnum = 0;
---
>   int *errnum  ;
1266c1266
<   int *errnum = 0;
---
>   int *errnum  0
1266c1266
<   int *errnum = 0;
---
>   int *errnum  
1266,1267c1266,1267
<   int *errnum = 0;
<   BZFILE *b = 0;
---
>   int *errnum  0;
>    *b = 0;
1266,1267c1266,1267
<   int *errnum = 0;
<   BZFILE *b = 0;
---
>   int *errnum  ;
>    *b = 0;
1266,1267c1266,1267
<   int *errnum = 0;
<   BZFILE *b = 0;
---
>   int *errnum  0
>    *b = 0;
1266,1267c1266,1267
<   int *errnum = 0;
<   BZFILE *b = 0;
---
>   int *errnum  
>    *b = 0;
(94.0 %, 12371 bytes)
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>    *b = 0;
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>   BZFILE b = 0;
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>    b = 0;
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>   BZFILE * = 0;
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>    * = 0;
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>   BZFILE  = 0;
1266,1267c1266,1267
<   int *errnum  ;
<   BZFILE *b = 0;
---
>   int *errnum  
>     = 0;
1267c1267
<   BZFILE *b = 0;
---
>    *b = 0;
1267c1267
<   BZFILE *b = 0;
---
>    b = 0;
1267c1267
<   BZFILE *b = 0;
---
>    * = 0;
1267c1267
<   BZFILE *b = 0;
---
>     = 0;
1267c1267
<   BZFILE *b = 0;
---
>    *b  0;
1267c1267
<   BZFILE *b = 0;
---
>    b  0;
1267c1267
<   BZFILE *b = 0;
---
>    *  0;
1267c1267
<   BZFILE *b = 0;
---
>      0;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE b = 0;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE  = 0;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE b  0;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE   0;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE b = ;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE  = ;
1267c1267
<   BZFILE *b = 0;
---
>   BZFILE b  ;
(94.0 %, 12370 bytes)
1267c1267
<   BZFILE b = 0;
---
>   BZFILE  = 0;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE   0;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE  = ;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE   ;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE  = 0
1267c1267
<   BZFILE b = 0;
---
>   BZFILE   0
1267c1267
<   BZFILE b = 0;
---
>   BZFILE  = 
1267c1267
<   BZFILE b = 0;
---
>   BZFILE   
1267c1267
<   BZFILE b = 0;
---
>   BZFILE b  0;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE b  ;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE b  0
1267c1267
<   BZFILE b = 0;
---
>   BZFILE b  
1267,1268c1267,1268
<   BZFILE b = 0;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  0;
>    err = ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b = 0;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  ;
>    err = ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b = 0;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  0
>    err = ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b = 0;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>    err = ((bzFile *)b)->lastErr;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE b = ;
1267c1267
<   BZFILE b = 0;
---
>   BZFILE b = 
(94.0 %, 12368 bytes)
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>    err = ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>   int  = ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>     = ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>   int err  ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>    err  ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>   int   ((bzFile *)b)->lastErr;
1267,1268c1267,1268
<   BZFILE b  ;
<   int err = ((bzFile *)b)->lastErr;
---
>   BZFILE b  
>      ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>    err = ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>     = ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>    err  ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>      ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>    err = (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>     = (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>    err  (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>      (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int   ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int   (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int   (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int  = bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int   bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  ((bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  (( *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  ( *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err  ( *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err   *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err =  *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = bzFile )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err =  )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile *b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( *b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (bzFile b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ( b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *)b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *))->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( ))->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( *)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = (( )->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile ))->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )b->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile b->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile )->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile ->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *b)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *b->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *b)lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *blastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *))->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *))lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *))->;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)->;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *));
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *);
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)blastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->lastErr
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)blastErr
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b->
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b);
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr;
1270c1270
<   err > 0;
---
>    > 0;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b);
1270c1270
<   err > 0;
---
>    > 0;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)lastErr
1270c1270
<   err > 0;
---
>    > 0;
1268c1268
<   int err = ((bzFile *)b)->lastErr;
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>    > 0;
(94.0 %, 12359 bytes)
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>    > 0;
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>   err  0;
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>     0;
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>   err > ;
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>    > ;
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>   err  ;
1268c1268
<   int err = ((bzFile *)b);
---
>   int err = ((bzFile *)b)
1270c1270
<   err > 0;
---
>     ;
(94.0 %, 12355 bytes)
1270c1270
<    > 0;
---
>     ;
1270c1270
<    > 0;
---
>     0
1270c1270
<    > 0;
---
>     
1270c1270
<    > 0;
---
>     0;
1272c1272
<   err = 0;
---
>    = 0;
1270c1270
<    > 0;
---
>     ;
1272c1272
<   err = 0;
---
>    = 0;
1270c1270
<    > 0;
---
>     0
1272c1272
<   err = 0;
---
>    = 0;
1270c1270
<    > 0;
---
>     
1272c1272
<   err = 0;
---
>    = 0;
1270c1270
<    > 0;
---
>    > ;
1270c1270
<    > 0;
---
>    > 
1270c1270
<    > 0;
---
>    > ;
1272c1272
<   err = 0;
---
>    = 0;
(94.0 %, 12353 bytes)
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>    = 0;
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>   err  0;
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>     0;
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>   err = ;
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>    = ;
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>   err  ;
1270c1270
<     ;
---
>     
1272c1272
<   err = 0;
---
>     ;
1272c1272
<   err = 0;
---
>    = 0;
1272c1272
<   err = 0;
---
>     0;
(94.0 %, 12347 bytes)
1272,1273c1272,1273
<     ;
<   *errnum = err;
---
>     
>     err;
1273c1273
<   *errnum = err;
---
>   errnum = err;
1273c1273
<   *errnum = err;
---
>    = err;
1273c1273
<   *errnum = err;
---
>   errnum  err;
1273c1273
<   *errnum = err;
---
>     err;
(94.0 %, 12346 bytes)
1273c1273
<   errnum = err;
---
>    = err;
1273c1273
<   errnum = err;
---
>     err;
1273c1273
<   errnum = err;
---
>    = ;
1273c1273
<   errnum = err;
---
>     ;
(94.0 %, 12339 bytes)
1273c1273
<     err;
---
>     
1273,1274c1273,1274
<     err;
<   return bzerrorstrings_0;
---
>     ;
>    bzerrorstrings_0;
1273,1274c1273,1274
<     err;
<   return bzerrorstrings_0;
---
>     
>    bzerrorstrings_0;
(94.0 %, 12335 bytes)
1274c1274
<   return bzerrorstrings_0;
---
>    ;
1274c1274
<   return bzerrorstrings_0;
---
>    bzerrorstrings_0
1274c1274
<   return bzerrorstrings_0;
---
>    
(94.0 %, 12313 bytes)
1274,1275c1274,1275
<    ;
< }
---
>    
> 
1274c1274
<    ;
---
>    
1277c1277
< #define BZ_UNIX 1
---
> define BZ_UNIX 1
1274,1275c1274
<    ;
< }
---
>    
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> define BZ_UNIX 1
1274c1274
<    ;
---
>    
1277c1277
< #define BZ_UNIX 1
---
> # BZ_UNIX 1
1274,1275c1274
<    ;
< }
---
>    
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> # BZ_UNIX 1
1274c1274
<    ;
---
>    
1277c1277
< #define BZ_UNIX 1
---
>  BZ_UNIX 1
1274,1275c1274
<    ;
< }
---
>    
1277c1276,1277
< #define BZ_UNIX 1
---
> 
>  BZ_UNIX 1
1275c1275
< }
---
> 
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> define BZ_UNIX 1
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> # BZ_UNIX 1
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
>  BZ_UNIX 1
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> #define  1
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> define  1
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
> #  1
1275d1274
< }
1277c1276,1277
< #define BZ_UNIX 1
---
> 
>   1
1277c1277
< #define BZ_UNIX 1
---
> define BZ_UNIX 1
1277c1277
< #define BZ_UNIX 1
---
>  BZ_UNIX 1
1277c1277
< #define BZ_UNIX 1
---
> define  1
1277c1277
< #define BZ_UNIX 1
---
>   1
1277c1277
< #define BZ_UNIX 1
---
> define BZ_UNIX 
1277c1277
< #define BZ_UNIX 1
---
>  BZ_UNIX 
1277c1277
< #define BZ_UNIX 1
---
> define  
1277c1277
< #define BZ_UNIX 1
---
>   
1277c1277
< #define BZ_UNIX 1
---
> # BZ_UNIX 1
1277c1277
< #define BZ_UNIX 1
---
> #  1
(94.0 %, 12298 bytes)
1279c1279
< #define BZ_LCCWIN32 0
---
>   
1279c1279
< #define BZ_LCCWIN32 0
---
> # BZ_LCCWIN32 0
1279c1279
< #define BZ_LCCWIN32 0
---
> #  0
(94.0 %, 12279 bytes)
1281c1281
< #include <signal.h>
---
>  .h>
1281c1281
< #include <signal.h>
---
> # <signal.h>
1281c1281
< #include <signal.h>
---
> # signal.h>
1281c1281
< #include <signal.h>
---
> # <.h>
1281c1281
< #include <signal.h>
---
> # .h>
1281c1281
< #include <signal.h>
---
> # <signalh>
1281c1281
< #include <signal.h>
---
> # signalh>
1281c1281
< #include <signal.h>
---
> # <h>
1281c1281
< #include <signal.h>
---
> # h>
1281c1281
< #include <signal.h>
---
> #include signal.h>
1281c1281
< #include <signal.h>
---
> #include .h>
1281c1281
< #include <signal.h>
---
> #include signalh>
1281c1281
< #include <signal.h>
---
> #include h>
1281c1281
< #include <signal.h>
---
> #include signal.>
1281c1281
< #include <signal.h>
---
> #include .>
1281c1281
< #include <signal.h>
---
> #include signal>
1281c1281
< #include <signal.h>
---
> #include >
1281c1281
< #include <signal.h>
---
> #include <.h>
1281c1281
< #include <signal.h>
---
> #include <h>
1281c1281
< #include <signal.h>
---
> #include <.>
1281c1281
< #include <signal.h>
---
> #include <>
1281c1281
< #include <signal.h>
---
> #include <.h
1281c1281
< #include <signal.h>
---
> #include <h
1281c1281
< #include <signal.h>
---
> #include <.
1281c1281
< #include <signal.h>
---
> #include <
1281c1281
< #include <signal.h>
---
> #include <signalh>
1281c1281
< #include <signal.h>
---
> #include <signal>
1281c1281
< #include <signal.h>
---
> #include <signalh
1281c1281
< #include <signal.h>
---
> #include <signal
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signalh>
> include <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal>
> include <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signalh
> include <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal
> include <errno.h>
1281c1281
< #include <signal.h>
---
> #include <signal.>
1281c1281
< #include <signal.h>
---
> #include <signal.
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
> include <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
> include <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
> # <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
> # <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.>
>  <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.
>  <errno.h>
1281c1281
< #include <signal.h>
---
> #include <signal.h
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> include <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> # <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
>  <errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> #include errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> include errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
> # errno.h>
1281,1282c1281,1282
< #include <signal.h>
< #include <errno.h>
---
> #include <signal.h
>  errno.h>
1282c1282
< #include <errno.h>
---
> include <errno.h>
1282c1282
< #include <errno.h>
---
>  <errno.h>
1282c1282
< #include <errno.h>
---
> include errno.h>
1282c1282
< #include <errno.h>
---
>  errno.h>
1282c1282
< #include <errno.h>
---
> include <.h>
1282c1282
< #include <errno.h>
---
>  <.h>
1282c1282
< #include <errno.h>
---
> include .h>
1282c1282
< #include <errno.h>
---
>  .h>
1282c1282
< #include <errno.h>
---
> # <errno.h>
1282c1282
< #include <errno.h>
---
> # errno.h>
1282c1282
< #include <errno.h>
---
> # <.h>
1282c1282
< #include <errno.h>
---
> # .h>
1282c1282
< #include <errno.h>
---
> # <errnoh>
1282c1282
< #include <errno.h>
---
> # errnoh>
1282c1282
< #include <errno.h>
---
> # <h>
1282c1282
< #include <errno.h>
---
> # h>
1282c1282
< #include <errno.h>
---
> #include errno.h>
1282c1282
< #include <errno.h>
---
> #include .h>
1282c1282
< #include <errno.h>
---
> #include errnoh>
1282c1282
< #include <errno.h>
---
> #include h>
1282c1282
< #include <errno.h>
---
> #include errno.>
1282c1282
< #include <errno.h>
---
> #include .>
1282c1282
< #include <errno.h>
---
> #include errno>
1282c1282
< #include <errno.h>
---
> #include >
1282c1282
< #include <errno.h>
---
> #include <.h>
1282c1282
< #include <errno.h>
---
> #include <h>
1282c1282
< #include <errno.h>
---
> #include <.>
1282c1282
< #include <errno.h>
---
> #include <>
1282c1282
< #include <errno.h>
---
> #include <.h
1282c1282
< #include <errno.h>
---
> #include <h
1282c1282
< #include <errno.h>
---
> #include <.
1282c1282
< #include <errno.h>
---
> #include <
1282c1282
< #include <errno.h>
---
> #include <errnoh>
1282c1282
< #include <errno.h>
---
> #include <errno>
1282c1282
< #include <errno.h>
---
> #include <errnoh
1282c1282
< #include <errno.h>
---
> #include <errno
1282c1282
< #include <errno.h>
---
> #include <errnoh>
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno>
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errnoh
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.>
1282c1282
< #include <errno.h>
---
> #include <errno.
1282c1282
< #include <errno.h>
---
> #include <errno.>
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.>
1284c1284
< #define ERROR_IF_EOFi
---
> # ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.
1284c1284
< #define ERROR_IF_EOFi
---
> # ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.>
1284c1284
< #define ERROR_IF_EOFi
---
>  ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.
1284c1284
< #define ERROR_IF_EOFi
---
>  ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.h
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
> # ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
>  ERROR_IF_EOFi
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
> #define 
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
> define 
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
> # 
1282c1282
< #include <errno.h>
---
> #include <errno.h
1284c1284
< #define ERROR_IF_EOFi
---
>  
1284c1284
< #define ERROR_IF_EOFi
---
> define ERROR_IF_EOFi
1284c1284
< #define ERROR_IF_EOFi
---
>  ERROR_IF_EOFi
1284c1284
< #define ERROR_IF_EOFi
---
> define 
1284c1284
< #define ERROR_IF_EOFi
---
>  
1284,1285c1284,1285
< #define ERROR_IF_EOFi
< #define ERROR_IF_NOT_ZEROi
---
> define ERROR_IF_EOFi
> define ERROR_IF_NOT_ZEROi
1284,1285c1284,1285
< #define ERROR_IF_EOFi
< #define ERROR_IF_NOT_ZEROi
---
>  ERROR_IF_EOFi
> define ERROR_IF_NOT_ZEROi
1284,1285c1284,1285
< #define ERROR_IF_EOFi
< #define ERROR_IF_NOT_ZEROi
---
> define 
> define ERROR_IF_NOT_ZEROi
1284,1285c1284,1285
< #define ERROR_IF_EOFi
< #define ERROR_IF_NOT_ZEROi
---
>  
> define ERROR_IF_NOT_ZEROi
1284c1284
< #define ERROR_IF_EOFi
---
> # ERROR_IF_EOFi
1284c1284
< #define ERROR_IF_EOFi
---
> # 
(94.0 %, 12259 bytes)
1285c1285
< #define ERROR_IF_NOT_ZEROi
---
>  
1285,1286c1285,1286
< #define ERROR_IF_NOT_ZEROi
< #define ERROR_IF_MINUS_ONEi
---
> define ERROR_IF_NOT_ZEROi
> define ERROR_IF_MINUS_ONEi
1285,1286c1285,1286
< #define ERROR_IF_NOT_ZEROi
< #define ERROR_IF_MINUS_ONEi
---
>  ERROR_IF_NOT_ZEROi
> define ERROR_IF_MINUS_ONEi
1285,1286c1285,1286
< #define ERROR_IF_NOT_ZEROi
< #define ERROR_IF_MINUS_ONEi
---
> define 
> define ERROR_IF_MINUS_ONEi
1285,1286c1285,1286
< #define ERROR_IF_NOT_ZEROi
< #define ERROR_IF_MINUS_ONEi
---
>  
> define ERROR_IF_MINUS_ONEi
1285c1285
< #define ERROR_IF_NOT_ZEROi
---
> # ERROR_IF_NOT_ZEROi
1285c1285
< #define ERROR_IF_NOT_ZEROi
---
> # 
(94.0 %, 12234 bytes)
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
>  
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
> define ERROR_IF_MINUS_ONEi
1288c1288
< #include <fcntl.h>
---
> include <fcntl.h>
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
>  ERROR_IF_MINUS_ONEi
1288c1288
< #include <fcntl.h>
---
> include <fcntl.h>
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
> define 
1288c1288
< #include <fcntl.h>
---
> include <fcntl.h>
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
>  
1288c1288
< #include <fcntl.h>
---
> include <fcntl.h>
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
> # ERROR_IF_MINUS_ONEi
1286c1286
< #define ERROR_IF_MINUS_ONEi
---
> # 
(94.0 %, 12208 bytes)
1288c1288
< #include <fcntl.h>
---
>  fcntl.h>
1288c1288
< #include <fcntl.h>
---
> include <.h>
1288c1288
< #include <fcntl.h>
---
>  <.h>
1288c1288
< #include <fcntl.h>
---
> include .h>
1288c1288
< #include <fcntl.h>
---
>  .h>
1288c1288
< #include <fcntl.h>
---
> # <fcntl.h>
1288c1288
< #include <fcntl.h>
---
> # fcntl.h>
1288c1288
< #include <fcntl.h>
---
> # <.h>
1288c1288
< #include <fcntl.h>
---
> # .h>
1288c1288
< #include <fcntl.h>
---
> # <fcntlh>
1288c1288
< #include <fcntl.h>
---
> # fcntlh>
1288c1288
< #include <fcntl.h>
---
> # <h>
1288c1288
< #include <fcntl.h>
---
> # h>
1288c1288
< #include <fcntl.h>
---
> #include fcntl.h>
1288c1288
< #include <fcntl.h>
---
> #include .h>
1288c1288
< #include <fcntl.h>
---
> #include fcntlh>
1288c1288
< #include <fcntl.h>
---
> #include h>
1288c1288
< #include <fcntl.h>
---
> #include fcntl.>
1288c1288
< #include <fcntl.h>
---
> #include .>
1288c1288
< #include <fcntl.h>
---
> #include fcntl>
1288c1288
< #include <fcntl.h>
---
> #include >
1288c1288
< #include <fcntl.h>
---
> #include <.h>
1288c1288
< #include <fcntl.h>
---
> #include <h>
1288c1288
< #include <fcntl.h>
---
> #include <.>
1288c1288
< #include <fcntl.h>
---
> #include <>
1288c1288
< #include <fcntl.h>
---
> #include <.h
1288c1288
< #include <fcntl.h>
---
> #include <h
1288c1288
< #include <fcntl.h>
---
> #include <.
1288c1288
< #include <fcntl.h>
---
> #include <
1288c1288
< #include <fcntl.h>
---
> #include <fcntlh>
1288c1288
< #include <fcntl.h>
---
> #include <fcntl>
1288c1288
< #include <fcntl.h>
---
> #include <fcntlh
1288c1288
< #include <fcntl.h>
---
> #include <fcntl
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntlh>
> include <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl>
> include <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntlh
> include <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl
> include <utime.h>
1288c1288
< #include <fcntl.h>
---
> #include <fcntl.>
1288c1288
< #include <fcntl.h>
---
> #include <fcntl.
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.>
> include <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.
> include <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.>
> # <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.
> # <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.>
>  <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.
>  <utime.h>
1288c1288
< #include <fcntl.h>
---
> #include <fcntl.h
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
> include <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
> # <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
>  <utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
> #include utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
> include utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
> # utime.h>
1288,1289c1288,1289
< #include <fcntl.h>
< #include <utime.h>
---
> #include <fcntl.h
>  utime.h>
1289c1289
< #include <utime.h>
---
> include <utime.h>
1289c1289
< #include <utime.h>
---
>  <utime.h>
1289c1289
< #include <utime.h>
---
> include utime.h>
1289c1289
< #include <utime.h>
---
>  utime.h>
1289c1289
< #include <utime.h>
---
> include <.h>
1289c1289
< #include <utime.h>
---
>  <.h>
1289c1289
< #include <utime.h>
---
> include .h>
1289c1289
< #include <utime.h>
---
>  .h>
1289c1289
< #include <utime.h>
---
> # <utime.h>
1289c1289
< #include <utime.h>
---
> # utime.h>
1289c1289
< #include <utime.h>
---
> # <.h>
1289c1289
< #include <utime.h>
---
> # .h>
1289c1289
< #include <utime.h>
---
> # <utimeh>
1289c1289
< #include <utime.h>
---
> # utimeh>
1289c1289
< #include <utime.h>
---
> # <h>
1289c1289
< #include <utime.h>
---
> # h>
1289c1289
< #include <utime.h>
---
> #include utime.h>
1289c1289
< #include <utime.h>
---
> #include .h>
1289c1289
< #include <utime.h>
---
> #include utimeh>
1289c1289
< #include <utime.h>
---
> #include h>
1289c1289
< #include <utime.h>
---
> #include utime.>
1289c1289
< #include <utime.h>
---
> #include .>
1289c1289
< #include <utime.h>
---
> #include utime>
1289c1289
< #include <utime.h>
---
> #include >
1289c1289
< #include <utime.h>
---
> #include <.h>
1289c1289
< #include <utime.h>
---
> #include <h>
1289c1289
< #include <utime.h>
---
> #include <.>
1289c1289
< #include <utime.h>
---
> #include <>
1289c1289
< #include <utime.h>
---
> #include <.h
1289c1289
< #include <utime.h>
---
> #include <h
1289c1289
< #include <utime.h>
---
> #include <.
1289c1289
< #include <utime.h>
---
> #include <
1289c1289
< #include <utime.h>
---
> #include <utimeh>
1289c1289
< #include <utime.h>
---
> #include <utime>
1289c1289
< #include <utime.h>
---
> #include <utimeh
1289c1289
< #include <utime.h>
---
> #include <utime
1289c1289
< #include <utime.h>
---
> #include <utimeh>
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime>
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utimeh
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.>
1289c1289
< #include <utime.h>
---
> #include <utime.
1289c1289
< #include <utime.h>
---
> #include <utime.>
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.>
1291c1291
< #define PATH_SEP '/'
---
> # PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.
1291c1291
< #define PATH_SEP '/'
---
> # PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.>
1291c1291
< #define PATH_SEP '/'
---
>  PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.
1291c1291
< #define PATH_SEP '/'
---
>  PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
> # PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
>  PATH_SEP '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
> #define  '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
> define  '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
> #  '/'
1289c1289
< #include <utime.h>
---
> #include <utime.h
1291c1291
< #define PATH_SEP '/'
---
>   '/'
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP '/'
1291c1291
< #define PATH_SEP '/'
---
>  PATH_SEP '/'
1291c1291
< #define PATH_SEP '/'
---
> define  '/'
1291c1291
< #define PATH_SEP '/'
---
>   '/'
1291c1291
< #define PATH_SEP '/'
---
> define PATH_SEP 
1291c1291
< #define PATH_SEP '/'
---
>  PATH_SEP 
1291c1291
< #define PATH_SEP '/'
---
> define  
1291c1291
< #define PATH_SEP '/'
---
>   
1291c1291
< #define PATH_SEP '/'
---
> # PATH_SEP '/'
1291c1291
< #define PATH_SEP '/'
---
> #  '/'
1291c1291
< #define PATH_SEP '/'
---
> # PATH_SEP 
1291c1291
< #define PATH_SEP '/'
---
> #  
(94.1 %, 12190 bytes)
1292c1292
< #define MY_LSTAT lstat
---
>   
1292c1292
< #define MY_LSTAT lstat
---
> # MY_LSTAT lstat
1292c1292
< #define MY_LSTAT lstat
---
> #  lstat
1292c1292
< #define MY_LSTAT lstat
---
> # MY_LSTAT 
1292c1292
< #define MY_LSTAT lstat
---
> #  
(94.1 %, 12170 bytes)
1293c1293
< #define MY_STAT stat
---
>   
1293c1293
< #define MY_STAT stat
---
> # MY_STAT stat
1293c1293
< #define MY_STAT stat
---
> #  stat
1293c1293
< #define MY_STAT stat
---
> # MY_STAT 
1293c1293
< #define MY_STAT stat
---
> #  
(94.1 %, 12152 bytes)
1294c1294
< #define MY_S_ISREG S_ISREG
---
>   
1294c1294
< #define MY_S_ISREG S_ISREG
---
> # MY_S_ISREG S_ISREG
1294c1294
< #define MY_S_ISREG S_ISREG
---
> #  S_ISREG
1294c1294
< #define MY_S_ISREG S_ISREG
---
> # MY_S_ISREG 
1294c1294
< #define MY_S_ISREG S_ISREG
---
> #  
(94.1 %, 12128 bytes)
1295c1295
< #define MY_S_ISDIR S_ISDIR
---
>   
1295c1295
< #define MY_S_ISDIR S_ISDIR
---
> # MY_S_ISDIR S_ISDIR
1295c1295
< #define MY_S_ISDIR S_ISDIR
---
> #  S_ISDIR
1295c1295
< #define MY_S_ISDIR S_ISDIR
---
> # MY_S_ISDIR 
1295c1295
< #define MY_S_ISDIR S_ISDIR
---
> #  
(94.1 %, 12104 bytes)
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
>    name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> # APPEND_FILESPECroot , name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #  , name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> # APPEND_FILESPECroot  name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #   name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> # APPEND_FILESPECroot ,  root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #  ,  root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> # APPEND_FILESPECroot   root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #    root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #define  , name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #define   name root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #define  ,  root = snocStringroot, name
1297c1297
< #define APPEND_FILESPECroot , name root = snocStringroot, name
---
> #define    root = snocStringroot, name
(94.1 %, 12084 bytes)
1297c1297
< #define   name root = snocStringroot, name
---
> #define     = snocStringroot, name
1297c1297
< #define   name root = snocStringroot, name
---
> #define    root  snocStringroot, name
1297c1297
< #define   name root = snocStringroot, name
---
> #define      snocStringroot, name
(94.1 %, 12079 bytes)
1297c1297
< #define    root  snocStringroot, name
---
> #define      snocStringroot name
1297c1297
< #define    root  snocStringroot, name
---
> #define       name
(94.1 %, 12074 bytes)
1297c1297
< #define      snocStringroot name
---
> #define       name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define       
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define       name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define       
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define       name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>  APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define       
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>  APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>  APPEND_FLAGroot , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #define  , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define  , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #  , name root = snocStringroot, name
1297c1297
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>   , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define APPEND_FLAGroot , name root = snocStringroot, name
(94.1 %, 12070 bytes)
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define APPEND_FLAGroot , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>  APPEND_FLAGroot , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define  , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>   , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define APPEND_FLAGroot  name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>  APPEND_FLAGroot  name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> define   name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
>    name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #  , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot  name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #   name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot ,  root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #  ,  root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> # APPEND_FLAGroot   root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #    root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #define  , name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #define   name root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #define  ,  root = snocStringroot, name
1299c1299
< #define APPEND_FLAGroot , name root = snocStringroot, name
---
> #define    root = snocStringroot, name
(94.1 %, 12054 bytes)
1299c1299
< #define   name root = snocStringroot, name
---
> #define     = snocStringroot, name
1299c1299
< #define   name root = snocStringroot, name
---
> #define    root  snocStringroot, name
1299c1299
< #define   name root = snocStringroot, name
---
> #define      snocStringroot, name
(94.1 %, 12049 bytes)
1299c1299
< #define    root  snocStringroot, name
---
> #define      snocStringroot name
1299c1299
< #define    root  snocStringroot, name
---
> #define       name
1299c1299
< #define    root  snocStringroot, name
---
> #define      snocStringroot, 
(94.1 %, 12044 bytes)
1299c1299
< #define      snocStringroot name
---
> #define       name
1301c1301
< #define SET_BINARY_MODEd
---
> define SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define       
1301c1301
< #define SET_BINARY_MODEd
---
> define SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define       name
1301c1301
< #define SET_BINARY_MODEd
---
> # SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define       
1301c1301
< #define SET_BINARY_MODEd
---
> # SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define       name
1301c1301
< #define SET_BINARY_MODEd
---
>  SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define       
1301c1301
< #define SET_BINARY_MODEd
---
>  SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1301c1301
< #define SET_BINARY_MODEd
---
> define SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1301c1301
< #define SET_BINARY_MODEd
---
> # SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1301c1301
< #define SET_BINARY_MODEd
---
>  SET_BINARY_MODEd
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1301c1301
< #define SET_BINARY_MODEd
---
> #define 
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1301c1301
< #define SET_BINARY_MODEd
---
> define 
1299c1299
< #define      snocStringroot name
---
> #define      snocStringroot 
1301c1301
< #define SET_BINARY_MODEd
---
> # 
(94.1 %, 12040 bytes)
1301c1301
< #define SET_BINARY_MODEd
---
> define SET_BINARY_MODEd
1301c1301
< #define SET_BINARY_MODEd
---
>  SET_BINARY_MODEd
1301c1301
< #define SET_BINARY_MODEd
---
> define 
1301c1301
< #define SET_BINARY_MODEd
---
>  
1301c1301
< #define SET_BINARY_MODEd
---
> define SET_BINARY_MODEd
1303c1303
< #define NORETURN
---
> define NORETURN
1301c1301
< #define SET_BINARY_MODEd
---
>  SET_BINARY_MODEd
1303c1303
< #define NORETURN
---
> define NORETURN
1301c1301
< #define SET_BINARY_MODEd
---
> define 
1303c1303
< #define NORETURN
---
> define NORETURN
1301c1301
< #define SET_BINARY_MODEd
---
>  
1303c1303
< #define NORETURN
---
> define NORETURN
1301c1301
< #define SET_BINARY_MODEd
---
> # SET_BINARY_MODEd
1301c1301
< #define SET_BINARY_MODEd
---
> # 
(94.1 %, 12017 bytes)
1303c1303
< #define NORETURN
---
>  
1303c1303
< #define NORETURN
---
> define NORETURN
1305c1305
< #define True Bool1
---
> define True Bool1
1303c1303
< #define NORETURN
---
>  NORETURN
1305c1305
< #define True Bool1
---
> define True Bool1
1303c1303
< #define NORETURN
---
> define 
1305c1305
< #define True Bool1
---
> define True Bool1
1303c1303
< #define NORETURN
---
>  
1305c1305
< #define True Bool1
---
> define True Bool1
1303c1303
< #define NORETURN
---
> # NORETURN
1303c1303
< #define NORETURN
---
> # 
(94.1 %, 12002 bytes)
1305c1305
< #define True Bool1
---
>   Bool1
1305c1305
< #define True Bool1
---
> define True 
1305c1305
< #define True Bool1
---
>  True 
1305c1305
< #define True Bool1
---
> define  
1305c1305
< #define True Bool1
---
>   
1305c1305
< #define True Bool1
---
> # True Bool1
1305c1305
< #define True Bool1
---
> #  Bool1
1305c1305
< #define True Bool1
---
> # True 
1305c1305
< #define True Bool1
---
> #  
(94.2 %, 11986 bytes)
1306c1306
< #define False Bool0
---
>   
1306c1306
< #define False Bool0
---
> # False Bool0
1306c1306
< #define False Bool0
---
> #  Bool0
1306c1306
< #define False Bool0
---
> # False 
1306c1306
< #define False Bool0
---
> #  
(94.2 %, 11969 bytes)
1308c1308
< typedef int IntNative;
---
>   
1308c1308
< typedef int IntNative;
---
> typedef  IntNative;
1308c1308
< typedef int IntNative;
---
> typedef  ;
(94.2 %, 11949 bytes)
1310c1310
< #define SM_I2O 1
---
>   
1310c1310
< #define SM_I2O 1
---
> # SM_I2O 1
1310c1310
< #define SM_I2O 1
---
> #  1
(94.2 %, 11935 bytes)
1311c1311
< #define SM_F2O 2
---
>   
1311c1311
< #define SM_F2O 2
---
> # SM_F2O 2
1311c1311
< #define SM_F2O 2
---
> #  2
(94.2 %, 11921 bytes)
1312c1312
< #define SM_F2F 3
---
>   
1312c1312
< #define SM_F2F 3
---
> # SM_F2F 3
1312c1312
< #define SM_F2F 3
---
> #  3
(94.2 %, 11907 bytes)
1314c1314
< #define OM_Z 1
---
>   
1314c1314
< #define OM_Z 1
---
> # OM_Z 1
1314c1314
< #define OM_Z 1
---
> #  1
(94.2 %, 11895 bytes)
1315c1315
< #define OM_UNZ 2
---
>   
1315c1315
< #define OM_UNZ 2
---
> # OM_UNZ 2
1315c1315
< #define OM_UNZ 2
---
> #  2
(94.2 %, 11881 bytes)
1316c1316
< #define OM_TEST 3
---
>   
1316c1316
< #define OM_TEST 3
---
> # OM_TEST 3
1316c1316
< #define OM_TEST 3
---
> #  3
(94.2 %, 11866 bytes)
1318c1318
< #define FILE_NAME_LEN 4
---
>   
1318c1318
< #define FILE_NAME_LEN 4
---
> # FILE_NAME_LEN 4
1318c1318
< #define FILE_NAME_LEN 4
---
> #  4
(94.2 %, 11845 bytes)
1320c1320
< typedef struct UInt64;
---
>   
1320c1320
< typedef struct UInt64;
---
> typedef  UInt64;
(94.2 %, 11825 bytes)
1322c1322
< #define BZ_N_SUFFIX_PAIRS 4
---
>   
1322c1322
< #define BZ_N_SUFFIX_PAIRS 4
---
> # BZ_N_SUFFIX_PAIRS 4
1322c1322
< #define BZ_N_SUFFIX_PAIRS 4
---
> #  4
(94.2 %, 11800 bytes)
1324c1324
< typedef struct zzzz e;
---
>    ;
1324c1324
< typedef struct zzzz e;
---
> typedef  zzzz e;
1324c1324
< typedef struct zzzz e;
---
> typedef   e;
(94.3 %, 11782 bytes)
1324c1324
<    ;
---
>    
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
>   strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> define ISFLAGs strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
>  ISFLAGs strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> define  strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
>   strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> define ISFLAGs ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
>  ISFLAGs ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> define  ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
>   ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> # ISFLAGs strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #  strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> # ISFLAGs ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #  ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> # ISFLAGs strcmpaaname, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #  strcmpaaname, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> # ISFLAGs name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #  name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #define  strcmpaa->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #define  ->name, s == 0
1326c1326
< #define ISFLAGs strcmpaa->name, s == 0
---
> #define  strcmpaaname, s == 0
(94.3 %, 11775 bytes)
1326c1326
< #define  strcmpaa->name, s == 0
---
> #define  ->name, s == 0
1326c1326
< #define  strcmpaa->name, s == 0
---
> #define  name, s == 0
1326c1326
< #define  strcmpaa->name, s == 0
---
> #define  ->, s == 0
1326c1326
< #define  strcmpaa->name, s == 0
---
> #define  , s == 0
1326c1326
< #define  strcmpaa->name, s == 0
---
> #define  ->name s == 0
1326c1326
< #define  strcmpaa->name, s == 0
---
> #define  name s == 0
(94.3 %, 11765 bytes)
1326c1326
< #define  name, s == 0
---
> #define   s == 0
1326c1326
< #define  name, s == 0
---
> #define  ,  == 0
1326c1326
< #define  name, s == 0
---
> #define    == 0
1326c1326
< #define  name, s == 0
---
> #define  , s  0
1326c1326
< #define  name, s == 0
---
> #define   s  0
(94.3 %, 11760 bytes)
1326c1326
< #define   s == 0
---
> #define     0
1326c1326
< #define   s == 0
---
> #define    == 
1326c1326
< #define   s == 0
---
> #define     
1326c1326
< #define   s == 0
---
> #define    == 0
1326c1326
< #define   s == 0
---
> #define     0
1326c1326
< #define   s == 0
---
> #define    == 
1326c1326
< #define   s == 0
---
> #define     
1326c1326
< #define   s == 0
---
> #define   s  0
1326c1326
< #define   s == 0
---
> #define   s  
1326c1326
< #define   s == 0
---
> #define   s  0
(94.3 %, 11758 bytes)
1326c1326
< #define   s  0
---
> #define   s  
1326c1326
< #define   s  0
---
> #define   s  
1326c1326
< #define   s  0
---
> #define   s  
(94.3 %, 11757 bytes)
Termination check: size was 24784; now 11757
===< pass_balanced :: curly >===
1c1
< 
---
>  
24,40c24
< typedef struct {
<    ;
<    int avail_in;
<    int total_in_lo32;
<    int total_in_hi32
< 
<    
<     ;
<    int total_out_lo32;
<    int total_out_hi32;
< 
<   void *state;
< 
<   void *bzalloc;
<   void *bzfree;
<   void *opaque
< } bz_stream;
---
> typedef struct  bz_stream;
1326a1311
>  
\ No newline at end of file
1c1
< 
---
>  
208,263c208
< typedef struct {
< 
<    
< 
<    
<    
< 
<    ;
< 
<   UInt32 arr1;
<   UInt32 arr2;
<   UInt32 ftab
<    
< 
<    
<    
<    ;
<   UChar zbits
< 
<    
< 
<    
<    ;
<   
< 
<   Int32 nblock
<    
<    
<    ;
< 
<   Int32 nInUse;
<   Bool inUse[6];
<   UChar unseqToSeq[6]
< 
<    
<    
< 
<    
<    
< 
<    ;
<   Int32 blockNo
<    ;
< 
<   Int32 nMTF;
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar ;
<   UChar ;
< 
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
<    
<    
< 
<    
< 
< } EState
---
> typedef struct  EState
1326a1272
>  
\ No newline at end of file
1c1
< 
---
>  
317,395c317
< typedef struct {
< 
<    
< 
<    
< 
<    
<    
<    
<   
< 
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<   Int32 ;
<    ;
<   Int32 ;
<   Int32 ;
< 
<   UInt32 tt;
< 
<   UInt16 ll16;
<   UChar ll4
< 
<    
<    
<    
<    
< 
<    ;
<   Bool ;
<   Bool ;
<   UChar ;
< 
<   UChar ;
<   Int32 mtfbase[  MTFL_SIZE]
<    
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    ;
< 
< } DState;
---
> typedef struct  DState;
1326a1249
>  
\ No newline at end of file
1c1
< 
---
>  
466,480c466
< static  makeMaps_e() {
<   EState *s  ;
<   Int32 i
<     
<    = 0;
< 
<   for (;   ; ) {
<     s;
< 
<     {
<       s->unseqToSeq[i]  
<       ++;
<     }
<   }
< }
---
> static  makeMaps_e() 
1326a1313
>  
\ No newline at end of file
1c1
< 
---
>  
472,479c472
<   for (;   ; ) {
<     s;
< 
<     {
<       s->unseqToSeq[i]  
<       ++;
<     }
<   }
---
>   for (;   ; ) 
1326a1320
>  
\ No newline at end of file
1c1
< 
---
>  
475,478c475
<     {
<       s->unseqToSeq[i]  
<       ++;
<     }
---
>     
1326a1324
>  
\ No newline at end of file
1c1
< 
---
>  
482,558c482
<   generateMTFValues() {
<   EState *s  ;
< 
<   UChar yy_1;
<   UChar yy_0;
<   Int32 i, j;
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
< 
<   UInt32 ptr_0;
< 
<   UChar block_0;
< 
<   UInt16 mtfv_0
< 
<   
<    =   
< 
<   i  ;
< 
<   for (;   ; )
<     s->mtfFreq[i]  
< 
<     
<     
<     ;
< 
<   for (;   ; )
<       
< 
<     
< 
<   for (;   ; ) {
<     UChar ll_i
<     AssertD(  , )
<         
<       ;
< 
<       
<       s
<     AssertD( , )
< 
<       ;
< 
<     {  
<     
< 
<         
< 
<       {
<         register  rtmp;
<          UChar *ryy_j;
<          UChar rll_i
<           
<           
<           
<           ;
<          (  rtmp)
<           
<           
<             
<             ;
<         ;
<         s->mtfFreq[  1];
<       }
<     }
<   }
< 
<     
< 
<     
<   ;
<   s->mtfFreq;
< 
<     wr;
< }
---
>   generateMTFValues() 
1326a1251
>  
\ No newline at end of file
1c1
< 
---
>  
515,549c515
<   for (;   ; ) {
<     UChar ll_i
<     AssertD(  , )
<         
<       ;
< 
<       
<       s
<     AssertD( , )
< 
<       ;
< 
<     {  
<     
< 
<         
< 
<       {
<         register  rtmp;
<          UChar *ryy_j;
<          UChar rll_i
<           
<           
<           
<           ;
<          (  rtmp)
<           
<           
<             
<             ;
<         ;
<         s->mtfFreq[  1];
<       }
<     }
<   }
---
>   for (;   ; ) 
1326a1293
>  
\ No newline at end of file
(94.3 %, 11717 bytes)
479,555c479
<   generateMTFValues() {
<   EState *s  ;
< 
<   UChar yy_1;
<   UChar yy_0;
<   Int32 i, j;
<   Int32 zPend;
<   Int32 wr;
<   Int32 EOB;
< 
<   UInt32 ptr_0;
< 
<   UChar block_0;
< 
<   UInt16 mtfv_0
< 
<   
<    =   
< 
<   i  ;
< 
<   for (;   ; )
<     s->mtfFreq[i]  
< 
<     
<     
<     ;
< 
<   for (;   ; )
<       
< 
<     
< 
<   for (;   ; ) {
<     UChar ll_i
<     AssertD(  , )
<         
<       ;
< 
<       
<       s
<     AssertD( , )
< 
<       ;
< 
<     {  
<     
< 
<         
< 
<       {
<         register  rtmp;
<          UChar *ryy_j;
<          UChar rll_i
<           
<           
<           
<           ;
<          (  rtmp)
<           
<           
<             
<             ;
<         ;
<         s->mtfFreq[  1];
<       }
<     }
<   }
< 
<     
< 
<     
<   ;
<   s->mtfFreq;
< 
<     wr;
< }
---
>   generateMTFValues() 
512,546c512
<   for (;   ; ) {
<     UChar ll_i
<     AssertD(  , )
<         
<       ;
< 
<       
<       s
<     AssertD( , )
< 
<       ;
< 
<     {  
<     
< 
<         
< 
<       {
<         register  rtmp;
<          UChar *ryy_j;
<          UChar rll_i
<           
<           
<           
<           ;
<          (  rtmp)
<           
<           
<             
<             ;
<         ;
<         s->mtfFreq[  1];
<       }
<     }
<   }
---
>   for (;   ; ) 
524d523
<     {  
526,545d524
< 
<         
< 
<       {
<         register  rtmp;
<          UChar *ryy_j;
<          UChar rll_i
<           
<           
<           
<           ;
<          (  rtmp)
<           
<           
<             
<             ;
<         ;
<         s->mtfFreq[  1];
<       }
<     }
(94.5 %, 11358 bytes)
545,621c545
<     ) {
<   int workFactor  ;
<   int verbosity  ;
<   int blockSize100k  ;
<   bz_stream *strm  ;
<   Int32 n;
<   EState *s;
<   UInt32 s_8;
<   UInt16 s_10;
<   UChar s_9;
<   Int32 s_12;
<   Int32 s_28;
<   Int32 s_18;
<   Int32 s_30;
<   UInt32 s_27;
<   Int32 s_1;
<   Int32 s_2;
<   UInt32 s_6;
<   UInt32 s_5;
<   UInt32 s_4;
<   bz_stream *s_0
< 
<   
< 
<    ;
< 
<   if (           
<             0)
<      
< 
<     
< 
<     
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
< 
<     0;
<   if (  NULL)
<      
<     
< 
<   arr1  NULL;
<   arr2  NULL;
<   ftab  NULL
< 
<      * 
<     
<     0 * sizeof(UInt32)
<     ;
< 
<   if (          NULL)
< 
<       
<     
<     
<     
<     
<         
<     
<     
< 
<     
<     s_4
<     
<    = 
< 
<     s
<    = 
<     0;
<     0;
<     
<   
<   
<   return BZ_OK;
< }
---
>     ) 
625,644c625
< int BZ_APIBZ2_bzCompress() {
< 
<   bz_stream *strm  ;
< 
<   EState *s;
<   Int32 s_1;
<   bz_stream *s_0;
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
< 
<    
< 
< 
<    
<     return BZ_OK;
< }
---
> int BZ_APIBZ2_bzCompress() 
646,670c646
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream *strm  ;
<   EState *s;
<   bz_stream *s_0;
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
< 
<    ;
< 
<   if (arr1  NULL)
<     BZFREE(arr1);
<   if (arr2  NULL)
<     
<   if (ftab  NULL)
<     
<   
< 
<     ;
< 
<    
< }
---
>  BZ_APIBZ2_bzCompressEnd() 
674,727c674
<     ) {
<   int small  ;
<   int verbosity  ;
<   bz_stream *strm  ;
<   DState *s;
<   Int32 s_12;
<   Int32 s_11;
<   Bool s_10;
<   UInt32 s_26;
<   UInt32 s_7;
<   Int32 s_8;
<   Int32 s_1;
<   bz_stream *s_0
< 
<   
< 
<    ;
< 
<   if (  NULL)
<      
<         
< 
<    
<      
< 
<    ;
< 
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
< 
<     0;
<   if (  NULL)
<      
<     
<     
<     
<     
<     
<     0;
<     0;
<     0;
<     0;
<     
<     small
<    = 
<   ll16  NULL;
<   tt  NULL
<     
<     ;
< 
<    
< }
---
>     ) 
729,747c729
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream *strm  ;
<   DState *s;
<   bz_stream *s_0;
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
< 
<    ;
< 
<    
< 
<     
< 
<    ;
< }
---
>  BZ_APIBZ2_bzDecompress() 
749,773c749
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream *strm  ;
<   DState *s;
<   bz_stream *s_0;
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
< 
<    ;
< 
<   if (tt  NULL)
<     BZFREE(tt);
<   if (ll16  NULL)
<     
<   if (ll4  NULL)
<     
< 
<   
<     ;
< 
<    
< }
---
>  BZ_APIBZ2_bzDecompressEnd() 
777,785c777
< typedef struct {
<   FILE *handle;
<   Char buf;
<   Int32 bufN;
<   Bool writing;
<   bz_stream strm;
<   Int32 lastErr;
<   Bool initialisedOk
< } bzFile;
---
> typedef struct  bzFile;
788,825c788
<                               int verbosity, int workFactor) {
<   Int32 ret;
<   bzFile *bzf  ;
< 
<   BZ_SETERR(
< 
<                   
<               verbosity  )
<     ;
< 
<    
<     
< 
<     
<      
<     
< 
<   BZ_SETERR;
<     False;
<     0;
<     f
<    = 
<   bzf  
<     
<     
< 
<     
< 
<     
<    = (   workFactor)
<   
< 
<   ;
< 
<   bzf  
<     ;
<    
< }
---
>                               int verbosity, int workFactor) 
829,872c829
<     ) {
<   int len  ;
<   void *buf  ;
<   BZFILE b  
<     = 0;
<   Int32 ret;
<   bzFile *bzf  ;
<   char bzf_4_4;
<    int bzf_4_5;
<   char bzf_4_0;
<    int bzf_4_1;
<   Bool bzf_3
< 
<   ;
<    (          0)
<     
<   ;
< 
<   
<    
<     
< 
<     
< 
<   
< 
<     
<     
< 
<     {
<       
<       
<       
<     
< 
<     
< 
<     
< 
<       
< 
<     
<   }
< }
---
>     ) 
858,861d857
<     {
<       
<       
<       
863,871d858
< 
<     
< 
<     
< 
<       
< 
<     
<   }
883,928c883
<     ) {
<    int *nbytes_out_hi32  ;
<    int *nbytes_out_lo32  ;
<    int *nbytes_in_hi32  ;
<    int *nbytes_in_lo32  ;
<   int abandon  ;
<   BZFILE b  
<     = 0;
< 
<   bzFile *bzf  ;
<    bzf_3
< 
<    (  )
<     
<   
< 
<   
<    
<     ;
< 
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
< 
<   if (    
< 
<        
< 
<        nbytes_in_lo32  )
<           bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf
< 
<   
<   ;
<   
< }
---
>     ) 
931,976c931
<                              void *unused, int nUnused) {
<   bzFile *bzf  ;
<   char bzf_4_0;
<    int bzf_4_1;
<   Bool bzf_3;
<   Int32 bzf_2;
<   Bool bzf_6;
<   int ret;
< 
<   BZ_SETERR(
< 
<                       
<                      
<       nUnused  )
<     ;
< 
<    
<     
< 
<     
<      
<     
< 
<   
< 
<     False;
<     
<     
<     False;
<   bzf  
<     
<    = NULL;
< 
<   while (  0)
< 
<       BZ2_bzDecompressInit( verbosity )
<   
< 
<   
< 
<     ;
<     
< 
<     
<    ;
< }
---
>                              void *unused, int nUnused) 
978,997c978
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE b  ;
< 
<   bzFile *bzf  ;
<   Bool bzf_6;
<   Bool bzf_3
< 
<   ;
<    (  NULL)
<     
< 
<   
< 
<   
< 
<   
< 
<   
<   ;
< }
---
>  BZ_APIBZ2_bzReadClose() 
1001,1030c1001
<     ) {
<   int len  ;
<   void *buf  ;
<   BZFILE b  ;
< 
<   bzFile *bzf  ;
<   char bzf_4_4;
<    int bzf_4_5;
<   Bool bzf_3
< 
<   ;
< 
<    (          0)
<     
< 
<   
< 
<   
< 
<     
< 
<   
< 
<     
<     ;
< 
<    
< 
<     return 0;
< }
---
>     ) 
1034,1054c1034
<     ) {
<   int *nUnused  ;
<   void **unused  ;
<   BZFILE b  ;
< 
<   bzFile *bzf  ;
<   char bzf_4_0;
<     bzf_4_1
< 
<    (  )
<     
<   
< 
<   ;
<    (      NULL)
<     
< 
<   ;
<     
<     ;
< }
---
>     ) 
(94.5 %, 11301 bytes)
870,915c870
<     ) {
<    int *nbytes_out_hi32  ;
<    int *nbytes_out_lo32  ;
<    int *nbytes_in_hi32  ;
<    int *nbytes_in_lo32  ;
<   int abandon  ;
<   BZFILE b  
<     = 0;
< 
<   bzFile *bzf  ;
<    bzf_3
< 
<    (  )
<     
<   
< 
<   
<    
<     ;
< 
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
< 
<   if (    
< 
<        
< 
<        nbytes_in_lo32  )
<           bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf
< 
<   
<   ;
<   
< }
---
>     ) 
918,963c918
<                              void *unused, int nUnused) {
<   bzFile *bzf  ;
<   char bzf_4_0;
<    int bzf_4_1;
<   Bool bzf_3;
<   Int32 bzf_2;
<   Bool bzf_6;
<   int ret;
< 
<   BZ_SETERR(
< 
<                       
<                      
<       nUnused  )
<     ;
< 
<    
<     
< 
<     
<      
<     
< 
<   
< 
<     False;
<     
<     
<     False;
<   bzf  
<     
<    = NULL;
< 
<   while (  0)
< 
<       BZ2_bzDecompressInit( verbosity )
<   
< 
<   
< 
<     ;
<     
< 
<     
<    ;
< }
---
>                              void *unused, int nUnused) 
965,984c965
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE b  ;
< 
<   bzFile *bzf  ;
<   Bool bzf_6;
<   Bool bzf_3
< 
<   ;
<    (  NULL)
<     
< 
<   
< 
<   
< 
<   
< 
<   
<   ;
< }
---
>  BZ_APIBZ2_bzReadClose() 
988,1017c988
<     ) {
<   int len  ;
<   void *buf  ;
<   BZFILE b  ;
< 
<   bzFile *bzf  ;
<   char bzf_4_4;
<    int bzf_4_5;
<   Bool bzf_3
< 
<   ;
< 
<    (          0)
<     
< 
<   
< 
<   
< 
<     
< 
<   
< 
<     
<     ;
< 
<    
< 
<     return 0;
< }
---
>     ) 
1021,1041c1021
<     ) {
<   int *nUnused  ;
<   void **unused  ;
<   BZFILE b  ;
< 
<   bzFile *bzf  ;
<   char bzf_4_0;
<     bzf_4_1
< 
<    (  )
<     
<   
< 
<   ;
<    (      NULL)
<     
< 
<   ;
<     
<     ;
< }
---
>     ) 
1045,1100c1045
<     ) {
<   int workFactor  ;
<   int verbosity  ;
<   int blockSize100k  ;
<    int sourceLen  ;
<   char source  ;
<    int *destLen  ;
<   char dest  ;
<   bz_stream strm;
<    int strm_5;
<    int strm_1;
<   char strm_4;
<   char strm_0;
<   int ret;
< 
<   if (               
<                      
<         0)
<      
< 
<     
< 
<     
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     
<   
< 
<    
< 
<     
<     
<     ;
<     
< 
<     
<   
< 
<    
<   
< 
<    
< 
<     
<   
<   return 
< 
< 
<   0
<    
< 
< 
<   ;
<    
< }
---
>     ) 
1104,1158c1104
<     ) {
<   int verbosity  ;
<   int small  ;
<    int sourceLen  ;
<   char source  ;
<    int *destLen  ;
<   char dest  ;
<   bz_stream strm;
<    int strm_5;
<    int strm_1;
<   char strm_4;
<   char strm_0;
<   int ret;
< 
<   if (           
<                     4)
<      
< 
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     
<   
< 
<    
< 
<     
<     
<     ;
<     
< 
<     
<   
< 
<    
<   
< 
<    
< 
<     
<   
<   return 
< 
< 
<   strm_5  ;
< 
<   {
<     
<      
<   }
< 
< 
<   
<    
< }
---
>     ) 
1150,1153c1150
<   {
<     
<      
<   }
---
>   
1160c1160
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() 
1165c1165
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() 
1167c1167
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() 
1169,1180c1169
<  BZ_APIBZ2_bzread() {
< 
<   int nread
<   
< 
<    
<     ;
<   
< 
<   {   
<      }
< }
---
>  BZ_APIBZ2_bzread() 
1178,1179c1178
<   {   
<      }
---
>   
(94.5 %, 11285 bytes)
1157c1157
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion() 
1162c1162
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen() 
1164c1164
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen() 
1166,1177c1166
<  BZ_APIBZ2_bzread() {
< 
<   int nread
<   
< 
<    
<     ;
<   
< 
<   {   
<      }
< }
---
>  BZ_APIBZ2_bzread() 
1175,1176c1175
<   {   
<      }
---
>   
1179,1190c1179
<  BZ_APIBZ2_bzwrite() {
<   int len  ;
< 
<   int bzerr
< 
<   ;
<   if (bzerr == BZ_OK) {
<      
<     
<      
<   }
< }
---
>  BZ_APIBZ2_bzwrite() 
1185,1189c1185
<   if (bzerr == BZ_OK) {
<      
<     
<      
<   }
---
>   if (bzerr == BZ_OK) 
1192c1192
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() 
1194,1208c1194
<  BZ_APIBZ2_bzclose() {
<   BZFILE b  ;
<   int bzerr;
<   FILE *fp = ((bzFile *)b);
< 
<   if (  
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(    NULL);
<       if (  BZ_OK) 
<         ;
<       
<     }  if (      stdout) 
<       ;
<     
< }
---
>  BZ_APIBZ2_bzclose() 
1200,1205c1200
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(    NULL);
<       if (  BZ_OK) 
<         ;
<       
<     }  if (      stdout) 
---
>      ((bzFile *)b))   if (      stdout) 
(94.5 %, 11274 bytes)
1178,1189c1178
<  BZ_APIBZ2_bzwrite() {
<   int len  ;
< 
<   int bzerr
< 
<   ;
<   if (bzerr == BZ_OK) {
<      
<     
<      
<   }
< }
---
>  BZ_APIBZ2_bzwrite() 
1184,1188c1184
<   if (bzerr == BZ_OK) {
<      
<     
<      
<   }
---
>   if (bzerr == BZ_OK) 
1191c1191
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush() 
1193,1207c1193
<  BZ_APIBZ2_bzclose() {
<   BZFILE b  ;
<   int bzerr;
<   FILE *fp = ((bzFile *)b);
< 
<   if (  
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(    NULL);
<       if (  BZ_OK) 
<         ;
<       
<     }  if (      stdout) 
<       ;
<     
< }
---
>  BZ_APIBZ2_bzclose() 
1199,1204c1199
<      ((bzFile *)b)) {
<       BZ2_bzWriteClose(    NULL);
<       if (  BZ_OK) 
<         ;
<       
<     }  if (      stdout) 
---
>      ((bzFile *)b))   if (      stdout) 
1211,1221c1211
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum  ;
<   BZFILE b  ;
<   int err = ((bzFile *)b)
< 
<     
< 
<     ;
<     
<    ;
< }
---
> const char *BZ_APIBZ2_bzerror() 
(94.5 %, 11196 bytes)
1206,1216c1206
< const char *BZ_APIBZ2_bzerror() {
<   int *errnum  ;
<   BZFILE b  ;
<   int err = ((bzFile *)b)
< 
<     
< 
<     ;
<     
<    ;
< }
---
> const char *BZ_APIBZ2_bzerror() 
===< pass_balanced :: parens >===
63,64c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
<                                        int , void *, int );
---
>   *BZ_APIBZ2_bzReadOpen;
78,80c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
<                                         int , int ,
<                                         int );
---
> BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen;
90c90
<   (BZ2_bzWriteClose64)(     
---
>   (     
90,94c90
<   (BZ2_bzWriteClose64)(     
<                                             
<                                           unsigned  
<                                             
<                                            int );
---
>   (BZ2_bzWriteClose64);
104,106c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
< 
<     );
---
> BZ_EXTERN  *BZ_APIBZ2_bzopen;
108,110c108
<   *BZ_APIBZ2_bzdopen(
< 
<     );
---
>   *BZ_APIBZ2_bzdopen;
120,122c120
<  const char *BZ_APIBZ2_bzerror(
< 
<     );
---
>  const char *BZ_APIBZ2_bzerror;
145c145
< #define AssertD(cond, msg)
---
> #define AssertD
466c466
< static  makeMaps_e() {
---
> static  makeMaps_e {
472c472
<   for (;   ; ) {
---
>   for  {
479c479
<   generateMTFValues() {
---
>   generateMTFValues {
500c500
<   for (;   ; )
---
>   for 
(94.5 %, 11185 bytes)
466c466
< static  makeMaps_e() {
---
> static  makeMaps_e {
472c472
<   for (;   ; ) {
---
>   for  {
479c479
<   generateMTFValues() {
---
>   generateMTFValues {
500c500
<   for (;   ; )
---
>   for 
507c507
<   for (;   ; )
---
>   for 
512c512
<   for (;   ; ) 
---
>   for  
543,545c543
<  (
< 
<     ) {
---
>   {
571,572c571
<   if (           
<             0)
---
>   if 
578c578
<   if (bzalloc  NULL)
---
>   if 
580c580
<   if (bzfree  NULL)
---
>   if 
584c584
<   if (  NULL)
---
>   if 
594c594
<     0 * sizeof(UInt32)
---
>     0 * sizeof
597c597
<   if (          NULL)
---
>   if 
625c625
< int BZ_APIBZ2_bzCompress() {
---
> int BZ_APIBZ2_bzCompress {
632c632
<   if (  NULL)
---
>   if 
635c635
<   if (  NULL)
---
>   if 
646c646
<  BZ_APIBZ2_bzCompressEnd() {
---
>  BZ_APIBZ2_bzCompressEnd {
650c650
<   if (  NULL)
---
>   if 
653c653
<   if (  NULL)
---
>   if 
659c659
<   if (arr1  NULL)
---
>   if 
660c660
<     BZFREE(arr1);
---
>     BZFREE;
661c661
<   if (arr2  NULL)
---
>   if 
663c663
<   if (ftab  NULL)
---
>   if 
672,674c672
<  BZ_APIBZ2_bzDecompressInit(
< 
<     ) {
---
>  BZ_APIBZ2_bzDecompressInit {
692c692
<   if (  NULL)
---
>   if 
701c701
<   if (bzalloc  NULL)
---
>   if 
703c703
<   if (bzfree  NULL)
---
>   if 
707c707
<   if (  NULL)
---
>   if 
729c729
<  BZ_APIBZ2_bzDecompress() {
---
>  BZ_APIBZ2_bzDecompress {
733c733
<   if (  NULL)
---
>   if 
736c736
<   if (  NULL)
---
>   if 
749c749
<  BZ_APIBZ2_bzDecompressEnd() {
---
>  BZ_APIBZ2_bzDecompressEnd {
753c753
<   if (  NULL)
---
>   if 
756c756
<   if (  NULL)
---
>   if 
762c762
<   if (tt  NULL)
---
>   if 
763c763
<     BZFREE(tt);
---
>     BZFREE;
764c764
<   if (ll16  NULL)
---
>   if 
766c766
<   if (ll4  NULL)
---
>   if 
787,788c787
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *BZ_APIBZ2_bzWriteOpen {
792,795c792
<   BZ_SETERR(
< 
<                   
<               verbosity  )
---
>   BZ_SETERR
817c817
<    = (   workFactor)
---
>    = 
827,829c827
<  BZ_APIBZ2_bzWrite(
< 
<     ) {
---
>  BZ_APIBZ2_bzWrite {
843c843
<    (          0)
---
>    
861,863c861
<  BZ_APIBZ2_bzWriteClose(
< 
<     ) 
---
>  BZ_APIBZ2_bzWriteClose 
(94.5 %, 11172 bytes)
861,863c861
<  BZ_APIBZ2_bzWriteClose(
< 
<     ) 
---
>  BZ_APIBZ2_bzWriteClose 
868,870c868
<  BZ_APIBZ2_bzWriteClose64(
< 
<     ) {
---
>  BZ_APIBZ2_bzWriteClose64 {
882c882
<    (  )
---
>    
890c890
<   if (  NULL)
---
>   if 
892c892
<   if (  NULL)
---
>   if 
894c894
<   if (  NULL)
---
>   if 
896c896
<   if (  NULL)
---
>   if 
899,903c899
<   if (    
< 
<        
< 
<        nbytes_in_lo32  )
---
>   if 
905c905
<   if (  NULL)
---
>   if 
(94.6 %, 11164 bytes)
866,868c866
<  BZ_APIBZ2_bzWriteClose64(
< 
<     ) {
---
>  BZ_APIBZ2_bzWriteClose64 {
880c880
<    (  )
---
>    
888c888
<   if (  NULL)
---
>   if 
890c890
<   if (  NULL)
---
>   if 
892c892
<   if (  NULL)
---
>   if 
894c894
<   if (  NULL)
---
>   if 
897,901c897
<   if (    
< 
<        
< 
<        nbytes_in_lo32  )
---
>   if 
903c903
<   if (  NULL)
---
>   if 
905c905
<   if (  NULL)
---
>   if 
907c907
<   if (  NULL)
---
>   if 
915,916c915
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *BZ_APIBZ2_bzReadOpen {
925,929c925
<   BZ_SETERR(
< 
<                       
<                      
<       nUnused  )
---
>   BZ_SETERR
949c949
<   while (  0)
---
>   while 
951c951
<       BZ2_bzDecompressInit( verbosity )
---
>       BZ2_bzDecompressInit
963c963
<  BZ_APIBZ2_bzReadClose() {
---
>  BZ_APIBZ2_bzReadClose {
971c971
<    (  NULL)
---
>    
984,986c984
<  BZ_APIBZ2_bzRead(
< 
<     ) {
---
>  BZ_APIBZ2_bzRead {
998c998
<    (          0)
---
>    
(94.6 %, 11156 bytes)
984,986c984
<  BZ_APIBZ2_bzRead(
< 
<     ) {
---
>  BZ_APIBZ2_bzRead {
998c998
<    (          0)
---
>    
1017,1019c1017
<  BZ_APIBZ2_bzReadGetUnused(
< 
<     ) {
---
>  BZ_APIBZ2_bzReadGetUnused {
1028c1028
<    (  )
---
>    
1033c1033
<    (      NULL)
---
>    
(94.6 %, 11143 bytes)
1017,1019c1017
<  BZ_APIBZ2_bzReadGetUnused(
< 
<     ) {
---
>  BZ_APIBZ2_bzReadGetUnused {
1028c1028
<    (  )
---
>    
1033c1033
<    (      NULL)
---
>    
1041,1043c1041
<  BZ_APIBZ2_bzBuffToBuffCompress(
< 
<     ) {
---
>  BZ_APIBZ2_bzBuffToBuffCompress {
1058,1060c1058
<   if (               
<                      
<         0)
---
>   if 
1100,1102c1100
<  BZ_APIBZ2_bzBuffToBuffDecompress(
< 
<     ) {
---
>  BZ_APIBZ2_bzBuffToBuffDecompress {
1116,1117c1116
<   if (           
<                     4)
---
>   if 
1155c1155
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion {   }
1157,1158c1157
<   bzopen_or_bzdopen(       
<                                  int );
---
>   bzopen_or_bzdopen;
(94.6 %, 11131 bytes)
1041,1043c1041
<  BZ_APIBZ2_bzBuffToBuffCompress(
< 
<     ) {
---
>  BZ_APIBZ2_bzBuffToBuffCompress {
1058,1060c1058
<   if (               
<                      
<         0)
---
>   if 
1100,1102c1100
<  BZ_APIBZ2_bzBuffToBuffDecompress(
< 
<     ) {
---
>  BZ_APIBZ2_bzBuffToBuffDecompress {
1116,1117c1116
<   if (           
<                     4)
---
>   if 
1155c1155
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   BZ_APIBZ2_bzlibVersion {   }
1157,1158c1157
<   bzopen_or_bzdopen(       
<                                  int );
---
>   bzopen_or_bzdopen;
1160c1160
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen {   }
1162c1162
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen {   }
1164c1164
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread {
1176c1176
<  BZ_APIBZ2_bzwrite() {
---
>  BZ_APIBZ2_bzwrite {
1182c1182
<   if (bzerr == BZ_OK) {
---
>   if  {
1189c1189
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush {   }
1191c1191
<  BZ_APIBZ2_bzclose() {
---
>  BZ_APIBZ2_bzclose {
1194c1194
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ;
(94.6 %, 11084 bytes)
1159c1159
<  *BZ_APIBZ2_bzopen() {   }
---
>  *BZ_APIBZ2_bzopen {   }
1161c1161
<  *BZ_APIBZ2_bzdopen() {   }
---
>  *BZ_APIBZ2_bzdopen {   }
1163c1163
<  BZ_APIBZ2_bzread() {
---
>  BZ_APIBZ2_bzread {
1175c1175
<  BZ_APIBZ2_bzwrite() {
---
>  BZ_APIBZ2_bzwrite {
1181c1181
<   if (bzerr == BZ_OK) {
---
>   if  {
1188c1188
<  BZ_APIBZ2_bzflush() {   }
---
>  BZ_APIBZ2_bzflush {   }
1190c1190
<  BZ_APIBZ2_bzclose() {
---
>  BZ_APIBZ2_bzclose {
1193c1193
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = ;
1193c1193
<   FILE *fp = ((bzFile *)b);
---
>   FILE *fp = (b);
1195,1196c1195
<   if (  
<      ((bzFile *)b))   if (      stdout) 
---
>   if    if (      stdout) 
1196c1196
<      ((bzFile *)b))   if (      stdout) 
---
>      )   if (      stdout) 
1196c1196
<      ((bzFile *)b))   if (      stdout) 
---
>      (b))   if (      stdout) 
(94.6 %, 11074 bytes)
1195,1196c1195
<   if (  
<      ((bzFile *)b))   if (      stdout) 
---
>   if    if (      stdout) 
1196c1196
<      ((bzFile *)b))   if (      stdout) 
---
>      )   if (      stdout) 
1196c1196
<      ((bzFile *)b))   if (      stdout) 
---
>      (b))   if (      stdout) 
1196c1196
<      ((bzFile *)b))   if (      stdout) 
---
>      ((bzFile *)b))   if  
1203c1203
< const char *BZ_APIBZ2_bzerror() {
---
> const char *BZ_APIBZ2_bzerror {
1206c1206
<   int err = ((bzFile *)b)
---
>   int err = 
1206c1206
<   int err = ((bzFile *)b)
---
>   int err = (b)
(94.6 %, 11064 bytes)
1196c1196
<      (b))   if (      stdout) 
---
>      (b))   if  
1203c1203
< const char *BZ_APIBZ2_bzerror() {
---
> const char *BZ_APIBZ2_bzerror {
1206c1206
<   int err = ((bzFile *)b)
---
>   int err = 
1206c1206
<   int err = ((bzFile *)b)
---
>   int err = (b)
(94.6 %, 11054 bytes)
===< pass_clang :: param-to-global >===
===< pass_clang :: return-void >===
63c63
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
---
>   void BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
78c78
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
---
> BZ_EXTERN  void BZ_APIBZ2_bzWriteOpen(int *, FILE *,
104c104
< BZ_EXTERN  *BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  void BZ_APIBZ2_bzopen(
1159c1159
<  *BZ_APIBZ2_bzopen() {   }
---
>  void BZ_APIBZ2_bzopen() {   }
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   void BZ_APIBZ2_bzdopen(
1161c1161
<  *BZ_APIBZ2_bzdopen() {   }
---
>  void BZ_APIBZ2_bzdopen() {   }
(94.6 %, 11062 bytes)
108c108
<   *BZ_APIBZ2_bzdopen(
---
>   void BZ_APIBZ2_bzdopen(
1161c1161
<  *BZ_APIBZ2_bzdopen() {   }
---
>  void BZ_APIBZ2_bzdopen() {   }
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  void BZ_APIBZ2_bzerror(
1203c1203
< const char *BZ_APIBZ2_bzerror() {
---
> void BZ_APIBZ2_bzerror() {
(94.6 %, 11070 bytes)
120c120
<  const char *BZ_APIBZ2_bzerror(
---
>  void BZ_APIBZ2_bzerror(
1203c1203
< const char *BZ_APIBZ2_bzerror() {
---
> void BZ_APIBZ2_bzerror() {
466c466
< static  makeMaps_e() {
---
> void   makeMaps_e() {
(94.6 %, 11056 bytes)
466c466
< static  makeMaps_e() {
---
> void   makeMaps_e() {
(94.6 %, 11055 bytes)
===< pass_clang :: reduce-pointer-level >===
1021c1021
<   void **unused  ;
---
>   void *unused  ;
730c730
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
731c731
<   DState *s;
---
>   DState s;
(94.6 %, 11054 bytes)
871c871
<    int *nbytes_in_hi32  ;
---
>    int nbytes_in_hi32  ;
565c565
<   bz_stream *s_0
---
>   bz_stream s_0
(94.6 %, 11053 bytes)
677c677
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
629c629
<   EState *s;
---
>   EState s;
(94.6 %, 11052 bytes)
467c467
<   EState *s  ;
---
>   EState s  ;
473c473
<     s;
---
>     &s;
480c480
<   EState *s  ;
---
>   EState s  ;
501c501
<     s->mtfFreq[i]  
---
>     s.mtfFreq[i]  
518c518
<   s->mtfFreq;
---
>   s.mtfFreq;
(94.6 %, 11052 bytes)
480c480
<   EState *s  ;
---
>   EState s  ;
501c501
<     s->mtfFreq[i]  
---
>     s.mtfFreq[i]  
518c518
<   s->mtfFreq;
---
>   s.mtfFreq;
549c549
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
(94.6 %, 11049 bytes)
549c549
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
551c551
<   EState *s;
---
>   EState s;
565c565
<   bz_stream *s_0
---
>   bz_stream s_0
(94.6 %, 11048 bytes)
551c551
<   EState *s;
---
>   EState s;
565c565
<   bz_stream *s_0
---
>   bz_stream s_0
627c627
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
(94.6 %, 11047 bytes)
627c627
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
629c629
<   EState *s;
---
>   EState s;
(94.6 %, 11046 bytes)
629c629
<   EState *s;
---
>   EState s;
631c631
<   bz_stream *s_0;
---
>   bz_stream s_0;
(94.6 %, 11045 bytes)
631c631
<   bz_stream *s_0;
---
>   bz_stream s_0;
647c647
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
(94.6 %, 11044 bytes)
647c647
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
648c648
<   EState *s;
---
>   EState s;
(94.6 %, 11043 bytes)
648c648
<   EState *s;
---
>   EState s;
649c649
<   bz_stream *s_0;
---
>   bz_stream s_0;
(94.6 %, 11042 bytes)
649c649
<   bz_stream *s_0;
---
>   bz_stream s_0;
678c678
<   DState *s;
---
>   DState s;
(94.6 %, 11041 bytes)
678c678
<   DState *s;
---
>   DState s;
686c686
<   bz_stream *s_0
---
>   bz_stream s_0
(94.6 %, 11040 bytes)
686c686
<   bz_stream *s_0
---
>   bz_stream s_0
730c730
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
(94.6 %, 11039 bytes)
730c730
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
731c731
<   DState *s;
---
>   DState s;
(94.6 %, 11038 bytes)
731c731
<   DState *s;
---
>   DState s;
732c732
<   bz_stream *s_0;
---
>   bz_stream s_0;
(94.6 %, 11037 bytes)
732c732
<   bz_stream *s_0;
---
>   bz_stream s_0;
750c750
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
(94.6 %, 11036 bytes)
750c750
<   bz_stream *strm  ;
---
>   bz_stream strm  ;
751c751
<   DState *s;
---
>   DState s;
(94.6 %, 11035 bytes)
751c751
<   DState *s;
---
>   DState s;
752c752
<   bz_stream *s_0;
---
>   bz_stream s_0;
(94.6 %, 11034 bytes)
752c752
<   bz_stream *s_0;
---
>   bz_stream s_0;
778c778
<   FILE *handle;
---
>   FILE handle;
(94.6 %, 11033 bytes)
778c778
<   FILE *handle;
---
>   FILE handle;
835c835
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
(94.6 %, 11032 bytes)
835c835
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
869c869
<    int *nbytes_out_hi32  ;
---
>    int nbytes_out_hi32  ;
(94.6 %, 11031 bytes)
869c869
<    int *nbytes_out_hi32  ;
---
>    int nbytes_out_hi32  ;
870c870
<    int *nbytes_out_lo32  ;
---
>    int nbytes_out_lo32  ;
(94.6 %, 11030 bytes)
870c870
<    int *nbytes_out_lo32  ;
---
>    int nbytes_out_lo32  ;
872c872
<    int *nbytes_in_lo32  ;
---
>    int nbytes_in_lo32  ;
(94.6 %, 11029 bytes)
872c872
<    int *nbytes_in_lo32  ;
---
>    int nbytes_in_lo32  ;
877c877
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
(94.6 %, 11028 bytes)
877c877
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
966c966
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
(94.6 %, 11027 bytes)
966c966
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
991c991
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
(94.6 %, 11026 bytes)
991c991
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
1020c1020
<   int *nUnused  ;
---
>   int nUnused  ;
(94.6 %, 11025 bytes)
1020c1020
<   int *nUnused  ;
---
>   int nUnused  ;
1024c1024
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
(94.6 %, 11024 bytes)
1024c1024
<   bzFile *bzf  ;
---
>   bzFile bzf  ;
1049c1049
<    int *destLen  ;
---
>    int destLen  ;
(94.6 %, 11023 bytes)
1049c1049
<    int *destLen  ;
---
>    int destLen  ;
1107c1107
<    int *destLen  ;
---
>    int destLen  ;
(94.6 %, 11022 bytes)
1107c1107
<    int *destLen  ;
---
>    int destLen  ;
1204c1204
<   int *errnum  ;
---
>   int errnum  ;
(94.6 %, 11021 bytes)
1204c1204
<   int *errnum  ;
---
>   int errnum  ;
(94.6 %, 11020 bytes)
===< pass_clang :: move-function-body >===
122a123,133
> void BZ_APIBZ2_bzerror() {
>   int errnum  ;
>   BZFILE b  ;
>   int err = (b)
> 
>     
> 
>     ;
>     
>    ;
> }
1203,1208d1213
< void BZ_APIBZ2_bzerror() {
<   int errnum  ;
<   BZFILE b  ;
<   int err = (b)
< 
<     
1210,1213d1214
<     ;
<     
<    ;
< }
122a123,133
> void BZ_APIBZ2_bzerror() {
>   int errnum  ;
>   BZFILE b  ;
>   int err = (b)
> 
>     
> 
>     ;
>     
>    ;
> }
1203,1208d1213
< void BZ_APIBZ2_bzerror() {
<   int errnum  ;
<   BZFILE b  ;
<   int err = (b)
< 
<     
1210,1213d1214
<     ;
<     
<    ;
< }
(94.6 %, 11021 bytes)
110a111
> void BZ_APIBZ2_bzdopen() {   }
1172c1173
<  void BZ_APIBZ2_bzdopen() {   }
---
>  
110a111
> void BZ_APIBZ2_bzdopen() {   }
1172c1173
<  void BZ_APIBZ2_bzdopen() {   }
---
>  
(94.6 %, 11022 bytes)
106a107
> void BZ_APIBZ2_bzopen() {   }
1171c1172
<  void BZ_APIBZ2_bzopen() {   }
---
>  
(94.6 %, 11023 bytes)
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: remove-unused-field >===
26c26
<    int avail_in;
---
>    
27c27
<    int total_in_lo32;
---
>    
(94.6 %, 11010 bytes)
27c27
<    int total_in_lo32;
---
>    
28,29d27
<    int total_in_hi32
< 
31d28
<     ;
(94.6 %, 10992 bytes)
28,29d27
<    int total_in_hi32
< 
31d28
<     ;
32c32
<    int total_out_lo32;
---
>    
(94.7 %, 10964 bytes)
29c29
<    int total_out_lo32;
---
>    
30c30
<    int total_out_hi32;
---
>    
(94.7 %, 10945 bytes)
30c30
<    int total_out_hi32;
---
>    
32c32
<   void *state;
---
>   
(94.7 %, 10926 bytes)
32c32
<   void *state;
---
>   
34c34
<   void *bzalloc;
---
>   
(94.7 %, 10914 bytes)
34c34
<   void *bzalloc;
---
>   
35c35
<   void *bzfree;
---
>   
(94.7 %, 10900 bytes)
35c35
<   void *bzfree;
---
>   
36c36
<   void *opaque
---
>   
(94.7 %, 10887 bytes)
36c36
<   void *opaque
---
>   
227c227
<   UInt32 arr1;
---
>   
(94.7 %, 10875 bytes)
227c227
<   UInt32 arr1;
---
>   
228c228
<   UInt32 arr2;
---
>   
(94.7 %, 10863 bytes)
228c228
<   UInt32 arr2;
---
>   
229,234c229
<   UInt32 ftab
<    
< 
<    
<    
<    ;
---
>   
(94.7 %, 10851 bytes)
229,234c229
<   UInt32 ftab
<    
< 
<    
<    
<    ;
---
>   
235,240c235
<   UChar zbits
< 
<    
< 
<    
<    ;
---
>   
(94.7 %, 10822 bytes)
230,235c230
<   UChar zbits
< 
<    
< 
<    
<    ;
---
>   
238,241c238
<   Int32 nblock
<    
<    
<    ;
---
>   
(94.7 %, 10796 bytes)
233,236c233
<   Int32 nblock
<    
<    
<    ;
---
>   
238c238
<   Int32 nInUse;
---
>   
(94.7 %, 10771 bytes)
235c235
<   Int32 nInUse;
---
>   
236c236
<   Bool inUse[6];
---
>   
(94.8 %, 10758 bytes)
236c236
<   Bool inUse[6];
---
>   
237,245c237
<   UChar unseqToSeq[6]
< 
<    
<    
< 
<    
<    
< 
<    ;
---
>   
(94.8 %, 10744 bytes)
237,245c237
<   UChar unseqToSeq[6]
< 
<    
<    
< 
<    
<    
< 
<    ;
---
>   
246,247c246
<   Int32 blockNo
<    ;
---
>   
(94.8 %, 10701 bytes)
238,239c238
<   Int32 blockNo
<    ;
---
>   
241c241
<   Int32 nMTF;
---
>   
(94.8 %, 10683 bytes)
240c240
<   Int32 nMTF;
---
>   
245,250c245
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
<    
<    
< 
<    
< 
---
>   
(94.8 %, 10672 bytes)
245,250c245
<   UChar lenBZ_N_GROUPSBZ_MAX_ALPHA_SIZE
<    
<    
< 
<    
< 
---
>   
332c332
<   UInt32 tt;
---
>   
(94.8 %, 10621 bytes)
327c327
<   UInt32 tt;
---
>   
329c329
<   UInt16 ll16;
---
>   
(94.8 %, 10611 bytes)
329c329
<   UInt16 ll16;
---
>   
330,337c330
<   UChar ll4
< 
<    
<    
<    
<    
< 
<    ;
---
>   
(94.8 %, 10599 bytes)
330,337c330
<   UChar ll4
< 
<    
<    
<    
<    
< 
<    ;
---
>   
343,376c343
<   Int32 mtfbase[  MTFL_SIZE]
<    
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    ;
---
>   
(94.8 %, 10567 bytes)
336,369c336
<   Int32 mtfbase[  MTFL_SIZE]
<    
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    
<    ;
---
>   
754c754
<   FILE handle;
---
>   
(94.9 %, 10414 bytes)
721c721
<   FILE handle;
---
>   
722c722
<   Char buf;
---
>   
(94.9 %, 10402 bytes)
722c722
<   Char buf;
---
>   
723c723
<   Int32 bufN;
---
>   
(94.9 %, 10393 bytes)
723c723
<   Int32 bufN;
---
>   
724c724
<   Bool writing;
---
>   
(94.9 %, 10382 bytes)
724c724
<   Bool writing;
---
>   
725c725
<   bz_stream strm;
---
>   
(94.9 %, 10369 bytes)
725c725
<   bz_stream strm;
---
>   
726c726
<   Int32 lastErr;
---
>   
(94.9 %, 10354 bytes)
726c726
<   Int32 lastErr;
---
>   
727c727
<   Bool initialisedOk
---
>   
(95.0 %, 10340 bytes)
727c727
<   Bool initialisedOk
---
>   
(95.0 %, 10322 bytes)
===< pass_clang :: template-non-type-arg-to-int >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: replace-dependent-name >===
Termination check: size was 11757; now 10322
===< pass_ternary :: c >===
===< pass_clang :: aggregate-to-scalar >===
423a424
>   Int32 s_0_0;
444c445
<     s.mtfFreq[i]  
---
>     s_0_0  
(95.0 %, 10330 bytes)
===< pass_clang :: local-to-global >===
121a122
> int BZ_APIBZ2_bzerror_errnum;
123c124
<   int errnum  ;
---
>   
121a122
> BZFILE BZ_APIBZ2_bzerror_b;
124,125c125,126
<   BZFILE b  ;
<   int err = (b)
---
>   
>   int err = (BZ_APIBZ2_bzerror_b)
(95.0 %, 10347 bytes)
122a123
> BZFILE BZ_APIBZ2_bzerror_b;
125,126c126,127
<   BZFILE b  ;
<   int err = (b)
---
>   
>   int err = (BZ_APIBZ2_bzerror_b)
122a123
> int BZ_APIBZ2_bzerror_err = (b);
126,130c127
<   int err = (b)
< 
<     
< 
<     ;
---
>   
409a410
> EState makeMaps_e_s;
411c412
<   EState s  ;
---
>   
417c418
<     &s;
---
>     &makeMaps_e_s;
(94.9 %, 10382 bytes)
123a124
> int BZ_APIBZ2_bzerror_err = (BZ_APIBZ2_bzerror_b);
127,131c128
<   int err = (BZ_APIBZ2_bzerror_b)
< 
<     
< 
<     ;
---
>   
410a411
> EState makeMaps_e_s;
412c413
<   EState s  ;
---
>   
418c419
<     &s;
---
>     &makeMaps_e_s;
410a411
> Int32 makeMaps_e_i = 0;
413,415c414
<   Int32 i
<     
<    = 0;
---
>   
(94.9 %, 10403 bytes)
411a412
> Int32 makeMaps_e_i = 0;
414,416c415
<   Int32 i
<     
<    = 0;
---
>   
425,426c425,427
<   generateMTFValues() {
<   EState s  ;
---
>   EState generateMTFValues_s;
> generateMTFValues() {
>   
465c466
<   s.mtfFreq;
---
>   generateMTFValues_s.mtfFreq;
(94.9 %, 10407 bytes)
424,425c424,426
<   generateMTFValues() {
<   EState s  ;
---
>   EState generateMTFValues_s;
> generateMTFValues() {
>   
464c465
<   s.mtfFreq;
---
>   generateMTFValues_s.mtfFreq;
424c424,425
<   generateMTFValues() {
---
>   Int32 generateMTFValues_s_0_0;
> generateMTFValues() {
426c427
<   Int32 s_0_0;
---
>   
447c448
<     s_0_0  
---
>     generateMTFValues_s_0_0  
(94.9 %, 10442 bytes)
424a425
> Int32 generateMTFValues_s_0_0;
427c428
<   Int32 s_0_0;
---
>   
448c449
<     s_0_0  
---
>     generateMTFValues_s_0_0  
424a425
> UChar generateMTFValues_yy_1;
429c430
<   UChar yy_1;
---
>   
(94.9 %, 10479 bytes)
425a426
> UChar generateMTFValues_yy_1;
430c431
<   UChar yy_1;
---
>   
425a426
> UChar generateMTFValues_yy_0;
431c432
<   UChar yy_0;
---
>   
(94.9 %, 10498 bytes)
426a427
> UChar generateMTFValues_yy_0;
432c433
<   UChar yy_0;
---
>   
426a427
> Int32 generateMTFValues_i;
433c434
<   Int32 i, j;
---
>   Int32  j;
447c448
<   i  ;
---
>   generateMTFValues_i  ;
(94.9 %, 10517 bytes)
427a428
> Int32 generateMTFValues_i;
434c435
<   Int32 i, j;
---
>   Int32  j;
448c449
<   i  ;
---
>   generateMTFValues_i  ;
427a428
> Int32 generateMTFValues_j;
434c435
<   Int32 i, j;
---
>   Int32 i;
(94.8 %, 10560 bytes)
428a429
> Int32 generateMTFValues_j;
435c436
<   Int32  j;
---
>   
428a429
> Int32 generateMTFValues_zPend;
436c437
<   Int32 zPend;
---
>   
(94.8 %, 10578 bytes)
429a430
> Int32 generateMTFValues_zPend;
437c438
<   Int32 zPend;
---
>   
429a430
> Int32 generateMTFValues_wr;
438c439
<   Int32 wr;
---
>   
472c473
<     wr;
---
>     generateMTFValues_wr;
(94.8 %, 10597 bytes)
430a431
> Int32 generateMTFValues_wr;
439c440
<   Int32 wr;
---
>   
473c474
<     wr;
---
>     generateMTFValues_wr;
430a431
> Int32 generateMTFValues_EOB;
440c441
<   Int32 EOB;
---
>   
(94.8 %, 10634 bytes)
431a432
> Int32 generateMTFValues_EOB;
441c442
<   Int32 EOB;
---
>   
431a432
> UInt32 generateMTFValues_ptr_0;
443c444
<   UInt32 ptr_0;
---
>   
(94.8 %, 10653 bytes)
432a433
> UInt32 generateMTFValues_ptr_0;
444c445
<   UInt32 ptr_0;
---
>   
432a433
> UChar generateMTFValues_block_0;
446c447
<   UChar block_0;
---
>   
(94.8 %, 10672 bytes)
433a434
> UChar generateMTFValues_block_0;
447c448
<   UChar block_0;
---
>   
433a434
> UInt16 generateMTFValues_mtfv_0 = generateMTFValues_i;
449,450d449
<   UInt16 mtfv_0
< 
452,454d450
<    =   
< 
<   generateMTFValues_i  ;
497c497,498
<   default_bzfree
---
>   int default_bzfree_workFactor;
> default_bzfree
502c503
<   int workFactor  ;
---
>   
(94.8 %, 10691 bytes)
434a435
> UInt16 generateMTFValues_mtfv_0 = generateMTFValues_i;
450,451d450
<   UInt16 mtfv_0
< 
453,455d451
<    =   
< 
<   generateMTFValues_i  ;
498c498,499
<   default_bzfree
---
>   int default_bzfree_workFactor;
> default_bzfree
503c504
<   int workFactor  ;
---
>   
498c498,499
<   default_bzfree
---
>   int default_bzfree_verbosity;
> default_bzfree
504c505
<   int verbosity  ;
---
>   
(94.8 %, 10705 bytes)
498a499
> int default_bzfree_verbosity;
505c506
<   int verbosity  ;
---
>   
498a499
> int default_bzfree_blockSize100k;
506c507
<   int blockSize100k  ;
---
>   
(94.8 %, 10719 bytes)
499a500
> int default_bzfree_blockSize100k;
507c508
<   int blockSize100k  ;
---
>   
499a500
> bz_stream default_bzfree_strm;
508c509
<   bz_stream strm  ;
---
>   
499a500
> Int32 default_bzfree_n;
509c510
<   Int32 n;
---
>   
(94.8 %, 10733 bytes)
500a501
> bz_stream default_bzfree_strm;
509c510
<   bz_stream strm  ;
---
>   
500a501
> Int32 default_bzfree_n;
510c511
<   Int32 n;
---
>   
(94.8 %, 10747 bytes)
501a502
> Int32 default_bzfree_n;
511c512
<   Int32 n;
---
>   
501a502
> EState *default_bzfree_s;
512c513
<   EState *s;
---
>   
501a502
> UInt32 default_bzfree_s_8;
513c514
<   UInt32 s_8;
---
>   
(94.7 %, 10763 bytes)
502a503
> EState *default_bzfree_s;
513c514
<   EState *s;
---
>   
502a503
> UInt32 default_bzfree_s_8;
514c515
<   UInt32 s_8;
---
>   
502a503
> UInt16 default_bzfree_s_10;
515c516
<   UInt16 s_10;
---
>   
(94.7 %, 10779 bytes)
503a504
> UInt16 default_bzfree_s_10;
516c517
<   UInt16 s_10;
---
>   
503a504
> UChar default_bzfree_s_9;
517c518
<   UChar s_9;
---
>   
503a504
> Int32 default_bzfree_s_12;
518c519
<   Int32 s_12;
---
>   
(94.7 %, 10795 bytes)
504a505
> UChar default_bzfree_s_9;
518c519
<   UChar s_9;
---
>   
504a505
> Int32 default_bzfree_s_12;
519c520
<   Int32 s_12;
---
>   
(94.7 %, 10811 bytes)
505a506
> Int32 default_bzfree_s_12;
520c521
<   Int32 s_12;
---
>   
505a506
> Int32 default_bzfree_s_28;
521c522
<   Int32 s_28;
---
>   
(94.7 %, 10827 bytes)
506a507
> Int32 default_bzfree_s_28;
522c523
<   Int32 s_28;
---
>   
506a507
> Int32 default_bzfree_s_18;
523c524
<   Int32 s_18;
---
>   
(94.7 %, 10843 bytes)
507a508
> Int32 default_bzfree_s_18;
524c525
<   Int32 s_18;
---
>   
507a508
> Int32 default_bzfree_s_30;
525c526
<   Int32 s_30;
---
>   
(94.7 %, 10859 bytes)
508a509
> Int32 default_bzfree_s_30;
526c527
<   Int32 s_30;
---
>   
508a509
> UInt32 default_bzfree_s_27;
527c528
<   UInt32 s_27;
---
>   
(94.7 %, 10875 bytes)
509a510
> UInt32 default_bzfree_s_27;
528c529
<   UInt32 s_27;
---
>   
509a510
> Int32 default_bzfree_s_1;
529c530
<   Int32 s_1;
---
>   
(94.7 %, 10891 bytes)
510a511
> Int32 default_bzfree_s_1;
530c531
<   Int32 s_1;
---
>   
510a511
> Int32 default_bzfree_s_2;
531c532
<   Int32 s_2;
---
>   
(94.7 %, 10907 bytes)
511a512
> Int32 default_bzfree_s_2;
532c533
<   Int32 s_2;
---
>   
511a512
> UInt32 default_bzfree_s_6;
533c534
<   UInt32 s_6;
---
>   
(94.7 %, 10923 bytes)
512a513
> UInt32 default_bzfree_s_6;
534c535
<   UInt32 s_6;
---
>   
512a513
> UInt32 default_bzfree_s_5;
535c536
<   UInt32 s_5;
---
>   
(94.7 %, 10939 bytes)
513a514
> UInt32 default_bzfree_s_5;
536c537
<   UInt32 s_5;
---
>   
513a514
> UInt32 default_bzfree_s_4;
537c538
<   UInt32 s_4;
---
>   
513a514
> bz_stream default_bzfree_s_0;
538,539d538
<   bz_stream s_0
< 
541,542d539
< 
<    ;
(94.7 %, 10955 bytes)
514a515
> UInt32 default_bzfree_s_4;
538c539
<   UInt32 s_4;
---
>   
514a515
> bz_stream default_bzfree_s_0;
539,540d539
<   bz_stream s_0
< 
542,543d540
< 
<    ;
598a599
> bz_stream BZ_APIBZ2_bzCompress_strm;
601c602
<   bz_stream strm  ;
---
>   
598a599
> EState BZ_APIBZ2_bzCompress_s;
603c604
<   EState s;
---
>   
(94.7 %, 10962 bytes)
595a596
> bz_stream BZ_APIBZ2_bzCompress_strm;
598c599
<   bz_stream strm  ;
---
>   
595a596
> EState BZ_APIBZ2_bzCompress_s;
600c601
<   EState s;
---
>   
(94.6 %, 10982 bytes)
596a597
> EState BZ_APIBZ2_bzCompress_s;
601c602
<   EState s;
---
>   
596a597
> Int32 BZ_APIBZ2_bzCompress_s_1;
602c603
<   Int32 s_1;
---
>   
(94.6 %, 11004 bytes)
597a598
> Int32 BZ_APIBZ2_bzCompress_s_1;
603c604
<   Int32 s_1;
---
>   
597a598
> bz_stream BZ_APIBZ2_bzCompress_s_0;
604c605
<   bz_stream s_0;
---
>   
(94.6 %, 11026 bytes)
598a599
> bz_stream BZ_APIBZ2_bzCompress_s_0;
605c606
<   bz_stream s_0;
---
>   
620,621c620,622
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream strm  ;
---
>  bz_stream BZ_APIBZ2_bzCompressEnd_strm;
> BZ_APIBZ2_bzCompressEnd() {
>   
(94.6 %, 11048 bytes)
621,622c621,623
<  BZ_APIBZ2_bzCompressEnd() {
<   bz_stream strm  ;
---
>  bz_stream BZ_APIBZ2_bzCompressEnd_strm;
> BZ_APIBZ2_bzCompressEnd() {
>   
621c621,622
<  BZ_APIBZ2_bzCompressEnd() {
---
>  EState BZ_APIBZ2_bzCompressEnd_s;
> BZ_APIBZ2_bzCompressEnd() {
623c624
<   EState s;
---
>   
(94.6 %, 11071 bytes)
621a622
> EState BZ_APIBZ2_bzCompressEnd_s;
624c625
<   EState s;
---
>   
621a622
> bz_stream BZ_APIBZ2_bzCompressEnd_s_0;
625c626
<   bz_stream s_0;
---
>   
(94.6 %, 11096 bytes)
622a623
> bz_stream BZ_APIBZ2_bzCompressEnd_s_0;
626c627
<   bz_stream s_0;
---
>   
649c649,650
<  BZ_APIBZ2_bzDecompressInit(
---
>  int BZ_APIBZ2_bzDecompressInit_small;
> BZ_APIBZ2_bzDecompressInit(
652c653
<   int small  ;
---
>   
649c649,650
<  BZ_APIBZ2_bzDecompressInit(
---
>  int BZ_APIBZ2_bzDecompressInit_verbosity;
> BZ_APIBZ2_bzDecompressInit(
653c654
<   int verbosity  ;
---
>   
(94.6 %, 11121 bytes)
650c650,651
<  BZ_APIBZ2_bzDecompressInit(
---
>  int BZ_APIBZ2_bzDecompressInit_small;
> BZ_APIBZ2_bzDecompressInit(
653c654
<   int small  ;
---
>   
650c650,651
<  BZ_APIBZ2_bzDecompressInit(
---
>  int BZ_APIBZ2_bzDecompressInit_verbosity;
> BZ_APIBZ2_bzDecompressInit(
654c655
<   int verbosity  ;
---
>   
650c650,651
<  BZ_APIBZ2_bzDecompressInit(
---
>  bz_stream BZ_APIBZ2_bzDecompressInit_strm;
> BZ_APIBZ2_bzDecompressInit(
655c656
<   bz_stream strm  ;
---
>   
(94.6 %, 11147 bytes)
650a651
> bz_stream BZ_APIBZ2_bzDecompressInit_strm;
656c657
<   bz_stream strm  ;
---
>   
650a651
> DState BZ_APIBZ2_bzDecompressInit_s;
657c658
<   DState s;
---
>   
(94.5 %, 11173 bytes)
651a652
> DState BZ_APIBZ2_bzDecompressInit_s;
658c659
<   DState s;
---
>   
651a652
> Int32 BZ_APIBZ2_bzDecompressInit_s_12;
659c660
<   Int32 s_12;
---
>   
(94.5 %, 11201 bytes)
652a653
> Int32 BZ_APIBZ2_bzDecompressInit_s_12;
660c661
<   Int32 s_12;
---
>   
652a653
> Int32 BZ_APIBZ2_bzDecompressInit_s_11;
661c662
<   Int32 s_11;
---
>   
(94.5 %, 11229 bytes)
653a654
> Int32 BZ_APIBZ2_bzDecompressInit_s_11;
662c663
<   Int32 s_11;
---
>   
653a654
> Bool BZ_APIBZ2_bzDecompressInit_s_10;
663c664
<   Bool s_10;
---
>   
653a654
> UInt32 BZ_APIBZ2_bzDecompressInit_s_26;
664c665
<   UInt32 s_26;
---
>   
(94.5 %, 11257 bytes)
654a655
> Bool BZ_APIBZ2_bzDecompressInit_s_10;
664c665
<   Bool s_10;
---
>   
654a655
> UInt32 BZ_APIBZ2_bzDecompressInit_s_26;
665c666
<   UInt32 s_26;
---
>   
(94.5 %, 11285 bytes)
655a656
> UInt32 BZ_APIBZ2_bzDecompressInit_s_26;
666c667
<   UInt32 s_26;
---
>   
655a656
> UInt32 BZ_APIBZ2_bzDecompressInit_s_7;
667c668
<   UInt32 s_7;
---
>   
(94.5 %, 11313 bytes)
656a657
> UInt32 BZ_APIBZ2_bzDecompressInit_s_7;
668c669
<   UInt32 s_7;
---
>   
656a657
> Int32 BZ_APIBZ2_bzDecompressInit_s_8;
669c670
<   Int32 s_8;
---
>   
(94.5 %, 11341 bytes)
657a658
> Int32 BZ_APIBZ2_bzDecompressInit_s_8;
670c671
<   Int32 s_8;
---
>   
657a658
> Int32 BZ_APIBZ2_bzDecompressInit_s_1;
671c672
<   Int32 s_1;
---
>   
(94.5 %, 11369 bytes)
658a659
> Int32 BZ_APIBZ2_bzDecompressInit_s_1;
672c673
<   Int32 s_1;
---
>   
658a659
> bz_stream BZ_APIBZ2_bzDecompressInit_s_0;
673,674d673
<   bz_stream s_0
< 
676,677d674
< 
<    ;
(94.4 %, 11397 bytes)
659a660
> bz_stream BZ_APIBZ2_bzDecompressInit_s_0;
674,675d674
<   bz_stream s_0
< 
677,678d675
< 
<    ;
717,718c717,719
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream strm  ;
---
>  bz_stream BZ_APIBZ2_bzDecompress_strm;
> BZ_APIBZ2_bzDecompress() {
>   
(94.4 %, 11416 bytes)
714,715c714,716
<  BZ_APIBZ2_bzDecompress() {
<   bz_stream strm  ;
---
>  bz_stream BZ_APIBZ2_bzDecompress_strm;
> BZ_APIBZ2_bzDecompress() {
>   
714c714,715
<  BZ_APIBZ2_bzDecompress() {
---
>  DState BZ_APIBZ2_bzDecompress_s;
> BZ_APIBZ2_bzDecompress() {
716c717
<   DState s;
---
>   
(94.4 %, 11438 bytes)
714a715
> DState BZ_APIBZ2_bzDecompress_s;
717c718
<   DState s;
---
>   
714a715
> bz_stream BZ_APIBZ2_bzDecompress_s_0;
718c719
<   bz_stream s_0;
---
>   
(94.4 %, 11462 bytes)
715a716
> bz_stream BZ_APIBZ2_bzDecompress_s_0;
719c720
<   bz_stream s_0;
---
>   
736,737c736,738
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream strm  ;
---
>  bz_stream BZ_APIBZ2_bzDecompressEnd_strm;
> BZ_APIBZ2_bzDecompressEnd() {
>   
(94.4 %, 11486 bytes)
737,738c737,739
<  BZ_APIBZ2_bzDecompressEnd() {
<   bz_stream strm  ;
---
>  bz_stream BZ_APIBZ2_bzDecompressEnd_strm;
> BZ_APIBZ2_bzDecompressEnd() {
>   
737c737,738
<  BZ_APIBZ2_bzDecompressEnd() {
---
>  DState BZ_APIBZ2_bzDecompressEnd_s;
> BZ_APIBZ2_bzDecompressEnd() {
739c740
<   DState s;
---
>   
(94.4 %, 11511 bytes)
737a738
> DState BZ_APIBZ2_bzDecompressEnd_s;
740c741
<   DState s;
---
>   
737a738
> bz_stream BZ_APIBZ2_bzDecompressEnd_s_0;
741c742
<   bz_stream s_0;
---
>   
(94.4 %, 11538 bytes)
738a739
> bz_stream BZ_APIBZ2_bzDecompressEnd_s_0;
742c743
<   bz_stream s_0;
---
>   
817c817,818
<  BZ_APIBZ2_bzWrite(
---
>  int BZ_APIBZ2_bzWrite_len;
> BZ_APIBZ2_bzWrite(
820c821
<   int len  ;
---
>   
(94.4 %, 11565 bytes)
818c818,819
<  BZ_APIBZ2_bzWrite(
---
>  int BZ_APIBZ2_bzWrite_len;
> BZ_APIBZ2_bzWrite(
821c822
<   int len  ;
---
>   
818c818,819
<  BZ_APIBZ2_bzWrite(
---
>  void *BZ_APIBZ2_bzWrite_buf;
> BZ_APIBZ2_bzWrite(
822c823
<   void *buf  ;
---
>   
(94.3 %, 11582 bytes)
818a819
> void *BZ_APIBZ2_bzWrite_buf;
823c824
<   void *buf  ;
---
>   
818a819
> BZFILE BZ_APIBZ2_bzWrite_b = 0;
824,825c825
<   BZFILE b  
<     = 0;
---
>   
(94.3 %, 11599 bytes)
819a820
> BZFILE BZ_APIBZ2_bzWrite_b = 0;
825,826c826
<   BZFILE b  
<     = 0;
---
>   
819a820
> Int32 BZ_APIBZ2_bzWrite_ret;
827c828
<   Int32 ret;
---
>   
(94.3 %, 11612 bytes)
820a821
> Int32 BZ_APIBZ2_bzWrite_ret;
827c828
<   Int32 ret;
---
>   
820a821
> bzFile BZ_APIBZ2_bzWrite_bzf;
828c829
<   bzFile bzf  ;
---
>   
(94.3 %, 11631 bytes)
821a822
> bzFile BZ_APIBZ2_bzWrite_bzf;
829c830
<   bzFile bzf  ;
---
>   
821a822
> char BZ_APIBZ2_bzWrite_bzf_4_4;
830c831
<   char bzf_4_4;
---
>   
821a822
> int BZ_APIBZ2_bzWrite_bzf_4_5;
831c832
<    int bzf_4_5;
---
>    
(94.3 %, 11648 bytes)
822a823
> char BZ_APIBZ2_bzWrite_bzf_4_4;
831c832
<   char bzf_4_4;
---
>   
822a823
> int BZ_APIBZ2_bzWrite_bzf_4_5;
832c833
<    int bzf_4_5;
---
>    
(94.3 %, 11667 bytes)
823a824
> int BZ_APIBZ2_bzWrite_bzf_4_5;
833c834
<    int bzf_4_5;
---
>    
823a824
> char BZ_APIBZ2_bzWrite_bzf_4_0;
834c835
<   char bzf_4_0;
---
>   
(94.3 %, 11686 bytes)
824a825
> char BZ_APIBZ2_bzWrite_bzf_4_0;
835c836
<   char bzf_4_0;
---
>   
824a825
> int BZ_APIBZ2_bzWrite_bzf_4_1;
836c837
<    int bzf_4_1;
---
>    
(94.3 %, 11705 bytes)
825a826
> int BZ_APIBZ2_bzWrite_bzf_4_1;
837c838
<    int bzf_4_1;
---
>    
825a826
> Bool BZ_APIBZ2_bzWrite_bzf_3;
838,840c839
<   Bool bzf_3
< 
<   ;
---
>   
(94.3 %, 11724 bytes)
826a827
> Bool BZ_APIBZ2_bzWrite_bzf_3;
839,841c840
<   Bool bzf_3
< 
<   ;
---
>   
865c865,866
<  BZ_APIBZ2_bzWriteClose64(
---
>  int BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
> BZ_APIBZ2_bzWriteClose64(
868c869
<    int nbytes_out_hi32  ;
---
>    
(94.3 %, 11739 bytes)
864c864,865
<  BZ_APIBZ2_bzWriteClose64(
---
>  int BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
> BZ_APIBZ2_bzWriteClose64(
867c868
<    int nbytes_out_hi32  ;
---
>    
864c864,865
<  BZ_APIBZ2_bzWriteClose64(
---
>  int BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
> BZ_APIBZ2_bzWriteClose64(
868c869
<    int nbytes_out_lo32  ;
---
>    
(94.3 %, 11763 bytes)
864a865
> int BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
869c870
<    int nbytes_out_lo32  ;
---
>    
864a865
> int BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
870c871
<    int nbytes_in_hi32  ;
---
>    
(94.2 %, 11787 bytes)
865a866
> int BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
871c872
<    int nbytes_in_hi32  ;
---
>    
865a866
> int BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
872c873
<    int nbytes_in_lo32  ;
---
>    
865a866
> int BZ_APIBZ2_bzWriteClose64_abandon;
873c874
<   int abandon  ;
---
>   
(94.2 %, 11811 bytes)
866a867
> int BZ_APIBZ2_bzWriteClose64_nbytes_in_lo32;
873c874
<    int nbytes_in_lo32  ;
---
>    
866a867
> int BZ_APIBZ2_bzWriteClose64_abandon;
874c875
<   int abandon  ;
---
>   
866a867
> BZFILE BZ_APIBZ2_bzWriteClose64_b = 0;
875,876c876
<   BZFILE b  
<     = 0;
---
>   
(94.2 %, 11835 bytes)
867a868
> BZFILE BZ_APIBZ2_bzWriteClose64_b = 0;
876,877c877
<   BZFILE b  
<     = 0;
---
>   
867a868
> bzFile BZ_APIBZ2_bzWriteClose64_bzf;
879c880
<   bzFile bzf  ;
---
>   
965,966c965,967
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE b  ;
---
>  BZFILE BZ_APIBZ2_bzReadClose_b;
> BZ_APIBZ2_bzReadClose() {
>   
(94.2 %, 11855 bytes)
868a869
> bzFile BZ_APIBZ2_bzWriteClose64_bzf;
879c880
<   bzFile bzf  ;
---
>   
965,966c965,967
<  BZ_APIBZ2_bzReadClose() {
<   BZFILE b  ;
---
>  BZFILE BZ_APIBZ2_bzReadClose_b;
> BZ_APIBZ2_bzReadClose() {
>   
965c965,966
<  BZ_APIBZ2_bzReadClose() {
---
>  bzFile BZ_APIBZ2_bzReadClose_bzf;
> BZ_APIBZ2_bzReadClose() {
968c969
<   bzFile bzf  ;
---
>   
(94.2 %, 11876 bytes)
965a966
> bzFile BZ_APIBZ2_bzReadClose_bzf;
969c970
<   bzFile bzf  ;
---
>   
965a966
> Bool BZ_APIBZ2_bzReadClose_bzf_6;
970c971
<   Bool bzf_6;
---
>   
(94.2 %, 11897 bytes)
966a967
> Bool BZ_APIBZ2_bzReadClose_bzf_6;
971c972
<   Bool bzf_6;
---
>   
966a967
> Bool BZ_APIBZ2_bzReadClose_bzf_3;
972,974c973
<   Bool bzf_3
< 
<   ;
---
>   
(94.2 %, 11920 bytes)
967a968
> Bool BZ_APIBZ2_bzReadClose_bzf_3;
973,975c974
<   Bool bzf_3
< 
<   ;
---
>   
989c989,990
<  BZ_APIBZ2_bzRead(
---
>  int BZ_APIBZ2_bzRead_len;
> BZ_APIBZ2_bzRead(
992c993
<   int len  ;
---
>   
(94.2 %, 11939 bytes)
988c988,989
<  BZ_APIBZ2_bzRead(
---
>  int BZ_APIBZ2_bzRead_len;
> BZ_APIBZ2_bzRead(
991c992
<   int len  ;
---
>   
988c988,989
<  BZ_APIBZ2_bzRead(
---
>  void *BZ_APIBZ2_bzRead_buf;
> BZ_APIBZ2_bzRead(
992c993
<   void *buf  ;
---
>   
(94.2 %, 11955 bytes)
988a989
> void *BZ_APIBZ2_bzRead_buf;
993c994
<   void *buf  ;
---
>   
988a989
> BZFILE BZ_APIBZ2_bzRead_b;
994c995
<   BZFILE b  ;
---
>   
(94.2 %, 11971 bytes)
989a990
> BZFILE BZ_APIBZ2_bzRead_b;
995c996
<   BZFILE b  ;
---
>   
989a990
> bzFile BZ_APIBZ2_bzRead_bzf;
997c998
<   bzFile bzf  ;
---
>   
(94.2 %, 11987 bytes)
990a991
> bzFile BZ_APIBZ2_bzRead_bzf;
998c999
<   bzFile bzf  ;
---
>   
990a991
> char BZ_APIBZ2_bzRead_bzf_4_4;
999c1000
<   char bzf_4_4;
---
>   
(94.1 %, 12003 bytes)
991a992
> char BZ_APIBZ2_bzRead_bzf_4_4;
1000c1001
<   char bzf_4_4;
---
>   
991a992
> int BZ_APIBZ2_bzRead_bzf_4_5;
1001c1002
<    int bzf_4_5;
---
>    
(94.1 %, 12021 bytes)
992a993
> int BZ_APIBZ2_bzRead_bzf_4_5;
1002c1003
<    int bzf_4_5;
---
>    
992a993
> Bool BZ_APIBZ2_bzRead_bzf_3;
1003,1005c1004
<   Bool bzf_3
< 
<   ;
---
>   
(94.1 %, 12039 bytes)
993a994
> Bool BZ_APIBZ2_bzRead_bzf_3;
1004,1006c1005
<   Bool bzf_3
< 
<   ;
---
>   
1027c1027,1028
<  BZ_APIBZ2_bzReadGetUnused(
---
>  int BZ_APIBZ2_bzReadGetUnused_nUnused;
> BZ_APIBZ2_bzReadGetUnused(
1030c1031
<   int nUnused  ;
---
>   
(94.1 %, 12053 bytes)
1026c1026,1027
<  BZ_APIBZ2_bzReadGetUnused(
---
>  int BZ_APIBZ2_bzReadGetUnused_nUnused;
> BZ_APIBZ2_bzReadGetUnused(
1029c1030
<   int nUnused  ;
---
>   
1026c1026,1027
<  BZ_APIBZ2_bzReadGetUnused(
---
>  void *BZ_APIBZ2_bzReadGetUnused_unused;
> BZ_APIBZ2_bzReadGetUnused(
1030c1031
<   void *unused  ;
---
>   
(94.1 %, 12078 bytes)
1026a1027
> void *BZ_APIBZ2_bzReadGetUnused_unused;
1031c1032
<   void *unused  ;
---
>   
1026a1027
> BZFILE BZ_APIBZ2_bzReadGetUnused_b;
1032c1033
<   BZFILE b  ;
---
>   
(94.1 %, 12103 bytes)
1027a1028
> BZFILE BZ_APIBZ2_bzReadGetUnused_b;
1033c1034
<   BZFILE b  ;
---
>   
1027a1028
> bzFile BZ_APIBZ2_bzReadGetUnused_bzf;
1035c1036
<   bzFile bzf  ;
---
>   
(94.1 %, 12128 bytes)
1028a1029
> bzFile BZ_APIBZ2_bzReadGetUnused_bzf;
1036c1037
<   bzFile bzf  ;
---
>   
1028a1029
> char BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
1037c1038
<   char bzf_4_0;
---
>   
(94.1 %, 12153 bytes)
1029a1030
> char BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
1038c1039
<   char bzf_4_0;
---
>   
1054c1054,1055
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
> BZ_APIBZ2_bzBuffToBuffCompress(
1057c1058
<   int workFactor  ;
---
>   
(94.1 %, 12180 bytes)
1055c1055,1056
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
> BZ_APIBZ2_bzBuffToBuffCompress(
1058c1059
<   int workFactor  ;
---
>   
1055c1055,1056
<  BZ_APIBZ2_bzBuffToBuffCompress(
---
>  int BZ_APIBZ2_bzBuffToBuffCompress_verbosity;
> BZ_APIBZ2_bzBuffToBuffCompress(
1059c1060
<   int verbosity  ;
---
>   
(94.0 %, 12210 bytes)
1055a1056
> int BZ_APIBZ2_bzBuffToBuffCompress_verbosity;
1060c1061
<   int verbosity  ;
---
>   
1055a1056
> int BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k;
1061c1062
<   int blockSize100k  ;
---
>   
(94.0 %, 12240 bytes)
1056a1057
> int BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k;
1062c1063
<   int blockSize100k  ;
---
>   
1056a1057
> int BZ_APIBZ2_bzBuffToBuffCompress_sourceLen;
1063c1064
<    int sourceLen  ;
---
>    
(94.0 %, 12270 bytes)
1057a1058
> int BZ_APIBZ2_bzBuffToBuffCompress_sourceLen;
1064c1065
<    int sourceLen  ;
---
>    
1057a1058
> char BZ_APIBZ2_bzBuffToBuffCompress_source;
1065c1066
<   char source  ;
---
>   
(94.0 %, 12300 bytes)
1058a1059
> char BZ_APIBZ2_bzBuffToBuffCompress_source;
1066c1067
<   char source  ;
---
>   
1058a1059
> int BZ_APIBZ2_bzBuffToBuffCompress_destLen;
1067c1068
<    int destLen  ;
---
>    
(94.0 %, 12330 bytes)
1059a1060
> int BZ_APIBZ2_bzBuffToBuffCompress_destLen;
1068c1069
<    int destLen  ;
---
>    
1059a1060
> char BZ_APIBZ2_bzBuffToBuffCompress_dest;
1069c1070
<   char dest  ;
---
>   
(94.0 %, 12360 bytes)
1060a1061
> char BZ_APIBZ2_bzBuffToBuffCompress_dest;
1070c1071
<   char dest  ;
---
>   
1060a1061
> bz_stream BZ_APIBZ2_bzBuffToBuffCompress_strm;
1071c1072
<   bz_stream strm;
---
>   
(94.0 %, 12390 bytes)
1061a1062
> bz_stream BZ_APIBZ2_bzBuffToBuffCompress_strm;
1072c1073
<   bz_stream strm;
---
>   
1061a1062
> int BZ_APIBZ2_bzBuffToBuffCompress_strm_5;
1073c1074
<    int strm_5;
---
>    
(93.9 %, 12422 bytes)
1062a1063
> int BZ_APIBZ2_bzBuffToBuffCompress_strm_5;
1074c1075
<    int strm_5;
---
>    
1062a1063
> int BZ_APIBZ2_bzBuffToBuffCompress_strm_1;
1075c1076
<    int strm_1;
---
>    
(93.9 %, 12454 bytes)
1063a1064
> int BZ_APIBZ2_bzBuffToBuffCompress_strm_1;
1076c1077
<    int strm_1;
---
>    
1063a1064
> char BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
1077c1078
<   char strm_4;
---
>   
(93.9 %, 12486 bytes)
1064a1065
> char BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
1078c1079
<   char strm_4;
---
>   
1064a1065
> char BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
1079c1080
<   char strm_0;
---
>   
(93.9 %, 12518 bytes)
1065a1066
> char BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
1080c1081
<   char strm_0;
---
>   
1065a1066
> int BZ_APIBZ2_bzBuffToBuffCompress_ret;
1081c1082
<   int ret;
---
>   
(93.9 %, 12550 bytes)
1066a1067
> int BZ_APIBZ2_bzBuffToBuffCompress_ret;
1082c1083
<   int ret;
---
>   
1126c1126,1127
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
> BZ_APIBZ2_bzBuffToBuffDecompress(
1129c1130
<   int verbosity  ;
---
>   
(93.9 %, 12582 bytes)
1127c1127,1128
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
> BZ_APIBZ2_bzBuffToBuffDecompress(
1130c1131
<   int verbosity  ;
---
>   
1127c1127,1128
<  BZ_APIBZ2_bzBuffToBuffDecompress(
---
>  int BZ_APIBZ2_bzBuffToBuffDecompress_small;
> BZ_APIBZ2_bzBuffToBuffDecompress(
1131c1132
<   int small  ;
---
>   
(93.8 %, 12614 bytes)
1127a1128
> int BZ_APIBZ2_bzBuffToBuffDecompress_small;
1132c1133
<   int small  ;
---
>   
1127a1128
> int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
1133c1134
<    int sourceLen  ;
---
>    
(93.8 %, 12646 bytes)
1128a1129
> int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
1134c1135
<    int sourceLen  ;
---
>    
1128a1129
> char BZ_APIBZ2_bzBuffToBuffDecompress_source;
1135c1136
<   char source  ;
---
>   
(93.8 %, 12678 bytes)
1129a1130
> char BZ_APIBZ2_bzBuffToBuffDecompress_source;
1136c1137
<   char source  ;
---
>   
1129a1130
> int BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
1137c1138
<    int destLen  ;
---
>    
(93.8 %, 12710 bytes)
1130a1131
> int BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
1138c1139
<    int destLen  ;
---
>    
1130a1131
> char BZ_APIBZ2_bzBuffToBuffDecompress_dest;
1139c1140
<   char dest  ;
---
>   
(93.8 %, 12742 bytes)
1131a1132
> char BZ_APIBZ2_bzBuffToBuffDecompress_dest;
1140c1141
<   char dest  ;
---
>   
1131a1132
> bz_stream BZ_APIBZ2_bzBuffToBuffDecompress_strm;
1141c1142
<   bz_stream strm;
---
>   
(93.8 %, 12774 bytes)
1132a1133
> bz_stream BZ_APIBZ2_bzBuffToBuffDecompress_strm;
1142c1143
<   bz_stream strm;
---
>   
1132a1133
> int BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
1143c1144
<    int strm_5;
---
>    
1179c1180
<   strm_5  ;
---
>   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5  ;
(93.8 %, 12808 bytes)
1133a1134
> int BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
1144c1145
<    int strm_5;
---
>    
1180c1181
<   strm_5  ;
---
>   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5  ;
1133a1134
> int BZ_APIBZ2_bzBuffToBuffDecompress_strm_1;
1145c1146
<    int strm_1;
---
>    
(93.7 %, 12875 bytes)
1134a1135
> int BZ_APIBZ2_bzBuffToBuffDecompress_strm_1;
1146c1147
<    int strm_1;
---
>    
1134a1135
> char BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
1147c1148
<   char strm_4;
---
>   
(93.7 %, 12909 bytes)
1135a1136
> char BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
1148c1149
<   char strm_4;
---
>   
1135a1136
> char BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
1149c1150
<   char strm_0;
---
>   
(93.7 %, 12943 bytes)
1136a1137
> char BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
1150c1151
<   char strm_0;
---
>   
1136a1137
> int BZ_APIBZ2_bzBuffToBuffDecompress_ret;
1151c1152
<   int ret;
---
>   
(93.7 %, 12977 bytes)
1137a1138
> int BZ_APIBZ2_bzBuffToBuffDecompress_ret;
1152c1153
<   int ret;
---
>   
1201c1201,1202
<  BZ_APIBZ2_bzread() {
---
>  int BZ_APIBZ2_bzread_nread;
> BZ_APIBZ2_bzread() {
1203d1203
<   int nread
1205,1207d1204
< 
<    
<     ;
(93.7 %, 13011 bytes)
1202c1202,1203
<  BZ_APIBZ2_bzread() {
---
>  int BZ_APIBZ2_bzread_nread;
> BZ_APIBZ2_bzread() {
1204d1204
<   int nread
1206,1208d1205
< 
<    
<     ;
1214,1215c1214,1216
<  BZ_APIBZ2_bzwrite() {
<   int len  ;
---
>  int BZ_APIBZ2_bzwrite_len;
> BZ_APIBZ2_bzwrite() {
>   
(93.6 %, 13016 bytes)
1211,1212c1211,1213
<  BZ_APIBZ2_bzwrite() {
<   int len  ;
---
>  int BZ_APIBZ2_bzwrite_len;
> BZ_APIBZ2_bzwrite() {
>   
1211c1211,1212
<  BZ_APIBZ2_bzwrite() {
---
>  int BZ_APIBZ2_bzwrite_bzerr;
> BZ_APIBZ2_bzwrite() {
1214,1217c1215,1216
<   int bzerr
< 
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>   if (BZ_APIBZ2_bzwrite_bzerr == BZ_OK) {
(93.6 %, 13033 bytes)
1211a1212
> int BZ_APIBZ2_bzwrite_bzerr;
1215,1218c1216,1217
<   int bzerr
< 
<   ;
<   if (bzerr == BZ_OK) {
---
>   
>   if (BZ_APIBZ2_bzwrite_bzerr == BZ_OK) {
1227,1228c1227,1229
<  BZ_APIBZ2_bzclose() {
<   BZFILE b  ;
---
>  BZFILE BZ_APIBZ2_bzclose_b;
> BZ_APIBZ2_bzclose() {
>   
1227c1227,1228
<  BZ_APIBZ2_bzclose() {
---
>  int BZ_APIBZ2_bzclose_bzerr;
> BZ_APIBZ2_bzclose() {
1229c1230
<   int bzerr;
---
>   
(93.6 %, 13052 bytes)
===< pass_clang :: param-to-global >===
===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: return-void >===
60c60
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
---
>   void BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
75c75
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
---
> BZ_EXTERN  void BZ_APIBZ2_bzWriteOpen(int *, FILE *,
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: simplify-if >===
1218c1218,1220
<   if (bzerr == BZ_OK) {
---
>   ;
>   
>    {
===< pass_clang :: remove-unused-field >===
===< pass_clang :: remove-pointer >===
526c526
<   EState *s;
---
>   EState s;
819c819
< void *BZ_APIBZ2_bzWrite_buf;
---
> void BZ_APIBZ2_bzWrite_buf;
989c989
< void *BZ_APIBZ2_bzRead_buf;
---
> void BZ_APIBZ2_bzRead_buf;
1027c1027
< void *BZ_APIBZ2_bzReadGetUnused_unused;
---
> void BZ_APIBZ2_bzReadGetUnused_unused;
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: replace-dependent-name >===
===< pass_special :: b >===
===< pass_ints :: e >===
Termination check: size was 10322; now 13052
===< pass_clang :: rename-fun >===
60c60
<   *BZ_APIBZ2_bzReadOpen(int *, FILE *, int ,
---
>   *fn1(int *, FILE *, int ,
75c75
< BZ_EXTERN  *BZ_APIBZ2_bzWriteOpen(int *, FILE *,
---
> BZ_EXTERN  *fn2(int *, FILE *,
87c87
<   (BZ2_bzWriteClose64)(     
---
>   (fn3)(     
101c101
< BZ_EXTERN  void BZ_APIBZ2_bzopen(
---
> BZ_EXTERN  void fn4(
104c104
< void BZ_APIBZ2_bzopen() {   }
---
> void fn4() {   }
106c106
<   void BZ_APIBZ2_bzdopen(
---
>   void fn5(
109c109
< void BZ_APIBZ2_bzdopen() {   }
---
> void fn5() {   }
119c119
<  void BZ_APIBZ2_bzerror(
---
>  void fn6(
124c124
< void BZ_APIBZ2_bzerror() {
---
> void fn6() {
413c413
< void   makeMaps_e() {
---
> void   fn7() {
435c435
< generateMTFValues() {
---
> fn8() {
516c516
< default_bzfree
---
> fn9
600c600
< int BZ_APIBZ2_bzCompress() {
---
> int fn10() {
624c624
< BZ_APIBZ2_bzCompressEnd() {
---
> fn11() {
661c661
< BZ_APIBZ2_bzDecompressInit(
---
> fn12(
717c717
< BZ_APIBZ2_bzDecompress() {
---
> fn13() {
740c740
< BZ_APIBZ2_bzDecompressEnd() {
---
> fn14() {
828c828
< BZ_APIBZ2_bzWrite(
---
> fn17(
869c869
< BZ_APIBZ2_bzWriteClose64(
---
> fn18(
880c880
<    bzf_3
---
>    fn19
969c969
< BZ_APIBZ2_bzReadClose() {
---
> fn22() {
995c995
< BZ_APIBZ2_bzRead(
---
> fn23(
1031c1031
< BZ_APIBZ2_bzReadGetUnused(
---
> fn24(
1040c1040
<     bzf_4_1
---
>     fn25
1068c1068
< BZ_APIBZ2_bzBuffToBuffCompress(
---
> fn26(
1139c1139
< BZ_APIBZ2_bzBuffToBuffDecompress(
---
> fn27(
1194c1194
<   BZ_APIBZ2_bzlibVersion() {   }
---
>   fn28() {   }
1203c1203
< BZ_APIBZ2_bzread() {
---
> fn29() {
1212c1212
< BZ_APIBZ2_bzwrite() {
---
> fn30() {
1225c1225
<  BZ_APIBZ2_bzflush() {   }
---
>  fn31() {   }
1228c1228
< BZ_APIBZ2_bzclose() {
---
> fn32() {
(93.9 %, 12582 bytes)
778c778
<  *BZ_APIBZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k,
---
>  *fn15(int *bzerror, FILE *f, int blockSize100k,
783c783
<   BZ_SETERR(
---
>   fn16(
796c796
<   BZ_SETERR;
---
>   fn16;
917c917
<  *BZ_APIBZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small,
---
>  *fn20(int *bzerror, FILE *f, int verbosity, int small,
927c927
<   BZ_SETERR(
---
>   fn16(
953c953
<       BZ2_bzDecompressInit( verbosity )
---
>       fn21( verbosity )
(93.9 %, 12518 bytes)
===< pass_clang :: rename-param >===
778,779c778,779
<  *fn15(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
---
>  *fn15(int *p1, FILE *p2, int p3,
>                               int p4, int p5) {
786c786
<               verbosity  )
---
>               p4  )
917,918c917,918
<  *fn20(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
---
>  *fn20(int *p1, FILE *p2, int p3, int p4,
>                              void *p5, int p6) {
931c931
<       nUnused  )
---
>       p6  )
953c953
<       fn21( verbosity )
---
>       fn21( p3 )
===< pass_clang :: rename-var >===
122,123c122,123
< int BZ_APIBZ2_bzerror_errnum;
< BZFILE BZ_APIBZ2_bzerror_b;
---
> int a;
> BZFILE c;
127c127
<   int err = (BZ_APIBZ2_bzerror_b)
---
>   int d = (c)
411,412c411,412
< EState makeMaps_e_s;
< Int32 makeMaps_e_i = 0;
---
> EState e;
> Int32 f = 0;
418c418
<     &makeMaps_e_s;
---
>     &e;
424,434c424,434
<   EState generateMTFValues_s;
< Int32 generateMTFValues_s_0_0;
< UChar generateMTFValues_yy_1;
< UChar generateMTFValues_yy_0;
< Int32 generateMTFValues_i;
< Int32 generateMTFValues_j;
< Int32 generateMTFValues_zPend;
< Int32 generateMTFValues_wr;
< Int32 generateMTFValues_EOB;
< UInt32 generateMTFValues_ptr_0;
< UChar generateMTFValues_block_0;
---
>   EState g;
> Int32 h;
> UChar i;
> UChar j;
> Int32 k;
> Int32 l;
> Int32 m;
> Int32 n;
> Int32 o;
> UInt32 p;
> UChar q;
450c450
<   UInt16 mtfv_0
---
>   UInt16 r
455c455
<   generateMTFValues_i  ;
---
>   k  ;
458c458
<     generateMTFValues_s_0_0  
---
>     h  
475c475
<   generateMTFValues_s.mtfFreq;
---
>   g.mtfFreq;
477c477
<     generateMTFValues_wr;
---
>     n;
496c496
<   default_bzalloc;
---
>   t;
498,515c498,515
<   int default_bzfree_workFactor;
< int default_bzfree_verbosity;
< int default_bzfree_blockSize100k;
< bz_stream default_bzfree_strm;
< Int32 default_bzfree_n;
< UInt32 default_bzfree_s_8;
< UInt16 default_bzfree_s_10;
< UChar default_bzfree_s_9;
< Int32 default_bzfree_s_12;
< Int32 default_bzfree_s_28;
< Int32 default_bzfree_s_18;
< Int32 default_bzfree_s_30;
< UInt32 default_bzfree_s_27;
< Int32 default_bzfree_s_1;
< Int32 default_bzfree_s_2;
< UInt32 default_bzfree_s_6;
< UInt32 default_bzfree_s_5;
< bz_stream default_bzfree_s_0;
---
>   int u;
> int v;
> int w;
> bz_stream x;
> Int32 y;
> UInt32 z;
> UInt16 t1;
> UChar t2;
> Int32 t3;
> Int32 t4;
> Int32 t5;
> Int32 t6;
> UInt32 t7;
> Int32 t8;
> Int32 t9;
> UInt32 t10;
> UInt32 t11;
> bz_stream t12;
539c539
<   UInt32 s_4;
---
>   UInt32 t13;
596,599c596,599
< bz_stream BZ_APIBZ2_bzCompress_strm;
< EState BZ_APIBZ2_bzCompress_s;
< Int32 BZ_APIBZ2_bzCompress_s_1;
< bz_stream BZ_APIBZ2_bzCompress_s_0;
---
> bz_stream t14;
> EState t15;
> Int32 t16;
> bz_stream t17;
621,623c621,623
<  bz_stream BZ_APIBZ2_bzCompressEnd_strm;
< EState BZ_APIBZ2_bzCompressEnd_s;
< bz_stream BZ_APIBZ2_bzCompressEnd_s_0;
---
>  bz_stream t18;
> EState t19;
> bz_stream t20;
650,660c650,660
<  int BZ_APIBZ2_bzDecompressInit_verbosity;
< bz_stream BZ_APIBZ2_bzDecompressInit_strm;
< DState BZ_APIBZ2_bzDecompressInit_s;
< Int32 BZ_APIBZ2_bzDecompressInit_s_12;
< Int32 BZ_APIBZ2_bzDecompressInit_s_11;
< Bool BZ_APIBZ2_bzDecompressInit_s_10;
< UInt32 BZ_APIBZ2_bzDecompressInit_s_26;
< UInt32 BZ_APIBZ2_bzDecompressInit_s_7;
< Int32 BZ_APIBZ2_bzDecompressInit_s_8;
< Int32 BZ_APIBZ2_bzDecompressInit_s_1;
< bz_stream BZ_APIBZ2_bzDecompressInit_s_0;
---
>  int t21;
> bz_stream t22;
> DState t23;
> Int32 t24;
> Int32 t25;
> Bool t26;
> UInt32 t27;
> UInt32 t28;
> Int32 t29;
> Int32 t30;
> bz_stream t31;
664c664
<   int small  ;
---
>   int t32  ;
714,716c714,716
<  bz_stream BZ_APIBZ2_bzDecompress_strm;
< DState BZ_APIBZ2_bzDecompress_s;
< bz_stream BZ_APIBZ2_bzDecompress_s_0;
---
>  bz_stream t33;
> DState t34;
> bz_stream t35;
737,739c737,739
<  bz_stream BZ_APIBZ2_bzDecompressEnd_strm;
< DState BZ_APIBZ2_bzDecompressEnd_s;
< bz_stream BZ_APIBZ2_bzDecompressEnd_s_0;
---
>  bz_stream t36;
> DState t37;
> bz_stream t38;
780,781c780,781
<   Int32 ret;
<   bzFile *bzf  ;
---
>   Int32 t39;
>   bzFile *t40  ;
813c813
<   bzf  
---
>   t40  
818,827c818,827
<  int BZ_APIBZ2_bzWrite_len;
< void *BZ_APIBZ2_bzWrite_buf;
< BZFILE BZ_APIBZ2_bzWrite_b = 0;
< Int32 BZ_APIBZ2_bzWrite_ret;
< bzFile BZ_APIBZ2_bzWrite_bzf;
< char BZ_APIBZ2_bzWrite_bzf_4_4;
< int BZ_APIBZ2_bzWrite_bzf_4_5;
< char BZ_APIBZ2_bzWrite_bzf_4_0;
< int BZ_APIBZ2_bzWrite_bzf_4_1;
< Bool BZ_APIBZ2_bzWrite_bzf_3;
---
>  int t41;
> void *t42;
> BZFILE t43 = 0;
> Int32 t44;
> bzFile t45;
> char t46;
> int t47;
> char t48;
> int t49;
> Bool t50;
859c859
<  BZ_APIBZ2_bzWriteClose 
---
>  t51 
864,868c864,868
<  int BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
< int BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
< int BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
< int BZ_APIBZ2_bzWriteClose64_abandon;
< BZFILE BZ_APIBZ2_bzWriteClose64_b = 0;
---
>  int t52;
> int t53;
> int t54;
> int t55;
> BZFILE t56 = 0;
875c875
<    int nbytes_in_lo32  ;
---
>    int t57  ;
879c879
<   bzFile bzf  ;
---
>   bzFile t58  ;
919,925c919,925
<   bzFile *bzf  ;
<   char bzf_4_0;
<    int bzf_4_1;
<   Bool bzf_3;
<   Int32 bzf_2;
<   Bool bzf_6;
<   int ret;
---
>   bzFile *t59  ;
>   char t60;
>    int t61;
>   Bool t62;
>   Int32 t63;
>   Bool t64;
>   int t65;
965,968c965,968
<  BZFILE BZ_APIBZ2_bzReadClose_b;
< bzFile BZ_APIBZ2_bzReadClose_bzf;
< Bool BZ_APIBZ2_bzReadClose_bzf_6;
< Bool BZ_APIBZ2_bzReadClose_bzf_3;
---
>  BZFILE t66;
> bzFile t67;
> Bool t68;
> Bool t69;
988,994c988,994
<  int BZ_APIBZ2_bzRead_len;
< void *BZ_APIBZ2_bzRead_buf;
< BZFILE BZ_APIBZ2_bzRead_b;
< bzFile BZ_APIBZ2_bzRead_bzf;
< char BZ_APIBZ2_bzRead_bzf_4_4;
< int BZ_APIBZ2_bzRead_bzf_4_5;
< Bool BZ_APIBZ2_bzRead_bzf_3;
---
>  int t70;
> void *t71;
> BZFILE t72;
> bzFile t73;
> char t74;
> int t75;
> Bool t76;
1026,1030c1026,1030
<  int BZ_APIBZ2_bzReadGetUnused_nUnused;
< void *BZ_APIBZ2_bzReadGetUnused_unused;
< BZFILE BZ_APIBZ2_bzReadGetUnused_b;
< bzFile BZ_APIBZ2_bzReadGetUnused_bzf;
< char BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
---
>  int t77;
> void *t78;
> BZFILE t79;
> bzFile t80;
> char t81;
1055,1067c1055,1067
<  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
< int BZ_APIBZ2_bzBuffToBuffCompress_verbosity;
< int BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k;
< int BZ_APIBZ2_bzBuffToBuffCompress_sourceLen;
< char BZ_APIBZ2_bzBuffToBuffCompress_source;
< int BZ_APIBZ2_bzBuffToBuffCompress_destLen;
< char BZ_APIBZ2_bzBuffToBuffCompress_dest;
< bz_stream BZ_APIBZ2_bzBuffToBuffCompress_strm;
< int BZ_APIBZ2_bzBuffToBuffCompress_strm_5;
< int BZ_APIBZ2_bzBuffToBuffCompress_strm_1;
< char BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
< char BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
< int BZ_APIBZ2_bzBuffToBuffCompress_ret;
---
>  int t82;
> int t83;
> int t84;
> int t85;
> char t86;
> int t87;
> char t88;
> bz_stream t89;
> int t90;
> int t91;
> char t92;
> char t93;
> int t94;
1127,1138c1127,1138
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
< int BZ_APIBZ2_bzBuffToBuffDecompress_small;
< int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
< char BZ_APIBZ2_bzBuffToBuffDecompress_source;
< int BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
< char BZ_APIBZ2_bzBuffToBuffDecompress_dest;
< bz_stream BZ_APIBZ2_bzBuffToBuffDecompress_strm;
< int BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
< int BZ_APIBZ2_bzBuffToBuffDecompress_strm_1;
< char BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
< char BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
< int BZ_APIBZ2_bzBuffToBuffDecompress_ret;
---
>  int t95;
> int t96;
> int t97;
> char t98;
> int t99;
> char t100;
> bz_stream t101;
> int t102;
> int t103;
> char t104;
> char t105;
> int t106;
1185c1185
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5  ;
---
>   t102  ;
1196c1196
<   bzopen_or_bzdopen;
---
>   t107;
1202c1202
<  int BZ_APIBZ2_bzread_nread;
---
>  int t108;
1211c1211
<  int BZ_APIBZ2_bzwrite_len;
---
>  int t109;
1215c1215
<   int bzerr
---
>   int t110
1218c1218
<   if (bzerr == BZ_OK) {
---
>   if (t110 == BZ_OK) {
1227c1227
<  int BZ_APIBZ2_bzclose_bzerr;
---
>  int t111;
1239c1239
<   bzerrorstrings_0  ;
---
>   t112  ;
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
122,123c122,123
< int BZ_APIBZ2_bzerror_errnum;
< BZFILE BZ_APIBZ2_bzerror_b;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b;
> 
122c122
< int BZ_APIBZ2_bzerror_errnum;
---
> int BZ_APIBZ2_bzerror_errnum, makeMaps_e_i = 0;
412c412
< Int32 makeMaps_e_i = 0;
---
> 
(93.9 %, 12512 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0;
412c412
< Int32 makeMaps_e_i = 0;
---
> 
411c411
< EState makeMaps_e_s;
---
> EState makeMaps_e_s,  generateMTFValues_s;
424c424
<   EState generateMTFValues_s;
---
>   
(93.9 %, 12507 bytes)
411c411
< EState makeMaps_e_s;
---
> EState makeMaps_e_s,  generateMTFValues_s;
424c424
<   EState generateMTFValues_s;
---
>   
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0;
425c425
< Int32 generateMTFValues_s_0_0;
---
> 
(93.9 %, 12502 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0;
425c425
< Int32 generateMTFValues_s_0_0;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_yy_1;
426c426
< UChar generateMTFValues_yy_1;
---
> 
(93.9 %, 12497 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1;
426c426
< UChar generateMTFValues_yy_1;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_0;
427c427
< UChar generateMTFValues_yy_0;
---
> 
(93.9 %, 12492 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0;
427c427
< UChar generateMTFValues_yy_0;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_i;
428c428
< Int32 generateMTFValues_i;
---
> 
(93.9 %, 12487 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i;
428c428
< Int32 generateMTFValues_i;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_j;
429c429
< Int32 generateMTFValues_j;
---
> 
(93.9 %, 12482 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j;
429c429
< Int32 generateMTFValues_j;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_zPend;
430c430
< Int32 generateMTFValues_zPend;
---
> 
(93.9 %, 12477 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend;
430c430
< Int32 generateMTFValues_zPend;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_wr;
431c431
< Int32 generateMTFValues_wr;
---
> 
(93.9 %, 12472 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr;
431c431
< Int32 generateMTFValues_wr;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_EOB;
432c432
< Int32 generateMTFValues_EOB;
---
> 
(93.9 %, 12467 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB;
432c432
< Int32 generateMTFValues_EOB;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_ptr_0;
433c433
< UInt32 generateMTFValues_ptr_0;
---
> 
(93.9 %, 12462 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0;
433c433
< UInt32 generateMTFValues_ptr_0;
---
> 
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_block_0;
434c434
< UChar generateMTFValues_block_0;
---
> 
(93.9 %, 12456 bytes)
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0;
434c434
< UChar generateMTFValues_block_0;
---
> 
122c122,124
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, 
> 
>   default_bzalloc;
496c498
<   default_bzalloc;
---
>   
(93.9 %, 12451 bytes)
122c122,124
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0, 
> 
>   default_bzalloc;
496c498
<   default_bzalloc;
---
>   
122c122
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0,  default_bzfree_workFactor;
498c498
<   int default_bzfree_workFactor;
---
>   
(93.9 %, 12456 bytes)
124c124
<   default_bzalloc;
---
>   default_bzalloc,  default_bzfree_workFactor;
500c500
<   int default_bzfree_workFactor;
---
>   
124c124
<   default_bzalloc;
---
>   default_bzalloc,  default_bzfree_verbosity;
501c501
< int default_bzfree_verbosity;
---
> 
(93.9 %, 12454 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity;
501c501
< int default_bzfree_verbosity;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_blockSize100k;
502c502
< int default_bzfree_blockSize100k;
---
> 
(93.9 %, 12452 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k;
502c502
< int default_bzfree_blockSize100k;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity, default_bzfree_n;
504c504
< Int32 default_bzfree_n;
---
> 
(93.9 %, 12450 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n;
504c504
< Int32 default_bzfree_n;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_s_8;
505c505
< UInt32 default_bzfree_s_8;
---
> 
(93.9 %, 12445 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8;
505c505
< UInt32 default_bzfree_s_8;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_10;
506c506
< UInt16 default_bzfree_s_10;
---
> 
(93.9 %, 12439 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10;
506c506
< UInt16 default_bzfree_s_10;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_9;
507c507
< UChar default_bzfree_s_9;
---
> 
(93.9 %, 12433 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9;
507c507
< UChar default_bzfree_s_9;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_12;
508c508
< Int32 default_bzfree_s_12;
---
> 
(93.9 %, 12428 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12;
508c508
< Int32 default_bzfree_s_12;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_28;
509c509
< Int32 default_bzfree_s_28;
---
> 
(93.9 %, 12423 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28;
509c509
< Int32 default_bzfree_s_28;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_18;
510c510
< Int32 default_bzfree_s_18;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_30;
511c511
< Int32 default_bzfree_s_30;
---
> 
(93.9 %, 12418 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18;
510c510
< Int32 default_bzfree_s_18;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_30;
511c511
< Int32 default_bzfree_s_30;
---
> 
(93.9 %, 12413 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30;
511c511
< Int32 default_bzfree_s_30;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_27;
512c512
< UInt32 default_bzfree_s_27;
---
> 
(93.9 %, 12408 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27;
512c512
< UInt32 default_bzfree_s_27;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_1;
513c513
< Int32 default_bzfree_s_1;
---
> 
(93.9 %, 12402 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1;
513c513
< Int32 default_bzfree_s_1;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_2;
514c514
< Int32 default_bzfree_s_2;
---
> 
(94.0 %, 12397 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2;
514c514
< Int32 default_bzfree_s_2;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_6;
515c515
< UInt32 default_bzfree_s_6;
---
> 
(94.0 %, 12392 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6;
515c515
< UInt32 default_bzfree_s_6;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_5;
516c516
< UInt32 default_bzfree_s_5;
---
> 
(94.0 %, 12386 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5;
516c516
< UInt32 default_bzfree_s_5;
---
> 
503c503
< bz_stream default_bzfree_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0;
517c517
< bz_stream default_bzfree_s_0;
---
> 
(94.0 %, 12380 bytes)
503c503,504
< bz_stream default_bzfree_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0;
> 
517d517
< bz_stream default_bzfree_s_0;
503c503
< bz_stream default_bzfree_strm;
---
> bz_stream default_bzfree_strm,  BZ_APIBZ2_bzCompress_strm;
598c598
< bz_stream BZ_APIBZ2_bzCompress_strm;
---
> 
(94.0 %, 12372 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm;
598c598
< bz_stream BZ_APIBZ2_bzCompress_strm;
---
> 
413c413
< EState makeMaps_e_s,  generateMTFValues_s;
---
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s;
599c599
< EState BZ_APIBZ2_bzCompress_s;
---
> 
(94.0 %, 12364 bytes)
413c413
< EState makeMaps_e_s,  generateMTFValues_s;
---
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s;
599c599
< EState BZ_APIBZ2_bzCompress_s;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1;
600c600
< Int32 BZ_APIBZ2_bzCompress_s_1;
---
> 
(94.0 %, 12359 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1;
600c600
< Int32 BZ_APIBZ2_bzCompress_s_1;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0;
601c601
< bz_stream BZ_APIBZ2_bzCompress_s_0;
---
> 
(94.0 %, 12354 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0;
601c601
< bz_stream BZ_APIBZ2_bzCompress_s_0;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompressEnd_strm;
623c623
<  bz_stream BZ_APIBZ2_bzCompressEnd_strm;
---
>  
413c413
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s;
---
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
624c624
< EState BZ_APIBZ2_bzCompressEnd_s;
---
> 
(94.0 %, 12346 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm;
623c623
<  bz_stream BZ_APIBZ2_bzCompressEnd_strm;
---
>  
413c413
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s;
---
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
624c624
< EState BZ_APIBZ2_bzCompressEnd_s;
---
> 
(94.0 %, 12338 bytes)
413c413
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s;
---
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
624c624
< EState BZ_APIBZ2_bzCompressEnd_s;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0;
625c625
< bz_stream BZ_APIBZ2_bzCompressEnd_s_0;
---
> 
(94.0 %, 12333 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0;
625c625
< bz_stream BZ_APIBZ2_bzCompressEnd_s_0;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity;
652c652
<  int BZ_APIBZ2_bzDecompressInit_verbosity;
---
>  
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzDecompressInit_strm;
653c653
< bz_stream BZ_APIBZ2_bzDecompressInit_strm;
---
> 
(94.0 %, 12325 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity;
652c652
<  int BZ_APIBZ2_bzDecompressInit_verbosity;
---
>  
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm;
653c653
< bz_stream BZ_APIBZ2_bzDecompressInit_strm;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1, BZ_APIBZ2_bzDecompressInit_s_12;
655c655
< Int32 BZ_APIBZ2_bzDecompressInit_s_12;
---
> 
(94.0 %, 12323 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm;
653c653
< bz_stream BZ_APIBZ2_bzDecompressInit_strm;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12;
655c655
< Int32 BZ_APIBZ2_bzDecompressInit_s_12;
---
> 
(94.0 %, 12315 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12;
655c655
< Int32 BZ_APIBZ2_bzDecompressInit_s_12;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_11;
656c656
< Int32 BZ_APIBZ2_bzDecompressInit_s_11;
---
> 
(94.0 %, 12310 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11;
656c656
< Int32 BZ_APIBZ2_bzDecompressInit_s_11;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_10;
657c657
< Bool BZ_APIBZ2_bzDecompressInit_s_10;
---
> 
(94.0 %, 12305 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10;
657c657
< Bool BZ_APIBZ2_bzDecompressInit_s_10;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_26;
658c658
< UInt32 BZ_APIBZ2_bzDecompressInit_s_26;
---
> 
(94.0 %, 12301 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26;
658c658
< UInt32 BZ_APIBZ2_bzDecompressInit_s_26;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_7;
659c659
< UInt32 BZ_APIBZ2_bzDecompressInit_s_7;
---
> 
(94.0 %, 12295 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7;
659c659
< UInt32 BZ_APIBZ2_bzDecompressInit_s_7;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_8;
660c660
< Int32 BZ_APIBZ2_bzDecompressInit_s_8;
---
> 
(94.0 %, 12289 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8;
660c660
< Int32 BZ_APIBZ2_bzDecompressInit_s_8;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_1;
661c661
< Int32 BZ_APIBZ2_bzDecompressInit_s_1;
---
> 
(94.0 %, 12284 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1;
661c661
< Int32 BZ_APIBZ2_bzDecompressInit_s_1;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0;
662c662
< bz_stream BZ_APIBZ2_bzDecompressInit_s_0;
---
> 
(94.0 %, 12279 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0;
662c662
< bz_stream BZ_APIBZ2_bzDecompressInit_s_0;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompress_strm;
716c716
<  bz_stream BZ_APIBZ2_bzDecompress_strm;
---
>  
(94.0 %, 12271 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm;
716c716
<  bz_stream BZ_APIBZ2_bzDecompress_strm;
---
>  
654c654
< DState BZ_APIBZ2_bzDecompressInit_s;
---
> DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s;
717c717
< DState BZ_APIBZ2_bzDecompress_s;
---
> 
(94.0 %, 12263 bytes)
654c654
< DState BZ_APIBZ2_bzDecompressInit_s;
---
> DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s;
717c717
< DState BZ_APIBZ2_bzDecompress_s;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0;
718c718
< bz_stream BZ_APIBZ2_bzDecompress_s_0;
---
> 
(94.0 %, 12258 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0;
718c718
< bz_stream BZ_APIBZ2_bzDecompress_s_0;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompressEnd_strm;
739c739
<  bz_stream BZ_APIBZ2_bzDecompressEnd_strm;
---
>  
(94.0 %, 12250 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm;
739c739
<  bz_stream BZ_APIBZ2_bzDecompressEnd_strm;
---
>  
654c654
< DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s;
---
> DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
740c740
< DState BZ_APIBZ2_bzDecompressEnd_s;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_s_0;
741c741
< bz_stream BZ_APIBZ2_bzDecompressEnd_s_0;
---
> 
(94.0 %, 12242 bytes)
654c654
< DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s;
---
> DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
740c740
< DState BZ_APIBZ2_bzDecompressEnd_s;
---
> 
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0;
741c741
< bz_stream BZ_APIBZ2_bzDecompressEnd_s_0;
---
> 
(94.0 %, 12237 bytes)
503c503
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0;
741c741
< bz_stream BZ_APIBZ2_bzDecompressEnd_s_0;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len;
820c820
<  int BZ_APIBZ2_bzWrite_len;
---
>  
(94.0 %, 12229 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len;
820c820
<  int BZ_APIBZ2_bzWrite_len;
---
>  
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1, BZ_APIBZ2_bzWrite_b = 0;
822c822
< BZFILE BZ_APIBZ2_bzWrite_b = 0;
---
> 
(94.0 %, 12227 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0;
822c822
< BZFILE BZ_APIBZ2_bzWrite_b = 0;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_ret;
823c823
< Int32 BZ_APIBZ2_bzWrite_ret;
---
> 
(94.0 %, 12221 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret;
823c823
< Int32 BZ_APIBZ2_bzWrite_ret;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0,  BZ_APIBZ2_bzWrite_bzf_4_5;
826c826
< int BZ_APIBZ2_bzWrite_bzf_4_5;
---
> 
825c825
< char BZ_APIBZ2_bzWrite_bzf_4_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0;
827c827
< char BZ_APIBZ2_bzWrite_bzf_4_0;
---
> 
(94.0 %, 12216 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5;
826c826
< int BZ_APIBZ2_bzWrite_bzf_4_5;
---
> 
825c825
< char BZ_APIBZ2_bzWrite_bzf_4_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0;
827c827
< char BZ_APIBZ2_bzWrite_bzf_4_0;
---
> 
(94.0 %, 12214 bytes)
825c825,826
< char BZ_APIBZ2_bzWrite_bzf_4_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0;
> 
827d827
< char BZ_APIBZ2_bzWrite_bzf_4_0;
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1;
828c828
< int BZ_APIBZ2_bzWrite_bzf_4_1;
---
> 
(94.0 %, 12211 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1;
828c828
< int BZ_APIBZ2_bzWrite_bzf_4_1;
---
> 
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5, BZ_APIBZ2_bzWrite_bzf_3;
829c829
< Bool BZ_APIBZ2_bzWrite_bzf_3;
---
> 
(94.0 %, 12209 bytes)
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3;
829c829
< Bool BZ_APIBZ2_bzWrite_bzf_3;
---
> 
124c124,128
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, 
> 
>  BZ_APIBZ2_bzWriteClose 
> 
>   ;
861,863c865
<  BZ_APIBZ2_bzWriteClose 
< 
<   ;
---
>  
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
866c866
<  int BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
>  
(94.0 %, 12205 bytes)
124c124,128
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, 
> 
>  BZ_APIBZ2_bzWriteClose 
> 
>   ;
861,863c865
<  BZ_APIBZ2_bzWriteClose 
< 
<   ;
---
>  
124c124
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3;
---
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
866c866
<  int BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
>  
(94.0 %, 12209 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32 
868c868
<  int BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32;
---
>  
126c126
<  BZ_APIBZ2_bzWriteClose 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32 
869c869
< int BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
---
> 
(94.0 %, 12207 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32 
869c869
< int BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32 
870c870
< int BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
---
> 
(94.0 %, 12205 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32 
870c870
< int BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_abandon 
871c871
< int BZ_APIBZ2_bzWriteClose64_abandon;
---
> 
(94.0 %, 12203 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon 
871c871
< int BZ_APIBZ2_bzWriteClose64_abandon;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_b = 0 
872c872
< BZFILE BZ_APIBZ2_bzWriteClose64_b = 0;
---
> 
(94.0 %, 12201 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0 
872c872
< BZFILE BZ_APIBZ2_bzWriteClose64_b = 0;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzReadClose_b 
969c969
<  BZFILE BZ_APIBZ2_bzReadClose_b;
---
>  
(94.0 %, 12195 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b 
969c969
<  BZFILE BZ_APIBZ2_bzReadClose_b;
---
>  
828c828
< bzFile BZ_APIBZ2_bzWrite_bzf;
---
> bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf;
970c970
< bzFile BZ_APIBZ2_bzReadClose_bzf;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_bzf_6 
971c971
< Bool BZ_APIBZ2_bzReadClose_bzf_6;
---
> 
(94.1 %, 12189 bytes)
828c828
< bzFile BZ_APIBZ2_bzWrite_bzf;
---
> bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf;
970c970
< bzFile BZ_APIBZ2_bzReadClose_bzf;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6 
971c971
< Bool BZ_APIBZ2_bzReadClose_bzf_6;
---
> 
(94.1 %, 12184 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6 
971c971
< Bool BZ_APIBZ2_bzReadClose_bzf_6;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_3 
972c972
< Bool BZ_APIBZ2_bzReadClose_bzf_3;
---
> 
(94.1 %, 12180 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3 
972c972
< Bool BZ_APIBZ2_bzReadClose_bzf_3;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6,  BZ_APIBZ2_bzRead_len 
992c992
<  int BZ_APIBZ2_bzRead_len;
---
>  
(94.1 %, 12176 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len 
992c992
<  int BZ_APIBZ2_bzRead_len;
---
>  
825c825
< void *BZ_APIBZ2_bzWrite_buf;
---
> void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf;
993c993
< void *BZ_APIBZ2_bzRead_buf;
---
> 
(94.1 %, 12174 bytes)
825c825
< void *BZ_APIBZ2_bzWrite_buf;
---
> void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf;
993c993
< void *BZ_APIBZ2_bzRead_buf;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b 
994c994
< BZFILE BZ_APIBZ2_bzRead_b;
---
> 
(94.1 %, 12171 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b 
994c994
< BZFILE BZ_APIBZ2_bzRead_b;
---
> 
828c828
< bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf;
---
> bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf;
995c995
< bzFile BZ_APIBZ2_bzRead_bzf;
---
> 
(94.1 %, 12165 bytes)
828c828
< bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf;
---
> bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf;
995c995
< bzFile BZ_APIBZ2_bzRead_bzf;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4;
996c996
< char BZ_APIBZ2_bzRead_bzf_4_4;
---
> 
(94.1 %, 12160 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4;
996c996
< char BZ_APIBZ2_bzRead_bzf_4_4;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5 
997c997
< int BZ_APIBZ2_bzRead_bzf_4_5;
---
> 
(94.1 %, 12157 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5 
997c997
< int BZ_APIBZ2_bzRead_bzf_4_5;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b, BZ_APIBZ2_bzRead_bzf_3 
998c998
< Bool BZ_APIBZ2_bzRead_bzf_3;
---
> 
(94.1 %, 12155 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3 
998c998
< Bool BZ_APIBZ2_bzRead_bzf_3;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5,  BZ_APIBZ2_bzReadGetUnused_nUnused 
1030c1030
<  int BZ_APIBZ2_bzReadGetUnused_nUnused;
---
>  
(94.1 %, 12151 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused 
1030c1030
<  int BZ_APIBZ2_bzReadGetUnused_nUnused;
---
>  
825c825
< void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf;
---
> void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf,  *BZ_APIBZ2_bzReadGetUnused_unused;
1031c1031
< void *BZ_APIBZ2_bzReadGetUnused_unused;
---
> 
(94.1 %, 12149 bytes)
825c825
< void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf;
---
> void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf,  *BZ_APIBZ2_bzReadGetUnused_unused;
1031c1031
< void *BZ_APIBZ2_bzReadGetUnused_unused;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b 
1032c1032
< BZFILE BZ_APIBZ2_bzReadGetUnused_b;
---
> 
(94.1 %, 12146 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b 
1032c1032
< BZFILE BZ_APIBZ2_bzReadGetUnused_b;
---
> 
828c828
< bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf;
---
> bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
1033c1033
< bzFile BZ_APIBZ2_bzReadGetUnused_bzf;
---
> 
(94.1 %, 12140 bytes)
828c828
< bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf;
---
> bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
1033c1033
< bzFile BZ_APIBZ2_bzReadGetUnused_bzf;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
1034c1034
< char BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
---
> 
(94.1 %, 12135 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
1034c1034
< char BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor 
1059c1059
<  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
---
>  
(94.1 %, 12132 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor 
1059c1059
<  int BZ_APIBZ2_bzBuffToBuffCompress_workFactor;
---
>  
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity 
1060c1060
< int BZ_APIBZ2_bzBuffToBuffCompress_verbosity;
---
> 
(94.1 %, 12130 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity 
1060c1060
< int BZ_APIBZ2_bzBuffToBuffCompress_verbosity;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k 
1061c1061
< int BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k;
---
> 
(94.1 %, 12128 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k 
1061c1061
< int BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen 
1062c1062
< int BZ_APIBZ2_bzBuffToBuffCompress_sourceLen;
---
> 
(94.1 %, 12126 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen 
1062c1062
< int BZ_APIBZ2_bzBuffToBuffCompress_sourceLen;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source;
1063c1063
< char BZ_APIBZ2_bzBuffToBuffCompress_source;
---
> 
(94.1 %, 12124 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source;
1063c1063
< char BZ_APIBZ2_bzBuffToBuffCompress_source;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen 
1064c1064
< int BZ_APIBZ2_bzBuffToBuffCompress_destLen;
---
> 
(94.1 %, 12121 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen 
1064c1064
< int BZ_APIBZ2_bzBuffToBuffCompress_destLen;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest;
1065c1065
< char BZ_APIBZ2_bzBuffToBuffCompress_dest;
---
> 
(94.1 %, 12119 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest;
1065c1065
< char BZ_APIBZ2_bzBuffToBuffCompress_dest;
---
> 
507c507
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm;
1066c1066
< bz_stream BZ_APIBZ2_bzBuffToBuffCompress_strm;
---
> 
(94.1 %, 12116 bytes)
507c507
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm;
1066c1066
< bz_stream BZ_APIBZ2_bzBuffToBuffCompress_strm;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5 
1067c1067
< int BZ_APIBZ2_bzBuffToBuffCompress_strm_5;
---
> 
(94.1 %, 12108 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5 
1067c1067
< int BZ_APIBZ2_bzBuffToBuffCompress_strm_5;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1 
1068c1068
< int BZ_APIBZ2_bzBuffToBuffCompress_strm_1;
---
> 
(94.1 %, 12106 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1 
1068c1068
< int BZ_APIBZ2_bzBuffToBuffCompress_strm_1;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
1069c1069
< char BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
---
> 
(94.1 %, 12104 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
1069c1069
< char BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
1070c1070
< char BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
---
> 
(94.1 %, 12101 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
1070c1070
< char BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret 
1071c1071
< int BZ_APIBZ2_bzBuffToBuffCompress_ret;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity 
1131c1131
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
---
>  
(94.1 %, 12098 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret 
1071c1071
< int BZ_APIBZ2_bzBuffToBuffCompress_ret;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity 
1131c1131
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
---
>  
(94.1 %, 12096 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity 
1131c1131
<  int BZ_APIBZ2_bzBuffToBuffDecompress_verbosity;
---
>  
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_small 
1132c1132
< int BZ_APIBZ2_bzBuffToBuffDecompress_small;
---
> 
(94.1 %, 12094 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small 
1132c1132
< int BZ_APIBZ2_bzBuffToBuffDecompress_small;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen 
1133c1133
< int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
---
> 
(94.1 %, 12092 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen 
1133c1133
< int BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source;
1134c1134
< char BZ_APIBZ2_bzBuffToBuffDecompress_source;
---
> 
(94.1 %, 12090 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source;
1134c1134
< char BZ_APIBZ2_bzBuffToBuffDecompress_source;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen 
1135c1135
< int BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
---
> 
(94.1 %, 12087 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen 
1135c1135
< int BZ_APIBZ2_bzBuffToBuffDecompress_destLen;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest;
1136c1136
< char BZ_APIBZ2_bzBuffToBuffDecompress_dest;
---
> 
(94.1 %, 12085 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest;
1136c1136
< char BZ_APIBZ2_bzBuffToBuffDecompress_dest;
---
> 
507c507
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm,  BZ_APIBZ2_bzBuffToBuffDecompress_strm;
1137c1137
< bz_stream BZ_APIBZ2_bzBuffToBuffDecompress_strm;
---
> 
(94.1 %, 12082 bytes)
507c507
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm;
---
> bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm,  BZ_APIBZ2_bzBuffToBuffDecompress_strm;
1137c1137
< bz_stream BZ_APIBZ2_bzBuffToBuffDecompress_strm;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5 
1138c1138
< int BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
---
> 
(94.1 %, 12074 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5 
1138c1138
< int BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1 
1139c1139
< int BZ_APIBZ2_bzBuffToBuffDecompress_strm_1;
---
> 
(94.1 %, 12072 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1 
1139c1139
< int BZ_APIBZ2_bzBuffToBuffDecompress_strm_1;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
1140c1140
< char BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
---
> 
(94.1 %, 12070 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
1140c1140
< char BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
---
> 
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
1141c1141
< char BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
---
> 
(94.1 %, 12067 bytes)
829c829
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4;
---
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
1141c1141
< char BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
---
> 
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret 
1142c1142
< int BZ_APIBZ2_bzBuffToBuffDecompress_ret;
---
> 
(94.1 %, 12064 bytes)
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret 
1142c1142
< int BZ_APIBZ2_bzBuffToBuffDecompress_ret;
---
> 
126c126,128
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1, 
> 
>   bzopen_or_bzdopen 
1200c1202
<   bzopen_or_bzdopen;
---
>   
(94.1 %, 12062 bytes)
126c126,128
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret, 
> 
>   bzopen_or_bzdopen 
1200c1202
<   bzopen_or_bzdopen;
---
>   
126c126
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret 
---
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret,  BZ_APIBZ2_bzread_nread 
1206c1206
<  int BZ_APIBZ2_bzread_nread;
---
>  
(94.1 %, 12067 bytes)
128c128
<   bzopen_or_bzdopen 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread 
1208c1208
<  int BZ_APIBZ2_bzread_nread;
---
>  
128c128
<   bzopen_or_bzdopen 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzwrite_len 
1217c1217
<  int BZ_APIBZ2_bzwrite_len;
---
>  
(94.1 %, 12065 bytes)
128c128
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len 
1217c1217
<  int BZ_APIBZ2_bzwrite_len;
---
>  
128c128
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzclose_bzerr 
1233c1233
<  int BZ_APIBZ2_bzclose_bzerr;
---
>  
(94.1 %, 12063 bytes)
128c128
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr 
1233c1233
<  int BZ_APIBZ2_bzclose_bzerr;
---
>  
128c128,130
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len, 
> 
>   bzerrorstrings_0   
1245c1247
<   bzerrorstrings_0  ;
---
>   
(94.1 %, 12061 bytes)
128c128,130
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr 
---
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr, 
> 
>   bzerrorstrings_0   
1245c1247
<   bzerrorstrings_0  ;
---
>   
(94.1 %, 12066 bytes)
===< pass_clang :: combine-local-var >===
929,930c929,930
<    int bzf_4_1;
<   Bool bzf_3;
---
>    int bzf_4_1, bzf_3;
>   
929c929
<    int bzf_4_1;
---
>    int bzf_4_1, bzf_2;
931c931
<   Int32 bzf_2;
---
>   
(94.1 %, 12062 bytes)
929c929,930
<    int bzf_4_1, bzf_3;
---
>    int bzf_4_1, bzf_3, bzf_2;
>   
931d931
<   Int32 bzf_2;
929c929
<    int bzf_4_1, bzf_3;
---
>    int bzf_4_1, bzf_3, bzf_6;
932c932
<   Bool bzf_6;
---
>   
(94.1 %, 12057 bytes)
929c929,930
<    int bzf_4_1, bzf_3, bzf_2;
---
>    int bzf_4_1, bzf_3, bzf_2, bzf_6;
>   
932d932
<   Bool bzf_6;
929c929
<    int bzf_4_1, bzf_3, bzf_2;
---
>    int bzf_4_1, bzf_3, bzf_2,  ret;
933c933
<   int ret;
---
>   
(94.1 %, 12053 bytes)
929c929,930
<    int bzf_4_1, bzf_3, bzf_2, bzf_6;
---
>    int bzf_4_1, bzf_3, bzf_2, bzf_6,  ret;
>   
933d933
<   int ret;
(94.1 %, 12051 bytes)
===< pass_clang :: simplify-struct-union-decl >===
258c258
< } EState
---
> } EState,  makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s
421c421
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
---
> 
37c37
< } bz_stream;
---
> } bz_stream,  default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm,  BZ_APIBZ2_bzBuffToBuffDecompress_strm;
511c511
< bz_stream default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm,  BZ_APIBZ2_bzBuffToBuffDecompress_strm;
---
> 
350c350
< } DState;
---
> } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
662c662
< DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
---
> 
(94.1 %, 12043 bytes)
350c350
< } DState;
---
> } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
662c662
< DState BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
---
> 
786c786
< } bzFile;
---
> } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
832c832
< bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
---
> 
(94.1 %, 12038 bytes)
786c786
< } bzFile;
---
> } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
832c832
< bzFile BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
---
> 
(94.1 %, 12033 bytes)
===< pass_clang :: move-global-var >===
60c60,71
<   *fn1(int *, FILE *, int ,
---
>   int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0, 
> 
>   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, 
> 
>  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret, 
> 
>   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr, 
> 
>   bzerrorstrings_0   
> 
>   ;
> *fn1(int *, FILE *, int ,
122d132
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0, 
124,132d133
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, 
< 
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret, 
< 
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr, 
< 
<   bzerrorstrings_0   
< 
<   ;
60c60,61
<   *fn1(int *, FILE *, int ,
---
>   typedef  Char;
> *fn1(int *, FILE *, int ,
152c153
< typedef  Char;
---
> 
(94.1 %, 12034 bytes)
70a71
> typedef  Char;
153c154
< typedef  Char;
---
> 
70a71
> typedef   Bool;
154c155
< typedef   Bool;
---
> 
(94.1 %, 12035 bytes)
71a72
> typedef   Bool;
155c156
< typedef   Bool;
---
> 
71a72
> typedef   UChar;
156c157
< typedef   UChar;
---
> 
71a72
> typedef  Int32;
157c158
< typedef  Int32;
---
> 
(94.1 %, 12036 bytes)
72a73
> typedef   UChar;
157c158
< typedef   UChar;
---
> 
72a73
> typedef  Int32;
158c159
< typedef  Int32;
---
> 
(94.1 %, 12037 bytes)
73a74
> typedef  Int32;
159c160
< typedef  Int32;
---
> 
73a74,75
> typedef   UInt32
>   ;
160,161c162
< typedef   UInt32
<   ;
---
> 
(94.1 %, 12038 bytes)
74a75,76
> typedef   UInt32
>   ;
161,162c163
< typedef   UInt32
<   ;
---
> 
74a75
> typedef   UInt16;
163c164
< typedef   UInt16;
---
> 
(94.1 %, 12039 bytes)
76a77
> typedef   UInt16;
164c165
< typedef   UInt16;
---
> 
76a77,109
> struct {
> 
>    
> 
>    
>    
> 
>    ;
> 
>   
>   
>   
>   
>   
> 
>   
> 
>   
>   
>   
>   
> 
>   
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar ;
>   UChar ;
> 
>   
> } EState
> 
> 
> 
> ;
236,268c269
< typedef struct {
< 
<    
< 
<    
<    
< 
<    ;
< 
<   
<   
<   
<   
<   
< 
<   
< 
<   
<   
<   
<   
< 
<   
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar ;
<   UChar ;
< 
<   
< } EState
< 
< 
< 
< ;
---
> typedef 
76a77,115
> struct {
> 
>    
> 
>    
> 
>    
>    
>    
>   
> 
>    
>    
> 
>    
>    
>    
>    
> 
>    
>    
>    
>   Int32 ;
>    ;
>   Int32 ;
>   Int32 ;
> 
>   
> 
>   
>   
>   Bool ;
>   Bool ;
>   UChar ;
> 
>   UChar ;
>   
> 
> } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
318,356c357
< typedef struct {
< 
<    
< 
<    
< 
<    
<    
<    
<   
< 
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<   Int32 ;
<    ;
<   Int32 ;
<   Int32 ;
< 
<   
< 
<   
<   
<   Bool ;
<   Bool ;
<   UChar ;
< 
<   UChar ;
<   
< 
< } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
---
> typedef 
76a77
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
427c428
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
---
> 
76a77,85
> struct {
>   
>   
>   
>   
>   
>   
>   
> } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
784,792c793
< typedef struct {
<   
<   
<   
<   
<   
<   
<   
< } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
---
> typedef 
(94.1 %, 12040 bytes)
77a78,110
> struct {
> 
>    
> 
>    
>    
> 
>    ;
> 
>   
>   
>   
>   
>   
> 
>   
> 
>   
>   
>   
>   
> 
>   
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar ;
>   UChar ;
> 
>   
> } EState
> 
> 
> 
> ;
237,269c270
< typedef struct {
< 
<    
< 
<    
<    
< 
<    ;
< 
<   
<   
<   
<   
<   
< 
<   
< 
<   
<   
<   
<   
< 
<   
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar ;
<   UChar ;
< 
<   
< } EState
< 
< 
< 
< ;
---
> typedef 
77a78,116
> struct {
> 
>    
> 
>    
> 
>    
>    
>    
>   
> 
>    
>    
> 
>    
>    
>    
>    
> 
>    
>    
>    
>   Int32 ;
>    ;
>   Int32 ;
>   Int32 ;
> 
>   
> 
>   
>   
>   Bool ;
>   Bool ;
>   UChar ;
> 
>   UChar ;
>   
> 
> } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
319,357c358
< typedef struct {
< 
<    
< 
<    
< 
<    
<    
<    
<   
< 
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<   Int32 ;
<    ;
<   Int32 ;
<   Int32 ;
< 
<   
< 
<   
<   
<   Bool ;
<   Bool ;
<   UChar ;
< 
<   UChar ;
<   
< 
< } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
---
> typedef 
77a78
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
428c429
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
---
> 
77a78,86
> struct {
>   
>   
>   
>   
>   
>   
>   
> } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
785,793c794
< typedef struct {
<   
<   
<   
<   
<   
<   
<   
< } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
---
> typedef 
77a78
> void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf,  *BZ_APIBZ2_bzReadGetUnused_unused;
836c837
< void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf,  *BZ_APIBZ2_bzReadGetUnused_unused;
---
> 
77a78
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
840c841
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
---
> 
(94.1 %, 12041 bytes)
78a79
> char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
841c842
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
---
> 
78a79,82
> ;
> 
> #define   s  
> ;
1306,1309c1310
<    ;
< 
< #define   s  
<  
\ No newline at end of file
---
>     
\ No newline at end of file
(94.1 %, 12042 bytes)
79a80,83
> ;
> 
> #define   s  
> ;
1307,1310c1311
<    ;
< 
< #define   s  
<  
\ No newline at end of file
---
>     
\ No newline at end of file
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
160c160
< #define BZ_VERSION "1.0.2, 30-Dec-2001"
---
> #define BZ_VERSION ""
(94.1 %, 12024 bytes)
===< pass_indent :: final >===
1,7d0
<  
< 
<  
< 
<   
<   
<   
10,14c3,4
<   
<   
<   
<   
< #  1
---
> 
> #1
17,19c7,9
< #  4
< #  5
< #  6
---
> #4
> #5
> #6
24,46c14,16
< typedef struct {
<    ;
<    
<    
<    
<    
<    
< 
<   
< 
<   
<   
<   
< } bz_stream,  default_bzfree_strm,  default_bzfree_s_0,  BZ_APIBZ2_bzCompress_strm,  BZ_APIBZ2_bzCompress_s_0,  BZ_APIBZ2_bzCompressEnd_strm,  BZ_APIBZ2_bzCompressEnd_s_0,  BZ_APIBZ2_bzDecompressInit_strm,  BZ_APIBZ2_bzDecompressInit_s_0,  BZ_APIBZ2_bzDecompress_strm,  BZ_APIBZ2_bzDecompress_s_0,  BZ_APIBZ2_bzDecompressEnd_strm,  BZ_APIBZ2_bzDecompressEnd_s_0,  BZ_APIBZ2_bzBuffToBuffCompress_strm,  BZ_APIBZ2_bzBuffToBuffDecompress_strm;
< 
< #include <stdio.h>
< 
< #define BZ_API 
< #define BZ_EXTERN 
< 
<   
< 
<     
---
> typedef struct
> {
>   ;
48c18,24
< BZ_EXTERN  
---
> } bz_stream, default_bzfree_strm, default_bzfree_s_0,
>   BZ_APIBZ2_bzCompress_strm, BZ_APIBZ2_bzCompress_s_0,
>   BZ_APIBZ2_bzCompressEnd_strm, BZ_APIBZ2_bzCompressEnd_s_0,
>   BZ_APIBZ2_bzDecompressInit_strm, BZ_APIBZ2_bzDecompressInit_s_0,
>   BZ_APIBZ2_bzDecompress_strm, BZ_APIBZ2_bzDecompress_s_0,
>   BZ_APIBZ2_bzDecompressEnd_strm, BZ_APIBZ2_bzDecompressEnd_s_0,
>   BZ_APIBZ2_bzBuffToBuffCompress_strm, BZ_APIBZ2_bzBuffToBuffDecompress_strm;
50c26
<     
---
> #include <stdio.h>
52c28,29
< BZ_EXTERN  
---
> #define BZ_API
> #define BZ_EXTERN
54c31
<     void;
---
> BZ_EXTERN BZ_EXTERN void;
58c35
< typedef  BZFILE;
---
> typedef BZFILE;
60c37,125
<   int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0, 
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i =
>   0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0,
>   generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend,
>   generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0,
>   generateMTFValues_block_0, default_bzalloc, default_bzfree_workFactor,
>   default_bzfree_verbosity, default_bzfree_blockSize100k, default_bzfree_n,
>   default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9,
>   default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18,
>   default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1,
>   default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5,
>   BZ_APIBZ2_bzCompress_s_1, BZ_APIBZ2_bzDecompressInit_verbosity,
>   BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11,
>   BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26,
>   BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8,
>   BZ_APIBZ2_bzDecompressInit_s_1, BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b =
>   0, BZ_APIBZ2_bzWrite_ret, BZ_APIBZ2_bzWrite_bzf_4_5,
>   BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
>   BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
>   BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
>   BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
>   BZ_APIBZ2_bzWriteClose64_b =
>   0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6,
>   BZ_APIBZ2_bzReadClose_bzf_3, BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,
>   BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,
>   BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,
>   BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>   BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
>   BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
>   BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
>   BZ_APIBZ2_bzBuffToBuffCompress_destLen,
>   BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
>   BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
>   BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
>   BZ_APIBZ2_bzBuffToBuffDecompress_small,
>   BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
>   BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
>   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
>   BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
>   BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
>   BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
>   bzerrorstrings_0;
> typedef Char;
> typedef Bool;
> typedef UChar;
> typedef Int32;
> typedef UInt32;
> typedef UInt16;
> void *BZ_APIBZ2_bzWrite_buf, *BZ_APIBZ2_bzRead_buf,
>   *BZ_APIBZ2_bzReadGetUnused_unused;
> char BZ_APIBZ2_bzWrite_bzf_4_4, BZ_APIBZ2_bzWrite_bzf_4_0,
>   BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
>   BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
>   BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
>   BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
>   BZ_APIBZ2_bzBuffToBuffDecompress_source,
>   BZ_APIBZ2_bzBuffToBuffDecompress_dest,
>   BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
>   BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
> *fn1 ( int *, FILE *, int, int, void *, int );
> 
> void;
> 
> void;
> 
> BZ_EXTERN *fn2 ( int *, FILE *, int, int, int );
> 
> void;
> 
> void ( fn3 ) ( unsigned int );
> 
> BZ_EXTERN BZ_EXTERN void fn4 (  );
> void
> fn4 (  )
> {
> }
> 
> void fn5 (  );
> void
> fn5 (  )
> {
> }
> 
> BZ_EXTERN void;
> 
> void fn6 (  );
> 
> void
> fn6 (  )
> {
62,68c127
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, 
< 
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret, 
< 
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr, 
< 
<   bzerrorstrings_0   
---
>   int err = ( BZ_APIBZ2_bzerror_b );
71,153d129
< typedef  Char;
< typedef   Bool;
< typedef   UChar;
< typedef  Int32;
< typedef   UInt32
<   ;
< typedef   UInt16;
< void *BZ_APIBZ2_bzWrite_buf,  *BZ_APIBZ2_bzRead_buf,  *BZ_APIBZ2_bzReadGetUnused_unused;
< char BZ_APIBZ2_bzWrite_bzf_4_4,  BZ_APIBZ2_bzWrite_bzf_4_0,  BZ_APIBZ2_bzRead_bzf_4_4,  BZ_APIBZ2_bzReadGetUnused_bzf_4_0,  BZ_APIBZ2_bzBuffToBuffCompress_source,  BZ_APIBZ2_bzBuffToBuffCompress_dest,  BZ_APIBZ2_bzBuffToBuffCompress_strm_4,  BZ_APIBZ2_bzBuffToBuffCompress_strm_0,  BZ_APIBZ2_bzBuffToBuffDecompress_source,  BZ_APIBZ2_bzBuffToBuffDecompress_dest,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
< *fn1(int *, FILE *, int ,
<                                        int , void *, int );
< 
<  void 
< 
<     ;
< 
<  void 
< 
<     ;
< 
<   
< 
<     
< 
< BZ_EXTERN  *fn2(int *, FILE *,
<                                         int , int ,
<                                         int );
< 
<  void 
< 
<     ;
< 
<  void 
< 
<     
< 
<   (fn3)(     
<                                             
<                                           unsigned  
<                                             
<                                            int );
< 
<   
< 
<     
< 
< BZ_EXTERN  
< 
<     
< 
< BZ_EXTERN  void fn4(
< 
<     );
< void fn4() {   }
< 
<   void fn5(
< 
<     );
< void fn5() {   }
< 
<   
< 
<     
< 
< BZ_EXTERN  
< 
<     void;
< 
<  void fn6(
< 
<     );
< 
< 
< void fn6() {
<   
<   
<   int err = (BZ_APIBZ2_bzerror_b)
< 
<     
< 
<     ;
<     
<    ;
156,157d131
<  
< 
162,168d135
< 
< 
< 
< 
< 
< 
< 
172,174c139
<  
< 
< #   
---
> #
179,182c144,147
< #define     zf 
< #define       za1 
< #define         za2 
< #define           za3 
---
> #define     zf
> #define       za1
> #define         za2
> #define           za3
184c149
<              za4 
---
>              za4
186c151
< #define   nnn 
---
> #define   nnn
189,193d153
<   
<   
<   
<   
< 
195,198d154
<   
< 
<   
<   
202d157
<   
208c163
<    
---
> 
212d166
<     
214d167
<   
218,220d170
<        
< 
<  
222d171
<  
224c173
< #   
---
> #
226d174
<   
228,229d175
<   
<   
231d176
<   
234,246c179
<   
<   
<   
< #define      BZ_N_SHELL  
< 
< typedef struct {
< 
<    
< 
<    
<    
< 
<    ;
---
> #define      BZ_N_SHELL
248,252c181,182
<   
<   
<   
<   
<   
---
> typedef struct
> {
254,259c184
<   
< 
<   
<   
<   
<   
---
>   ;
261d185
<   
263,267c187,188
<   UChar ;
<   UChar ;
< 
<   
< } EState
---
>     UChar;
>     UChar;
269,274c190
< 
< 
< ;
< 
<   
<   
---
> } EState;
277,316d192
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
321,325c197,198
< typedef struct {
< 
<    
< 
<    
---
> typedef struct
> {
327,348c200,203
<    
<    
<    
<   
< 
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<   Int32 ;
<    ;
<   Int32 ;
<   Int32 ;
< 
<   
---
>   Int32;
>   ;
>   Int32;
>   Int32;
350,354c205,207
<   
<   
<   Bool ;
<   Bool ;
<   UChar ;
---
>   Bool;
>   Bool;
>   UChar;
356,357c209
<   UChar ;
<   
---
>   UChar;
359c211,212
< } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
---
> } DState, BZ_APIBZ2_bzDecompressInit_s, BZ_APIBZ2_bzDecompress_s,
>   BZ_APIBZ2_bzDecompressEnd_s;
364c217
<     
---
> 
369c222
<   c_tPos  
---
>   c_tPos
371c224
< #   
---
> #
374c227
<    ll4i       
---
>    ll4i
376c229
< #   
---
> #
380,381c233,234
< #define  a              
< #    
---
> #define  a
> #
383,387c236
<  
< # 
<  
<  
<  
---
> #
389c238
< #   
---
> #
393c242
< #define    a  
---
> #define    a
401c250
< #   
---
> #
403d251
<   
405d252
<   
407,416c254
< # 
<  
<  
<  
<  
<  
<  
<  
<  
<  
---
> #
418,419c256,257
< #define  ftabb        
< #define      zz2  
---
> #define  ftabb
> #define      zz2
422,426c260
<           MYMAXDEPTHOFzw1 
< 
<  
< 
<  
---
>           MYMAXDEPTHOFzw1
428c262,263
<  
---
> EState makeMaps_e_s, generateMTFValues_s, BZ_APIBZ2_bzCompress_s,
>   BZ_APIBZ2_bzCompressEnd_s;
430c265,267
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
---
> void
> fn7 (  )
> {
432,434c269,271
< void   fn7() {
<   
<   
---
>   for ( ;; )
>     {
>       &makeMaps_e_s;
436,440c273
<   for (;   ; ) {
<     &makeMaps_e_s;
< 
<     
<   }
---
>     }
443,456c276,277
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< fn8() {
<   
<   
---
> fn8 (  )
> {
458,463c279
<   
<   
<   
<   
<   
<   
---
>   UInt16 mtfv_0 = generateMTFValues_i;
465c281,282
<   
---
>   for ( ;; )
>     generateMTFValues_s_0_0;
467c284
<   
---
>   for ( ;; )
469c286
<   UInt16 mtfv_0
---
>     for ( ;; )
471,493c288
<   
<    =   
< 
<   generateMTFValues_i  ;
< 
<   for (;   ; )
<     generateMTFValues_s_0_0  
< 
<     
<     
<     ;
< 
<   for (;   ; )
<       
< 
<     
< 
<   for (;   ; ) 
< 
<     
< 
<     
<   ;
---
>       ;
496c291
<     generateMTFValues_wr;
---
>   generateMTFValues_wr;
499,503d293
<   
<   
< 
<   
< 
505,507c295
<           lll                                        
<                                                                           \
<   
---
>           lll
509c297
< #define     uuu 
---
> #define     uuu
511c299
< #define     uuu 
---
> #define     uuu
515,521c303,304
<   
< 
<   
< 
< 
< 
< 
---
> fn9 (  )
> {
523,544d305
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< fn9
< 
<  (
< 
<     ) {
<   
<   
<   
<   
<   
546,559d306
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   UInt32 s_4;
<   
561,563c308
<   if (           
<             0)
<      
---
>   UInt32 s_4;
565c310
<     
---
>   if ( 0 )
567,568c312
<     
<   if (bzalloc  NULL)
---
>     if ( bzalloc NULL )
570,571c314
<   if (bzfree  NULL)
<       
---
>   if ( bzfree NULL )
574,585c317
<   if (  NULL)
<      
<     
< 
<   arr1  NULL;
<   arr2  NULL;
<   ftab  NULL
< 
<      * 
<     
<     0 * sizeof(UInt32)
<     ;
---
>   if ( NULL )
587c319,321
<   if (          NULL)
---
>     arr1 NULL;
>   arr2 NULL;
>   ftab NULL * 0 * sizeof ( UInt32 );
589,601c323,326
<       
<     
<     
<     
<     
<         
<     
<     
< 
<     
<     s_4
<     
<    = 
---
>   if ( NULL )
> 
>     s_4 = s = 0;
>   0;
603,609d327
<     s
<    = 
<     0;
<     0;
<     
<   
<   
613,616c331
< #   
< 
< 
< 
---
> #
617a333,335
> int
> fn10 (  )
> {
619c337
< int fn10() {
---
>   if ( NULL )
621,627d338
<   
< 
<   
<   
<   
<   if (  NULL)
<      
629,633c340
<   if (  NULL)
<      
<     
< 
<    
---
>   if ( NULL )
635,636d341
< 
<    
640c345,346
<  
---
> fn11 (  )
> {
641a348
>   if ( NULL )
643,648d349
< fn11() {
<   
<   
<   
<   if (  NULL)
<      
650,662c351
<   if (  NULL)
<      
<     
< 
<    ;
< 
<   if (arr1  NULL)
<     BZFREE(arr1);
<   if (arr2  NULL)
<     
<   if (ftab  NULL)
<     
<   
---
>   if ( NULL )
666,677c355,357
<    
< }
< 
<  
< 
< 
< 
< 
< 
< 
< 
< 
---
>   if ( arr1 NULL )
>     BZFREE ( arr1 );
>   if ( arr2 NULL )
678a359
>     if ( ftab NULL )
680,728c361
< fn12(
< 
<     ) {
<   int small  ;
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
< 
<   if (  NULL)
<      
<         
< 
<    
<      
< 
<    ;
< 
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
< 
<     0;
<   if (  NULL)
<      
<     
<     
<     
<     
<     
<     0;
<     0;
<     0;
<     0;
<     
<     small
<    = 
<   ll16  NULL;
<   tt  NULL
<     
<     ;
---
>       ;
730d362
<    
733c365,367
<  
---
> fn12 (  )
> {
>   int small;
734a369
>   if ( NULL )
736,741d370
< fn13() {
<   
<   
<   
<   if (  NULL)
<      
743,745d371
<   if (  NULL)
<      
<     
747c373,375
<    ;
---
>   if ( bzalloc NULL )
>     default_bzalloc;
>   if ( bzfree NULL )
749c377,378
<    
---
>     0;
>   if ( NULL )
751c380,386
<     
---
>     0;
>   0;
>   0;
>   0;
> 
>   small = ll16 NULL;
>   tt NULL;
753d387
<    ;
756c390,391
<  
---
> fn13 (  )
> {
757a393
>   if ( NULL )
759,764d394
< fn14() {
<   
<   
<   
<   if (  NULL)
<      
766,777c396
<   if (  NULL)
<      
<     
< 
<    ;
< 
<   if (tt  NULL)
<     BZFREE(tt);
<   if (ll16  NULL)
<     
<   if (ll4  NULL)
<     
---
>   if ( NULL )
779d397
<   
782c400
<    
---
>   ;
785c403,404
<  
---
> fn14 (  )
> {
787,795c406
< typedef struct {
<   
<   
<   
<   
<   
<   
<   
< } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
---
>   if ( NULL )
797,805d407
<  *fn15(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
<   Int32 ret;
<   bzFile *bzf  ;
< 
<   fn16(
< 
<                   
<               verbosity  )
806a409
>   if ( NULL )
808,809c411
<    
<     
---
>     ;
811,813c413,415
<     
<      
<     
---
>   if ( tt NULL )
>     BZFREE ( tt );
>   if ( ll16 NULL )
815,828c417
<   fn16;
<     False;
<     0;
<     f
<    = 
<   bzf  
<     
<     
< 
<     
< 
<     
<    = (   workFactor)
<   
---
>     if ( ll4 NULL )
830c419
<   ;
---
>       ;
832,834d420
<   bzf  
<     ;
<    
837,839c423,424
<  
< 
< 
---
> typedef struct
> {
840a426,427
> } bzFile, BZ_APIBZ2_bzWrite_bzf, BZ_APIBZ2_bzReadClose_bzf,
>   BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
841a429,433
> *fn15 ( int *bzerror, FILE * f, int blockSize100k,
> 	int verbosity, int workFactor )
> {
>   Int32 ret;
>   bzFile *bzf;
842a435
>   fn16 ( verbosity );
843a437,440
>   fn16;
>   False;
>   0;
>   f = bzf = ( workFactor );
844a442
>   bzf;
845a444
> }
847c446,447
< fn17(
---
> fn17 (  )
> {
849,861d448
<     ) {
<   
<   
<   
<   
<   
<   
<    
<   
<    
<   
<    
<     
864,875d450
<   
<    
<     
< 
<     
< 
<   
< 
<     
<     
< 
<     
878,879c453,454
<  
< 
---
> fn18 (  )
> {
881c456
<  
---
>   int nbytes_in_lo32;
882a458,459
>   bzFile bzf;
>   fn19 (  );
883a461
>   if ( NULL )
884a463
>     if ( NULL )
886c465
< fn18(
---
>       if ( NULL )
888,894c467
<     ) {
<    
<    
<    
<    int nbytes_in_lo32  ;
<   
<   
---
> 	if ( NULL )
896,897c469,476
<   bzFile bzf  ;
<    fn19
---
> 	  if ( nbytes_in_lo32 )
> 	    bzf;
>   if ( NULL )
>     bzf;
>   if ( NULL )
>     bzf;
>   if ( NULL )
>     bzf;
899,931d477
<    (  )
<     
<   
< 
<   
<    
<     ;
< 
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
< 
<   if (    
< 
<        
< 
<        nbytes_in_lo32  )
<           bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf
< 
<   
<   ;
<   
934,936c480,483
<  *fn20(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
<   bzFile *bzf  ;
---
> *fn20 ( int *bzerror, FILE * f, int verbosity, int small,
> 	void *unused, int nUnused )
> {
>   bzFile *bzf;
938,956c485
<    int bzf_4_1, bzf_3, bzf_2, bzf_6,  ret;
<   
<   
<   
<   
< 
<   fn16(
< 
<                       
<                      
<       nUnused  )
<     ;
< 
<    
<     
< 
<     
<      
<     
---
>   int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
958c487
<   
---
>   fn16 ( nUnused );
960,966c489
<     False;
<     
<     
<     False;
<   bzf  
<     
<    = NULL;
---
>   False;
968c491,492
<   while (  0)
---
>   False;
>   bzf = NULL;
970,971c494
<       fn21( verbosity )
<   
---
>   while ( 0 )
973,976c496
<   
< 
<     ;
<     
---
>     fn21 ( verbosity );
978,979c498
<     
<    ;
---
>   ;
982,993c501,502
<  
< 
< 
< 
< fn22() {
<   
< 
<   
<   
<   
<    
<     
---
> fn22 (  )
> {
995,1001d503
<   
< 
<   
< 
<   
< 
<   
1005,1006c507,508
<  
< 
---
> fn23 (  )
> {
1007a510
>   ;
1009,1040c512
< 
< 
< 
< fn23(
< 
<     ) {
<   
<   
<   
< 
<   
<   
<    
<   
< 
<    
<     
< 
<   
< 
<   
< 
<     
< 
<   
< 
<     
<     ;
< 
<    
< 
<     return 0;
---
>   return 0;
1043,1046c515,516
<  
< 
< 
< 
---
> fn24 (  )
> {
1048,1061c518
< fn24(
< 
<     ) {
<   
<   
<   
< 
<   
<   
<     fn25
< 
<    (  )
<     
<   
---
>   fn25 (  );
1064,1065d520
<    
<     
1068,1069d522
<     
<     ;
1072,1078c525,526
<  
< 
< 
< 
< 
< 
< 
---
> fn26 (  )
> {
1079a528
>   if ( 0 )
1080a530,532
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
1081a534
>   return 0;
1083,1141d535
< 
< 
< fn26(
< 
<     ) {
<   
<   
<   
<    
<   
<    
<   
<   
<    
<    
<   
<   
<   
< 
<   if (               
<                      
<         0)
<      
< 
<     
< 
<     
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     
<   
< 
<    
< 
<     
<     
<     ;
<     
< 
<     
<   
< 
<    
<   
< 
<    
< 
<     
<   
<   return 
< 
< 
<   0
<    
< 
< 
<   ;
<    
1144,1153c538,539
<  
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> fn27 (  )
> {
1154a541
>   if ( 4 )
1156c543,545
< fn27(
---
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
1158,1170c547
<     ) {
<   
<   
<    
<   
<    
<   
<   
<    
<    
<   
<   
<   
---
>   return BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
1172,1208d548
<   if (           
<                     4)
<      
< 
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     
<   
< 
<    
< 
<     
<     
<     ;
<     
< 
<     
<   
< 
<    
<   
< 
<    
< 
<     
<   
<   return 
< 
< 
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5  ;
< 
<   
< 
< 
<   
<    
1211,1220c551,553
<   fn28() {   }
< 
<   
< 
<  
< 
<  
< 
<  
< fn29() {
---
> fn28 (  )
> {
> }
1222,1223c555,556
<   
<   
---
> fn29 (  )
> {
1225d557
<   
1228,1230c560,561
<  
< fn30() {
<   
---
> fn30 (  )
> {
1232c563,565
<   int bzerr
---
>   int bzerr;
>   if ( bzerr == BZ_OK )
>     {
1234,1253c567
<   ;
<   if (bzerr == BZ_OK) {
<      
<     
<      
<   }
< }
< 
<  fn31() {   }
< 
<  
< fn32() {
<   BZFILE b  ;
<   
<   FILE *fp = (b);
< 
<   if (  
<      (b))   if (      stdout) 
<       ;
<     
---
>     }
1256c570,572
<   
---
> fn31 (  )
> {
> }
1257a574,576
> fn32 (  )
> {
>   BZFILE b;
1258a578
>   FILE *fp = ( b );
1260c580,582
<   
---
>   if ( ( b ) )
>     if ( stdout )
>       ;
1262c584
<   
---
> }
1267,1270d588
<  
<  
<  
< 
1274,1282c592
<   
<   
<   
<   
<   
< 
< #define      snocStringroot 
< 
< #define      snocStringroot 
---
> #define      snocStringroot
1284c594
<  
---
> #define      snocStringroot
1286,1307c596
<  
< 
<   
<   
< 
<   
< 
<   
<   
<   
< 
<   
<   
<   
< 
<   
< 
<   
< 
<   
< 
<    ;
---
> ;
1309,1310c598
< #define   s  
<  
\ No newline at end of file
---
> #define   s
1d0
<  
3d1
<  
5,7c3,7
<   
<   
<   
---
> 
> 
> 
> 
> 
10,13c10,13
<   
<   
<   
<   
---
> 
> 
> 
> 
25,36c25,36
<    ;
<    
<    
<    
<    
<    
< 
<   
< 
<   
<   
<   
---
>     ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
41,42c41,43
< #define BZ_API 
< #define BZ_EXTERN 
---
> #define BZ_API
> #define BZ_EXTERN
> 
44d44
<   
46d45
<     
48d46
< BZ_EXTERN  
50c48
<     
---
> BZ_EXTERN
52d49
< BZ_EXTERN  
54c51,54
<     void;
---
> 
> BZ_EXTERN
> 
> void;
60c60
<   int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0, 
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0, generateMTFValues_block_0,
62c62
<   default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, 
---
>                                                    default_bzalloc,  default_bzfree_workFactor,  default_bzfree_verbosity,  default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,  BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,  BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,  BZ_APIBZ2_bzWrite_bzf_4_5,  BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3,
64c64
<  BZ_APIBZ2_bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret, 
---
bzWriteClose,  BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,  BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,  BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32,  BZ_APIBZ2_bzWriteClose64_abandon, BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,  BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,  BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,  BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,  BZ_APIBZ2_bzBuffToBuffCompress_workFactor,  BZ_APIBZ2_bzBuffToBuffCompress_verbosity,  BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,  BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffCompress_destLen,  BZ_APIBZ2_bzBuffToBuffCompress_strm_5,  BZ_APIBZ2_bzBuffToBuffCompress_strm_1,  BZ_APIBZ2_bzBuffToBuffCompress_ret,  BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,  BZ_APIBZ2_bzBuffToBuffDecompress_small,  BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,  BZ_APIBZ2_bzBuffToBuffDecompress_destLen,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,  BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,  BZ_APIBZ2_bzBuffToBuffDecompress_ret,
66c66
<   bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr, 
---
bzopen_or_bzdopen,  BZ_APIBZ2_bzread_nread,  BZ_APIBZ2_bzwrite_len,  BZ_APIBZ2_bzclose_bzerr,
68c68
<   bzerrorstrings_0   
---
bzerrorstrings_0
70c70
<   ;
---

76c76
<   ;
---
> ;
81c81
<                                        int , void *, int );
---
>      int , void *, int );
83c83
<  void 
---
> void
85c85,89
<     ;
---
> ;
> 
> void
> 
> ;
87d90
<  void 
89d91
<     ;
91d92
<   
93d93
<     
96,97c96,97
<                                         int , int ,
<                                         int );
---
>                 int , int ,
>                 int );
99c99
<  void 
---
> void
101c101,109
<     ;
---
> ;
> 
> void
> 
> 
> 
> (fn3)(
> 
>     unsigned
103c111
<  void 
---
>     int );
105d112
<     
107,111d113
<   (fn3)(     
<                                             
<                                           unsigned  
<                                             
<                                            int );
113d114
<   
115d115
<     
117c117,118
< BZ_EXTERN  
---
> BZ_EXTERN
> 
119d119
<     
123c123
<     );
---
> );
126c126
<   void fn5(
---
> void fn5(
128c128
<     );
---
> );
131d130
<   
133d131
<     
135d132
< BZ_EXTERN  
137d133
<     void;
139c135,137
<  void fn6(
---
> BZ_EXTERN
> 
> void;
141c139,141
<     );
---
> void fn6(
> 
> );
145,147d144
<   
<   
<   int err = (BZ_APIBZ2_bzerror_b)
149c146,151
<     
---
> 
>     int err = (BZ_APIBZ2_bzerror_b)
> 
> 
> 
>               ;
152,153d153
<     
<    ;
156c156
<  
---
> 
172d171
<  
174c173,174
< #   
---
> 
> #
179,182c179,182
< #define     zf 
< #define       za1 
< #define         za2 
< #define           za3 
---
> #define     zf
> #define       za1
> #define         za2
> #define           za3
184c184
<              za4 
---
>              za4
186c186
< #define   nnn 
---
> #define   nnn
189,192c189,192
<   
<   
<   
<   
---
> 
> 
> 
> 
195d194
<   
197,198c196,198
<   
<   
---
> 
> 
> 
202c202
<   
---
> 
208c208
<    
---
>  
212c212,213
<     
---
>  
> 
214d214
<   
218,219d217
<        
< 
222d219
<  
224d220
< #   
226c222,226
<   
---
> 
> 
> #
> 
> 
228,229d227
<   
<   
231c229,231
<   
---
> 
> 
> 
234,237d233
<   
<   
<   
< #define      BZ_N_SHELL  
239d234
< typedef struct {
241d235
<    
243,244c237
<    
<    
---
> #define      BZ_N_SHELL
246c239
<    ;
---
> typedef struct {
248,252d240
<   
<   
<   
<   
<   
254d241
<   
256,259d242
<   
<   
<   
<   
261,264d243
<   
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<   UChar ;
<   UChar ;
266,267d244
<   
< } EState
268a246
>     ;
271d248
< ;
273,274d249
<   
<   
276,316d250
< #define BZ_X_MAGIC_1 0
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
318,319d251
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 6
321d252
< typedef struct {
323d253
<    
325d254
<    
327,354d255
<    
<    
<    
<   
< 
<    
<    
< 
<    
<    
<    
<    
< 
<    
<    
<    
<   Int32 ;
<    ;
<   Int32 ;
<   Int32 ;
< 
<   
< 
<   
<   
<   Bool ;
<   Bool ;
<   UChar ;
356,357d256
<   UChar ;
<   
359d257
< } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
361,364d258
< #define                                                            \
<     stPos                                                    \
<                                                              \
<     
366,369d259
< #define                                                          \
<                                                            \
<                                                               \
<   c_tPos  
371d260
< #   
373,374c262,264
< #define                                                                \
<    ll4i       
---
>     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>     UChar ;
>     UChar ;
376d265
< #   
378c267
< #define    zzn
---
> } EState
380,381d268
< #define  a              
< #    
383,387d269
<  
< # 
<  
<  
<  
389c271
< #   
---
> ;
391d272
< #define    zzn
393d273
< #define    a  
395d274
< #define    dz
397c276
< #define    dz
---
> #define BZ_X_MAGIC_1 0
399d277
< #define    az
401d278
< #   
403,405d279
<   
< #define    BZ_N_QSORT
<   
407,416d280
< # 
<  
<  
<  
<  
<  
<  
<  
<  
<  
418,419d281
< #define  ftabb        
< #define      zz2  
421,422d282
< #define                                                           \
<           MYMAXDEPTHOFzw1 
424d283
<  
426d284
<  
428d285
<  
430d286
< EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
432,434d287
< void   fn7() {
<   
<   
436,437d288
<   for (;   ; ) {
<     &makeMaps_e_s;
439,441d289
<     
<   }
< }
443d290
<   
454,456d300
< fn8() {
<   
<   
458,463d301
<   
<   
<   
<   
<   
<   
465d302
<   
467d303
<   
469d304
<   UInt16 mtfv_0
471,472d305
<   
<    =   
474d306
<   generateMTFValues_i  ;
476,477d307
<   for (;   ; )
<     generateMTFValues_s_0_0  
479,481d308
<     
<     
<     ;
483,484d309
<   for (;   ; )
<       
486d310
<     
488d311
<   for (;   ; ) 
490d312
<     
492,494d313
<     
<   ;
<   generateMTFValues_s.mtfFreq;
496,497d314
<     generateMTFValues_wr;
< }
499,500d315
<   
<   
502d316
<   
504,507c318,319
< #define                                                             \
<           lll                                        
<                                                                           \
<   
---
> #define MTFA_SIZE 4096
> #define MTFL_SIZE 6
509c321
< #define     uuu 
---
> typedef struct {
511d322
< #define     uuu 
513d323
< #define    lval
515d324
<   
517d325
<   
535c343,346
< fn9
---
>     Int32 ;
>     ;
>     Int32 ;
>     Int32 ;
537d347
<  (
539,571d348
<     ) {
<   
<   
<   
<   
<   
<   EState *s;
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   UInt32 s_4;
<   
< 
<   if (           
<             0)
<      
< 
<     
< 
<     
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
573,580d349
<     0;
<   if (  NULL)
<      
<     
< 
<   arr1  NULL;
<   arr2  NULL;
<   ftab  NULL
582,585d350
<      * 
<     
<     0 * sizeof(UInt32)
<     ;
587c352,354
<   if (          NULL)
---
>     Bool ;
>     Bool ;
>     UChar ;
589,601c356
<       
<     
<     
<     
<     
<         
<     
<     
< 
<     
<     s_4
<     
<    = 
---
>     UChar ;
603,611d357
<     s
<    = 
<     0;
<     0;
<     
<   
<   
<   return BZ_OK;
< }
613c359
< #   
---
> } DState,  BZ_APIBZ2_bzDecompressInit_s,  BZ_APIBZ2_bzDecompress_s,  BZ_APIBZ2_bzDecompressEnd_s;
614a361,364
> #define                                                            \
>     stPos                                                    \
>                                                              \
>  
615a366,369
> #define                                                          \
>                                                            \
>                                                               \
>   c_tPos
616a371
> #
617a373,374
> #define                                                                \
>    ll4i
619c376
< int fn10() {
---
> #
621c378
<   
---
> #define    zzn
623,631c380,381
<   
<   
<   
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
---
> #define  a
> #
633d382
<    
634a384
> #
636,638d385
<    
<     return BZ_OK;
< }
640d386
<  
643,652c389
< fn11() {
<   
<   
<   
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
---
> #
654c391
<    ;
---
> #define    zzn
656,662c393
<   if (arr1  NULL)
<     BZFREE(arr1);
<   if (arr2  NULL)
<     
<   if (ftab  NULL)
<     
<   
---
> #define    a
664c395
<     ;
---
> #define    dz
666,667c397
<    
< }
---
> #define    dz
669c399
<  
---
> #define    az
670a401
> #
672a404
> #define    BZ_N_QSORT
674a407
> #
680d412
< fn12(
682,708d413
<     ) {
<   int small  ;
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
<   
< 
<   if (  NULL)
<      
<         
< 
<    
<      
< 
<    ;
< 
<   if (bzalloc  NULL)
<       default_bzalloc;
<   if (bzfree  NULL)
<       
710,728d414
<     0;
<   if (  NULL)
<      
<     
<     
<     
<     
<     
<     0;
<     0;
<     0;
<     0;
<     
<     small
<    = 
<   ll16  NULL;
<   tt  NULL
<     
<     ;
730,731d415
<    
< }
733d416
<  
734a418,419
> #define  ftabb
> #define      zz2
736,745c421,422
< fn13() {
<   
<   
<   
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
---
> #define                                                           \
>           MYMAXDEPTHOFzw1
747d423
<    ;
749d424
<    
751d425
<     
753,754d426
<    ;
< }
756d427
<  
759,768c430,432
< fn14() {
<   
<   
<   
<   if (  NULL)
<      
<     ;
<   if (  NULL)
<      
<     
---
> EState makeMaps_e_s,  generateMTFValues_s,  BZ_APIBZ2_bzCompress_s,  BZ_APIBZ2_bzCompressEnd_s;
> 
> void   fn7() {
770d433
<    ;
772,777d434
<   if (tt  NULL)
<     BZFREE(tt);
<   if (ll16  NULL)
<     
<   if (ll4  NULL)
<     
779,780c436,437
<   
<     ;
---
>     for (;   ; ) {
>         &makeMaps_e_s;
782c439,440
<    
---
> 
>     }
785d442
<  
787,795d443
< typedef struct {
<   
<   
<   
<   
<   
<   
<   
< } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
797,800d444
<  *fn15(int *bzerror, FILE *f, int blockSize100k,
<                               int verbosity, int workFactor) {
<   Int32 ret;
<   bzFile *bzf  ;
802d445
<   fn16(
804,806d446
<                   
<               verbosity  )
<     ;
808,809d447
<    
<     
811,813d448
<     
<      
<     
815,822d449
<   fn16;
<     False;
<     0;
<     f
<    = 
<   bzf  
<     
<     
824d450
<     
826,828d451
<     
<    = (   workFactor)
<   
830d452
<   ;
832,835c454
<   bzf  
<     ;
<    
< }
---
> fn8() {
837d455
<  
847d464
< fn17(
849,866d465
<     ) {
<   
<   
<   
<   
<   
<   
<    
<   
<    
<   
<    
<     
<   ;
< 
<   
<    
<     
868d466
<     
870d467
<   
872,873c469
<     
<     
---
>     UInt16 mtfv_0
875,876d470
<     
< }
878c472
<  
---
>         =
879a474
>             generateMTFValues_i  ;
881c476,477
<  
---
>     for (;   ; )
>         generateMTFValues_s_0_0
884a481
>         ;
886c483
< fn18(
---
>     for (;   ; )
888,956d484
<     ) {
<    
<    
<    
<    int nbytes_in_lo32  ;
<   
<   
< 
<   bzFile bzf  ;
<    fn19
< 
<    (  )
<     
<   
< 
<   
<    
<     ;
< 
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
<   if (  NULL)
<       
< 
<   if (    
< 
<        
< 
<        nbytes_in_lo32  )
<           bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf;
<   if (  NULL)
<       bzf
< 
<   
<   ;
<   
< }
< 
<  *fn20(int *bzerror, FILE *f, int verbosity, int small,
<                              void *unused, int nUnused) {
<   bzFile *bzf  ;
<   char bzf_4_0;
<    int bzf_4_1, bzf_3, bzf_2, bzf_6,  ret;
<   
<   
<   
<   
< 
<   fn16(
< 
<                       
<                      
<       nUnused  )
<     ;
< 
<    
<     
< 
<     
<      
<     
958d485
<   
960,966d486
<     False;
<     
<     
<     False;
<   bzf  
<     
<    = NULL;
968c488
<   while (  0)
---
>         for (;   ; )
970,971d489
<       fn21( verbosity )
<   
973d490
<   
975,976d491
<     ;
<     
978,979c493,496
<     
<    ;
---
>             ;
>     generateMTFValues_s.mtfFreq;
> 
>     generateMTFValues_wr;
982d498
<  
986,987d501
< fn22() {
<   
989,993d502
<   
<   
<   
<    
<     
995c504,506
<   
---
> #define                                                             \
>           lll
> \
997d507
<   
999c509
<   
---
> #define     uuu
1001,1003c511
<   
<   ;
< }
---
> #define     uuu
1005c513
<  
---
> #define    lval
1012d519
< fn23(
1014,1017d520
<     ) {
<   
<   
<   
1019,1022d521
<   
<   
<    
<   
1024,1025d522
<    
<     
1027d523
<   
1029d524
<   
1031d525
<     
1033d526
<   
1035,1036d527
<     
<     ;
1038d528
<    
1040,1041d529
<     return 0;
< }
1043d530
<  
1048c535
< fn24(
---
> fn9
1050,1053c537
<     ) {
<   
<   
<   
---
> (
1055,1057c539
<   
<   
<     fn25
---
> ) {
1059,1065d540
<    (  )
<     
<   
< 
<   ;
<    
<     
1067,1070d541
<   ;
<     
<     ;
< }
1072d542
<  
1074a545
>     EState *s;
1085d555
< fn26(
1087,1100d556
<     ) {
<   
<   
<   
<    
<   
<    
<   
<   
<    
<    
<   
<   
<   
1102,1103c558,561
<   if (               
<                      
---
>     UInt32 s_4;
> 
> 
>     if (
1105d562
<      
1107d563
<     
1109,1114d564
<     
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     
<   
1116d565
<    
1118,1121d566
<     
<     
<     ;
<     
1123,1124c568,570
<     
<   
---
>         if (bzalloc  NULL)
>             default_bzalloc;
>     if (bzfree  NULL)
1126,1127d571
<    
<   
1129c573,574
<    
---
>         0;
>     if (  NULL)
1131,1133d575
<     
<   
<   return 
1136,1137c578,580
<   0
<    
---
>         arr1  NULL;
>     arr2  NULL;
>     ftab  NULL
1138a582
>     *
1140,1142c584,585
<   ;
<    
< }
---
>     0 * sizeof(UInt32)
>     ;
1144c587
<  
---
>     if (          NULL)
1156c599
< fn27(
---
>         s_4
1158,1170c601
<     ) {
<   
<   
<    
<   
<    
<   
<   
<    
<    
<   
<   
<   
---
>             =
1172,1174c603,606
<   if (           
<                     4)
<      
---
>                 s
>                 =
>                     0;
>     0;
1176,1180d607
<   bzalloc  NULL;
<   bzfree  NULL;
<   opaque  NULL
<     
<   
1182d608
<    
1184,1187c610,611
<     
<     
<     ;
<     
---
>     return BZ_OK;
> }
1189,1190c613
<     
<   
---
> #
1192,1193d614
<    
<   
1195d615
<    
1197,1199d616
<     
<   
<   return 
1202c619
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5  ;
---
> int fn10() {
1204d620
<   
1207,1209d622
<   
<    
< }
1211d623
<   fn28() {   }
1213d624
<   
1215c626,629
<  
---
>     if (  NULL)
> 
>         ;
>     if (  NULL)
1217d630
<  
1219,1220d631
<  
< fn29() {
1222,1223d632
<   
<   
1225,1226d633
<   
< }
1228,1230d634
<  
< fn30() {
<   
1232d635
<   int bzerr
1234,1239c637
<   ;
<   if (bzerr == BZ_OK) {
<      
<     
<      
<   }
---
>         return BZ_OK;
1242d639
<  fn31() {   }
1244,1248d640
<  
< fn32() {
<   BZFILE b  ;
<   
<   FILE *fp = (b);
1250,1254d641
<   if (  
<      (b))   if (      stdout) 
<       ;
<     
< }
1256c643
<   
---
> fn11() {
1260c647
<   
---
>     if (  NULL)
1262c649,650
<   
---
>         ;
>     if (  NULL)
1264,1265d651
< #include <signal.h>
< #include <errno.h>
1267,1269d652
<  
<  
<  
1271,1272c654
< #include <fcntl.h>
< #include <utime.h>
---
>         ;
1274,1278c656,658
<   
<   
<   
<   
<   
---
>     if (arr1  NULL)
>         BZFREE(arr1);
>     if (arr2  NULL)
1280c660
< #define      snocStringroot 
---
>         if (ftab  NULL)
1282d661
< #define      snocStringroot 
1284d662
<  
1286c664
<  
---
>             ;
1288,1289d665
<   
<   
1291c667
<   
---
> }
1293,1295d668
<   
<   
<   
1297,1299d669
<   
<   
<   
1301d670
<   
1303d671
<   
1305d672
<   
1307d673
<    ;
1309,1310c675,1309
< #define   s  
<  
\ No newline at end of file
---
> 
> 
> 
> 
> 
> fn12(
> 
> ) {
>     int small  ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     if (  NULL)
> 
> 
> 
> 
> 
> 
>         ;
> 
>     if (bzalloc  NULL)
>         default_bzalloc;
>     if (bzfree  NULL)
> 
> 
>         0;
>     if (  NULL)
> 
> 
> 
> 
> 
> 
>         0;
>     0;
>     0;
>     0;
> 
>     small
>         =
>             ll16  NULL;
>     tt  NULL
> 
>     ;
> 
> 
> }
> 
> 
> 
> 
> fn13() {
> 
> 
> 
>     if (  NULL)
> 
>         ;
>     if (  NULL)
> 
> 
> 
>         ;
> 
> 
> 
> 
> 
>     ;
> }
> 
> 
> 
> 
> fn14() {
> 
> 
> 
>     if (  NULL)
> 
>         ;
>     if (  NULL)
> 
> 
> 
>         ;
> 
>     if (tt  NULL)
>         BZFREE(tt);
>     if (ll16  NULL)
> 
>         if (ll4  NULL)
> 
> 
> 
>             ;
> 
> 
> }
> 
> 
> 
> typedef struct {
> 
> 
> 
> 
> 
> 
> 
> } bzFile,  BZ_APIBZ2_bzWrite_bzf,  BZ_APIBZ2_bzReadClose_bzf,  BZ_APIBZ2_bzRead_bzf,  BZ_APIBZ2_bzReadGetUnused_bzf;
> 
> *fn15(int *bzerror, FILE *f, int blockSize100k,
>       int verbosity, int workFactor) {
>     Int32 ret;
>     bzFile *bzf  ;
> 
>     fn16(
> 
> 
>         verbosity  )
>     ;
> 
> 
> 
> 
> 
> 
> 
> 
>     fn16;
>     False;
>     0;
>     f
>         =
>             bzf
> 
> 
> 
> 
> 
> 
>             = (   workFactor)
> 
> 
>               ;
> 
>     bzf
>     ;
> 
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> fn17(
> 
> ) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> fn18(
> 
> ) {
> 
> 
> 
>     int nbytes_in_lo32  ;
> 
> 
> 
>     bzFile bzf  ;
>     fn19
> 
>     (  )
> 
> 
> 
> 
> 
>     ;
> 
>     if (  NULL)
> 
>         if (  NULL)
> 
>             if (  NULL)
> 
>                 if (  NULL)
> 
> 
>                     if (
> 
> 
> 
>                         nbytes_in_lo32  )
>                         bzf;
>     if (  NULL)
>         bzf;
>     if (  NULL)
>         bzf;
>     if (  NULL)
>         bzf
> 
> 
>         ;
> 
> }
> 
> *fn20(int *bzerror, FILE *f, int verbosity, int small,
>       void *unused, int nUnused) {
>     bzFile *bzf  ;
>     char bzf_4_0;
>     int bzf_4_1, bzf_3, bzf_2, bzf_6,  ret;
> 
> 
> 
> 
> 
>     fn16(
> 
> 
> 
>         nUnused  )
>     ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     False;
> 
> 
>     False;
>     bzf
> 
>         = NULL;
> 
>     while (  0)
> 
>         fn21( verbosity )
> 
> 
> 
> 
>         ;
> 
> 
> 
>     ;
> }
> 
> 
> 
> 
> 
> fn22() {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     ;
> }
> 
> 
> 
> 
> 
> 
> 
> 
> fn23(
> 
> ) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     ;
> 
> 
> 
>     return 0;
> }
> 
> 
> 
> 
> 
> 
> fn24(
> 
> ) {
> 
> 
> 
> 
> 
> 
>     fn25
> 
>     (  )
> 
> 
> 
>     ;
> 
> 
> 
>     ;
> 
>     ;
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> fn26(
> 
> ) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     if (
> 
>         0)
> 
> 
> 
> 
> 
>         bzalloc  NULL;
>     bzfree  NULL;
>     opaque  NULL
> 
> 
> 
> 
> 
> 
> 
>     ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     return
> 
> 
>         0
> 
> 
> 
>         ;
> 
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> fn27(
> 
> ) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     if (
>         4)
> 
> 
>         bzalloc  NULL;
>     bzfree  NULL;
>     opaque  NULL
> 
> 
> 
> 
> 
> 
> 
>     ;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     return
> 
> 
>         BZ_APIBZ2_bzBuffToBuffDecompress_strm_5  ;
> 
> 
> 
> 
> 
> 
> }
> 
> fn28() {   }
> 
> 
> 
> 
> 
> 
> 
> 
> fn29() {
> 
> 
> 
> 
> 
> }
> 
> 
> fn30() {
> 
> 
>     int bzerr
> 
>     ;
>     if (bzerr == BZ_OK) {
> 
> 
> 
>     }
> }
> 
> fn31() {   }
> 
> 
> fn32() {
>     BZFILE b  ;
> 
>     FILE *fp = (b);
> 
>     if (
>         (b))   if (      stdout)
>             ;
> 
> }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #include <signal.h>
> #include <errno.h>
> 
> 
> 
> 
> 
> #include <fcntl.h>
> #include <utime.h>
> 
> 
> 
> 
> 
> 
> 
> #define      snocStringroot
> 
> #define      snocStringroot
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> ;
> 
> #define   s
(95.6 %, 9034 bytes)
16c16
<   ;
---
>     ;
19,24c19,24
<   BZ_APIBZ2_bzCompress_strm, BZ_APIBZ2_bzCompress_s_0,
<   BZ_APIBZ2_bzCompressEnd_strm, BZ_APIBZ2_bzCompressEnd_s_0,
<   BZ_APIBZ2_bzDecompressInit_strm, BZ_APIBZ2_bzDecompressInit_s_0,
<   BZ_APIBZ2_bzDecompress_strm, BZ_APIBZ2_bzDecompress_s_0,
<   BZ_APIBZ2_bzDecompressEnd_strm, BZ_APIBZ2_bzDecompressEnd_s_0,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm, BZ_APIBZ2_bzBuffToBuffDecompress_strm;
---
> BZ_APIBZ2_bzCompress_strm, BZ_APIBZ2_bzCompress_s_0,
> BZ_APIBZ2_bzCompressEnd_strm, BZ_APIBZ2_bzCompressEnd_s_0,
> BZ_APIBZ2_bzDecompressInit_strm, BZ_APIBZ2_bzDecompressInit_s_0,
> BZ_APIBZ2_bzDecompress_strm, BZ_APIBZ2_bzDecompress_s_0,
> BZ_APIBZ2_bzDecompressEnd_strm, BZ_APIBZ2_bzDecompressEnd_s_0,
> BZ_APIBZ2_bzBuffToBuffCompress_strm, BZ_APIBZ2_bzBuffToBuffDecompress_strm;
38,77c38,77
<   0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0,
<   generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend,
<   generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0,
<   generateMTFValues_block_0, default_bzalloc, default_bzfree_workFactor,
<   default_bzfree_verbosity, default_bzfree_blockSize100k, default_bzfree_n,
<   default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9,
<   default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18,
<   default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1,
<   default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5,
<   BZ_APIBZ2_bzCompress_s_1, BZ_APIBZ2_bzDecompressInit_verbosity,
<   BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11,
<   BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26,
<   BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8,
<   BZ_APIBZ2_bzDecompressInit_s_1, BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b =
<   0, BZ_APIBZ2_bzWrite_ret, BZ_APIBZ2_bzWrite_bzf_4_5,
<   BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
<   BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
<   BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
<   BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
<   BZ_APIBZ2_bzWriteClose64_b =
<   0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6,
<   BZ_APIBZ2_bzReadClose_bzf_3, BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,
<   BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,
<   BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,
<   BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
<   BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
<   BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
<   BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
<   BZ_APIBZ2_bzBuffToBuffCompress_destLen,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
<   BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
<   BZ_APIBZ2_bzBuffToBuffDecompress_small,
<   BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
<   BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
<   BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
<   BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
<   bzerrorstrings_0;
---
>     0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0,
>     generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend,
>     generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0,
>     generateMTFValues_block_0, default_bzalloc, default_bzfree_workFactor,
>     default_bzfree_verbosity, default_bzfree_blockSize100k, default_bzfree_n,
>     default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9,
>     default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18,
>     default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1,
>     default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5,
>     BZ_APIBZ2_bzCompress_s_1, BZ_APIBZ2_bzDecompressInit_verbosity,
>     BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11,
>     BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26,
>     BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8,
>     BZ_APIBZ2_bzDecompressInit_s_1, BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b =
>         0, BZ_APIBZ2_bzWrite_ret, BZ_APIBZ2_bzWrite_bzf_4_5,
>         BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
>         BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
>         BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
>         BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
>         BZ_APIBZ2_bzWriteClose64_b =
>             0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6,
>             BZ_APIBZ2_bzReadClose_bzf_3, BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,
>             BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,
>             BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,
>             BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>             BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
>             BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
>             BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
>             BZ_APIBZ2_bzBuffToBuffCompress_destLen,
>             BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
>             BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
>             BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
>             BZ_APIBZ2_bzBuffToBuffDecompress_small,
>             BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
>             BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
>             BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
>             BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
>             BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
>             BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
>             bzerrorstrings_0;
85c85
<   *BZ_APIBZ2_bzReadGetUnused_unused;
---
>      *BZ_APIBZ2_bzReadGetUnused_unused;
87,94c87,94
<   BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
<   BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
<   BZ_APIBZ2_bzBuffToBuffDecompress_source,
<   BZ_APIBZ2_bzBuffToBuffDecompress_dest,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
---
>      BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
>      BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
>      BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
>      BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
>      BZ_APIBZ2_bzBuffToBuffDecompress_source,
>      BZ_APIBZ2_bzBuffToBuffDecompress_dest,
>      BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
>      BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
127c127
<   int err = ( BZ_APIBZ2_bzerror_b );
---
>     int err = ( BZ_APIBZ2_bzerror_b );
129c129
<   ;
---
>     ;
163c163
< 
---
>  
167c167
< 
---
>  
171c171
< 
---
>  
184c184
<   ;
---
>     ;
186c186
<   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
---
>     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
200,207c200,207
<   Int32;
<   ;
<   Int32;
<   Int32;
< 
<   Bool;
<   Bool;
<   UChar;
---
>     Int32;
>     ;
>     Int32;
>     Int32;
> 
>     Bool;
>     Bool;
>     UChar;
209c209
<   UChar;
---
>     UChar;
212c212
<   BZ_APIBZ2_bzDecompressEnd_s;
---
> BZ_APIBZ2_bzDecompressEnd_s;
217c217
< 
---
>  
263c263
<   BZ_APIBZ2_bzCompressEnd_s;
---
>        BZ_APIBZ2_bzCompressEnd_s;
269c269
<   for ( ;; )
---
>     for ( ;; )
271c271
<       &makeMaps_e_s;
---
>         &makeMaps_e_s;
279c279
<   UInt16 mtfv_0 = generateMTFValues_i;
---
>     UInt16 mtfv_0 = generateMTFValues_i;
281,284c281,282
<   for ( ;; )
<     generateMTFValues_s_0_0;
< 
<   for ( ;; )
---
>     for ( ;; )
>         generateMTFValues_s_0_0;
288,289c286
<       ;
<   generateMTFValues_s.mtfFreq;
---
>         for ( ;; )
291c288,291
<   generateMTFValues_wr;
---
>             ;
>     generateMTFValues_s.mtfFreq;
> 
>     generateMTFValues_wr;
306c306
<   EState *s;
---
>     EState *s;
308c308
<   UInt32 s_4;
---
>     UInt32 s_4;
310c310
<   if ( 0 )
---
>     if ( 0 )
312,314c312,314
<     if ( bzalloc NULL )
<       default_bzalloc;
<   if ( bzfree NULL )
---
>         if ( bzalloc NULL )
>             default_bzalloc;
>     if ( bzfree NULL )
316,317c316,317
<     0;
<   if ( NULL )
---
>         0;
>     if ( NULL )
319,321c319,321
<     arr1 NULL;
<   arr2 NULL;
<   ftab NULL * 0 * sizeof ( UInt32 );
---
>         arr1 NULL;
>     arr2 NULL;
>     ftab NULL * 0 * sizeof ( UInt32 );
323c323
<   if ( NULL )
---
>     if ( NULL )
325,326c325,326
<     s_4 = s = 0;
<   0;
---
>         s_4 = s = 0;
>     0;
328c328
<   return BZ_OK;
---
>     return BZ_OK;
337c337
<   if ( NULL )
---
>     if ( NULL )
339,340c339,340
<     ;
<   if ( NULL )
---
>         ;
>     if ( NULL )
342c342
<     return BZ_OK;
---
>         return BZ_OK;
348c348
<   if ( NULL )
---
>     if ( NULL )
350,351c350,351
<     ;
<   if ( NULL )
---
>         ;
>     if ( NULL )
353c353
<     ;
---
>         ;
355,357c355,357
<   if ( arr1 NULL )
<     BZFREE ( arr1 );
<   if ( arr2 NULL )
---
>     if ( arr1 NULL )
>         BZFREE ( arr1 );
>     if ( arr2 NULL )
359c359
<     if ( ftab NULL )
---
>         if ( ftab NULL )
361c361
<       ;
---
>             ;
367c367
<   int small;
---
>     int small;
369c369
<   if ( NULL )
---
>     if ( NULL )
371c371
<     ;
---
>         ;
373,375c373,375
<   if ( bzalloc NULL )
<     default_bzalloc;
<   if ( bzfree NULL )
---
>     if ( bzalloc NULL )
>         default_bzalloc;
>     if ( bzfree NULL )
377,378c377,378
<     0;
<   if ( NULL )
---
>         0;
>     if ( NULL )
379a380,382
>         0;
>     0;
>     0;
381,383d383
<   0;
<   0;
<   0;
385,386c385,386
<   small = ll16 NULL;
<   tt NULL;
---
>     small = ll16 NULL;
>     tt NULL;
393c393
<   if ( NULL )
---
>     if ( NULL )
395,396c395,396
<     ;
<   if ( NULL )
---
>         ;
>     if ( NULL )
398c398
<     ;
---
>         ;
400c400
<   ;
---
>     ;
406c406
<   if ( NULL )
---
>     if ( NULL )
408,409c408,409
<     ;
<   if ( NULL )
---
>         ;
>     if ( NULL )
411c411
<     ;
---
>         ;
413,415c413,415
<   if ( tt NULL )
<     BZFREE ( tt );
<   if ( ll16 NULL )
---
>     if ( tt NULL )
>         BZFREE ( tt );
>     if ( ll16 NULL )
417c417
<     if ( ll4 NULL )
---
>         if ( ll4 NULL )
419c419
<       ;
---
>             ;
427c427
<   BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
---
> BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
430c430
< 	int verbosity, int workFactor )
---
>         int verbosity, int workFactor )
432,433c432,433
<   Int32 ret;
<   bzFile *bzf;
---
>     Int32 ret;
>     bzFile *bzf;
435c435
<   fn16 ( verbosity );
---
>     fn16 ( verbosity );
437,440c437,440
<   fn16;
<   False;
<   0;
<   f = bzf = ( workFactor );
---
>     fn16;
>     False;
>     0;
>     f = bzf = ( workFactor );
442c442
<   bzf;
---
>     bzf;
449c449
<   ;
---
>     ;
456c456
<   int nbytes_in_lo32;
---
>     int nbytes_in_lo32;
458,461c458,459
<   bzFile bzf;
<   fn19 (  );
< 
<   if ( NULL )
---
>     bzFile bzf;
>     fn19 (  );
465c463
<       if ( NULL )
---
>         if ( NULL )
467c465
< 	if ( NULL )
---
>             if ( NULL )
469,476c467,476
< 	  if ( nbytes_in_lo32 )
< 	    bzf;
<   if ( NULL )
<     bzf;
<   if ( NULL )
<     bzf;
<   if ( NULL )
<     bzf;
---
>                 if ( NULL )
> 
>                     if ( nbytes_in_lo32 )
>                         bzf;
>     if ( NULL )
>         bzf;
>     if ( NULL )
>         bzf;
>     if ( NULL )
>         bzf;
481c481
< 	void *unused, int nUnused )
---
>         void *unused, int nUnused )
483,485c483,485
<   bzFile *bzf;
<   char bzf_4_0;
<   int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
---
>     bzFile *bzf;
>     char bzf_4_0;
>     int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
487c487
<   fn16 ( nUnused );
---
>     fn16 ( nUnused );
489c489
<   False;
---
>     False;
491,492c491,492
<   False;
<   bzf = NULL;
---
>     False;
>     bzf = NULL;
494c494
<   while ( 0 )
---
>     while ( 0 )
496c496
<     fn21 ( verbosity );
---
>         fn21 ( verbosity );
498c498
<   ;
---
>     ;
504c504
<   ;
---
>     ;
510c510
<   ;
---
>     ;
512c512
<   return 0;
---
>     return 0;
518c518
<   fn25 (  );
---
>     fn25 (  );
520c520
<   ;
---
>     ;
522c522
<   ;
---
>     ;
528c528
<   if ( 0 )
---
>     if ( 0 )
530,532c530,532
<     bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
---
>         bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
534c534
<   return 0;
---
>     return 0;
541c541
<   if ( 4 )
---
>     if ( 4 )
543,545c543,545
<     bzalloc NULL;
<   bzfree NULL;
<   opaque NULL;
---
>         bzalloc NULL;
>     bzfree NULL;
>     opaque NULL;
547c547
<   return BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
---
>     return BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
563,564c563,564
<   int bzerr;
<   if ( bzerr == BZ_OK )
---
>     int bzerr;
>     if ( bzerr == BZ_OK )
576c576
<   BZFILE b;
---
>     BZFILE b;
578c578
<   FILE *fp = ( b );
---
>     FILE *fp = ( b );
580,582c580,582
<   if ( ( b ) )
<     if ( stdout )
<       ;
---
>     if ( ( b ) )
>         if ( stdout )
>             ;
4c4
< #1
---
> # 1
7,9c7,9
< #4
< #5
< #6
---
> # 4
> # 5
> # 6
14,15c14
< typedef struct
< {
---
> typedef struct {
18,24c17,23
< } bz_stream, default_bzfree_strm, default_bzfree_s_0,
<   BZ_APIBZ2_bzCompress_strm, BZ_APIBZ2_bzCompress_s_0,
<   BZ_APIBZ2_bzCompressEnd_strm, BZ_APIBZ2_bzCompressEnd_s_0,
<   BZ_APIBZ2_bzDecompressInit_strm, BZ_APIBZ2_bzDecompressInit_s_0,
<   BZ_APIBZ2_bzDecompress_strm, BZ_APIBZ2_bzDecompress_s_0,
<   BZ_APIBZ2_bzDecompressEnd_strm, BZ_APIBZ2_bzDecompressEnd_s_0,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm, BZ_APIBZ2_bzBuffToBuffDecompress_strm;
---
> } bz_stream, default_bzfree_strm, default_bzfree_s_0, BZ_APIBZ2_bzCompress_strm,
>     BZ_APIBZ2_bzCompress_s_0, BZ_APIBZ2_bzCompressEnd_strm,
>     BZ_APIBZ2_bzCompressEnd_s_0, BZ_APIBZ2_bzDecompressInit_strm,
>     BZ_APIBZ2_bzDecompressInit_s_0, BZ_APIBZ2_bzDecompress_strm,
>     BZ_APIBZ2_bzDecompress_s_0, BZ_APIBZ2_bzDecompressEnd_strm,
>     BZ_APIBZ2_bzDecompressEnd_s_0, BZ_APIBZ2_bzBuffToBuffCompress_strm,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm;
37,77c36,76
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i =
<   0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0,
<   generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend,
<   generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0,
<   generateMTFValues_block_0, default_bzalloc, default_bzfree_workFactor,
<   default_bzfree_verbosity, default_bzfree_blockSize100k, default_bzfree_n,
<   default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9,
<   default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18,
<   default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1,
<   default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5,
<   BZ_APIBZ2_bzCompress_s_1, BZ_APIBZ2_bzDecompressInit_verbosity,
<   BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11,
<   BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26,
<   BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8,
<   BZ_APIBZ2_bzDecompressInit_s_1, BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b =
<   0, BZ_APIBZ2_bzWrite_ret, BZ_APIBZ2_bzWrite_bzf_4_5,
<   BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
<   BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
<   BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
<   BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
<   BZ_APIBZ2_bzWriteClose64_b =
<   0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6,
<   BZ_APIBZ2_bzReadClose_bzf_3, BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,
<   BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,
<   BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,
<   BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
<   BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
<   BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
<   BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
<   BZ_APIBZ2_bzBuffToBuffCompress_destLen,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
<   BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
<   BZ_APIBZ2_bzBuffToBuffDecompress_small,
<   BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
<   BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
<   BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
<   BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
<   bzerrorstrings_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b,
>     makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1,
>     generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j,
>     generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
>     generateMTFValues_ptr_0, generateMTFValues_block_0, default_bzalloc,
>     default_bzfree_workFactor, default_bzfree_verbosity,
>     default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8,
>     default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12,
>     default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30,
>     default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2,
>     default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,
>     BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12,
>     BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10,
>     BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7,
>     BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,
>     BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,
>     BZ_APIBZ2_bzWrite_bzf_4_5, BZ_APIBZ2_bzWrite_bzf_4_1,
>     BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
>     BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
>     BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
>     BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
>     BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b,
>     BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,
>     BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b, BZ_APIBZ2_bzRead_bzf_4_5,
>     BZ_APIBZ2_bzRead_bzf_3, BZ_APIBZ2_bzReadGetUnused_nUnused,
>     BZ_APIBZ2_bzReadGetUnused_b, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>     BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
>     BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
>     BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
>     BZ_APIBZ2_bzBuffToBuffCompress_destLen,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
>     BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
>     BZ_APIBZ2_bzBuffToBuffDecompress_small,
>     BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
>     BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
>     BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
>     BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
>     bzerrorstrings_0;
85c84
<   *BZ_APIBZ2_bzReadGetUnused_unused;
---
>     *BZ_APIBZ2_bzReadGetUnused_unused;
87,95c86,94
<   BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
<   BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
<   BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
<   BZ_APIBZ2_bzBuffToBuffDecompress_source,
<   BZ_APIBZ2_bzBuffToBuffDecompress_dest,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
<   BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
< *fn1 ( int *, FILE *, int, int, void *, int );
---
>     BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
>     BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
>     BZ_APIBZ2_bzBuffToBuffDecompress_source,
>     BZ_APIBZ2_bzBuffToBuffDecompress_dest,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
> *fn1(int *, FILE *, int, int, void *, int);
101c100
< BZ_EXTERN *fn2 ( int *, FILE *, int, int, int );
---
> BZ_EXTERN *fn2(int *, FILE *, int, int, int);
105c104
< void ( fn3 ) ( unsigned int );
---
> void(fn3)(unsigned int);
107,111c106,107
< BZ_EXTERN BZ_EXTERN void fn4 (  );
< void
< fn4 (  )
< {
< }
---
> BZ_EXTERN BZ_EXTERN void fn4();
> void fn4() {}
113,117c109,110
< void fn5 (  );
< void
< fn5 (  )
< {
< }
---
> void fn5();
> void fn5() {}
121c114
< void fn6 (  );
---
> void fn6();
123,125c116
< void
< fn6 (  )
< {
---
> void fn6() {
127c118
<   int err = ( BZ_APIBZ2_bzerror_b );
---
>   int err = (BZ_APIBZ2_bzerror_b);
143,149c134,139
< #define   zf
< #define     zf
< #define       za1
< #define         za2
< #define           za3
< #define                                                              \
<              za4
---
> #define zf
> #define zf
> #define za1
> #define za2
> #define za3
> #define za4
151,152c141,142
< #define   nnn
< #define   ppp
---
> #define nnn
> #define ppp
159,163c149
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
< 
< #define BZ_RAND_DECLS                                                          \
<                                                                    \
< 
---
> #define BZ_MAX_SELECTORS BZ_G_SIZE
165,166c151
< #define                                                       \
<   srNToGo                                                                 \
---
> #define BZ_RAND_DECLS
167a153
> #define srNToGo
169,171c155
< #define BZ_RAND_UPD_MASK                                                       \
<                                                                              \
< 
---
> #define BZ_RAND_UPD_MASK
179c163
< #define      BZ_N_SHELL
---
> #define BZ_N_SHELL
181,182c165
< typedef struct
< {
---
> typedef struct {
187,188c170,171
<     UChar;
<     UChar;
---
>   UChar;
>   UChar;
197,198c180
< typedef struct
< {
---
> typedef struct {
212,216c194
<   BZ_APIBZ2_bzDecompressEnd_s;
< 
< #define                                                            \
<     stPos                                                    \
<                                                              \
---
>     BZ_APIBZ2_bzDecompressEnd_s;
217a196
> #define stPos
219,222c198,200
< #define                                                          \
<                                                            \
<                                                               \
<   c_tPos
---
> #define                                                                        \
>                                                                                \
>     c_tPos
226,227c204
< #define                                                                \
<    ll4i
---
> #define ll4i
231c208
< #define    zzn
---
> #define zzn
233c210
< #define  a
---
> #define a
240c217
< #define    zzn
---
> #define zzn
242c219
< #define    a
---
> #define a
244c221
< #define    dz
---
> #define dz
246c223
< #define    dz
---
> #define dz
248c225
< #define    az
---
> #define az
252c229
< #define    BZ_N_QSORT
---
> #define BZ_N_QSORT
256,257c233,234
< #define  ftabb
< #define      zz2
---
> #define ftabb
> #define zz2
259,260c236
< #define                                                           \
<           MYMAXDEPTHOFzw1
---
> #define MYMAXDEPTHOFzw1
263c239
<   BZ_APIBZ2_bzCompressEnd_s;
---
>     BZ_APIBZ2_bzCompressEnd_s;
265,267c241
< void
< fn7 (  )
< {
---
> void fn7() {
269,273c243,245
<   for ( ;; )
<     {
<       &makeMaps_e_s;
< 
<     }
---
>   for (;;) {
>     &makeMaps_e_s;
>   }
276,277c248
< fn8 (  )
< {
---
> fn8() {
281c252
<   for ( ;; )
---
>   for (;;)
284c255
<   for ( ;; )
---
>   for (;;)
286c257
<     for ( ;; )
---
>     for (;;)
294,295c265
< #define                                                             \
<           lll
---
> #define lll
297c267
< #define     uuu
---
> #define uuu
299c269
< #define     uuu
---
> #define uuu
301c271
< #define    lval
---
> #define lval
303,304c273
< fn9 (  )
< {
---
> fn9() {
310c279
<   if ( 0 )
---
>   if (0)
312c281
<     if ( bzalloc NULL )
---
>     if (bzalloc NULL)
314c283
<   if ( bzfree NULL )
---
>   if (bzfree NULL)
317c286
<   if ( NULL )
---
>   if (NULL)
321c290
<   ftab NULL * 0 * sizeof ( UInt32 );
---
>   ftab NULL * 0 * sizeof(UInt32);
323c292
<   if ( NULL )
---
>   if (NULL)
333,335c302
< int
< fn10 (  )
< {
---
> int fn10() {
337c304
<   if ( NULL )
---
>   if (NULL)
340c307
<   if ( NULL )
---
>   if (NULL)
345,346c312
< fn11 (  )
< {
---
> fn11() {
348c314
<   if ( NULL )
---
>   if (NULL)
351c317
<   if ( NULL )
---
>   if (NULL)
355,357c321,323
<   if ( arr1 NULL )
<     BZFREE ( arr1 );
<   if ( arr2 NULL )
---
>   if (arr1 NULL)
>     BZFREE(arr1);
>   if (arr2 NULL)
359c325
<     if ( ftab NULL )
---
>     if (ftab NULL)
362d327
< 
365,366c330
< fn12 (  )
< {
---
> fn12() {
369c333
<   if ( NULL )
---
>   if (NULL)
373c337
<   if ( bzalloc NULL )
---
>   if (bzalloc NULL)
375c339
<   if ( bzfree NULL )
---
>   if (bzfree NULL)
378c342
<   if ( NULL )
---
>   if (NULL)
387d350
< 
390,391c353
< fn13 (  )
< {
---
> fn13() {
393c355
<   if ( NULL )
---
>   if (NULL)
396c358
<   if ( NULL )
---
>   if (NULL)
403,404c365
< fn14 (  )
< {
---
> fn14() {
406c367
<   if ( NULL )
---
>   if (NULL)
409c370
<   if ( NULL )
---
>   if (NULL)
413,415c374,376
<   if ( tt NULL )
<     BZFREE ( tt );
<   if ( ll16 NULL )
---
>   if (tt NULL)
>     BZFREE(tt);
>   if (ll16 NULL)
417c378
<     if ( ll4 NULL )
---
>     if (ll4 NULL)
420d380
< 
423,424c383
< typedef struct
< {
---
> typedef struct {
427c386
<   BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
---
>     BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
429,431c388
< *fn15 ( int *bzerror, FILE * f, int blockSize100k,
< 	int verbosity, int workFactor )
< {
---
> *fn15(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor) {
435c392
<   fn16 ( verbosity );
---
>   fn16(verbosity);
440c397
<   f = bzf = ( workFactor );
---
>   f = bzf = (workFactor);
443d399
< 
446,447c402
< fn17 (  )
< {
---
> fn17() { ; }
449,454c404
<   ;
< 
< }
< 
< fn18 (  )
< {
---
> fn18() {
459c409
<   fn19 (  );
---
>   fn19();
461c411
<   if ( NULL )
---
>   if (NULL)
463c413
<     if ( NULL )
---
>     if (NULL)
465c415
<       if ( NULL )
---
>       if (NULL)
467c417
< 	if ( NULL )
---
>         if (NULL)
469,471c419,421
< 	  if ( nbytes_in_lo32 )
< 	    bzf;
<   if ( NULL )
---
>           if (nbytes_in_lo32)
>             bzf;
>   if (NULL)
473c423
<   if ( NULL )
---
>   if (NULL)
475c425
<   if ( NULL )
---
>   if (NULL)
477d426
< 
480,482c429,430
< *fn20 ( int *bzerror, FILE * f, int verbosity, int small,
< 	void *unused, int nUnused )
< {
---
> *fn20(int *bzerror, FILE *f, int verbosity, int small, void *unused,
>       int nUnused) {
487c435
<   fn16 ( nUnused );
---
>   fn16(nUnused);
494c442
<   while ( 0 )
---
>   while (0)
496c444
<     fn21 ( verbosity );
---
>     fn21(verbosity);
501,502c449
< fn22 (  )
< {
---
> fn22() { ; }
504,508c451
<   ;
< }
< 
< fn23 (  )
< {
---
> fn23() {
515,516c458
< fn24 (  )
< {
---
> fn24() {
518c460
<   fn25 (  );
---
>   fn25();
525,526c467
< fn26 (  )
< {
---
> fn26() {
528c469
<   if ( 0 )
---
>   if (0)
535d475
< 
538,539c478
< fn27 (  )
< {
---
> fn27() {
541c480
<   if ( 4 )
---
>   if (4)
548,552d486
< 
< }
< 
< fn28 (  )
< {
555,556c489
< fn29 (  )
< {
---
> fn28() {}
558c491
< }
---
> fn29() {}
560,561c493
< fn30 (  )
< {
---
> fn30() {
564,567c496,497
<   if ( bzerr == BZ_OK )
<     {
< 
<     }
---
>   if (bzerr == BZ_OK) {
>   }
570,572c500
< fn31 (  )
< {
< }
---
> fn31() {}
574,575c502
< fn32 (  )
< {
---
> fn32() {
578c505
<   FILE *fp = ( b );
---
>   FILE *fp = (b);
580,581c507,508
<   if ( ( b ) )
<     if ( stdout )
---
>   if ((b))
>     if (stdout)
583d509
< 
592c518
< #define      snocStringroot
---
> #define snocStringroot
594c520
< #define      snocStringroot
---
> #define snocStringroot
598c524
< #define   s
---
> #define s
(95.3 %, 9733 bytes)
4c4
< #1
---
> # 1
7,9c7,9
< #4
< #5
< #6
---
> # 4
> # 5
> # 6
14,16c14,15
< typedef struct
< {
<     ;
---
> typedef struct {
>   ;
18,24c17,23
< } bz_stream, default_bzfree_strm, default_bzfree_s_0,
< BZ_APIBZ2_bzCompress_strm, BZ_APIBZ2_bzCompress_s_0,
< BZ_APIBZ2_bzCompressEnd_strm, BZ_APIBZ2_bzCompressEnd_s_0,
< BZ_APIBZ2_bzDecompressInit_strm, BZ_APIBZ2_bzDecompressInit_s_0,
< BZ_APIBZ2_bzDecompress_strm, BZ_APIBZ2_bzDecompress_s_0,
< BZ_APIBZ2_bzDecompressEnd_strm, BZ_APIBZ2_bzDecompressEnd_s_0,
< BZ_APIBZ2_bzBuffToBuffCompress_strm, BZ_APIBZ2_bzBuffToBuffDecompress_strm;
---
> } bz_stream, default_bzfree_strm, default_bzfree_s_0, BZ_APIBZ2_bzCompress_strm,
>     BZ_APIBZ2_bzCompress_s_0, BZ_APIBZ2_bzCompressEnd_strm,
>     BZ_APIBZ2_bzCompressEnd_s_0, BZ_APIBZ2_bzDecompressInit_strm,
>     BZ_APIBZ2_bzDecompressInit_s_0, BZ_APIBZ2_bzDecompress_strm,
>     BZ_APIBZ2_bzDecompress_s_0, BZ_APIBZ2_bzDecompressEnd_strm,
>     BZ_APIBZ2_bzDecompressEnd_s_0, BZ_APIBZ2_bzBuffToBuffCompress_strm,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm;
37,77c36,76
< int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b, makeMaps_e_i =
<     0, generateMTFValues_s_0_0, generateMTFValues_yy_1, generateMTFValues_yy_0,
<     generateMTFValues_i, generateMTFValues_j, generateMTFValues_zPend,
<     generateMTFValues_wr, generateMTFValues_EOB, generateMTFValues_ptr_0,
<     generateMTFValues_block_0, default_bzalloc, default_bzfree_workFactor,
<     default_bzfree_verbosity, default_bzfree_blockSize100k, default_bzfree_n,
<     default_bzfree_s_8, default_bzfree_s_10, default_bzfree_s_9,
<     default_bzfree_s_12, default_bzfree_s_28, default_bzfree_s_18,
<     default_bzfree_s_30, default_bzfree_s_27, default_bzfree_s_1,
<     default_bzfree_s_2, default_bzfree_s_6, default_bzfree_s_5,
<     BZ_APIBZ2_bzCompress_s_1, BZ_APIBZ2_bzDecompressInit_verbosity,
<     BZ_APIBZ2_bzDecompressInit_s_12, BZ_APIBZ2_bzDecompressInit_s_11,
<     BZ_APIBZ2_bzDecompressInit_s_10, BZ_APIBZ2_bzDecompressInit_s_26,
<     BZ_APIBZ2_bzDecompressInit_s_7, BZ_APIBZ2_bzDecompressInit_s_8,
<     BZ_APIBZ2_bzDecompressInit_s_1, BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b =
<         0, BZ_APIBZ2_bzWrite_ret, BZ_APIBZ2_bzWrite_bzf_4_5,
<         BZ_APIBZ2_bzWrite_bzf_4_1, BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
<         BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
<         BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
<         BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
<         BZ_APIBZ2_bzWriteClose64_b =
<             0, BZ_APIBZ2_bzReadClose_b, BZ_APIBZ2_bzReadClose_bzf_6,
<             BZ_APIBZ2_bzReadClose_bzf_3, BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b,
<             BZ_APIBZ2_bzRead_bzf_4_5, BZ_APIBZ2_bzRead_bzf_3,
<             BZ_APIBZ2_bzReadGetUnused_nUnused, BZ_APIBZ2_bzReadGetUnused_b,
<             BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
<             BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
<             BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
<             BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
<             BZ_APIBZ2_bzBuffToBuffCompress_destLen,
<             BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
<             BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
<             BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
<             BZ_APIBZ2_bzBuffToBuffDecompress_small,
<             BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
<             BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
<             BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
<             BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
<             BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
<             BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
<             bzerrorstrings_0;
---
> int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b,
>     makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1,
>     generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j,
>     generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
>     generateMTFValues_ptr_0, generateMTFValues_block_0, default_bzalloc,
>     default_bzfree_workFactor, default_bzfree_verbosity,
>     default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8,
>     default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12,
>     default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30,
>     default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2,
>     default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,
>     BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12,
>     BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10,
>     BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7,
>     BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,
>     BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,
>     BZ_APIBZ2_bzWrite_bzf_4_5, BZ_APIBZ2_bzWrite_bzf_4_1,
>     BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
>     BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
>     BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
>     BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
>     BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b,
>     BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,
>     BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b, BZ_APIBZ2_bzRead_bzf_4_5,
>     BZ_APIBZ2_bzRead_bzf_3, BZ_APIBZ2_bzReadGetUnused_nUnused,
>     BZ_APIBZ2_bzReadGetUnused_b, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
>     BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
>     BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
>     BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
>     BZ_APIBZ2_bzBuffToBuffCompress_destLen,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
>     BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
>     BZ_APIBZ2_bzBuffToBuffDecompress_small,
>     BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
>     BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
>     BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
>     BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
>     bzerrorstrings_0;
85c84
<      *BZ_APIBZ2_bzReadGetUnused_unused;
---
>     *BZ_APIBZ2_bzReadGetUnused_unused;
87,95c86,94
<      BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
<      BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
<      BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
<      BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
<      BZ_APIBZ2_bzBuffToBuffDecompress_source,
<      BZ_APIBZ2_bzBuffToBuffDecompress_dest,
<      BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
<      BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
< *fn1 ( int *, FILE *, int, int, void *, int );
---
>     BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
>     BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
>     BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
>     BZ_APIBZ2_bzBuffToBuffDecompress_source,
>     BZ_APIBZ2_bzBuffToBuffDecompress_dest,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
>     BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
> *fn1(int *, FILE *, int, int, void *, int);
101c100
< BZ_EXTERN *fn2 ( int *, FILE *, int, int, int );
---
> BZ_EXTERN *fn2(int *, FILE *, int, int, int);
105c104
< void ( fn3 ) ( unsigned int );
---
> void(fn3)(unsigned int);
107,111c106,107
< BZ_EXTERN BZ_EXTERN void fn4 (  );
< void
< fn4 (  )
< {
< }
---
> BZ_EXTERN BZ_EXTERN void fn4();
> void fn4() {}
113,117c109,110
< void fn5 (  );
< void
< fn5 (  )
< {
< }
---
> void fn5();
> void fn5() {}
121c114
< void fn6 (  );
---
> void fn6();
123,125c116
< void
< fn6 (  )
< {
---
> void fn6() {
127c118
<     int err = ( BZ_APIBZ2_bzerror_b );
---
>   int err = (BZ_APIBZ2_bzerror_b);
129c120
<     ;
---
>   ;
143,149c134,139
< #define   zf
< #define     zf
< #define       za1
< #define         za2
< #define           za3
< #define                                                              \
<              za4
---
> #define zf
> #define zf
> #define za1
> #define za2
> #define za3
> #define za4
151,152c141,142
< #define   nnn
< #define   ppp
---
> #define nnn
> #define ppp
159c149
< #define BZ_MAX_SELECTORS     BZ_G_SIZE
---
> #define BZ_MAX_SELECTORS BZ_G_SIZE
161,171c151,155
< #define BZ_RAND_DECLS                                                          \
<                                                                    \
<  
< 
< #define                                                       \
<   srNToGo                                                                 \
<  
< 
< #define BZ_RAND_UPD_MASK                                                       \
<                                                                              \
<  
---
> #define BZ_RAND_DECLS
> 
> #define srNToGo
> 
> #define BZ_RAND_UPD_MASK
179c163
< #define      BZ_N_SHELL
---
> #define BZ_N_SHELL
181,182c165
< typedef struct
< {
---
> typedef struct {
184c167
<     ;
---
>   ;
186,188c169,171
<     Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
<     UChar;
<     UChar;
---
>   Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
>   UChar;
>   UChar;
197,198c180
< typedef struct
< {
---
> typedef struct {
200,207c182,189
<     Int32;
<     ;
<     Int32;
<     Int32;
< 
<     Bool;
<     Bool;
<     UChar;
---
>   Int32;
>   ;
>   Int32;
>   Int32;
> 
>   Bool;
>   Bool;
>   UChar;
209c191
<     UChar;
---
>   UChar;
212c194
< BZ_APIBZ2_bzDecompressEnd_s;
---
>     BZ_APIBZ2_bzDecompressEnd_s;
214,222c196,200
< #define                                                            \
<     stPos                                                    \
<                                                              \
<  
< 
< #define                                                          \
<                                                            \
<                                                               \
<   c_tPos
---
> #define stPos
> 
> #define                                                                        \
>                                                                                \
>     c_tPos
226,227c204
< #define                                                                \
<    ll4i
---
> #define ll4i
231c208
< #define    zzn
---
> #define zzn
233c210
< #define  a
---
> #define a
240c217
< #define    zzn
---
> #define zzn
242c219
< #define    a
---
> #define a
244c221
< #define    dz
---
> #define dz
246c223
< #define    dz
---
> #define dz
248c225
< #define    az
---
> #define az
252c229
< #define    BZ_N_QSORT
---
> #define BZ_N_QSORT
256,257c233,234
< #define  ftabb
< #define      zz2
---
> #define ftabb
> #define zz2
259,260c236
< #define                                                           \
<           MYMAXDEPTHOFzw1
---
> #define MYMAXDEPTHOFzw1
263,267c239
<        BZ_APIBZ2_bzCompressEnd_s;
< 
< void
< fn7 (  )
< {
---
>     BZ_APIBZ2_bzCompressEnd_s;
269,271c241
<     for ( ;; )
<     {
<         &makeMaps_e_s;
---
> void fn7() {
273c243,245
<     }
---
>   for (;;) {
>     &makeMaps_e_s;
>   }
276,277c248
< fn8 (  )
< {
---
> fn8() {
279c250
<     UInt16 mtfv_0 = generateMTFValues_i;
---
>   UInt16 mtfv_0 = generateMTFValues_i;
281,282c252,253
<     for ( ;; )
<         generateMTFValues_s_0_0;
---
>   for (;;)
>     generateMTFValues_s_0_0;
284c255
<     for ( ;; )
---
>   for (;;)
286c257
<         for ( ;; )
---
>     for (;;)
288,289c259,260
<             ;
<     generateMTFValues_s.mtfFreq;
---
>       ;
>   generateMTFValues_s.mtfFreq;
291c262
<     generateMTFValues_wr;
---
>   generateMTFValues_wr;
294,295c265
< #define                                                             \
<           lll
---
> #define lll
297c267
< #define     uuu
---
> #define uuu
299c269
< #define     uuu
---
> #define uuu
301c271
< #define    lval
---
> #define lval
303,304c273
< fn9 (  )
< {
---
> fn9() {
306c275
<     EState *s;
---
>   EState *s;
308c277
<     UInt32 s_4;
---
>   UInt32 s_4;
310c279
<     if ( 0 )
---
>   if (0)
312,314c281,283
<         if ( bzalloc NULL )
<             default_bzalloc;
<     if ( bzfree NULL )
---
>     if (bzalloc NULL)
>       default_bzalloc;
>   if (bzfree NULL)
316,317c285,286
<         0;
<     if ( NULL )
---
>     0;
>   if (NULL)
319,321c288,290
<         arr1 NULL;
<     arr2 NULL;
<     ftab NULL * 0 * sizeof ( UInt32 );
---
>     arr1 NULL;
>   arr2 NULL;
>   ftab NULL * 0 * sizeof(UInt32);
323c292
<     if ( NULL )
---
>   if (NULL)
325,326c294,295
<         s_4 = s = 0;
<     0;
---
>     s_4 = s = 0;
>   0;
328c297
<     return BZ_OK;
---
>   return BZ_OK;
333,335c302
< int
< fn10 (  )
< {
---
> int fn10() {
337c304
<     if ( NULL )
---
>   if (NULL)
339,340c306,307
<         ;
<     if ( NULL )
---
>     ;
>   if (NULL)
342c309
<         return BZ_OK;
---
>     return BZ_OK;
345,346c312
< fn11 (  )
< {
---
> fn11() {
348c314
<     if ( NULL )
---
>   if (NULL)
350,353c316,317
<         ;
<     if ( NULL )
< 
<         ;
---
>     ;
>   if (NULL)
355,357c319
<     if ( arr1 NULL )
<         BZFREE ( arr1 );
<     if ( arr2 NULL )
---
>     ;
359c321,323
<         if ( ftab NULL )
---
>   if (arr1 NULL)
>     BZFREE(arr1);
>   if (arr2 NULL)
361c325
<             ;
---
>     if (ftab NULL)
362a327
>       ;
365,369c330,331
< fn12 (  )
< {
<     int small;
< 
<     if ( NULL )
---
> fn12() {
>   int small;
371c333
<         ;
---
>   if (NULL)
373,375c335
<     if ( bzalloc NULL )
<         default_bzalloc;
<     if ( bzfree NULL )
---
>     ;
377,378c337,339
<         0;
<     if ( NULL )
---
>   if (bzalloc NULL)
>     default_bzalloc;
>   if (bzfree NULL)
380,382d340
<         0;
<     0;
<     0;
383a342
>   if (NULL)
385,386c344,347
<     small = ll16 NULL;
<     tt NULL;
---
>     0;
>   0;
>   0;
>   0;
387a349,350
>   small = ll16 NULL;
>   tt NULL;
390,393c353
< fn13 (  )
< {
< 
<     if ( NULL )
---
> fn13() {
395,396c355
<         ;
<     if ( NULL )
---
>   if (NULL)
398c357,358
<         ;
---
>     ;
>   if (NULL)
401d360
< }
403,404c362,363
< fn14 (  )
< {
---
>   ;
> }
406c365
<     if ( NULL )
---
> fn14() {
408,409c367
<         ;
<     if ( NULL )
---
>   if (NULL)
411c369,370
<         ;
---
>     ;
>   if (NULL)
413,415c372
<     if ( tt NULL )
<         BZFREE ( tt );
<     if ( ll16 NULL )
---
>     ;
417c374,376
<         if ( ll4 NULL )
---
>   if (tt NULL)
>     BZFREE(tt);
>   if (ll16 NULL)
419c378
<             ;
---
>     if (ll4 NULL)
420a380
>       ;
423,424c383
< typedef struct
< {
---
> typedef struct {
427,442c386
< BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
< 
< *fn15 ( int *bzerror, FILE * f, int blockSize100k,
<         int verbosity, int workFactor )
< {
<     Int32 ret;
<     bzFile *bzf;
< 
<     fn16 ( verbosity );
< 
<     fn16;
<     False;
<     0;
<     f = bzf = ( workFactor );
< 
<     bzf;
---
>     BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;
444c388,390
< }
---
> *fn15(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor) {
>   Int32 ret;
>   bzFile *bzf;
446,447c392
< fn17 (  )
< {
---
>   fn16(verbosity);
449c394,397
<     ;
---
>   fn16;
>   False;
>   0;
>   f = bzf = (workFactor);
450a399
>   bzf;
453,454c402
< fn18 (  )
< {
---
> fn17() { ; }
456c404
<     int nbytes_in_lo32;
---
> fn18() {
458,459c406
<     bzFile bzf;
<     fn19 (  );
---
>   int nbytes_in_lo32;
461c408,409
<     if ( NULL )
---
>   bzFile bzf;
>   fn19();
463c411
<         if ( NULL )
---
>   if (NULL)
465c413
<             if ( NULL )
---
>     if (NULL)
467c415
<                 if ( NULL )
---
>       if (NULL)
469,476c417
<                     if ( nbytes_in_lo32 )
<                         bzf;
<     if ( NULL )
<         bzf;
<     if ( NULL )
<         bzf;
<     if ( NULL )
<         bzf;
---
>         if (NULL)
477a419,426
>           if (nbytes_in_lo32)
>             bzf;
>   if (NULL)
>     bzf;
>   if (NULL)
>     bzf;
>   if (NULL)
>     bzf;
480,485c429,433
< *fn20 ( int *bzerror, FILE * f, int verbosity, int small,
<         void *unused, int nUnused )
< {
<     bzFile *bzf;
<     char bzf_4_0;
<     int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
---
> *fn20(int *bzerror, FILE *f, int verbosity, int small, void *unused,
>       int nUnused) {
>   bzFile *bzf;
>   char bzf_4_0;
>   int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;
487c435
<     fn16 ( nUnused );
---
>   fn16(nUnused);
489c437
<     False;
---
>   False;
491,492c439,440
<     False;
<     bzf = NULL;
---
>   False;
>   bzf = NULL;
494c442
<     while ( 0 )
---
>   while (0)
496c444
<         fn21 ( verbosity );
---
>     fn21(verbosity);
498c446
<     ;
---
>   ;
501,502c449
< fn22 (  )
< {
---
> fn22() { ; }
504,505c451
<     ;
< }
---
> fn23() {
507,510c453
< fn23 (  )
< {
< 
<     ;
---
>   ;
512c455
<     return 0;
---
>   return 0;
515,516c458
< fn24 (  )
< {
---
> fn24() {
518c460
<     fn25 (  );
---
>   fn25();
520c462
<     ;
---
>   ;
522c464
<     ;
---
>   ;
525,528c467
< fn26 (  )
< {
< 
<     if ( 0 )
---
> fn26() {
530,532c469
<         bzalloc NULL;
<     bzfree NULL;
<     opaque NULL;
---
>   if (0)
534c471,473
<     return 0;
---
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
535a475
>   return 0;
538,539c478
< fn27 (  )
< {
---
> fn27() {
541c480
<     if ( 4 )
---
>   if (4)
543,545c482,484
<         bzalloc NULL;
<     bzfree NULL;
<     opaque NULL;
---
>     bzalloc NULL;
>   bzfree NULL;
>   opaque NULL;
547,552c486
<     return BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
< 
< }
< 
< fn28 (  )
< {
---
>   return BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
555,556c489
< fn29 (  )
< {
---
> fn28() {}
558c491
< }
---
> fn29() {}
560,568c493
< fn30 (  )
< {
< 
<     int bzerr;
<     if ( bzerr == BZ_OK )
<     {
< 
<     }
< }
---
> fn30() {
570,571c495,497
< fn31 (  )
< {
---
>   int bzerr;
>   if (bzerr == BZ_OK) {
>   }
574,576c500
< fn32 (  )
< {
<     BZFILE b;
---
> fn31() {}
578c502,503
<     FILE *fp = ( b );
---
> fn32() {
>   BZFILE b;
580,582c505
<     if ( ( b ) )
<         if ( stdout )
<             ;
---
>   FILE *fp = (b);
583a507,509
>   if ((b))
>     if (stdout)
>       ;
592c518
< #define      snocStringroot
---
> #define snocStringroot
594c520
< #define      snocStringroot
---
> #define snocStringroot
598c524
< #define   s
---
> #define s
(96.1 %, 7946 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 7 times and failed 33 times
  method pass_balanced :: angles-only worked 0 times and failed 33 times
  method pass_balanced :: curly worked 75 times and failed 81 times
  method pass_balanced :: curly-only worked 0 times and failed 0 times
  method pass_balanced :: parens worked 46 times and failed 222 times
  method pass_balanced :: parens-only worked 199 times and failed 371 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 61 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 36 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 113 times and failed 0 times
  method pass_clang :: combine-local-var worked 4 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 4 times and failed 0 times
  method pass_clang :: local-to-global worked 116 times and failed 9 times
  method pass_clang :: move-function-body worked 3 times and failed 0 times
  method pass_clang :: move-global-var worked 9 times and failed 5 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 80 times and failed 16 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 2 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 34 times and failed 1 times
  method pass_clang :: remove-addr-taken worked 1 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 4 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 31 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 1 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 73 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 2 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 1 times
  method pass_clang :: rename-var worked 0 times and failed 1 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 7 times and failed 0 times
  method pass_clang :: return-void worked 4 times and failed 4 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 39 times and failed 2 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 3 times and failed 1 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 1 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 1322 times and failed 12960 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 2 times and failed 0 times
  method pass_ints :: a worked 135 times and failed 4 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 7 times and failed 0 times
  method pass_ints :: e worked 1 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 0 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 2 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 14 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454699151.88944/bzip2.c' reduced to:

#define BZ_OK 0

# 1
#define BZ_PARAM_ERROR 2
#define BZ_MEM_ERROR 3
# 4
# 5
# 6
#define BZ_UNEXPECTED_EOF 7
#define BZ_OUTBUFF_FULL 8
#define BZ_CONFIG_ERROR 9

typedef struct {
  ;

} bz_stream, default_bzfree_strm, default_bzfree_s_0, BZ_APIBZ2_bzCompress_strm,
    BZ_APIBZ2_bzCompress_s_0, BZ_APIBZ2_bzCompressEnd_strm,
    BZ_APIBZ2_bzCompressEnd_s_0, BZ_APIBZ2_bzDecompressInit_strm,
    BZ_APIBZ2_bzDecompressInit_s_0, BZ_APIBZ2_bzDecompress_strm,
    BZ_APIBZ2_bzDecompress_s_0, BZ_APIBZ2_bzDecompressEnd_strm,
    BZ_APIBZ2_bzDecompressEnd_s_0, BZ_APIBZ2_bzBuffToBuffCompress_strm,
    BZ_APIBZ2_bzBuffToBuffDecompress_strm;

#include <stdio.h>

#define BZ_API
#define BZ_EXTERN

BZ_EXTERN BZ_EXTERN void;

#define BZ_MAX_UNUSED 0

typedef BZFILE;

int BZ_APIBZ2_bzerror_errnum, BZ_APIBZ2_bzerror_b,
    makeMaps_e_i = 0, generateMTFValues_s_0_0, generateMTFValues_yy_1,
    generateMTFValues_yy_0, generateMTFValues_i, generateMTFValues_j,
    generateMTFValues_zPend, generateMTFValues_wr, generateMTFValues_EOB,
    generateMTFValues_ptr_0, generateMTFValues_block_0, default_bzalloc,
    default_bzfree_workFactor, default_bzfree_verbosity,
    default_bzfree_blockSize100k, default_bzfree_n, default_bzfree_s_8,
    default_bzfree_s_10, default_bzfree_s_9, default_bzfree_s_12,
    default_bzfree_s_28, default_bzfree_s_18, default_bzfree_s_30,
    default_bzfree_s_27, default_bzfree_s_1, default_bzfree_s_2,
    default_bzfree_s_6, default_bzfree_s_5, BZ_APIBZ2_bzCompress_s_1,
    BZ_APIBZ2_bzDecompressInit_verbosity, BZ_APIBZ2_bzDecompressInit_s_12,
    BZ_APIBZ2_bzDecompressInit_s_11, BZ_APIBZ2_bzDecompressInit_s_10,
    BZ_APIBZ2_bzDecompressInit_s_26, BZ_APIBZ2_bzDecompressInit_s_7,
    BZ_APIBZ2_bzDecompressInit_s_8, BZ_APIBZ2_bzDecompressInit_s_1,
    BZ_APIBZ2_bzWrite_len, BZ_APIBZ2_bzWrite_b = 0, BZ_APIBZ2_bzWrite_ret,
    BZ_APIBZ2_bzWrite_bzf_4_5, BZ_APIBZ2_bzWrite_bzf_4_1,
    BZ_APIBZ2_bzWrite_bzf_3, BZ_APIBZ2_bzWriteClose,
    BZ_APIBZ2_bzWriteClose64_nbytes_out_hi32,
    BZ_APIBZ2_bzWriteClose64_nbytes_out_lo32,
    BZ_APIBZ2_bzWriteClose64_nbytes_in_hi32, BZ_APIBZ2_bzWriteClose64_abandon,
    BZ_APIBZ2_bzWriteClose64_b = 0, BZ_APIBZ2_bzReadClose_b,
    BZ_APIBZ2_bzReadClose_bzf_6, BZ_APIBZ2_bzReadClose_bzf_3,
    BZ_APIBZ2_bzRead_len, BZ_APIBZ2_bzRead_b, BZ_APIBZ2_bzRead_bzf_4_5,
    BZ_APIBZ2_bzRead_bzf_3, BZ_APIBZ2_bzReadGetUnused_nUnused,
    BZ_APIBZ2_bzReadGetUnused_b, BZ_APIBZ2_bzBuffToBuffCompress_workFactor,
    BZ_APIBZ2_bzBuffToBuffCompress_verbosity,
    BZ_APIBZ2_bzBuffToBuffCompress_blockSize100k,
    BZ_APIBZ2_bzBuffToBuffCompress_sourceLen,
    BZ_APIBZ2_bzBuffToBuffCompress_destLen,
    BZ_APIBZ2_bzBuffToBuffCompress_strm_5,
    BZ_APIBZ2_bzBuffToBuffCompress_strm_1, BZ_APIBZ2_bzBuffToBuffCompress_ret,
    BZ_APIBZ2_bzBuffToBuffDecompress_verbosity,
    BZ_APIBZ2_bzBuffToBuffDecompress_small,
    BZ_APIBZ2_bzBuffToBuffDecompress_sourceLen,
    BZ_APIBZ2_bzBuffToBuffDecompress_destLen,
    BZ_APIBZ2_bzBuffToBuffDecompress_strm_5,
    BZ_APIBZ2_bzBuffToBuffDecompress_strm_1,
    BZ_APIBZ2_bzBuffToBuffDecompress_ret, bzopen_or_bzdopen,
    BZ_APIBZ2_bzread_nread, BZ_APIBZ2_bzwrite_len, BZ_APIBZ2_bzclose_bzerr,
    bzerrorstrings_0;
typedef Char;
typedef Bool;
typedef UChar;
typedef Int32;
typedef UInt32;
typedef UInt16;
void *BZ_APIBZ2_bzWrite_buf, *BZ_APIBZ2_bzRead_buf,
    *BZ_APIBZ2_bzReadGetUnused_unused;
char BZ_APIBZ2_bzWrite_bzf_4_4, BZ_APIBZ2_bzWrite_bzf_4_0,
    BZ_APIBZ2_bzRead_bzf_4_4, BZ_APIBZ2_bzReadGetUnused_bzf_4_0,
    BZ_APIBZ2_bzBuffToBuffCompress_source, BZ_APIBZ2_bzBuffToBuffCompress_dest,
    BZ_APIBZ2_bzBuffToBuffCompress_strm_4,
    BZ_APIBZ2_bzBuffToBuffCompress_strm_0,
    BZ_APIBZ2_bzBuffToBuffDecompress_source,
    BZ_APIBZ2_bzBuffToBuffDecompress_dest,
    BZ_APIBZ2_bzBuffToBuffDecompress_strm_4,
    BZ_APIBZ2_bzBuffToBuffDecompress_strm_0;
*fn1(int *, FILE *, int, int, void *, int);

void;

void;

BZ_EXTERN *fn2(int *, FILE *, int, int, int);

void;

void(fn3)(unsigned int);

BZ_EXTERN BZ_EXTERN void fn4();
void fn4() {}

void fn5();
void fn5() {}

BZ_EXTERN void;

void fn6();

void fn6() {

  int err = (BZ_APIBZ2_bzerror_b);

  ;
}

#include <stdlib.h>

#define BZ_VERSION ""

#define True 1
#define False 0

#

#define AssertD

#define zf
#define zf
#define za1
#define za2
#define za3
#define za4

#define nnn
#define ppp

#define BZ_MAX_ALPHA_SIZE 8

#define BZ_N_GROUPS 6
#define BZ_G_SIZE 50

#define BZ_MAX_SELECTORS BZ_G_SIZE

#define BZ_RAND_DECLS

#define srNToGo

#define BZ_RAND_UPD_MASK

#

#define BZ_M_RUNNING 2

#define BZ_S_INPUT 2

#define BZ_N_SHELL

typedef struct {

  ;

  Int32 mtfFreq[BZ_MAX_ALPHA_SIZE];
  UChar;
  UChar;

} EState;

#define BZ_X_MAGIC_1 0

#define MTFA_SIZE 4096
#define MTFL_SIZE 6

typedef struct {

  Int32;
  ;
  Int32;
  Int32;

  Bool;
  Bool;
  UChar;

  UChar;

} DState, BZ_APIBZ2_bzDecompressInit_s, BZ_APIBZ2_bzDecompress_s,
    BZ_APIBZ2_bzDecompressEnd_s;

#define stPos

#define                                                                        \
                                                                               \
    c_tPos

#

#define ll4i

#

#define zzn

#define a
#

#

#

#define zzn

#define a

#define dz

#define dz

#define az

#

#define BZ_N_QSORT

#

#define ftabb
#define zz2

#define MYMAXDEPTHOFzw1

EState makeMaps_e_s, generateMTFValues_s, BZ_APIBZ2_bzCompress_s,
    BZ_APIBZ2_bzCompressEnd_s;

void fn7() {

  for (;;) {
    &makeMaps_e_s;
  }
}

fn8() {

  UInt16 mtfv_0 = generateMTFValues_i;

  for (;;)
    generateMTFValues_s_0_0;

  for (;;)

    for (;;)

      ;
  generateMTFValues_s.mtfFreq;

  generateMTFValues_wr;
}

#define lll

#define uuu

#define uuu

#define lval

fn9() {

  EState *s;

  UInt32 s_4;

  if (0)

    if (bzalloc NULL)
      default_bzalloc;
  if (bzfree NULL)

    0;
  if (NULL)

    arr1 NULL;
  arr2 NULL;
  ftab NULL * 0 * sizeof(UInt32);

  if (NULL)

    s_4 = s = 0;
  0;

  return BZ_OK;
}

#

int fn10() {

  if (NULL)

    ;
  if (NULL)

    return BZ_OK;
}

fn11() {

  if (NULL)

    ;
  if (NULL)

    ;

  if (arr1 NULL)
    BZFREE(arr1);
  if (arr2 NULL)

    if (ftab NULL)

      ;
}

fn12() {
  int small;

  if (NULL)

    ;

  if (bzalloc NULL)
    default_bzalloc;
  if (bzfree NULL)

    0;
  if (NULL)

    0;
  0;
  0;
  0;

  small = ll16 NULL;
  tt NULL;
}

fn13() {

  if (NULL)

    ;
  if (NULL)

    ;

  ;
}

fn14() {

  if (NULL)

    ;
  if (NULL)

    ;

  if (tt NULL)
    BZFREE(tt);
  if (ll16 NULL)

    if (ll4 NULL)

      ;
}

typedef struct {

} bzFile, BZ_APIBZ2_bzWrite_bzf, BZ_APIBZ2_bzReadClose_bzf,
    BZ_APIBZ2_bzRead_bzf, BZ_APIBZ2_bzReadGetUnused_bzf;

*fn15(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor) {
  Int32 ret;
  bzFile *bzf;

  fn16(verbosity);

  fn16;
  False;
  0;
  f = bzf = (workFactor);

  bzf;
}

fn17() { ; }

fn18() {

  int nbytes_in_lo32;

  bzFile bzf;
  fn19();

  if (NULL)

    if (NULL)

      if (NULL)

        if (NULL)

          if (nbytes_in_lo32)
            bzf;
  if (NULL)
    bzf;
  if (NULL)
    bzf;
  if (NULL)
    bzf;
}

*fn20(int *bzerror, FILE *f, int verbosity, int small, void *unused,
      int nUnused) {
  bzFile *bzf;
  char bzf_4_0;
  int bzf_4_1, bzf_3, bzf_2, bzf_6, ret;

  fn16(nUnused);

  False;

  False;
  bzf = NULL;

  while (0)

    fn21(verbosity);

  ;
}

fn22() { ; }

fn23() {

  ;

  return 0;
}

fn24() {

  fn25();

  ;

  ;
}

fn26() {

  if (0)

    bzalloc NULL;
  bzfree NULL;
  opaque NULL;

  return 0;
}

fn27() {

  if (4)

    bzalloc NULL;
  bzfree NULL;
  opaque NULL;

  return BZ_APIBZ2_bzBuffToBuffDecompress_strm_5;
}

fn28() {}

fn29() {}

fn30() {

  int bzerr;
  if (bzerr == BZ_OK) {
  }
}

fn31() {}

fn32() {
  BZFILE b;

  FILE *fp = (b);

  if ((b))
    if (stdout)
      ;
}

#include <signal.h>
#include <errno.h>

#include <fcntl.h>
#include <utime.h>

#define snocStringroot

#define snocStringroot

;

#define s
2838.38user 789.01system 44:08.46elapsed 136%CPU (0avgtext+0avgdata 60512maxresident)k
133912inputs+48310168outputs (676major+268867501minor)pagefaults 0swaps
